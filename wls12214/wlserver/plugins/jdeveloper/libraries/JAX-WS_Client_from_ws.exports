<?xml version="1.0" encoding="iso-8859-1" ?>
<lib-exports owner="weblogic" xmlns="http://xmlns.oracle.com/ide/export">
  <package name="com.oracle.oc4j.wsif.providers.jaxrpc">
    <class name="WSIFPort_JaxRpc">
      <constructor name="WSIFPort_JaxRpc(javax.wsdl.Definition,javax.xml.namespace.QName,javax.wsdl.Port,javax.wsdl.extensions.soap.SOAPBinding,org.apache.wsif.providers.WSIFDynamicTypeMap)"/>
      <method name="getPort()"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api">
    <class name="AsyncWebService" members="concealed"/>
    <class name="AsyncWebServiceFeature">
      <constructor name="AsyncWebServiceFeature()"/>
      <method name="setAsyncResponsesEnabledToNonAnonymousRequest(boolean)"/>
      <method name="setCallbackInterface(java.lang.String)"/>
      <method name="setEnableTransaction(boolean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setFirstUsageOfRequestPool(boolean)"/>
      <method name="setFirstUsageOfResponsePool(boolean)"/>
      <method name="setGenService(boolean)"/>
      <method name="setHasNonIdempotentMethods(boolean)"/>
      <method name="setJmsAccessUser(java.lang.String)"/>
      <method name="setJmsConnectionFactory(java.lang.String)"/>
      <method name="setJmsQueue(java.lang.String)"/>
      <method name="setJmsResponseConnectionFactory(java.lang.String)"/>
      <method name="setJmsResponseQueue(java.lang.String)"/>
      <method name="setRequestMessageSelector(java.lang.String)"/>
      <method name="setRequestProcessorInitPoolSize(int)"/>
      <method name="setRequestProcessorMaxPoolSize(int)"/>
      <method name="setRequestProcessorPool(java.lang.String)"/>
      <method name="setResponseMessageSelector(java.lang.String)"/>
      <method name="setResponseNameSuffix(java.lang.String)"/>
      <method name="setResponsePortTypeNameLocalPart(java.lang.String)"/>
      <method name="setResponsePortTypeNameNamespaceURI(java.lang.String)"/>
      <method name="setResponseProcessorInitPoolSize(int)"/>
      <method name="setResponseProcessorMaxPoolSize(int)"/>
      <method name="setResponseProcessorPool(java.lang.String)"/>
      <method name="setResponseQueueEnableTransaction(boolean)"/>
      <method name="setTransactionTimeoutSeconds(int)"/>
      <method name="setisResponseQueueEnabled(boolean)"/>
      <method name="setresponsePartnerLinkRole(java.lang.String)"/>
      <method name="setresponseServiceRefName(java.lang.String)"/>
      <field name="asyncResponsesEnabledToNonAnonymousRequest"/>
      <field name="enableTransaction"/>
      <method name="equals(java.lang.Object)"/>
      <field name="firstUsageOfRequestPool"/>
      <field name="firstUsageOfResponsePool"/>
      <field name="genService"/>
      <field name="hasNonIdempotentMethods"/>
      <method name="isAsyncResponsesEnabledToNonAnonymousRequest()"/>
      <method name="isEnableTransaction()"/>
      <method name="isFirstUsageOfRequestPool()"/>
      <method name="isFirstUsageOfResponsePool()"/>
      <method name="isGenService()"/>
      <method name="isHasNonIdempotentMethods()"/>
      <method name="isResponseQueueEnableTransaction()"/>
      <field name="isResponseQueueEnabled"/>
      <method name="isisResponseQueueEnabled()"/>
      <field name="responseQueueEnableTransaction"/>
      <method name="getRequestProcessorInitPoolSize()"/>
      <method name="getRequestProcessorMaxPoolSize()"/>
      <method name="getResponseProcessorInitPoolSize()"/>
      <method name="getResponseProcessorMaxPoolSize()"/>
      <method name="getTransactionTimeoutSeconds()"/>
      <method name="hashCode()"/>
      <field name="requestProcessorInitPoolSize"/>
      <field name="requestProcessorMaxPoolSize"/>
      <field name="responseProcessorInitPoolSize"/>
      <field name="responseProcessorMaxPoolSize"/>
      <field name="transactionTimeoutSeconds"/>
      <field name="callbackInterface"/>
      <method name="getCallbackInterface()"/>
      <method name="getID()"/>
      <method name="getJmsAccessUser()"/>
      <method name="getJmsConnectionFactory()"/>
      <method name="getJmsQueue()"/>
      <method name="getJmsResponseConnectionFactory()"/>
      <method name="getJmsResponseQueue()"/>
      <method name="getRequestMessageSelector()"/>
      <method name="getRequestProcessorPool()"/>
      <method name="getResponseMessageSelector()"/>
      <method name="getResponseNameSuffix()"/>
      <method name="getResponsePortTypeNameLocalPart()"/>
      <method name="getResponsePortTypeNameNamespaceURI()"/>
      <method name="getResponseProcessorPool()"/>
      <method name="getresponsePartnerLinkRole()"/>
      <method name="getresponseServiceRefName()"/>
      <field name="jmsAccessUser"/>
      <field name="jmsConnectionFactory"/>
      <field name="jmsQueue"/>
      <field name="jmsResponseConnectionFactory"/>
      <field name="jmsResponseQueue"/>
      <field name="requestMessageSelector"/>
      <field name="requestProcessorPool"/>
      <field name="responseMessageSelector"/>
      <field name="responseNameSuffix"/>
      <field name="responsePartnerLinkRole"/>
      <field name="responsePortTypeNameLocalPart"/>
      <field name="responsePortTypeNameNamespaceURI"/>
      <field name="responseProcessorPool"/>
      <field name="responseServiceRefName"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="BackoffAlgorithmType">
      <constructor name="BackoffAlgorithmType()"/>
    </class>
    <class name="Buffering" members="concealed"/>
    <class name="BufferingFeature">
      <constructor name="BufferingFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setRequestQueueConnectionFactoryJNDIName(java.lang.String)"/>
      <method name="setRequestQueueEnabled(boolean)"/>
      <method name="setRequestQueueName(java.lang.String)"/>
      <method name="setRequestQueueTransactionEnabled(boolean)"/>
      <method name="setResponseQueueConnectionFactoryJNDIName(java.lang.String)"/>
      <method name="setResponseQueueEnabled(boolean)"/>
      <method name="setResponseQueueName(java.lang.String)"/>
      <method name="setResponseQueueTransactionEnabled(boolean)"/>
      <method name="setRetryCount(long)"/>
      <method name="setRetryDelay(java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isRequestQueueEnabled()"/>
      <method name="isRequestQueueTransactionEnabled()"/>
      <method name="isResponseQueueEnabled()"/>
      <method name="isResponseQueueTransactionEnabled()"/>
      <field name="requestQueueEnabled"/>
      <field name="requestQueueTransactionEnabled"/>
      <field name="responseQueueEnabled"/>
      <field name="responseQueueTransactionEnabled"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="getRequestQueueConnectionFactoryJNDIName()"/>
      <method name="getRequestQueueName()"/>
      <method name="getResponseQueueConnectionFactoryJNDIName()"/>
      <method name="getResponseQueueName()"/>
      <method name="getRetryDelay()"/>
      <field name="requestQueueConnectionFactoryJNDIName"/>
      <field name="requestQueueName"/>
      <field name="responseQueueConnectionFactoryJNDIName"/>
      <field name="responseQueueName"/>
      <field name="retryDelay"/>
      <method name="toString()"/>
      <method name="getRetryCount()"/>
      <field name="retryCount"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="CacheBinaryContent" members="concealed"/>
    <class name="CacheBinaryContentFeature">
      <constructor name="CacheBinaryContentFeature()"/>
      <method name="setArg1(java.lang.String)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setMode(com.oracle.webservices.api.CacheBinaryContentMode)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getMode()"/>
      <field name="mode"/>
      <method name="hashCode()"/>
      <field name="arg1"/>
      <method name="getArg1()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="CacheBinaryContentMode">
      <constructor name="CacheBinaryContentMode()"/>
    </class>
    <class name="FastInfosetCallbackClient" members="concealed"/>
    <class name="FastInfosetCallbackClientFeature">
      <constructor name="FastInfosetCallbackClientFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setFastInfosetContentNegotiation(com.oracle.webservices.api.FastInfosetContentNegotiationType)"/>
      <method name="equals(java.lang.Object)"/>
      <field name="fastInfosetContentNegotiation"/>
      <method name="getFastInfosetContentNegotiation()"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="FastInfosetClient" members="concealed"/>
    <class name="FastInfosetContentNegotiationType">
      <constructor name="FastInfosetContentNegotiationType()"/>
    </class>
    <class name="FastInfosetService" members="concealed"/>
    <class name="FeatureValidator">
      <constructor name="FeatureValidator()"/>
      <method name="validate(java.lang.Object)"/>
    </class>
    <class name="MEXRequestProcessingService" members="concealed"/>
    <class name="MEXRequestProcessingServiceFeature">
      <constructor name="MEXRequestProcessingServiceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="MTOMEncodeFaultService" members="concealed"/>
    <class name="MTOMEncodeFaultServiceFeature">
      <constructor name="MTOMEncodeFaultServiceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="MaxRequestSize" members="concealed"/>
    <class name="MaxRequestSizeFeature">
      <constructor name="MaxRequestSizeFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setMaxRequestSize(long)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="getMaxRequestSize()"/>
      <field name="maxRequestSize"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="POXHttpBindingService" members="concealed"/>
    <class name="POXHttpBindingServiceFeature">
      <constructor name="POXHttpBindingServiceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="Persistence" members="concealed"/>
    <class name="PersistenceFeature">
      <constructor name="PersistenceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setLogicalStoreName(java.lang.String)"/>
      <method name="setProviderName(java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="getLogicalStoreName()"/>
      <method name="getProviderName()"/>
      <field name="logicalStoreName"/>
      <field name="providerName"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="RequestProcessingService" members="concealed"/>
    <class name="RequestProcessingServiceFeature">
      <constructor name="RequestProcessingServiceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="SOAPRequestProcessingService" members="concealed"/>
    <class name="SOAPRequestProcessingServiceFeature">
      <constructor name="SOAPRequestProcessingServiceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="SchemaValidation" members="concealed"/>
    <class name="SchemaValidationFeature">
      <constructor name="SchemaValidationFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="TestPageProcessingService" members="concealed"/>
    <class name="TestPageProcessingServiceFeature">
      <constructor name="TestPageProcessingServiceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="WSDLDefinitionFeature">
      <constructor name="WSDLDefinitionFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setEntityResolver(org.xml.sax.EntityResolver)"/>
      <method name="setWsdl(java.net.URL)"/>
      <method name="setWsdl(javax.wsdl.Definition)"/>
      <method name="setWsdl(javax.xml.transform.Source)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="getWsdlUrl()"/>
      <field name="wsdlUrl"/>
      <method name="getWsdlDefinition()"/>
      <field name="wsdlDefinition"/>
      <method name="getWsdlSource()"/>
      <field name="wsdlSource"/>
      <field name="entityResolver"/>
      <method name="getEntityResolver()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="WSDLRequestProcessingService" members="concealed"/>
    <class name="WSDLRequestProcessingServiceFeature">
      <constructor name="WSDLRequestProcessingServiceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="WSLoggingLevel" members="concealed"/>
    <class name="WSLoggingLevelFeature">
      <constructor name="WSLoggingLevelFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setLoggingLevel(java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="getLoggingLevel()"/>
      <field name="loggingLevel"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api.disi">
    <class name="AdapterGetter">
      <method name="getAdapter(java.lang.Class)"/>
    </class>
    <class name="AdvertisementFeature">
      <constructor name="AdvertisementFeature()"/>
      <field name="isUpdateEndpointAddress"/>
      <method name="isUpdateEndpointAddress()"/>
      <method name="getID()"/>
      <method name="getWsdlAddress()"/>
      <field name="wsdlAddress"/>
      <method name="builder()"/>
      <method name="setUpdateEndpointAddress(boolean)"/>
      <method name="setWsdlAddress(java.lang.String)"/>
    </class>
    <class name="AdvertisementResponse">
      <constructor name="AdvertisementResponse(com.oracle.webservices.api.message.MessageContext,com.oracle.webservices.api.disi.OutputStreamResponseWriter)"/>
      <constructor name="AdvertisementResponse(com.oracle.webservices.api.message.MessageContext,javax.wsdl.Definition,com.oracle.webservices.api.disi.OutputStreamResponseWriter)"/>
      <method name="getWriter()"/>
      <method name="getResponseContext()"/>
      <field name="writer"/>
      <field name="responseContext"/>
      <field name="definition"/>
      <method name="getWSDL()"/>
    </class>
    <class name="Advertiser">
      <method name="isTransportAdvertisementRequest(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="advertise(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="advertise(javax.wsdl.Definition,com.oracle.webservices.api.message.MessageContext)"/>
    </class>
    <class name="ClientRequestTransport" members="concealed"/>
    <class name="ClientTransportFeature">
      <constructor name="ClientTransportFeature()"/>
      <method name="setClientRequestTransport(com.oracle.webservices.api.disi.ClientRequestTransport)"/>
      <method name="setEnabled(boolean)"/>
      <constructor name="ClientTransportFeature(com.oracle.webservices.api.disi.ClientRequestTransport)"/>
      <method name="equals(java.lang.Object)"/>
      <field name="clientRequestTransport"/>
      <method name="getClientRequestTransport()"/>
      <method name="getValue()"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="DISIEndpoint">
      <constructor name="DISIEndpoint()"/>
      <method name="createServiceRequestTransport()"/>
      <method name="getMetadata()"/>
      <method name="setEndpointAddress(java.lang.String)"/>
      <method name="setMetadata(java.util.List)"/>
      <method name="update(javax.xml.ws.WebServiceFeature[])"/>
    </class>
    <class name="DispatcherResponse" members="concealed"/>
    <class name="EndpointFactory">
      <constructor name="EndpointFactory()"/>
      <method name="create(java.lang.Object)"/>
      <method name="create(java.lang.Object,javax.xml.ws.WebServiceFeature[])"/>
      <method name="create(java.lang.String,java.lang.Object)"/>
      <method name="create(java.lang.String,java.lang.Object,javax.xml.ws.WebServiceFeature[])"/>
      <method name="builder()"/>
      <method name="getEndpointContext()"/>
      <method name="factory()"/>
      <field name="EMPTY_FEATURES"/>
    </class>
    <class name="Fail">
      <method name="fail(java.lang.Throwable,com.oracle.webservices.api.message.MessageContext)"/>
    </class>
    <class name="JRFDISIAdvertiserFactory">
      <constructor name="JRFDISIAdvertiserFactory()"/>
      <method name="create()"/>
      <method name="factory()"/>
    </class>
    <class name="NonSOAPResponseException">
      <constructor name="NonSOAPResponseException(com.oracle.webservices.api.message.MessageContext,com.oracle.webservices.api.disi.OutputStreamResponseWriter)"/>
      <method name="getWriter()"/>
      <method name="getMessageContext()"/>
      <field name="writer"/>
      <field name="responseContext"/>
    </class>
    <class name="OutputStreamResponseWriter">
      <method name="write(java.io.OutputStream)"/>
    </class>
    <class name="ProviderRequest" members="concealed"/>
    <class name="Request">
      <method name="request(com.oracle.webservices.api.message.MessageContext,RESPONSE)"/>
    </class>
    <class name="Response">
      <method name="response(com.oracle.webservices.api.message.MessageContext)"/>
    </class>
    <class name="Service">
      <constructor name="Service()"/>
      <method name="createDispatch(javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])"/>
      <method name="createDispatcherRequest(javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])"/>
    </class>
    <class name="ServiceFactory">
      <constructor name="ServiceFactory()"/>
      <method name="create(java.net.URL,javax.xml.namespace.QName)"/>
      <method name="create(java.net.URL,javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])"/>
      <method name="create(javax.xml.namespace.QName)"/>
      <method name="create(javax.xml.namespace.QName,javax.xml.ws.WebServiceFeature[])"/>
      <method name="factory()"/>
      <field name="EMPTY_FEATURES"/>
    </class>
    <class name="ServiceResponseTransport" members="concealed"/>
    <class name="ServiceTransportFeature">
      <constructor name="ServiceTransportFeature()"/>
      <method name="setAddressableServiceResponseTransport(com.oracle.webservices.api.disi.ServiceResponseTransport)"/>
      <method name="setBackchannelServiceResponseTransport(com.oracle.webservices.api.disi.ServiceResponseTransport)"/>
      <method name="setEnabled(boolean)"/>
      <constructor name="ServiceTransportFeature(com.oracle.webservices.api.disi.ServiceResponseTransport,com.oracle.webservices.api.disi.ServiceResponseTransport)"/>
      <method name="equals(java.lang.Object)"/>
      <field name="addressableServiceResponseTransport"/>
      <field name="backchannelServiceResponseTransport"/>
      <method name="getAddressableServiceResponseTransport()"/>
      <method name="getBackchannelServiceResponseTransport()"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="ServletContextAdapter">
      <method name="adaptRequest(javax.servlet.ServletContext,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.oracle.webservices.api.message.MessageContext)"/>
      <method name="adaptResponse(javax.servlet.ServletContext,javax.servlet.http.HttpServletResponse,com.oracle.webservices.api.message.MessageContext)"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api.disi.context">
    <class name="Accessor">
      <method name="value()"/>
      <constructor name="Accessor()"/>
      <method name="create(R)"/>
    </class>
    <class name="FaultMessageContextBuilder">
      <method name="build()"/>
    </class>
    <class name="FaultMessageContextBuilderFactory">
      <method name="createFaultMessageContextBuilder(javax.xml.namespace.QName,java.lang.String)"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api.disi.security">
    <class name="RoleAccessor">
      <method name="isUserInRole(java.lang.String)"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api.jms">
    <class name="JMSBindingVersion">
      <constructor name="JMSBindingVersion()"/>
    </class>
    <class name="JMSConstants">
      <field name="DEFAULT_ENABLE_HTTP_WSDL_ACCESS"/>
      <field name="DEFAULT_MDB_PER_DESTINATION"/>
      <field name="DEFAULT_BINDING_VERSION"/>
      <field name="DEFAULT_DELIVERY_MODE"/>
      <field name="DEFAULT_DESTINATION_TYPE"/>
      <field name="DEFAULT_MESSAGE_TYPE"/>
      <field name="DEFAULT_PRIORITY"/>
      <field name="ACKNOWLEDGE_MODE"/>
      <field name="ACTIVATION_CONFIG"/>
      <field name="BINDING_VERSION"/>
      <field name="CONTENT_TYPE"/>
      <field name="DEFAULT_DESTINATION_NAME"/>
      <field name="DEFAULT_JNDI_CONNECTION_FACTORY_NAME"/>
      <field name="DEFAULT_JNDI_INITIAL_CONTEXT_FACTORY"/>
      <field name="DEFAULT_JNDI_URL"/>
      <field name="DEFAULT_WEBSPHERE_JNDI_URL"/>
      <field name="DELIVERY_MODE"/>
      <field name="DELIVERY_MODE_NON_PERSISTENT"/>
      <field name="DELIVERY_MODE_PERSISTENT"/>
      <field name="DESTINATION_NAME"/>
      <field name="DESTINATION_TYPE"/>
      <field name="DESTINATION_TYPE_QUEUE"/>
      <field name="DESTINATION_TYPE_TOPIC"/>
      <field name="ENABLE_HTTP_WSDL_ACCESS"/>
      <field name="JNDI_CONNECTION_FACTORY_NAME"/>
      <field name="JNDI_CONTEXT_PARAMETER"/>
      <field name="JNDI_INITIAL_CONTEXT_FACTORY"/>
      <field name="JNDI_PASSWORD"/>
      <field name="JNDI_URL"/>
      <field name="JNDI_USERNAME"/>
      <field name="MDB_PER_DESTINATION"/>
      <field name="MESSAGE_TYPE"/>
      <field name="MESSAGE_TYPE_BYTES"/>
      <field name="MESSAGE_TYPE_TEXT"/>
      <field name="PRIORITY"/>
      <field name="REPLY_TO_NAME"/>
      <field name="RUN_AS_PRINCIPAL"/>
      <field name="RUN_AS_ROLE"/>
      <field name="SOAP11_JMS_BINDING"/>
      <field name="SOAP12_JMS_BINDING"/>
      <field name="SOAPJMS_BINDINGVERSION"/>
      <field name="SOAPJMS_CLIENTID"/>
      <field name="SOAPJMS_CONTENTTYPE"/>
      <field name="SOAPJMS_ISFAULT"/>
      <field name="SOAPJMS_REQUESTURI"/>
      <field name="SOAPJMS_SOAPACTION"/>
      <field name="SOAPJMS_TARGETSERVICE"/>
      <field name="SOAP_JMS_NS"/>
      <field name="TARGET_SERVICE"/>
      <field name="TIME_TO_LIVE"/>
      <field name="TRANS_ATTRIBUTE"/>
      <field name="DEFAULT_TIME_TO_LIVE"/>
    </class>
    <class name="JMSDeliveryMode">
      <constructor name="JMSDeliveryMode()"/>
    </class>
    <class name="JMSDestinationType">
      <constructor name="JMSDestinationType()"/>
    </class>
    <class name="JMSMessageType">
      <constructor name="JMSMessageType()"/>
    </class>
    <class name="JMSTransportClient" members="concealed"/>
    <class name="JMSTransportClientFeature">
      <constructor name="JMSTransportClientFeature()"/>
      <method name="setDestinationName(java.lang.String)"/>
      <method name="setDestinationType(com.oracle.webservices.api.jms.JMSDestinationType)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setJmsMessageHeader(java.lang.String)"/>
      <method name="setJmsMessageProperty(java.lang.String)"/>
      <method name="setJndiConnectionFactoryName(java.lang.String)"/>
      <method name="setJndiContextParameter(java.lang.String)"/>
      <method name="setJndiInitialContextFactory(java.lang.String)"/>
      <method name="setJndiURL(java.lang.String)"/>
      <method name="setMessageType(com.oracle.webservices.api.jms.JMSMessageType)"/>
      <method name="setPriority(int)"/>
      <method name="setReplyToName(java.lang.String)"/>
      <method name="setTargetService(java.lang.String)"/>
      <method name="setTimeToLive(long)"/>
      <method name="equals(java.lang.Object)"/>
      <field name="destinationType"/>
      <method name="getDestinationType()"/>
      <method name="getMessageType()"/>
      <field name="messageType"/>
      <method name="getPriority()"/>
      <method name="hashCode()"/>
      <field name="priority"/>
      <field name="destinationName"/>
      <method name="getDestinationName()"/>
      <method name="getID()"/>
      <method name="getJmsMessageHeader()"/>
      <method name="getJmsMessageProperty()"/>
      <method name="getJndiConnectionFactoryName()"/>
      <method name="getJndiContextParameter()"/>
      <method name="getJndiInitialContextFactory()"/>
      <method name="getJndiURL()"/>
      <method name="getReplyToName()"/>
      <method name="getTargetService()"/>
      <field name="jmsMessageHeader"/>
      <field name="jmsMessageProperty"/>
      <field name="jndiConnectionFactoryName"/>
      <field name="jndiContextParameter"/>
      <field name="jndiInitialContextFactory"/>
      <field name="jndiURL"/>
      <field name="replyToName"/>
      <field name="targetService"/>
      <method name="toString()"/>
      <method name="getTimeToLive()"/>
      <field name="timeToLive"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="JMSTransportService" members="concealed"/>
    <class name="JMSTransportServiceFeature">
      <constructor name="JMSTransportServiceFeature()"/>
      <method name="setActivationConfig(java.lang.String)"/>
      <method name="setBindingVersion(com.oracle.webservices.api.jms.JMSBindingVersion)"/>
      <method name="setDeliveryMode(com.oracle.webservices.api.jms.JMSDeliveryMode)"/>
      <method name="setDestinationName(java.lang.String)"/>
      <method name="setDestinationType(com.oracle.webservices.api.jms.JMSDestinationType)"/>
      <method name="setEnableHttpWsdlAccess(boolean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setJmsMessageHeader(java.lang.String)"/>
      <method name="setJmsMessageProperty(java.lang.String)"/>
      <method name="setJndiConnectionFactoryName(java.lang.String)"/>
      <method name="setJndiContextParameter(java.lang.String)"/>
      <method name="setJndiInitialContextFactory(java.lang.String)"/>
      <method name="setJndiURL(java.lang.String)"/>
      <method name="setMdbPerDestination(boolean)"/>
      <method name="setMessageType(com.oracle.webservices.api.jms.JMSMessageType)"/>
      <method name="setPriority(int)"/>
      <method name="setReplyToName(java.lang.String)"/>
      <method name="setRunAsPrincipal(java.lang.String)"/>
      <method name="setRunAsRole(java.lang.String)"/>
      <method name="setTargetService(java.lang.String)"/>
      <method name="setTimeToLive(long)"/>
      <field name="enableHttpWsdlAccess"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isEnableHttpWsdlAccess()"/>
      <method name="isMdbPerDestination()"/>
      <field name="mdbPerDestination"/>
      <field name="bindingVersion"/>
      <method name="getBindingVersion()"/>
      <field name="deliveryMode"/>
      <method name="getDeliveryMode()"/>
      <field name="destinationType"/>
      <method name="getDestinationType()"/>
      <method name="getMessageType()"/>
      <field name="messageType"/>
      <method name="getPriority()"/>
      <method name="hashCode()"/>
      <field name="priority"/>
      <field name="activationConfig"/>
      <field name="destinationName"/>
      <method name="getActivationConfig()"/>
      <method name="getDestinationName()"/>
      <method name="getID()"/>
      <method name="getJmsMessageHeader()"/>
      <method name="getJmsMessageProperty()"/>
      <method name="getJndiConnectionFactoryName()"/>
      <method name="getJndiContextParameter()"/>
      <method name="getJndiInitialContextFactory()"/>
      <method name="getJndiURL()"/>
      <method name="getReplyToName()"/>
      <method name="getRunAsPrincipal()"/>
      <method name="getRunAsRole()"/>
      <method name="getTargetService()"/>
      <field name="jmsMessageHeader"/>
      <field name="jmsMessageProperty"/>
      <field name="jndiConnectionFactoryName"/>
      <field name="jndiContextParameter"/>
      <field name="jndiInitialContextFactory"/>
      <field name="jndiURL"/>
      <field name="replyToName"/>
      <field name="runAsPrincipal"/>
      <field name="runAsRole"/>
      <field name="targetService"/>
      <method name="toString()"/>
      <method name="getTimeToLive()"/>
      <field name="timeToLive"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api.lifecycle">
    <class name="AbstractSOAPLifeCycleListener">
      <constructor name="AbstractSOAPLifeCycleListener()"/>
      <method name="afterState(com.oracle.webservices.api.lifecycle.SOAPServiceDestroy)"/>
      <method name="afterState(com.oracle.webservices.api.lifecycle.SOAPServiceInitialize)"/>
    </class>
    <class name="SOAPLifeCycleListener">
      <method name="afterState(com.oracle.webservices.api.lifecycle.SOAPServiceDestroy)"/>
      <method name="afterState(com.oracle.webservices.api.lifecycle.SOAPServiceInitialize)"/>
    </class>
    <class name="SOAPServiceDestroy" members="concealed"/>
    <class name="SOAPServiceInfo">
      <method name="getEndpointAddresses()"/>
      <field name="WEBSERVICES_WEBSERVICEDESCRIPTION_WSDLFILES"/>
      <field name="WSDL_ADDRESSES"/>
    </class>
    <class name="SOAPServiceInitialize" members="concealed"/>
    <class name="SOAPServiceLifeCycleState">
      <method name="getSOAPServiceInfo()"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api.mc">
    <class name="MakeConnectionClient" members="concealed"/>
    <class name="MakeConnectionClientFeature">
      <constructor name="MakeConnectionClientFeature()"/>
      <method name="setBackoffAlgorithm(com.oracle.webservices.api.BackoffAlgorithmType)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setExpires(java.lang.String)"/>
      <method name="setInterval(java.lang.String)"/>
      <method name="setPersistent(boolean)"/>
      <method name="setUseMcWithSyncInvoke(boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isPersistent()"/>
      <method name="isUseMcWithSyncInvoke()"/>
      <field name="persistent"/>
      <field name="useMcWithSyncInvoke"/>
      <field name="backoffAlgorithm"/>
      <method name="getBackoffAlgorithm()"/>
      <method name="hashCode()"/>
      <field name="expires"/>
      <method name="getExpires()"/>
      <method name="getID()"/>
      <method name="getInterval()"/>
      <field name="interval"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="MakeConnectionService" members="concealed"/>
    <class name="MakeConnectionServiceFeature">
      <constructor name="MakeConnectionServiceFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setOptional(boolean)"/>
      <method name="setPersistent(boolean)"/>
      <method name="setVersion(com.oracle.webservices.api.mc.MakeConnectionVersion)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isOptional()"/>
      <method name="isPersistent()"/>
      <field name="optional"/>
      <field name="persistent"/>
      <method name="getVersion()"/>
      <field name="version"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="MakeConnectionVersion">
      <constructor name="MakeConnectionVersion(javax.xml.namespace.QName)"/>
      <method name="getQName()"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api.rm">
    <class name="ReliableMessaging" members="concealed"/>
    <class name="ReliableMessagingFeature">
      <constructor name="ReliableMessagingFeature()"/>
      <method name="setAcknowledgementInterval(java.lang.String)"/>
      <method name="setDestinationAllowedVersions(com.oracle.webservices.api.rm.ReliableMessagingVersion)"/>
      <method name="setDestinationNonBuffered(boolean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setInactivityTimeout(java.lang.String)"/>
      <method name="setMaxRetryCount(long)"/>
      <method name="setOptional(boolean)"/>
      <method name="setSequenceExpiration(java.lang.String)"/>
      <method name="setSequenceInOrder(boolean)"/>
      <method name="setSequenceQOS(com.oracle.webservices.api.rm.SequenceQOS)"/>
      <method name="setSequenceSTR(boolean)"/>
      <method name="setSequenceTransportSecurity(boolean)"/>
      <method name="setSourceBackoffAlgorithm(com.oracle.webservices.api.BackoffAlgorithmType)"/>
      <method name="setSourceBaseRetransmissionInterval(java.lang.String)"/>
      <method name="setSourceVersion(com.oracle.webservices.api.rm.ReliableMessagingVersion)"/>
      <field name="destinationNonBuffered"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isDestinationNonBuffered()"/>
      <method name="isOptional()"/>
      <method name="isSequenceInOrder()"/>
      <method name="isSequenceSTR()"/>
      <method name="isSequenceTransportSecurity()"/>
      <field name="optional"/>
      <field name="sequenceInOrder"/>
      <field name="sequenceSTR"/>
      <field name="sequenceTransportSecurity"/>
      <method name="getSourceBackoffAlgorithm()"/>
      <field name="sourceBackoffAlgorithm"/>
      <field name="destinationAllowedVersions"/>
      <method name="getDestinationAllowedVersions()"/>
      <method name="getSourceVersion()"/>
      <field name="sourceVersion"/>
      <method name="getSequenceQOS()"/>
      <field name="sequenceQOS"/>
      <method name="hashCode()"/>
      <field name="acknowledgementInterval"/>
      <method name="getAcknowledgementInterval()"/>
      <method name="getID()"/>
      <method name="getInactivityTimeout()"/>
      <method name="getSequenceExpiration()"/>
      <method name="getSourceBaseRetransmissionInterval()"/>
      <field name="inactivityTimeout"/>
      <field name="sequenceExpiration"/>
      <field name="sourceBaseRetransmissionInterval"/>
      <method name="toString()"/>
      <method name="getMaxRetryCount()"/>
      <field name="maxRetryCount"/>
      <method name="builder()"/>
      <field name="DEFAULT_ACKNOWLEDGEMENT_INTERVAL"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="ReliableMessagingVersion">
      <constructor name="ReliableMessagingVersion(javax.xml.namespace.QName)"/>
      <method name="getQName()"/>
    </class>
    <class name="SequenceQOS">
      <constructor name="SequenceQOS()"/>
    </class>
  </package>
  <package name="com.oracle.webservices.api.tx.at">
    <class name="AtomicTransaction" members="concealed"/>
    <class name="AtomicTransactionFeature">
      <constructor name="AtomicTransactionFeature()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setFlowType(com.oracle.webservices.api.tx.at.AtomicTransactionFlowType)"/>
      <method name="setVersion(com.oracle.webservices.api.tx.at.AtomicTransactionVersion)"/>
      <method name="equals(java.lang.Object)"/>
      <field name="flowType"/>
      <method name="getFlowType()"/>
      <method name="getVersion()"/>
      <field name="version"/>
      <method name="hashCode()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <method name="builder()"/>
      <field name="ID"/>
      <field name="serialVersionUID"/>
      <method name="getSeedPolicyName()"/>
    </class>
    <class name="AtomicTransactionFlowType">
      <constructor name="AtomicTransactionFlowType()"/>
    </class>
    <class name="AtomicTransactionVersion">
      <constructor name="AtomicTransactionVersion(javax.xml.namespace.QName)"/>
      <method name="getQName()"/>
    </class>
  </package>
  <package name="com.oracle.webservices.impl.internalapi.session.manager">
    <class name="Session">
      <method name="get(java.lang.Class)"/>
      <method name="contains(java.lang.Class)"/>
      <method name="containsKey(java.lang.String)"/>
      <method name="hasExplicitExpiration()"/>
      <method name="isExpired()"/>
      <method name="isImplicitlyCreated()"/>
      <method name="getName()"/>
      <method name="getKeyMap()"/>
      <method name="addKey(java.lang.String,java.lang.String)"/>
      <method name="removeKey(java.lang.String)"/>
    </class>
    <class name="SessionContainer">
      <method name="getCurrentSession()"/>
      <method name="setCurrentSession(com.oracle.webservices.impl.internalapi.session.manager.Session)"/>
    </class>
    <class name="SessionException">
      <constructor name="SessionException()"/>
      <constructor name="SessionException(java.lang.String)"/>
      <constructor name="SessionException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="SessionException(java.lang.Throwable)"/>
    </class>
    <class name="SessionManager">
      <method name="getProviderInstance(java.lang.String,java.lang.Class[],java.lang.Object[])"/>
      <method name="getSystemProviderClassNames()"/>
      <method name="initialize()"/>
      <constructor name="SessionManager(com.oracle.webservices.impl.internalspi.session.manager.SessionManagerProvider)"/>
      <method name="sessionExists(java.lang.String)"/>
      <method name="createSession(java.lang.String,com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="getOrCreateSession(java.lang.String,com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="getSession(java.lang.String,com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="getSessionFromEnvironment(com.oracle.webservices.impl.internalapi.session.manager.SessionContainer,com.oracle.webservices.impl.internalspi.session.manager.AssociationContext)"/>
      <field name="_provider"/>
      <method name="createNewObjectID()"/>
      <method name="getSessionNameForKey(com.oracle.webservices.impl.internalapi.session.manager.Session.Key)"/>
      <method name="listSessions()"/>
      <method name="listSessionsForKey(com.oracle.webservices.impl.internalapi.session.manager.Session.Key)"/>
      <field name="_initialized"/>
      <method name="getSessionManager(java.lang.Class[],java.lang.Object[])"/>
      <method name="getSessionManager(java.lang.String,java.lang.Class[],java.lang.Object[])"/>
      <field name="_providerClassNames"/>
      <method name="addProviderClassName(java.lang.String)"/>
      <method name="removeProviderClassName(java.lang.String)"/>
      <method name="removeSession(java.lang.String,com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="saveSession(com.oracle.webservices.impl.internalapi.session.manager.Session)"/>
    </class>
    <class name="SessionManagerFactory">
      <method name="getSessionManager()"/>
      <method name="getSessionManager(com.sun.xml.ws.api.Component)"/>
    </class>
    <class name="UnitOfWork">
      <method name="hasEnded()"/>
      <method name="hasStarted()"/>
      <method name="getName()"/>
      <method name="end()"/>
      <method name="start(java.lang.String)"/>
    </class>
    <class name="UnitOfWorkManager">
      <method name="getProviderClassName()"/>
      <constructor name="UnitOfWorkManager(com.oracle.webservices.impl.internalspi.session.manager.UnitOfWorkManagerProvider)"/>
      <method name="getUnitOfWork(java.lang.Object)"/>
      <field name="_provider"/>
      <field name="_instance"/>
      <method name="getInstance()"/>
    </class>
  </package>
  <package name="com.oracle.webservices.impl.internalapi.session.property">
    <class name="AbstractMessageProperties">
      <constructor name="AbstractMessageProperties()"/>
      <method name="getEnvironment(java.lang.String)"/>
      <method name="getMessageHeader(javax.xml.namespace.QName)"/>
      <method name="getMessageHeaderAsXMLStream(javax.xml.namespace.QName)"/>
      <method name="putToEnvironment(java.lang.String,java.lang.Object)"/>
    </class>
    <class name="BasicMessageProperties">
      <constructor name="BasicMessageProperties(java.util.Map,java.util.Map)"/>
      <method name="getEnvironment(java.lang.String)"/>
      <method name="getMessageHeader(javax.xml.namespace.QName)"/>
      <field name="_env"/>
      <field name="_headers"/>
      <method name="putToEnvironment(java.lang.String,java.lang.Object)"/>
      <method name="putToMessageHeaders(javax.xml.namespace.QName,java.lang.Object)"/>
    </class>
    <class name="MessageProperties">
      <method name="getEnvironment(java.lang.String)"/>
      <method name="getMessageHeader(javax.xml.namespace.QName)"/>
      <method name="getMessageHeaderAsXMLStream(javax.xml.namespace.QName)"/>
      <method name="putToEnvironment(java.lang.String,java.lang.Object)"/>
    </class>
    <class name="Property">
      <method name="internalCalculateValue(boolean,java.lang.Object)"/>
      <method name="internalCalculateValueUnderWriteLock(java.lang.Object)"/>
      <method name="internalGetValue(javax.xml.ws.AsyncHandler,java.lang.Object)"/>
      <method name="internalSetFailureUnderWriteLock(java.lang.Throwable)"/>
      <method name="internalSetValueUnderWriteLock(java.io.Serializable)"/>
      <method name="createFailureResponse(java.lang.Throwable)"/>
      <method name="createValueResponse(java.io.Serializable)"/>
      <method name="dispatchCallbacksAfterSetValue(java.io.Serializable,java.lang.Throwable,java.util.List)"/>
      <method name="initTransients()"/>
      <method name="readObject(java.io.ObjectInputStream)"/>
      <method name="writeObject(java.io.ObjectOutputStream)"/>
      <method name="calculateValue(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="calculateValue(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <method name="extractValue(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="extractValue(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <method name="valueIsValid(java.io.Serializable,com.oracle.webservices.api.message.MessageContext)"/>
      <method name="valueIsValid(java.io.Serializable,com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <method name="internalSetFailure(java.lang.Throwable)"/>
      <method name="internalSetValue(java.io.Serializable)"/>
      <method name="queueCallback(javax.xml.ws.AsyncHandler)"/>
      <constructor name="Property(java.lang.String,com.oracle.webservices.impl.internalapi.session.property.Property.State,java.io.Serializable,boolean,boolean,com.oracle.webservices.impl.internalapi.session.property.PropertySet)"/>
      <field name="_value"/>
      <field name="_persistent"/>
      <field name="_readOnly"/>
      <method name="hasExplicitExpiration()"/>
      <method name="isAvailable()"/>
      <method name="isExpired()"/>
      <method name="isPersistent()"/>
      <method name="isReadOnly()"/>
      <field name="_state"/>
      <method name="getState()"/>
      <method name="getValue()"/>
      <method name="getValue(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="getValue(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <method name="getValue(javax.xml.ws.AsyncHandler,com.oracle.webservices.api.message.MessageContext)"/>
      <method name="getValue(javax.xml.ws.AsyncHandler,com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <field name="_propertySet"/>
      <method name="getPropertySet()"/>
      <field name="_name"/>
      <method name="getName()"/>
      <field name="_failure"/>
      <field name="_callbacks"/>
      <field name="_stateLock"/>
      <field name="serialVersionUID"/>
      <method name="setPropertySet(com.oracle.webservices.impl.internalapi.session.property.PropertySet)"/>
      <method name="setValue(java.io.Serializable)"/>
    </class>
    <class name="PropertySet">
      <method name="readObject(java.io.ObjectInputStream)"/>
      <method name="writeObject(java.io.ObjectOutputStream)"/>
      <constructor name="PropertySet(com.oracle.webservices.impl.internalspi.session.property.PropertySetContainer)"/>
      <method name="getPropertyMap()"/>
      <method name="parse(java.lang.Class)"/>
      <method name="setContainer(com.oracle.webservices.impl.internalspi.session.property.PropertySetContainer)"/>
      <method name="containsKey(java.lang.Object)"/>
      <method name="hasExplicitExpiration()"/>
      <method name="isExpired()"/>
      <method name="supports(java.lang.Object)"/>
      <method name="get(java.lang.Object)"/>
      <method name="put(java.lang.String,com.oracle.webservices.impl.internalapi.session.property.Property)"/>
      <method name="remove(java.lang.Object)"/>
      <field name="_container"/>
      <method name="getContainer()"/>
      <method name="createMapView()"/>
      <field name="mapViewCore"/>
      <field name="serialVersionUID"/>
      <method name="addKeyToContainer(java.lang.String,java.lang.String)"/>
      <method name="createEntrySet(java.util.Set)"/>
      <method name="valueChanged(com.oracle.webservices.impl.internalapi.session.property.Property)"/>
    </class>
  </package>
  <package name="com.oracle.webservices.impl.internalapi.session.sc">
    <class name="BaseSCPropertySet">
      <constructor name="BaseSCPropertySet(com.oracle.webservices.impl.internalspi.session.property.PropertySetContainer,boolean)"/>
      <method name="createSCTProperty(boolean)"/>
      <field name="_sctProperty"/>
      <method name="getSCTProperty()"/>
      <field name="_requiredSCTLifetime"/>
      <method name="getRequiredSCTLifetime()"/>
      <field name="serialVersionUID"/>
      <method name="setRequiredSCTLifetime(long)"/>
      <method name="setSCTProperty(com.oracle.webservices.impl.internalapi.session.sc.SCTProperty)"/>
    </class>
    <class name="BaseSCT">
      <constructor name="BaseSCT()"/>
      <method name="matches(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
    </class>
    <class name="BaseSCTProperty">
      <method name="calculateValue(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="calculateValue(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <method name="extractSCTFromServiceSideMessage(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="extractSCTFromServiceSideMessage(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <method name="extractValue(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="extractValue(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <method name="generateSCTViaHandshake(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="generateSCTViaHandshake(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <constructor name="BaseSCTProperty(com.oracle.webservices.impl.internalapi.session.property.PropertySet,boolean)"/>
      <field name="_serviceSide"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="SCPropertySet">
      <constructor name="SCPropertySet(com.oracle.webservices.impl.internalspi.session.property.PropertySetContainer)"/>
      <method name="getPropertyMap()"/>
      <method name="getSCTProperty()"/>
      <field name="model"/>
      <field name="SCT_PROPERTY"/>
      <field name="serialVersionUID"/>
      <method name="setSCTProperty(com.oracle.webservices.impl.internalapi.session.sc.SCTProperty)"/>
    </class>
    <class name="SCT">
      <method name="matches(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="dump()"/>
      <method name="dumpSCTInfo(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="getSCTId()"/>
      <method name="getSCTReference()"/>
      <method name="marshal(org.w3c.dom.Element,org.w3c.dom.Node,java.util.Map)"/>
    </class>
    <class name="SCT2">
      <method name="matches(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
    </class>
    <class name="SCTProperty">
      <method name="valueIsValid(com.oracle.webservices.impl.internalapi.session.sc.SCT,com.oracle.webservices.api.message.MessageContext)"/>
      <method name="valueIsValid(com.oracle.webservices.impl.internalapi.session.sc.SCT,com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <constructor name="SCTProperty(com.oracle.webservices.impl.internalapi.session.property.PropertySet)"/>
      <constructor name="SCTProperty(java.lang.String,com.oracle.webservices.impl.internalapi.session.property.PropertySet)"/>
      <field name="REQUIRED_SCT_LIFETIME"/>
      <field name="serialVersionUID"/>
    </class>
  </package>
  <package name="com.oracle.webservices.impl.internalapi.session.scope">
    <class name="AbstractScope">
      <method name="getUnmodifiableCollection(java.lang.Object)"/>
      <constructor name="AbstractScope(java.lang.Object)"/>
      <method name="getEditableParentScopes()"/>
      <method name="getEditableObjects()"/>
      <method name="getObjects()"/>
      <field name="_objects"/>
      <field name="_parents"/>
      <method name="getParentScopes()"/>
      <method name="addParentScope(com.oracle.webservices.impl.internalapi.session.scope.Scope)"/>
      <method name="removeParentScope(com.oracle.webservices.impl.internalapi.session.scope.Scope)"/>
    </class>
    <class name="MappedScope">
      <method name="getUnmodifiableCollection(java.util.Map)"/>
      <method name="get(K)"/>
      <constructor name="MappedScope()"/>
    </class>
    <class name="Scope">
      <method name="getObjects()"/>
      <method name="getParentScopes()"/>
    </class>
    <class name="ScopeContainer">
      <method name="getScope(java.lang.Class)"/>
      <method name="removeScope(java.lang.Class)"/>
      <method name="setScope(java.lang.Class,com.oracle.webservices.impl.internalapi.session.scope.Scope)"/>
    </class>
  </package>
  <package name="com.oracle.webservices.impl.internalapi.session.tube">
    <class name="PacketMessageProperties">
      <constructor name="PacketMessageProperties(com.sun.xml.ws.api.message.Packet)"/>
      <field name="_packet"/>
      <method name="getPacket()"/>
      <method name="getEnvironment(java.lang.String)"/>
      <method name="getMessageHeader(javax.xml.namespace.QName)"/>
      <method name="getMessageHeaderAsXMLStream(javax.xml.namespace.QName)"/>
      <method name="drainXMLStreamReaderToString(javax.xml.stream.XMLStreamReader)"/>
      <method name="putToEnvironment(java.lang.String,java.lang.Object)"/>
    </class>
    <class name="TubelineSessionContainer">
      <method name="getScope(java.lang.Class)"/>
      <constructor name="TubelineSessionContainer()"/>
      <field name="_currentSession"/>
      <method name="getCurrentSession()"/>
      <field name="_scopes"/>
      <method name="removeScope(java.lang.Class)"/>
      <method name="setCurrentSession(com.oracle.webservices.impl.internalapi.session.manager.Session)"/>
      <method name="setScope(java.lang.Class,com.oracle.webservices.impl.internalapi.session.scope.Scope)"/>
    </class>
  </package>
  <package name="com.oracle.webservices.impl.internalspi.session.manager">
    <class name="AbstractSession">
      <method name="initTransients()"/>
      <method name="notifyKeyAdded(java.lang.String,java.lang.String)"/>
      <method name="notifyKeyRemoved(java.lang.String,java.lang.String)"/>
      <method name="notifyPropertySetChange(com.oracle.webservices.impl.internalapi.session.property.PropertySet)"/>
      <method name="readObject(java.io.ObjectInputStream)"/>
      <method name="writeObject(java.io.ObjectOutputStream)"/>
      <constructor name="AbstractSession(java.lang.String,boolean)"/>
      <method name="get(java.lang.Class)"/>
      <constructor name="AbstractSession()"/>
      <field name="_implicitlyCreated"/>
      <method name="contains(java.lang.Class)"/>
      <method name="containsKey(java.lang.String)"/>
      <method name="hasExplicitExpiration()"/>
      <method name="isExpired()"/>
      <method name="isImplicitlyCreated()"/>
      <field name="_sessionContainer"/>
      <method name="getSessionContainer()"/>
      <method name="getCreationTime()"/>
      <method name="getLastUpdatedTime()"/>
      <field name="_name"/>
      <method name="getName()"/>
      <method name="toString()"/>
      <field name="_propertySets"/>
      <field name="_listeners"/>
      <field name="_propertySetMap"/>
      <method name="getPropertySets()"/>
      <field name="_keyMap"/>
      <method name="getKeyMap()"/>
      <field name="_keyMapLock"/>
      <field name="_creationTimestamp"/>
      <field name="_lastUpdateTimestamp"/>
      <field name="serialVersionUID"/>
      <method name="absorb(com.oracle.webservices.impl.internalspi.session.manager.AbstractSession)"/>
      <method name="add(com.oracle.webservices.impl.internalapi.session.property.PropertySet)"/>
      <method name="addKey(java.lang.String,java.lang.String)"/>
      <method name="addKeyForPropertySet(java.lang.String,java.lang.String)"/>
      <method name="addSessionListener(com.oracle.webservices.impl.internalspi.session.manager.SessionManagerProvider.SessionListener)"/>
      <method name="propertySetChanged(com.oracle.webservices.impl.internalapi.session.property.PropertySet)"/>
      <method name="removeKey(java.lang.String)"/>
      <method name="removeSessionListener(com.oracle.webservices.impl.internalspi.session.manager.SessionManagerProvider.SessionListener)"/>
      <method name="setSessionContainer(com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="touch()"/>
    </class>
    <class name="AssociationContext" members="concealed"/>
    <class name="Associator">
      <method name="associateSessionWithContext(com.oracle.webservices.impl.internalspi.session.manager.AssociationContext)"/>
    </class>
    <class name="AssociatorChain">
      <constructor name="AssociatorChain(com.oracle.webservices.impl.internalapi.session.scope.ScopeContainer,com.oracle.webservices.impl.internalspi.session.manager.AssociationContext)"/>
      <method name="associateSessionWithContext(com.oracle.webservices.impl.internalspi.session.manager.AssociationContext)"/>
      <field name="_associators"/>
    </class>
    <class name="AssociatorProvider">
      <method name="createAssociatorChain(com.oracle.webservices.impl.internalapi.session.scope.ScopeContainer,java.util.List)"/>
    </class>
    <class name="AssociatorProviderRegistry">
      <constructor name="AssociatorProviderRegistry()"/>
      <method name="getUnmodifiableCollection(java.util.List)"/>
      <constructor name="AssociatorProviderRegistry(com.oracle.webservices.impl.internalspi.session.manager.AssociatorProviderRegistry)"/>
      <method name="getRegisteredProviders()"/>
      <field name="_instance"/>
      <method name="getInstance()"/>
      <method name="registerProvider(com.oracle.webservices.impl.internalspi.session.manager.AssociatorProvider)"/>
      <method name="unregisterProvider(com.oracle.webservices.impl.internalspi.session.manager.AssociatorProvider)"/>
    </class>
    <class name="MessageAssociationContext">
      <constructor name="MessageAssociationContext(com.oracle.webservices.api.message.MessageContext)"/>
      <constructor name="MessageAssociationContext(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
      <field name="_messageContext"/>
      <method name="getMessageContext()"/>
      <field name="_properties"/>
      <method name="getMessageProperties()"/>
      <method name="setMessageContext(com.oracle.webservices.api.message.MessageContext)"/>
      <method name="setMessageProperties(com.oracle.webservices.impl.internalapi.session.property.MessageProperties)"/>
    </class>
    <class name="ProviderSession">
      <method name="addSessionListener(com.oracle.webservices.impl.internalspi.session.manager.SessionManagerProvider.SessionListener)"/>
      <method name="removeSessionListener(com.oracle.webservices.impl.internalspi.session.manager.SessionManagerProvider.SessionListener)"/>
    </class>
    <class name="SessionManagerProvider">
      <method name="sessionExists(java.lang.String)"/>
      <method name="createSession(java.lang.String,com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="getOrCreateSession(java.lang.String,com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="getSession(java.lang.String,com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="getSessionFromEnvironment(com.oracle.webservices.impl.internalapi.session.manager.SessionContainer,com.oracle.webservices.impl.internalspi.session.manager.AssociationContext)"/>
      <method name="createNewObjectID()"/>
      <method name="getSessionNameForKey(com.oracle.webservices.impl.internalapi.session.manager.Session.Key)"/>
      <method name="listSessions()"/>
      <method name="listSessionsForKey(com.oracle.webservices.impl.internalapi.session.manager.Session.Key)"/>
      <method name="removeSession(java.lang.String,com.oracle.webservices.impl.internalapi.session.manager.SessionContainer)"/>
      <method name="saveSession(com.oracle.webservices.impl.internalapi.session.manager.Session)"/>
    </class>
    <class name="UnitOfWorkManagerProvider">
      <method name="getUnitOfWork(java.lang.Object)"/>
    </class>
  </package>
  <package name="com.oracle.webservices.impl.internalspi.session.property">
    <class name="PropertySetContainer">
      <method name="addKeyForPropertySet(java.lang.String,java.lang.String)"/>
      <method name="propertySetChanged(com.oracle.webservices.impl.internalapi.session.property.PropertySet)"/>
    </class>
    <class name="PropertySetProvider">
      <method name="createPropertySetsForSession(com.oracle.webservices.impl.internalspi.session.property.PropertySetContainer,java.util.List)"/>
      <method name="validatePropertySetsForSession(com.oracle.webservices.impl.internalapi.session.manager.Session,com.oracle.webservices.impl.internalspi.session.property.PropertySetContainer)"/>
    </class>
    <class name="PropertySetProviderRegistry">
      <constructor name="PropertySetProviderRegistry()"/>
      <method name="getUnmodifiableCollection(java.util.List)"/>
      <constructor name="PropertySetProviderRegistry(com.oracle.webservices.impl.internalspi.session.property.PropertySetProviderRegistry)"/>
      <method name="getRegisteredProviders()"/>
      <field name="_instance"/>
      <method name="getInstance()"/>
      <method name="registerProvider(com.oracle.webservices.impl.internalspi.session.property.PropertySetProvider)"/>
      <method name="unregisterProvider(com.oracle.webservices.impl.internalspi.session.property.PropertySetProvider)"/>
    </class>
  </package>
  <package name="oracle.j2ee.ws.client">
    <class name="BasicService">
      <method name="getPortsAsArray()"/>
      <method name="noWsdlException()"/>
      <method name="noWsdlException(java.lang.String)"/>
      <method name="createLiteralMappings()"/>
      <method name="createSoapMappings(oracle.j2ee.ws.common.soap.SOAPVersion)"/>
      <method name="addPort(javax.xml.namespace.QName)"/>
      <method name="addPorts(javax.xml.namespace.QName[])"/>
      <method name="init()"/>
      <method name="init(javax.xml.namespace.QName,javax.xml.rpc.encoding.TypeMappingRegistry)"/>
      <constructor name="BasicService(javax.xml.namespace.QName)"/>
      <constructor name="BasicService(javax.xml.namespace.QName,java.util.Iterator)"/>
      <constructor name="BasicService(javax.xml.namespace.QName,javax.xml.namespace.QName[])"/>
      <constructor name="BasicService(javax.xml.namespace.QName,javax.xml.namespace.QName[],javax.xml.rpc.encoding.TypeMappingRegistry)"/>
      <constructor name="BasicService(javax.xml.namespace.QName,javax.xml.rpc.encoding.TypeMappingRegistry)"/>
      <method name="getWSDLDocumentLocation()"/>
      <method name="getPort(java.lang.Class)"/>
      <method name="getPort(javax.xml.namespace.QName,java.lang.Class)"/>
      <method name="getParentInfo()"/>
      <field name="parentInfo"/>
      <method name="getPorts()"/>
      <field name="ports"/>
      <method name="getReference()"/>
      <method name="getServiceName()"/>
      <field name="name"/>
      <method name="createCall()"/>
      <method name="createCall(javax.xml.namespace.QName)"/>
      <method name="createCall(javax.xml.namespace.QName,java.lang.String)"/>
      <method name="createCall(javax.xml.namespace.QName,javax.xml.namespace.QName)"/>
      <method name="getCalls(javax.xml.namespace.QName)"/>
      <method name="getTypeMappingRegistry()"/>
      <field name="typeRegistry"/>
      <method name="getHandlerRegistry()"/>
      <field name="handlerRegistry"/>
      <field name="internalTypeRegistry"/>
      <field name="DEFAULT_OPERATION_STYLE"/>
      <method name="createStandardTypeMappingRegistry()"/>
      <method name="setParentInfo(java.util.HashMap)"/>
    </class>
    <class name="HandlerChainImpl">
      <method name="createHandlerInstance(javax.xml.rpc.handler.HandlerInfo)"/>
      <method name="createHandlerInstances()"/>
      <method name="destroyHandlerInstance(int)"/>
      <method name="replaceHandlerInstance(int)"/>
      <method name="castToHandler(java.lang.Object)"/>
      <method name="getHandlerInstance(int)"/>
      <method name="getHandlerInfo(int)"/>
      <constructor name="HandlerChainImpl(java.util.List)"/>
      <method name="handleFault(javax.xml.rpc.handler.MessageContext)"/>
      <method name="handleRequest(javax.xml.rpc.handler.MessageContext)"/>
      <method name="handleResponse(javax.xml.rpc.handler.MessageContext)"/>
      <field name="initialized"/>
      <method name="getRoles()"/>
      <field name="roles"/>
      <method name="getUnderstoodHeaders()"/>
      <field name="handlerInfos"/>
      <field name="understoodHeaders"/>
      <method name="checkMustUnderstand(javax.xml.rpc.handler.MessageContext,oracle.j2ee.ws.common.soap.SOAPVersion)"/>
      <method name="checkMustUnderstand(javax.xml.rpc.handler.MessageContext,oracle.j2ee.ws.common.soap.SOAPVersion,java.util.List)"/>
      <method name="addUnderstoodHeaders(javax.xml.namespace.QName[])"/>
      <method name="destroy()"/>
      <method name="init(java.util.Map)"/>
      <method name="setRoles(java.lang.String[])"/>
    </class>
    <class name="SenderException">
      <constructor name="SenderException(java.lang.String)"/>
      <constructor name="SenderException(java.lang.String,java.lang.Object[])"/>
      <constructor name="SenderException(java.lang.String,java.lang.String)"/>
      <constructor name="SenderException(java.lang.String,oracle.j2ee.ws.common.util.localization.Localizable)"/>
    </class>
    <class name="ServiceExceptionImpl">
      <constructor name="ServiceExceptionImpl()"/>
      <constructor name="ServiceExceptionImpl(java.lang.String)"/>
      <constructor name="ServiceExceptionImpl(java.lang.String,java.lang.Object[])"/>
      <constructor name="ServiceExceptionImpl(java.lang.String,java.lang.String)"/>
      <constructor name="ServiceExceptionImpl(java.lang.String,oracle.j2ee.ws.common.util.localization.Localizable)"/>
      <constructor name="ServiceExceptionImpl(oracle.j2ee.ws.common.util.localization.Localizable)"/>
      <method name="getArguments()"/>
      <method name="getKey()"/>
      <method name="getMessage()"/>
      <method name="getResourceBundleName()"/>
      <method name="toString()"/>
      <method name="getLinkedException()"/>
      <field name="nestablePart"/>
      <field name="localizablePart"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="StreamingSender">
      <method name="processedByInterceptors(oracle.j2ee.ws.client.StreamingSenderState,javax.xml.namespace.QName)"/>
      <method name="copyAttachment(java.util.Iterator,javax.xml.soap.SOAPMessage)"/>
      <method name="initDmsNounsSensors()"/>
      <constructor name="StreamingSender()"/>
      <method name="_callRequestHandlers(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preRequestSendingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_readHeaderElement(oracle.j2ee.ws.common.soap.message.SOAPHeaderBlockInfo,oracle.j2ee.ws.common.streaming.XMLReader,oracle.j2ee.ws.common.encoding.SOAPDeserializationContext,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="isDotNetMtomHeaderStyle()"/>
      <method name="getBoolean(java.lang.Object)"/>
      <method name="_readBodyFaultElement(oracle.j2ee.ws.common.streaming.XMLReader,oracle.j2ee.ws.common.encoding.SOAPDeserializationContext,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_getPreferredCharacterEncoding()"/>
      <method name="getPortResourcePattern()"/>
      <method name="getSOAPVersionString(oracle.j2ee.ws.common.soap.SOAPVersion)"/>
      <method name="_getNamespaceDeclarations()"/>
      <method name="_getTransport()"/>
      <method name="_start(javax.xml.rpc.handler.HandlerChain)"/>
      <method name="getSoapVersion()"/>
      <method name="_getXMLReaderFactory()"/>
      <method name="_getXMLWriterFactory()"/>
      <method name="_callFaultHandlers(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_callResponseHandlers(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_handleEmptyBody(oracle.j2ee.ws.common.streaming.XMLReader,oracle.j2ee.ws.common.encoding.SOAPDeserializationContext,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_handleRuntimeExceptionInSend(java.lang.RuntimeException)"/>
      <method name="_postBodyReadingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_postEnvelopeReadingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_postHandlingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_postHeaderReadingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_postRequestSendingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_postRequestWritingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_postSendingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preBodyReadingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preEnvelopeReadingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preHandlingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preHeaderReadingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preRequestWritingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preSendingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_processHeaderElement(oracle.j2ee.ws.common.streaming.XMLReader,oracle.j2ee.ws.common.encoding.SOAPDeserializationContext,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_processHeaders(oracle.j2ee.ws.common.streaming.XMLReader,oracle.j2ee.ws.common.encoding.SOAPDeserializationContext,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_raiseFault(oracle.j2ee.ws.common.soap.message.SOAPFaultInfo,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_readFirstBodyElement(oracle.j2ee.ws.common.streaming.XMLReader,oracle.j2ee.ws.common.encoding.SOAPDeserializationContext,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_send(java.lang.String,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_sendImpl(java.lang.String,oracle.j2ee.ws.client.StreamingSenderState,boolean)"/>
      <method name="_sendOneWay(java.lang.String,oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_writeRequest(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="setSoapVersion(oracle.j2ee.ws.common.soap.SOAPVersion)"/>
      <method name="updateWsBindingModel(java.lang.Object,org.w3c.dom.Element,javax.xml.namespace.QName,javax.xml.namespace.QName)"/>
      <method name="updateWsBindingModel(org.w3c.dom.Element,javax.xml.namespace.QName,javax.xml.namespace.QName)"/>
      <field name="keepAlive"/>
      <field name="portResoucePattern"/>
      <field name="parentInfo"/>
      <field name="_properties"/>
      <field name="logger"/>
      <method name="getPortName()"/>
      <method name="getServiceName()"/>
      <method name="_getUnderstoodHeaders()"/>
      <field name="totalFault"/>
      <field name="postEvent"/>
      <field name="wsBindingModel"/>
      <field name="faultInfoSerializer"/>
      <field name="soapVersion"/>
      <field name="MUST_UNDERSTAND_FAULT_MESSAGE_STRING"/>
      <method name="setParentInfo(java.util.HashMap)"/>
    </class>
    <class name="StreamingSenderState">
      <constructor name="StreamingSenderState(oracle.j2ee.ws.common.soap.message.SOAPMessageContext,javax.xml.rpc.handler.HandlerChain,oracle.j2ee.ws.common.soap.SOAPVersion)"/>
      <field name="_sendingSOAPMessageDirectly"/>
      <method name="getSendingSOAPMessageDirectly()"/>
      <method name="isFailure()"/>
      <field name="_requestMessageLayout"/>
      <field name="_responseMessageLayout"/>
      <method name="getRequestMessageLayout()"/>
      <method name="getResponseMessageLayout()"/>
      <field name="_handlerChain"/>
      <method name="getHandlerChain()"/>
      <field name="_request"/>
      <field name="_response"/>
      <method name="getRequest()"/>
      <method name="getResponse()"/>
      <field name="_context"/>
      <method name="getMessageContext()"/>
      <method name="setRequestMessageLayout(int)"/>
      <method name="setResponseMessageLayout(int)"/>
      <method name="setSendingSOAPMessageDirectly(boolean)"/>
    </class>
    <class name="StubBase">
      <method name="hasPolicyReference(org.w3c.dom.Element)"/>
      <method name="setupInterceptor(org.w3c.dom.Element)"/>
      <method name="setupStubProperties(org.w3c.dom.Element)"/>
      <method name="setupWSAddressing(oracle.j2ee.ws.common.soap.message.SOAPMessageContext)"/>
      <constructor name="StubBase(javax.xml.rpc.handler.HandlerChain)"/>
      <method name="_preRequestSendingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="isDotNetMtomHeaderStyle()"/>
      <method name="isMtomSupport()"/>
      <method name="_getPreferredCharacterEncoding()"/>
      <method name="_getTransport()"/>
      <method name="_postSendingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preHandlingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="_preSendingHook(oracle.j2ee.ws.client.StreamingSenderState)"/>
      <method name="finalize()"/>
      <method name="setPortName(javax.xml.namespace.QName)"/>
      <method name="setServiceName(javax.xml.namespace.QName)"/>
      <method name="setupConfig(java.lang.String)"/>
      <field name="_mustInitialize"/>
      <field name="newManagementConfig"/>
      <method name="_getProperty(java.lang.String)"/>
      <method name="getSOAPVersion()"/>
      <method name="_getPropertyNames()"/>
      <method name="determineOperationQName(com.oracle.webservices.oracle_internal_api.interceptors.InterceptorInternalMessageContext)"/>
      <method name="getPortName()"/>
      <method name="getServiceName()"/>
      <field name="portName"/>
      <field name="serviceName"/>
      <method name="_getHandlerChain()"/>
      <field name="_handlerChain"/>
      <field name="_transport"/>
      <field name="_interceptor"/>
      <method name="determineOperationID(com.oracle.webservices.oracle_internal_api.interceptors.InterceptorInternalMessageContext)"/>
      <method name="_getTransportFactory()"/>
      <field name="_transportFactory"/>
      <field name="WSMGMT_CONIGFILE_NAME"/>
      <field name="WSM_CLIENT_SCHEMA_LOCATION"/>
      <field name="_recognizedProperties"/>
      <method name="getResourceAsDocument(java.lang.String)"/>
      <method name="parse(org.xml.sax.InputSource)"/>
      <method name="_initialize(oracle.j2ee.ws.common.encoding.InternalTypeMappingRegistry)"/>
      <method name="_setProperty(java.lang.String,java.lang.Object)"/>
      <method name="_setTransportFactory(oracle.webservices.transport.ClientTransportFactory)"/>
      <method name="destroy()"/>
      <method name="setInterceptorPipeline(oracle.j2ee.ws.client.mgmt.runtime.ClientInterceptorPipeline)"/>
      <method name="setInterceptorPipeline(oracle.j2ee.ws.client.mgmt.runtime.SuperClientInterceptorPipeline)"/>
    </class>
  </package>
  <package name="oracle.j2ee.ws.client.jaxws">
    <class name="JRFSOAPFaultException">
      <constructor name="JRFSOAPFaultException(javax.xml.soap.SOAPFault)"/>
      <method name="getMessage()"/>
    </class>
    <class name="OracleDispatchImpl">
      <method name="synchronousInvocationWithRetry(java.lang.Object,boolean)"/>
      <method name="isRecoverable(java.lang.Exception)"/>
      <method name="isRecoverable(javax.xml.namespace.QName)"/>
      <method name="isRecoverable(javax.xml.soap.SOAPFault)"/>
      <method name="getRetryLimit()"/>
      <method name="getRetryDelay(int)"/>
      <method name="getReliableMessagingConfig()"/>
      <method name="getEndpointReference(java.lang.Class)"/>
      <method name="getFeature(java.lang.Class)"/>
      <method name="invoke(java.lang.Object)"/>
      <constructor name="OracleDispatchImpl(javax.xml.ws.Dispatch)"/>
      <constructor name="OracleDispatchImpl(oracle.j2ee.ws.client.jaxws.OracleDispatchImpl)"/>
      <method name="assertsPolicy(java.lang.String)"/>
      <method name="assertsPolicy(javax.xml.namespace.QName)"/>
      <method name="getEndpointAddress()"/>
      <method name="getRequestContext()"/>
      <method name="getResponseContext()"/>
      <method name="invokeAsync(java.lang.Object,javax.xml.ws.AsyncHandler)"/>
      <method name="getPortName()"/>
      <method name="getServiceName()"/>
      <method name="getBinding()"/>
      <field name="delegate"/>
      <method name="getDelegate()"/>
      <method name="getEndpointReference()"/>
      <method name="invokeAsync(java.lang.Object)"/>
      <method name="getPolicySubject()"/>
      <method name="getPipeline()"/>
      <method name="getAddressingWSDLInfo()"/>
      <method name="getWSDLMetadata()"/>
      <method name="getOperationPolicyAssertionForRequest(javax.xml.soap.SOAPMessage,java.lang.String)"/>
      <method name="getPolicyAssertion(java.lang.String)"/>
      <method name="getPolicyAssertion(javax.xml.namespace.QName)"/>
      <method name="getPolicySet()"/>
      <field name="WSS_NAMESPACE_URIS"/>
      <field name="LOGGER"/>
      <method name="invokeOneWay(java.lang.Object)"/>
    </class>
  </package>
  <package name="oracle.j2ee.ws.server.util">
    <class name="AsyncWSServerMode">
      <method name="getSituationPropertyFilename()"/>
      <method name="getWeblogicDomainDirectory()"/>
      <constructor name="AsyncWSServerMode()"/>
      <field name="DOMAINDIR"/>
      <field name="PROPERTYFILENAME"/>
      <method name="getQuiesceMode()"/>
    </class>
  </package>
  <package name="oracle.webservices">
    <class name="ClientConstants">
      <field name="ACCEPT_ENCODING"/>
      <field name="ALL_OPERATIONS_ONE_WAY"/>
      <field name="CHARACTER_SET_ENCODING"/>
      <field name="CHUNK_SIZE"/>
      <field name="CLIENT_CONFIG"/>
      <field name="COOKIE_MAP"/>
      <field name="ContentNegotiation"/>
      <field name="DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS"/>
      <field name="DISABLE_MUST_UNDERSTAND"/>
      <field name="DO_NOT_CHUNK"/>
      <field name="HTTPCLIENT_MODULES_REMOVE_LIST"/>
      <field name="HTTP_CONN_TIMEOUT"/>
      <field name="HTTP_OPNAME_QUERYSTRING_PARAM"/>
      <field name="HTTP_READ_TIMEOUT"/>
      <field name="JAXRPC_STUB_INSTANCE"/>
      <field name="JMS_TARGET_CORRELATION_ID"/>
      <field name="JMS_TARGET_MESSAGE_ID"/>
      <field name="JMS_TARGET_REPLY_TO_FACTORY_NAME"/>
      <field name="JMS_TARGET_REPLY_TO_QUEUE_NAME"/>
      <field name="JMS_TARGET_REPLY_TO_TOPIC_NAME"/>
      <field name="JMS_TRANSPORT_REPLY_TO_FACTORY_NAME"/>
      <field name="JMS_TRANSPORT_REPLY_TO_QUEUE_NAME"/>
      <field name="MTOM_DOTNET_HEADER_STYLE"/>
      <field name="MTOM_SUPPORT"/>
      <field name="POLICY_SUBJECT_RESOURCE_PATTERN"/>
      <field name="PREEMPTIVE_BASIC_AUTH"/>
      <field name="PROVIDER_MSG_CONTEXT_PROPS"/>
      <field name="PROXY_AUTH_TYPE"/>
      <field name="PROXY_HOST"/>
      <field name="PROXY_PASSWORD"/>
      <field name="PROXY_PORT"/>
      <field name="PROXY_REALM"/>
      <field name="PROXY_USERNAME"/>
      <field name="SERVICEIMPL_NAME"/>
      <field name="SOAP_VERSION"/>
      <field name="SOAP_XML_RESPONSE"/>
      <field name="STREAMING_INCOMING_ATTACHMENTS"/>
      <field name="STREAMING_OUTGOING_ATTACHMENTS"/>
      <field name="TRANSACTIONAL"/>
      <field name="TRUST_MANAGER_ARRAY"/>
      <field name="WALLET_KEYSTORE_PROVIDER"/>
      <field name="WALLET_KEYSTORE_TYPE"/>
      <field name="WALLET_LOCATION"/>
      <field name="WALLET_PASSWORD"/>
      <field name="WSA_ACTION"/>
      <field name="WSA_FAULT_TO"/>
      <field name="WSA_MESSAGE_ID"/>
      <field name="WSA_RELATES_TO"/>
      <field name="WSA_REPLY_TO"/>
      <field name="WSDL_DEFINITION"/>
      <field name="WSM_INTERCEPTOR_PIPELINE_CONFIG"/>
      <field name="WSM_SUBJECT_PRECEDENCE"/>
      <field name="WSSEC_ENC_KEY_ALIAS"/>
      <field name="WSSEC_ENC_KEY_PASSWORD"/>
      <field name="WSSEC_KERBEROS_SERVICE_PRINCIPAL"/>
      <field name="WSSEC_KEYSTORE_LOCATION"/>
      <field name="WSSEC_KEYSTORE_PASSWORD"/>
      <field name="WSSEC_KEYSTORE_TYPE"/>
      <field name="WSSEC_RECIPIENT_KEY_ALIAS"/>
      <field name="WSSEC_SAML_ISSUER_NAME"/>
      <field name="WSSEC_SIG_KEY_ALIAS"/>
      <field name="WSSEC_SIG_KEY_PASSWORD"/>
      <field name="WS_SSL_KEYSTORE_LOCATION"/>
      <field name="WS_SSL_KEYSTORE_TYPE"/>
      <field name="WS_SSL_KEY_ALIAS"/>
      <field name="WS_SSL_TRUSTSTORE_LOCATION"/>
      <field name="WS_SSL_TRUSTSTORE_TYPE"/>
    </class>
    <class name="ConversationSession">
      <method name="isNew()"/>
      <method name="getMaxInactiveInterval()"/>
      <method name="getAttribute(java.lang.String)"/>
      <method name="getId()"/>
      <method name="getCreationTime()"/>
      <method name="getLastAccessedTime()"/>
      <method name="invalidate()"/>
      <method name="removeAttribute(java.lang.String)"/>
      <method name="setAttribute(java.lang.String,java.lang.Object)"/>
      <method name="setMaxInactiveInterval(int)"/>
    </class>
    <class name="OracleCall">
      <method name="getResponseAttachmentsIterator()"/>
      <method name="getHeaders()"/>
      <method name="getResponseHeaders()"/>
      <method name="getPortName()"/>
      <method name="invoke(javax.xml.soap.SOAPMessage)"/>
      <method name="getStreamedResponseAttachments()"/>
      <method name="getClientTransport()"/>
      <method name="invoke(javax.xml.namespace.QName,org.w3c.dom.Element[])"/>
      <method name="invoke(org.w3c.dom.Element)"/>
      <field name="ENDPOINT_ADDRESS_PROPERTY"/>
      <method name="addAttachment(javax.activation.DataHandler,java.lang.String,java.lang.String)"/>
      <method name="addHeader(org.w3c.dom.Element)"/>
      <method name="destroy()"/>
      <method name="invokeOneWay(javax.xml.namespace.QName,org.w3c.dom.Element[])"/>
      <method name="invokeOneWay(javax.xml.soap.SOAPMessage)"/>
      <method name="invokeOneWay(org.w3c.dom.Element)"/>
      <method name="setClientTransportFactory(oracle.webservices.transport.ClientTransportFactory)"/>
      <method name="setKeepSocketAlive(boolean)"/>
      <method name="setPortName(javax.xml.namespace.QName)"/>
      <method name="setRequestAttachmentsIterator(java.util.Iterator)"/>
      <method name="setStreamResponseAttachments(boolean)"/>
      <method name="streamResponseAttachment()"/>
    </class>
    <class name="OracleHttpBinding">
      <field name="HTTP_GET_BINDING"/>
      <field name="HTTP_POST_BINDING"/>
    </class>
    <class name="OracleService">
      <method name="initServiceDelegate(javax.wsdl.Definition,oracle.webservices.ConnectionConfig)"/>
      <constructor name="OracleService(java.net.URL,javax.xml.namespace.QName)"/>
      <constructor name="OracleService(java.net.URL,javax.xml.namespace.QName,javax.wsdl.Definition,oracle.webservices.ConnectionConfig)"/>
      <method name="getDefinition()"/>
      <field name="serviceClientRuntime"/>
      <method name="getConnectionConfig()"/>
      <method name="copyDispatch(javax.xml.ws.Dispatch)"/>
      <method name="createDispatch(java.util.Map,java.lang.Class,javax.xml.ws.Service.Mode)"/>
      <method name="createDispatch(javax.xml.namespace.QName,javax.xml.namespace.QName,java.lang.String,java.lang.String,java.lang.Class,javax.xml.ws.Service.Mode)"/>
      <method name="createDispatch(java.lang.String)"/>
      <method name="createDispatch(javax.xml.namespace.QName,javax.xml.namespace.QName,java.lang.String)"/>
      <method name="createDispatch(javax.xml.namespace.QName,javax.xml.namespace.QName,java.lang.String,boolean)"/>
    </class>
    <class name="OracleStub">
      <method name="getClientTransport()"/>
      <field name="CONTENT_TRANSFER_ENCODING"/>
      <field name="ENCODING_STYLE_PROPERTY"/>
      <field name="OPERATION_STYLE_PROPERTY"/>
      <method name="destroy()"/>
    </class>
    <class name="SOAPFaultException">
      <method name="deriveFault()"/>
      <constructor name="SOAPFaultException(javax.xml.soap.SOAPFault)"/>
      <constructor name="SOAPFaultException(javax.xml.soap.SOAPMessage)"/>
      <method name="getFault()"/>
      <field name="soapFault"/>
      <method name="getSOAPMessage()"/>
      <field name="message"/>
    </class>
    <class name="ServerConstants">
      <field name="ASYNC_RESPONSE_PROPERTIES"/>
      <field name="HTTP_SERVLET_REQUEST"/>
      <field name="HTTP_SERVLET_RESPONSE"/>
    </class>
    <class name="ServiceInvocationInfo">
      <method name="isConvertCDATA(java.lang.String)"/>
      <method name="isMexEnabled(java.lang.String)"/>
      <method name="isMtomSupported(java.lang.String)"/>
      <method name="isRestGetRequest(javax.servlet.http.HttpServletRequest)"/>
      <method name="isRestSupported(java.lang.String)"/>
      <method name="isSchemaValidateInput(java.lang.String)"/>
      <method name="isSoapSupported(java.lang.String)"/>
      <method name="isSoapSupported(javax.servlet.http.HttpServletRequest)"/>
      <method name="isTestpageEnabled(java.lang.String)"/>
      <method name="isWsdlEnabled(java.lang.String)"/>
      <method name="getMaxRequestSize(java.lang.String)"/>
      <method name="getLoggingLevel(java.lang.String)"/>
      <method name="getOperationName(javax.servlet.http.HttpServletRequest)"/>
      <method name="getRestRequestPath(javax.servlet.http.HttpServletRequest,java.lang.String,java.util.HashMap)"/>
      <method name="getConfigurationProperties(java.lang.String)"/>
      <method name="getDefinition(java.lang.String)"/>
      <method name="advertiseWSDL(javax.wsdl.Definition,javax.servlet.http.HttpServletRequest)"/>
    </class>
    <class name="WebServiceEndpointRuntimeData" members="concealed"/>
    <class name="WebServiceOperationInfo">
      <method name="getInputName()"/>
      <method name="getOutputName()"/>
      <method name="getUse()"/>
      <method name="getInputType()"/>
      <method name="getOperationName()"/>
      <method name="getEndpointInfo()"/>
      <method name="setUse(java.lang.String)"/>
    </class>
    <class name="WebServicesDescriptorInfo">
      <method name="isEJBWebService()"/>
      <method name="getContextRoot()"/>
      <method name="getEndpoints()"/>
      <method name="getWebServices()"/>
    </class>
    <class name="WsdlBindingProperties">
      <constructor name="WsdlBindingProperties()"/>
      <field name="errorOnMixStyle"/>
      <field name="errorOnMultipleParts"/>
      <field name="generateHttpGetBinding"/>
      <field name="generateHttpPostBinding"/>
      <field name="generateSoapBinding"/>
      <method name="isErrorOnMixStyle()"/>
      <method name="isErrorOnMultipleParts()"/>
      <method name="isGenerateHttpGetBinding()"/>
      <method name="isGenerateHttpPostBinding()"/>
      <method name="isGenerateSoapBinding()"/>
      <method name="isUseEmptyLocationUri()"/>
      <method name="isUseExistingServiceForWsdlCompletion()"/>
      <field name="useEmptyLocationUri"/>
      <field name="useExistingServiceForWsdlCompletion"/>
      <method name="getHttpGetInputStyle()"/>
      <method name="getHttpGetPortName()"/>
      <method name="getHttpPostInputContentType()"/>
      <method name="getHttpPostPortName()"/>
      <method name="getSoapPortName()"/>
      <field name="httpGetInputStyle"/>
      <field name="httpGetPortName"/>
      <field name="httpPostInputContentType"/>
      <field name="httpPostPortName"/>
      <field name="soapPortName"/>
      <method name="getSoapActionStyle()"/>
      <field name="soapActionStyle"/>
      <field name="HTTP_GET_URL_ENCODED"/>
      <field name="HTTP_GET_URL_REPLACEMENT"/>
      <field name="HTTP_POST_FORM"/>
      <field name="HTTP_POST_XML"/>
      <method name="setErrorOnMixStyle(boolean)"/>
      <method name="setErrorOnMultipleParts(boolean)"/>
      <method name="setGenerateHttpGetBinding(boolean)"/>
      <method name="setGenerateHttpPostBinding(boolean)"/>
      <method name="setGenerateSoapBinding(boolean)"/>
      <method name="setHttpGetInputStyle(java.lang.String)"/>
      <method name="setHttpGetPortName(java.lang.String)"/>
      <method name="setHttpPostInputContentType(java.lang.String)"/>
      <method name="setHttpPostPortName(java.lang.String)"/>
      <method name="setSoapActionStyle(oracle.webservices.WsdlBindingProperties.SoapActionStyle)"/>
      <method name="setSoapPortName(java.lang.String)"/>
      <method name="setUseEmptyLocationUri(boolean)"/>
      <method name="setUseExistingServiceForWsdlCompletion(boolean)"/>
    </class>
  </package>
  <package name="oracle.webservices.addressing">
    <class name="AddressingHelper">
      <method name="getIncomingAddressingProperties(java.util.Map)"/>
      <method name="getOutGoingAddressingProperties(java.util.Map)"/>
      <constructor name="AddressingHelper()"/>
      <method name="generateNewMessageId()"/>
      <method name="getIncomingAction(java.util.Map)"/>
      <method name="getIncomingAddressingNamespace(java.util.Map)"/>
      <method name="getIncomingFaultToAddress(java.util.Map)"/>
      <method name="getIncomingMessageId(java.util.Map)"/>
      <method name="getIncomingReplyToAddress(java.util.Map)"/>
      <method name="getIncomingToAddress(java.util.Map)"/>
      <method name="getOutgoingAction(java.util.Map)"/>
      <method name="getOutgoingAddressingNamespace(java.util.Map)"/>
      <method name="getOutgoingMessageId(java.util.Map)"/>
      <method name="getOutgoingReplyToAddress(java.util.Map)"/>
      <method name="setOutgoingMessageId(java.util.Map)"/>
      <method name="getIncomingRelatesToMessageId(java.util.Map)"/>
      <method name="getReplyTo(java.util.Map)"/>
      <method name="getReplyToReferenceParameters(java.util.Map)"/>
      <method name="getAddressingInfo(javax.xml.ws.WebServiceContext)"/>
      <method name="newAddressingInfoFromString(java.lang.String)"/>
      <method name="clearAllOutgoingAddressingProperties(java.util.Map)"/>
      <method name="setOutgoingAction(java.util.Map,java.lang.String)"/>
      <method name="setOutgoingAddressingNamespace(java.util.Map,java.lang.String)"/>
      <method name="setOutgoingFaultToAddress(java.util.Map,java.lang.String)"/>
      <method name="setOutgoingFaultToEndpointReference(java.util.Map,javax.xml.ws.wsaddressing.W3CEndpointReference)"/>
      <method name="setOutgoingMessageId(java.util.Map,java.lang.String)"/>
      <method name="setOutgoingRelatesToMessageId(java.util.Map,java.lang.String)"/>
      <method name="setOutgoingReplyToAddress(java.util.Map,java.lang.String)"/>
      <method name="setOutgoingReplyToEndpointReference(java.util.Map,javax.xml.ws.wsaddressing.W3CEndpointReference)"/>
      <method name="setOutgoingToAddress(java.util.Map,java.lang.String)"/>
      <method name="useDefaultReplyTo(java.util.Map)"/>
    </class>
    <class name="AddressingInfo">
      <method name="getPort(java.lang.Class)"/>
      <method name="getMessageId()"/>
      <method name="getDispatch()"/>
    </class>
  </package>
  <package name="oracle.webservices.annotations">
    <class name="Conversational" members="concealed"/>
    <class name="ConversationalOperation" members="concealed"/>
    <class name="Deployment" members="concealed"/>
    <class name="EndpointAddress" members="concealed"/>
    <class name="EndpointIdentifier" members="concealed"/>
    <class name="FabricService" members="concealed"/>
    <class name="GeneralKeyedReference" members="concealed"/>
    <class name="PortableWebService">
      <method name="endpointInterface()"/>
      <method name="name()"/>
      <method name="portName()"/>
      <method name="serviceName()"/>
      <method name="targetNamespace()"/>
      <method name="wsdlLocation()"/>
    </class>
    <class name="PortableWebServiceProvider" members="concealed"/>
    <class name="Properties" members="concealed"/>
    <class name="Property" members="concealed"/>
    <class name="SDODatabinding" members="concealed"/>
    <class name="Schema" members="concealed"/>
    <class name="SecurityPolicy">
      <method name="enabled()"/>
      <method name="value()"/>
      <method name="properties()"/>
    </class>
    <class name="Transactional" members="concealed"/>
    <class name="UDDIPublicationInfo" members="concealed"/>
    <class name="WSIFEJBBinding" members="concealed"/>
    <class name="WebServiceRefExt" members="concealed"/>
    <class name="WebServiceRefsExt" members="concealed"/>
  </package>
  <package name="oracle.webservices.annotations.async">
    <class name="AsyncWebService">
      <field name="RUN_AS_SYSTEM_USER"/>
      <field name="RUN_UNSECURED"/>
    </class>
    <class name="AsyncWebServiceQueue">
      <field name="MESSAGE_PROCESSOR_INITIAL_POOL_SIZE"/>
      <field name="MESSAGE_PROCESSOR_MAX_POOL_SIZE"/>
    </class>
    <class name="AsyncWebServiceResponseQueue">
      <field name="MESSAGE_PROCESSOR_INITIAL_POOL_SIZE"/>
      <field name="MESSAGE_PROCESSOR_MAX_POOL_SIZE"/>
    </class>
    <class name="CallbackFastInfosetContentNegotiation" members="concealed"/>
    <class name="CallbackInterface" members="concealed"/>
    <class name="CallbackMethod" members="concealed"/>
    <class name="CallbackProperties" members="concealed"/>
    <class name="CallbackRef" members="concealed"/>
    <class name="CallbackSecurityPolicy">
      <method name="enabled()"/>
      <method name="value()"/>
    </class>
    <class name="FaultListener" members="concealed"/>
    <class name="ResponseWebService">
      <field name="SERVICE_REF_NAME_SUFFIX"/>
    </class>
    <class name="Retry" members="concealed"/>
  </package>
  <package name="oracle.webservices.async">
    <class name="AsyncConfig">
      <method name="pollingInterval(int)"/>
      <method name="setWireStyle(oracle.webservices.async.AsyncConfig.WireStyle)"/>
    </class>
    <class name="DuplexRequestor" members="concealed"/>
    <class name="MessageListener">
      <method name="processMessage(javax.xml.soap.SOAPMessage,java.util.Map)"/>
    </class>
    <class name="RequestPreProcessor">
      <method name="processRequest(javax.xml.ws.handler.MessageContext,boolean)"/>
    </class>
    <class name="Requestor">
      <method name="createMessageContext()"/>
      <method name="invoke(java.util.Map,javax.xml.soap.SOAPMessage)"/>
      <method name="invoke(javax.xml.rpc.handler.MessageContext,javax.xml.soap.SOAPMessage)"/>
      <method name="invoke(javax.xml.soap.SOAPMessage)"/>
      <method name="invokeOneWay(java.util.Map,javax.xml.soap.SOAPMessage)"/>
      <method name="invokeOneWay(javax.xml.soap.SOAPMessage)"/>
    </class>
    <class name="RequestorFactory">
      <method name="createDisiRequestor(java.lang.String,oracle.j2ee.ws.common.async.JRFDispatcherResponse,com.oracle.webservices.api.disi.DispatcherRequest)"/>
      <method name="createRequestor(java.lang.String,oracle.webservices.async.MessageListener)"/>
      <method name="createRequestor(oracle.j2ee.ws.common.addressing.api.EndpointReference,oracle.webservices.async.MessageListener)"/>
      <method name="createRequestor(java.lang.String)"/>
      <method name="createRequestor(oracle.j2ee.ws.common.addressing.api.EndpointReference)"/>
    </class>
    <class name="Response">
      <method name="getMessageContext()"/>
    </class>
    <class name="ResponseHandler">
      <method name="handleResponse(oracle.webservices.async.Response)"/>
    </class>
  </package>
  <package name="oracle.webservices.attachments">
    <class name="Attachment">
      <method name="getId()"/>
      <method name="getDataHandler()"/>
    </class>
    <class name="AttachmentFactory">
      <constructor name="AttachmentFactory()"/>
      <method name="createAttachment(java.lang.String,java.lang.String,java.io.InputStream)"/>
      <method name="createAttachment(java.lang.String,javax.activation.DataHandler)"/>
      <method name="createAttachments()"/>
      <method name="newInstance()"/>
    </class>
    <class name="AttachmentFault">
      <method name="hasAttachments()"/>
      <method name="getAttachments()"/>
      <method name="addAttachment(java.lang.Object,java.lang.String)"/>
      <method name="addAttachment(javax.activation.DataHandler)"/>
      <method name="addAttachment(javax.xml.soap.AttachmentPart)"/>
    </class>
    <class name="Attachments">
      <method name="getIncomingAttachments()"/>
      <method name="getOutgoingAttachments()"/>
    </class>
    <class name="IncomingAttachments">
      <method name="hasNextAttachment()"/>
      <method name="nextAttachment()"/>
      <method name="close()"/>
    </class>
    <class name="IncomingAttachmentsIteratorAdapter">
      <constructor name="IncomingAttachmentsIteratorAdapter(oracle.webservices.attachments.IncomingAttachments)"/>
      <method name="hasNext()"/>
      <method name="next()"/>
      <field name="atts"/>
      <method name="remove()"/>
    </class>
    <class name="OutgoingAttachments">
      <method name="addAttachment(oracle.webservices.attachments.Attachment)"/>
    </class>
  </package>
  <package name="oracle.webservices.databinding">
    <class name="AttributeMap">
      <constructor name="AttributeMap()"/>
      <method name="getAttribute(javax.xml.namespace.QName)"/>
      <method name="names()"/>
      <method name="names(java.lang.String)"/>
      <field name="m_attributes"/>
      <method name="setAttribute(javax.xml.namespace.QName,java.lang.Object)"/>
    </class>
    <class name="SOAPElementSerializer">
      <method name="deserialize(javax.xml.soap.SOAPElement)"/>
      <method name="serialize(javax.xml.namespace.QName,java.lang.Object)"/>
      <method name="init(java.util.Map)"/>
    </class>
  </package>
  <package name="oracle.webservices.enumeration">
    <class name="CannotProcessFilterFault">
      <constructor name="CannotProcessFilterFault()"/>
      <field name="CANNOT_PROCESS_FILTER"/>
      <field name="CANNOT_PROCESS_FILTER_REASON"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="EnumerateMessage">
      <method name="getEnumerateElement()"/>
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="EnumerateMessage()"/>
      <constructor name="EnumerateMessage(java.lang.String)"/>
      <constructor name="EnumerateMessage(java.lang.String,boolean)"/>
      <constructor name="EnumerateMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getEnumerate()"/>
      <field name="ENUMERATE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setEnumerate(oracle.webservices.enumeration.datatype.EnumerationDataTypeBase)"/>
    </class>
    <class name="EnumerateResponseMessage">
      <method name="getEnumerateResponseElement()"/>
      <constructor name="EnumerateResponseMessage()"/>
      <constructor name="EnumerateResponseMessage(java.lang.String)"/>
      <constructor name="EnumerateResponseMessage(java.lang.String,boolean)"/>
      <constructor name="EnumerateResponseMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getEnumerateResponse()"/>
      <field name="ENUMERATE_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setEnumerateResponse(oracle.webservices.enumeration.datatype.EnumerateResponse)"/>
    </class>
    <class name="EnumerationEndMessage">
      <method name="getEnumerationEndElement()"/>
      <constructor name="EnumerationEndMessage()"/>
      <constructor name="EnumerationEndMessage(java.lang.String)"/>
      <constructor name="EnumerationEndMessage(java.lang.String,boolean)"/>
      <constructor name="EnumerationEndMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getEnumerationEnd()"/>
      <field name="ENUMERATION_END_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setEnumerationEnd(oracle.webservices.enumeration.datatype.EnumerationEnd)"/>
    </class>
    <class name="EnumerationMessage">
      <method name="process11Fault(java.lang.String,java.lang.String)"/>
      <method name="process12Fault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <constructor name="EnumerationMessage()"/>
      <constructor name="EnumerationMessage(java.lang.String)"/>
      <constructor name="EnumerationMessage(java.lang.String,boolean)"/>
      <constructor name="EnumerationMessage(javax.xml.soap.SOAPMessage)"/>
    </class>
    <class name="FilterDialectRequestedUnavailableFault">
      <constructor name="FilterDialectRequestedUnavailableFault()"/>
      <field name="FILTER_DIALECT_REQUESTED_UNAVAILABLE"/>
      <field name="FILTER_DIALECT_REQUESTED_UNAVAILABLE_REASON"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="FilteringNotSupportedFault">
      <constructor name="FilteringNotSupportedFault()"/>
      <field name="FILTERING_NOT_SUPPORTED"/>
      <field name="FILTERING_NOT_SUPPORTED_REASON"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="GetStatusMessage">
      <method name="getGetStatusElement()"/>
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="GetStatusMessage()"/>
      <constructor name="GetStatusMessage(java.lang.String)"/>
      <constructor name="GetStatusMessage(java.lang.String,boolean)"/>
      <constructor name="GetStatusMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getGetStatus()"/>
      <field name="GET_STATUS_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setGetStatus(oracle.webservices.enumeration.datatype.GetStatus)"/>
    </class>
    <class name="GetStatusResponseMessage">
      <method name="getGetStatusResponseElement()"/>
      <constructor name="GetStatusResponseMessage()"/>
      <constructor name="GetStatusResponseMessage(java.lang.String)"/>
      <constructor name="GetStatusResponseMessage(java.lang.String,boolean)"/>
      <constructor name="GetStatusResponseMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getGetStatusResponse()"/>
      <field name="GET_STATUS_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setGetStatusResponse(oracle.webservices.enumeration.datatype.GetStatusResponse)"/>
    </class>
    <class name="InvalidEnumerationContextFault">
      <constructor name="InvalidEnumerationContextFault()"/>
      <field name="INVALID_ENUM_CONTEXT"/>
      <field name="INVALID_ENUM_CONTEXT_REASON"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="InvalidEnumerationMessageException">
      <constructor name="InvalidEnumerationMessageException()"/>
      <constructor name="InvalidEnumerationMessageException(java.lang.String)"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="InvalidExpirationTimeFault">
      <constructor name="InvalidExpirationTimeFault()"/>
      <field name="INVALID_EXPIRATION_TIME"/>
      <field name="INVALID_EXPIRATION_TIME_REASON"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="PullMessage">
      <method name="getPullElement()"/>
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="PullMessage()"/>
      <constructor name="PullMessage(java.lang.String)"/>
      <constructor name="PullMessage(java.lang.String,boolean)"/>
      <constructor name="PullMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getPull()"/>
      <field name="PULL_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setPull(oracle.webservices.enumeration.datatype.Pull)"/>
    </class>
    <class name="PullResponseMessage">
      <method name="getPullResponseElement()"/>
      <constructor name="PullResponseMessage()"/>
      <constructor name="PullResponseMessage(java.lang.String)"/>
      <constructor name="PullResponseMessage(java.lang.String,boolean)"/>
      <constructor name="PullResponseMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getPullResponse()"/>
      <field name="PULL_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setPullResponse(oracle.webservices.enumeration.datatype.PullResponse)"/>
    </class>
    <class name="ReleaseMessage">
      <method name="getReleaseElement()"/>
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="ReleaseMessage()"/>
      <constructor name="ReleaseMessage(java.lang.String)"/>
      <constructor name="ReleaseMessage(java.lang.String,boolean)"/>
      <constructor name="ReleaseMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getRelease()"/>
      <field name="RELEASE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setRelease(oracle.webservices.enumeration.datatype.Release)"/>
    </class>
    <class name="ReleaseResponseMessage">
      <constructor name="ReleaseResponseMessage()"/>
      <constructor name="ReleaseResponseMessage(java.lang.String)"/>
      <constructor name="ReleaseResponseMessage(java.lang.String,boolean)"/>
      <constructor name="ReleaseResponseMessage(javax.xml.soap.SOAPMessage)"/>
      <field name="RELEASE_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
    <class name="RenewMessage">
      <method name="getRenewElement()"/>
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="RenewMessage()"/>
      <constructor name="RenewMessage(java.lang.String)"/>
      <constructor name="RenewMessage(java.lang.String,boolean)"/>
      <constructor name="RenewMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getRenew()"/>
      <field name="RENEW_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setRenew(oracle.webservices.enumeration.datatype.Renew)"/>
    </class>
    <class name="RenewResponseMessage">
      <method name="getRenewResponseElement()"/>
      <constructor name="RenewResponseMessage()"/>
      <constructor name="RenewResponseMessage(java.lang.String)"/>
      <constructor name="RenewResponseMessage(java.lang.String,boolean)"/>
      <constructor name="RenewResponseMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="getRenewResponse()"/>
      <field name="RENEW_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setRenewResponse(oracle.webservices.enumeration.datatype.RenewResponse)"/>
    </class>
    <class name="TimedOutFault">
      <constructor name="TimedOutFault()"/>
      <field name="TIMED_OUT"/>
      <field name="TIMED_OUT_REASON"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="UnsupportedExpirationTypeFault">
      <constructor name="UnsupportedExpirationTypeFault()"/>
      <field name="UNSUPPORTED_EXPIRATION_TYPE"/>
      <field name="UNSUPPORTED_EXPIRATION_TYPE_REASON"/>
      <field name="serialVersionUID"/>
    </class>
  </package>
  <package name="oracle.webservices.enumeration.datatype">
    <class name="Enumerate">
      <method name="getElementName()"/>
      <constructor name="Enumerate()"/>
      <field name="expires"/>
      <method name="getExpires()"/>
      <method name="getAny()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="endTo"/>
      <method name="getEndTo()"/>
      <field name="filter"/>
      <method name="getFilter()"/>
      <field name="END_TO_QNAME"/>
      <field name="END_TO_NAME"/>
      <field name="ENUMERATE_NAME"/>
      <field name="EXPIRES_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setEndTo(oracle.j2ee.ws.common.addressing.api.EndpointReference)"/>
      <method name="setExpires(java.lang.String)"/>
      <method name="setFilter(oracle.webservices.enumeration.datatype.FilterType)"/>
    </class>
    <class name="EnumerateResponse">
      <method name="getElementName()"/>
      <constructor name="EnumerateResponse()"/>
      <field name="expires"/>
      <method name="getExpires()"/>
      <method name="getAny()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="enumerationContext"/>
      <method name="getEnumerationContext()"/>
      <field name="ENUMERATE_RESPONSE_NAME"/>
      <field name="EXPIRES_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setEnumerationContext(oracle.webservices.enumeration.datatype.EnumerationContextType)"/>
      <method name="setExpires(java.lang.String)"/>
    </class>
    <class name="EnumerationContextType">
      <method name="getElementName()"/>
      <constructor name="EnumerationContextType()"/>
      <method name="getContent()"/>
      <method name="getOtherAttributes()"/>
      <field name="ENUMERATE_CONTEXT_NAME"/>
    </class>
    <class name="EnumerationDataTypeBase">
      <method name="createSOAPFactory()"/>
      <method name="getElementName()"/>
      <method name="createName(java.lang.String,java.lang.String,java.lang.String)"/>
      <constructor name="EnumerationDataTypeBase()"/>
      <field name="any"/>
      <field name="otherAttributes"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="ENUMERATION_NS_PREFIX"/>
      <field name="ENUMERATION_NS_URI"/>
      <field name="soapFactory"/>
      <field name="addressingBuilder"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
    </class>
    <class name="EnumerationEnd">
      <method name="getElementName()"/>
      <constructor name="EnumerationEnd()"/>
      <field name="code"/>
      <method name="getCode()"/>
      <method name="getAny()"/>
      <method name="getReason()"/>
      <field name="reason"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="enumerationContext"/>
      <method name="getEnumerationContext()"/>
      <field name="CODE_NAME"/>
      <field name="ENUMERATION_END_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setCode(java.lang.String)"/>
      <method name="setEnumerationContext(oracle.webservices.enumeration.datatype.EnumerationContextType)"/>
    </class>
    <class name="FilterType">
      <method name="getElementName()"/>
      <constructor name="FilterType()"/>
      <field name="dialect"/>
      <method name="getDialect()"/>
      <method name="getContent()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="DIALECT_NAME"/>
      <field name="FILTER_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setDialect(java.lang.String)"/>
    </class>
    <class name="GetStatus">
      <method name="getElementName()"/>
      <constructor name="GetStatus()"/>
      <method name="getAny()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="enumerationContext"/>
      <method name="getEnumerationContext()"/>
      <field name="GET_STATUS_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setEnumerationContext(oracle.webservices.enumeration.datatype.EnumerationContextType)"/>
    </class>
    <class name="GetStatusResponse">
      <method name="getElementName()"/>
      <constructor name="GetStatusResponse()"/>
      <field name="expires"/>
      <method name="getExpires()"/>
      <method name="getAny()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="EXPIRES_NAME"/>
      <field name="GET_STATUS_RESPONSE_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setExpires(java.lang.String)"/>
    </class>
    <class name="ItemListType">
      <method name="getElementName()"/>
      <constructor name="ItemListType()"/>
      <method name="getAny()"/>
      <field name="ITEMS_NAME"/>
    </class>
    <class name="LanguageSpecificStringType">
      <method name="getElementName()"/>
      <constructor name="LanguageSpecificStringType()"/>
      <method name="getLang()"/>
      <method name="getValue()"/>
      <field name="lang"/>
      <field name="value"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="LANG_NAME"/>
      <field name="REASON_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setLang(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="Pull">
      <method name="getElementName()"/>
      <constructor name="Pull()"/>
      <method name="getMaxCharacters()"/>
      <method name="getMaxElements()"/>
      <field name="maxCharacters"/>
      <field name="maxElements"/>
      <method name="getAny()"/>
      <method name="getOtherAttributes()"/>
      <method name="getMaxTime()"/>
      <field name="maxTime"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="enumerationContext"/>
      <method name="getEnumerationContext()"/>
      <field name="MAX_CHARACTERS_NAME"/>
      <field name="MAX_ELEMENTS_NAME"/>
      <field name="MAX_TIME_NAME"/>
      <field name="PULL_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setEnumerationContext(oracle.webservices.enumeration.datatype.EnumerationContextType)"/>
      <method name="setMaxCharacters(java.math.BigInteger)"/>
      <method name="setMaxElements(java.math.BigInteger)"/>
      <method name="setMaxTime(javax.xml.datatype.Duration)"/>
    </class>
    <class name="PullResponse">
      <method name="getElementName()"/>
      <constructor name="PullResponse()"/>
      <field name="endOfSequence"/>
      <method name="getEndOfSequence()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="enumerationContext"/>
      <method name="getEnumerationContext()"/>
      <method name="getItems()"/>
      <field name="items"/>
      <field name="END_OF_SEQUENCE_NAME"/>
      <field name="PULL_RESPONSE_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setEndOfSequence(boolean)"/>
      <method name="setEnumerationContext(oracle.webservices.enumeration.datatype.EnumerationContextType)"/>
      <method name="setItems(oracle.webservices.enumeration.datatype.ItemListType)"/>
    </class>
    <class name="Release">
      <method name="getElementName()"/>
      <constructor name="Release()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="enumerationContext"/>
      <method name="getEnumerationContext()"/>
      <field name="RELEASE_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setEnumerationContext(oracle.webservices.enumeration.datatype.EnumerationContextType)"/>
    </class>
    <class name="Renew">
      <method name="getElementName()"/>
      <constructor name="Renew()"/>
      <field name="expires"/>
      <method name="getExpires()"/>
      <method name="getAny()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="enumerationContext"/>
      <method name="getEnumerationContext()"/>
      <field name="EXPIRES_NAME"/>
      <field name="RENEW_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setEnumerationContext(oracle.webservices.enumeration.datatype.EnumerationContextType)"/>
      <method name="setExpires(java.lang.String)"/>
    </class>
    <class name="RenewResponse">
      <method name="getElementName()"/>
      <constructor name="RenewResponse()"/>
      <field name="expires"/>
      <method name="getExpires()"/>
      <method name="getAny()"/>
      <method name="getOtherAttributes()"/>
      <method name="write(javax.xml.soap.SOAPElement)"/>
      <field name="enumerationContext"/>
      <method name="getEnumerationContext()"/>
      <field name="EXPIRES_NAME"/>
      <field name="RENEW_RESPONSE_NAME"/>
      <method name="read(javax.xml.soap.SOAPElement)"/>
      <method name="setEnumerationContext(oracle.webservices.enumeration.datatype.EnumerationContextType)"/>
      <method name="setExpires(java.lang.String)"/>
    </class>
  </package>
  <package name="oracle.webservices.management">
    <class name="ConfigException">
      <constructor name="ConfigException(java.lang.String)"/>
      <constructor name="ConfigException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="ConfigException(java.lang.Throwable)"/>
    </class>
    <class name="ConfigurationStore">
      <method name="isConfigurationDefined()"/>
      <method name="readConfiguration()"/>
      <method name="writeConfiguration()"/>
    </class>
    <class name="InterceptorConfigChangeEvent">
      <method name="isAdd()"/>
      <method name="isRemove()"/>
      <method name="isUpdate()"/>
      <method name="getInterceptorName()"/>
      <method name="getScope()"/>
      <method name="getOperationId()"/>
      <method name="getPortId()"/>
    </class>
    <class name="InterceptorConfigListener">
      <method name="handleChange(oracle.webservices.management.InterceptorConfigChangeEvent)"/>
    </class>
    <class name="InterceptorScope">
      <constructor name="InterceptorScope(int,java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <field name="code"/>
      <method name="hashCode()"/>
      <method name="toCode()"/>
      <field name="name"/>
      <method name="toString()"/>
      <field name="GLOBAL"/>
      <field name="OPERATION"/>
      <field name="PORT"/>
    </class>
  </package>
  <package name="oracle.webservices.model">
    <class name="Component">
      <method name="createExtension(javax.xml.namespace.QName)"/>
      <method name="getExtension(javax.xml.namespace.QName)"/>
      <method name="getExtension(javax.xml.namespace.QName,boolean)"/>
      <method name="getExtensionAttribute(javax.xml.namespace.QName)"/>
      <method name="getComponents()"/>
      <method name="getComponentsInOrder()"/>
      <method name="getComponents(javax.xml.namespace.QName)"/>
      <method name="getAllExtensions(javax.xml.namespace.QName)"/>
      <method name="getName()"/>
      <method name="getType()"/>
      <method name="getExtensionAttributeTypes()"/>
      <method name="getExtensionTypes()"/>
      <method name="getComponent(javax.xml.namespace.QName,javax.xml.namespace.QName)"/>
      <method name="getParent()"/>
      <method name="getFactory()"/>
      <method name="getModel()"/>
      <method name="addComponent(oracle.webservices.model.Component)"/>
      <method name="addExtension(javax.xml.namespace.QName,java.lang.Object)"/>
      <method name="addExtensionAttribute(javax.xml.namespace.QName,java.lang.Object)"/>
      <method name="removeComponent(javax.xml.namespace.QName,javax.xml.namespace.QName)"/>
      <method name="removeExtension(javax.xml.namespace.QName)"/>
      <method name="removeExtensionAttribute(javax.xml.namespace.QName)"/>
    </class>
    <class name="Model">
      <method name="getSchemaErrors()"/>
      <method name="getTypePrototype(javax.xml.namespace.QName)"/>
      <method name="addService(javax.wsdl.Service)"/>
      <method name="addService(javax.xml.namespace.QName)"/>
      <method name="getService(javax.xml.namespace.QName)"/>
      <method name="getServices()"/>
      <field name="WSADDR_NS"/>
      <field name="WSADDR_WSDL_NS"/>
      <field name="MODEL_COMPONENT_TYPE"/>
      <method name="removeService(javax.xml.namespace.QName)"/>
    </class>
    <class name="Operation">
      <method name="getInputName()"/>
      <method name="getOperationName()"/>
      <method name="getOutputName()"/>
      <method name="getFaultMessages()"/>
      <method name="getFaultMessage(java.lang.String)"/>
      <method name="getInputMessage()"/>
      <method name="getOutputMessage()"/>
      <method name="getOperationId()"/>
      <method name="getPort()"/>
      <field name="OPERATION_COMPONENT_TYPE"/>
      <method name="addFaultMessage(oracle.webservices.model.Message)"/>
      <method name="setInputMessage(oracle.webservices.model.Message)"/>
      <method name="setOutputMessage(oracle.webservices.model.Message)"/>
    </class>
    <class name="Port">
      <method name="getBindingName()"/>
      <method name="getPortTypeName()"/>
      <method name="addOperation(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="addOperation(javax.wsdl.BindingOperation)"/>
      <method name="getOperation(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getOperations()"/>
      <method name="getService()"/>
      <field name="PORT_COMPONENT_TYPE"/>
      <method name="removeOperation(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="setBindingName(javax.xml.namespace.QName)"/>
      <method name="setPortTypeName(javax.xml.namespace.QName)"/>
    </class>
    <class name="SerializationException">
      <constructor name="SerializationException(java.lang.Exception)"/>
    </class>
    <class name="Service">
      <method name="addPort(java.lang.String)"/>
      <method name="addPort(javax.wsdl.Port)"/>
      <method name="getPort(java.lang.String)"/>
      <method name="getPorts()"/>
      <field name="SERVICE_COMPONENT_TYPE"/>
      <method name="removePort(java.lang.String)"/>
    </class>
  </package>
  <package name="oracle.webservices.model.soap">
    <class name="SoapPort">
      <method name="getPasswordAsCharArray()"/>
      <method name="getProxyPort()"/>
      <method name="getAddressUrl()"/>
      <method name="getKeyPassword()"/>
      <method name="getKeyStoreFileName()"/>
      <method name="getKeyStoreKeyAlias()"/>
      <method name="getKeyStoreKeyType()"/>
      <method name="getKeyStorePassword()"/>
      <method name="getKeyStoreType()"/>
      <method name="getPassword()"/>
      <method name="getProxyAuthType()"/>
      <method name="getProxyHost()"/>
      <method name="getProxyPassword()"/>
      <method name="getProxyRealm()"/>
      <method name="getProxyUsername()"/>
      <method name="getTrustStoreFileName()"/>
      <method name="getTrustStoreKeyType()"/>
      <method name="getTrustStorePassword()"/>
      <method name="getTrustStoreType()"/>
      <method name="getUsername()"/>
      <field name="EXTENSION_TYPE"/>
      <method name="setAddressUrl(java.lang.String)"/>
      <method name="setKeyPassword(java.lang.String)"/>
      <method name="setKeyStoreFileName(java.lang.String)"/>
      <method name="setKeyStoreKeyAlias(java.lang.String)"/>
      <method name="setKeyStoreKeyType(java.lang.String)"/>
      <method name="setKeyStorePassword(java.lang.String)"/>
      <method name="setKeyStoreType(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordAsCharArray(char[])"/>
      <method name="setProxyAuthType(java.lang.String)"/>
      <method name="setProxyHost(java.lang.String)"/>
      <method name="setProxyPassword(java.lang.String)"/>
      <method name="setProxyPort(int)"/>
      <method name="setProxyRealm(java.lang.String)"/>
      <method name="setProxyUsername(java.lang.String)"/>
      <method name="setTrustStoreFileName(java.lang.String)"/>
      <method name="setTrustStoreKeyType(java.lang.String)"/>
      <method name="setTrustStorePassword(java.lang.String)"/>
      <method name="setTrustStoreType(java.lang.String)"/>
      <method name="setUsername(java.lang.String)"/>
    </class>
  </package>
  <package name="oracle.webservices.portability">
    <class name="ProviderPlatformStatisticsAdapter">
      <method name="recordOperationStart(oracle.webservices.WebServiceEndpointInfo,javax.xml.namespace.QName,long)"/>
      <method name="recordRequestStart(oracle.webservices.WebServiceEndpointInfo,long)"/>
      <method name="recordOperationAbort(oracle.webservices.WebServiceEndpointInfo,javax.xml.namespace.QName,long)"/>
      <method name="recordOperationStop(oracle.webservices.WebServiceEndpointInfo,javax.xml.namespace.QName,long)"/>
      <method name="recordRequestAbort(oracle.webservices.WebServiceEndpointInfo,long)"/>
      <method name="recordRequestSize(oracle.webservices.WebServiceEndpointInfo,javax.xml.namespace.QName,long)"/>
      <method name="recordRequestStop(oracle.webservices.WebServiceEndpointInfo,long)"/>
      <method name="recordResponseSize(oracle.webservices.WebServiceEndpointInfo,javax.xml.namespace.QName,long)"/>
    </class>
    <class name="ReliabilityPlatformAdapter">
      <method name="getReliabilityHeaders(javax.servlet.http.HttpServletRequest,boolean,boolean)"/>
      <method name="insertReliabilityHeaders(javax.xml.soap.SOAPMessage,javax.servlet.http.HttpServletRequest,boolean,boolean)"/>
    </class>
    <class name="ResourceInjectionAdaptor">
      <method name="init(javax.servlet.ServletContext)"/>
      <method name="injectResource(java.lang.Object)"/>
    </class>
    <class name="Servlet">
      <method name="getClassName()"/>
      <method name="getName()"/>
      <method name="getInitParams()"/>
    </class>
    <class name="ServletMapping">
      <method name="getServletName()"/>
      <method name="getURLPattern()"/>
      <method name="setURLPattern(java.lang.String)"/>
    </class>
    <class name="SessionManager">
      <method name="createSession()"/>
      <method name="getExistingSession(java.lang.String)"/>
      <method name="addSessionListener(javax.servlet.http.HttpSessionListener)"/>
      <method name="beginRequest(oracle.webservices.ConversationSession)"/>
      <method name="endRequest(oracle.webservices.ConversationSession)"/>
    </class>
    <class name="WarModule">
      <method name="getServlets()"/>
      <method name="getServletMappings()"/>
      <method name="getServletMappings(java.lang.String)"/>
    </class>
  </package>
  <package name="oracle.webservices.provider">
    <class name="MessageContext">
      <method name="strongerSoapXml(java.lang.String,java.lang.String)"/>
      <constructor name="MessageContext()"/>
      <method name="containsProperty(java.lang.String)"/>
      <method name="getProperty(java.lang.String)"/>
      <method name="getRequestSoapXml()"/>
      <method name="getResponseSoapXml()"/>
      <field name="properties"/>
      <method name="getPropertyNames()"/>
      <field name="CLIENT_REQ_SOAP_XML"/>
      <field name="CLIENT_RESP_SOAP_XML"/>
      <field name="REQ_SOAP_XML"/>
      <field name="RESP_SOAP_XML"/>
      <method name="removeProperty(java.lang.String)"/>
      <method name="setProperty(java.lang.String,java.lang.Object)"/>
      <method name="setRequestSoapXml(java.lang.String)"/>
      <method name="setResponseSoapXml(java.lang.String)"/>
    </class>
    <class name="ProviderException">
      <constructor name="ProviderException()"/>
      <constructor name="ProviderException(java.lang.String)"/>
      <constructor name="ProviderException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="ProviderException(java.lang.Throwable)"/>
      <method name="getLinkedCause()"/>
    </class>
  </package>
  <package name="oracle.webservices.provider.transport">
    <class name="HTTPConstants">
      <constructor name="HTTPConstants()"/>
      <field name="HTTP_AUTH_TYPE"/>
      <field name="HTTP_CONTENT_LENGTH"/>
      <field name="HTTP_CONTENT_TYPE"/>
      <field name="HTTP_CONTEXTPATH"/>
      <field name="HTTP_COOKIES"/>
      <field name="HTTP_PATH_INFO"/>
      <field name="HTTP_PATH_TRANSLATED"/>
      <field name="HTTP_QUERY_STRING"/>
      <field name="HTTP_REMOTE_ADDR"/>
      <field name="HTTP_REMOTE_HOST"/>
      <field name="HTTP_REMOTE_PORT"/>
      <field name="HTTP_REMOTE_USER"/>
      <field name="HTTP_REQUEST_URI"/>
      <field name="HTTP_REQUEST_URL"/>
      <field name="HTTP_RESPONSE_CODE"/>
      <field name="HTTP_SERVLET_PATH"/>
      <field name="HTTP_SERVLET_REQUEST"/>
      <field name="HTTP_SERVLET_RESPONSE"/>
      <field name="HTTP_SESSION"/>
      <field name="HTTP_SOAP_ACTION"/>
      <field name="HTTP_USER_PRINCIPAL"/>
      <field name="SERVLET_CONFIG"/>
      <field name="SERVLET_CONTEXT"/>
    </class>
  </package>
  <package name="oracle.webservices.rm">
    <class name="ReliableMessagingConfigurationException">
      <constructor name="ReliableMessagingConfigurationException()"/>
      <constructor name="ReliableMessagingConfigurationException(java.lang.String)"/>
    </class>
    <class name="ReliableSession">
      <method name="isAddressableAcksTo()"/>
      <method name="getInboundSequenceId()"/>
      <method name="getMessageStoreName()"/>
      <method name="getOutboundSequenceId()"/>
      <method name="getSoapVersion()"/>
      <method name="getInactivityTimeout()"/>
      <method name="addReliableMessageListener(oracle.j2ee.ws.rm.ReliableMessageListener)"/>
      <method name="close()"/>
      <method name="open()"/>
      <method name="setMakeOffer(boolean)"/>
      <method name="setSoapVersion(java.lang.String)"/>
    </class>
    <class name="ReliableSessionFactory">
      <method name="newInstance(java.lang.Class)"/>
      <method name="createReliableSession(javax.xml.rpc.Stub)"/>
      <method name="createReliableSession(javax.xml.rpc.Stub,oracle.webservices.rm.WSRMProtocolVersion)"/>
      <method name="createReliableSession(javax.xml.rpc.Stub,oracle.webservices.rm.WSRMProtocolVersion,java.lang.String)"/>
      <method name="createReliableSession(javax.xml.ws.Dispatch,oracle.webservices.rm.WSRMProtocolVersion)"/>
      <field name="IMPLEMENTATION"/>
      <method name="newInstance()"/>
      <method name="newInstance(java.lang.String)"/>
    </class>
    <class name="WSRMProtocolVersion">
      <constructor name="WSRMProtocolVersion(java.lang.String)"/>
      <method name="getNamespaceURI()"/>
      <field name="namespaceURI"/>
      <method name="toSimpleVersionName()"/>
      <method name="toString()"/>
      <field name="SIMPLE_NAME_WSRM_1_0"/>
      <field name="SIMPLE_NAME_WSRM_1_1"/>
      <field name="WSRM_1_0"/>
      <field name="WSRM_1_1"/>
      <method name="get(java.lang.String)"/>
    </class>
  </package>
  <package name="oracle.webservices.rm.client">
    <class name="RMSessionLifecycle">
      <method name="closeSession()"/>
      <method name="openSession()"/>
    </class>
  </package>
  <package name="oracle.webservices.transfer">
    <class name="InvalidRepresentationFault">
      <constructor name="InvalidRepresentationFault()"/>
      <field name="INVALID_REPRESENTATION"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="InvalidTransferMessageException">
      <constructor name="InvalidTransferMessageException()"/>
      <constructor name="InvalidTransferMessageException(java.lang.String)"/>
      <field name="serialVersionUID"/>
    </class>
    <class name="TransferCreate">
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="TransferCreate()"/>
      <constructor name="TransferCreate(java.lang.String)"/>
      <constructor name="TransferCreate(java.lang.String,boolean)"/>
      <constructor name="TransferCreate(javax.xml.soap.SOAPMessage)"/>
      <field name="CREATE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
    <class name="TransferCreateResponse">
      <constructor name="TransferCreateResponse()"/>
      <constructor name="TransferCreateResponse(java.lang.String)"/>
      <constructor name="TransferCreateResponse(java.lang.String,boolean)"/>
      <constructor name="TransferCreateResponse(javax.xml.soap.SOAPMessage)"/>
      <field name="CREATE_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
    <class name="TransferDelete">
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="TransferDelete()"/>
      <constructor name="TransferDelete(java.lang.String)"/>
      <constructor name="TransferDelete(java.lang.String,boolean)"/>
      <constructor name="TransferDelete(javax.xml.soap.SOAPMessage)"/>
      <field name="DELETE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
    <class name="TransferDeleteResponse">
      <constructor name="TransferDeleteResponse()"/>
      <constructor name="TransferDeleteResponse(java.lang.String)"/>
      <constructor name="TransferDeleteResponse(java.lang.String,boolean)"/>
      <constructor name="TransferDeleteResponse(javax.xml.soap.SOAPMessage)"/>
      <field name="DELETE_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
    <class name="TransferGet">
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="TransferGet()"/>
      <constructor name="TransferGet(java.lang.String)"/>
      <constructor name="TransferGet(java.lang.String,boolean)"/>
      <constructor name="TransferGet(javax.xml.soap.SOAPMessage)"/>
      <field name="GET_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
    <class name="TransferGetResponse">
      <constructor name="TransferGetResponse()"/>
      <constructor name="TransferGetResponse(java.lang.String)"/>
      <constructor name="TransferGetResponse(java.lang.String,boolean)"/>
      <constructor name="TransferGetResponse(javax.xml.soap.SOAPMessage)"/>
      <field name="GET_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
    <class name="TransferMessage">
      <method name="process11Fault(java.lang.String,java.lang.String)"/>
      <method name="process12Fault(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <constructor name="TransferMessage()"/>
      <constructor name="TransferMessage(java.lang.String)"/>
      <constructor name="TransferMessage(java.lang.String,boolean)"/>
      <constructor name="TransferMessage(javax.xml.soap.SOAPMessage)"/>
    </class>
    <class name="TransferPut">
      <method name="processResponse(javax.xml.soap.SOAPMessage)"/>
      <constructor name="TransferPut()"/>
      <constructor name="TransferPut(java.lang.String)"/>
      <constructor name="TransferPut(java.lang.String,boolean)"/>
      <constructor name="TransferPut(javax.xml.soap.SOAPMessage)"/>
      <field name="PUT_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
    <class name="TransferPutResponse">
      <constructor name="TransferPutResponse()"/>
      <constructor name="TransferPutResponse(java.lang.String)"/>
      <constructor name="TransferPutResponse(java.lang.String,boolean)"/>
      <constructor name="TransferPutResponse(javax.xml.soap.SOAPMessage)"/>
      <field name="PUT_RESPONSE_ACTION_URI"/>
      <method name="setAction(java.lang.String)"/>
    </class>
  </package>
  <package name="oracle.webservices.transport">
    <class name="ClientTransport" members="concealed"/>
    <class name="ClientTransportFactory">
      <method name="create(java.lang.String)"/>
    </class>
    <class name="JmsAddress">
      <constructor name="JmsAddress()"/>
      <constructor name="JmsAddress(java.lang.String,java.lang.String)"/>
      <method name="getJndiConnectionFactoryName()"/>
      <method name="getJndiDestinationName()"/>
      <field name="jndiConnectionFactoryName"/>
      <field name="jndiDestinationName"/>
      <method name="setJndiConnectionFactoryName(java.lang.String)"/>
      <method name="setJndiDestinationName(java.lang.String)"/>
    </class>
    <class name="JmsClientTransportFactory">
      <constructor name="JmsClientTransportFactory()"/>
      <constructor name="JmsClientTransportFactory(oracle.webservices.transport.JmsAddress,oracle.webservices.transport.JmsAddress)"/>
      <method name="create()"/>
      <method name="create(java.lang.String)"/>
      <field name="destination"/>
      <method name="getDestination()"/>
      <method name="getReplyTo()"/>
      <field name="replyTo"/>
      <method name="setDestination(oracle.webservices.transport.JmsAddress)"/>
      <method name="setReplyTo(oracle.webservices.transport.JmsAddress)"/>
    </class>
  </package>
  <package name="oracle.webservices.wsdl">
    <class name="WSDLFactoryImpl">
      <constructor name="WSDLFactoryImpl()"/>
      <field name="WSDL_READ_TIMEOUT"/>
    </class>
  </package>
  <package name="weblogic.jws">
    <class name="AsyncFailure" members="concealed"/>
    <class name="AsyncResponse" members="concealed"/>
    <class name="Binding" members="concealed"/>
    <class name="BufferQueue" members="concealed"/>
    <class name="Callback" members="concealed"/>
    <class name="CallbackMethod" members="concealed"/>
    <class name="Context" members="concealed"/>
    <class name="Conversation" members="concealed"/>
    <class name="Conversational" members="concealed"/>
    <class name="FileStore" members="concealed"/>
    <class name="MessageBuffer" members="concealed"/>
    <class name="Policies" members="concealed"/>
    <class name="Policy" members="concealed"/>
    <class name="ReliabilityBuffer" members="concealed"/>
    <class name="ReliabilityErrorHandler" members="concealed"/>
    <class name="ServiceClient" members="concealed"/>
    <class name="StreamAttachments" members="concealed"/>
    <class name="Transactional" members="concealed"/>
    <class name="Types" members="concealed"/>
    <class name="WLHttpTransport" members="concealed"/>
    <class name="WLHttpsTransport" members="concealed"/>
    <class name="WLJmsTransport" members="concealed"/>
    <class name="WSDL" members="concealed"/>
    <class name="WildcardBinding" members="concealed"/>
    <class name="WildcardBindings" members="concealed"/>
    <class name="WildcardParticle" members="concealed"/>
  </package>
  <package name="weblogic.jws.jaxws">
    <class name="ClientPolicyFeature">
      <method name="getID()"/>
      <field name="ID"/>
      <method name="setEffectivePolicy(weblogic.jws.jaxws.policy.PolicySource)"/>
      <method name="setEffectivePolicyForFaultMessage(javax.xml.namespace.QName,weblogic.jws.jaxws.policy.PolicySource)"/>
      <method name="setEffectivePolicyForFaultMessage(javax.xml.namespace.QName,javax.xml.namespace.QName,weblogic.jws.jaxws.policy.PolicySource)"/>
      <method name="setEffectivePolicyForInputMessage(javax.xml.namespace.QName,weblogic.jws.jaxws.policy.PolicySource)"/>
      <method name="setEffectivePolicyForInputMessage(weblogic.jws.jaxws.policy.PolicySource)"/>
      <method name="setEffectivePolicyForOperation(javax.xml.namespace.QName,weblogic.jws.jaxws.policy.PolicySource)"/>
      <method name="setEffectivePolicyForOutputMessage(javax.xml.namespace.QName,weblogic.jws.jaxws.policy.PolicySource)"/>
      <method name="setEffectivePolicyForOutputMessage(weblogic.jws.jaxws.policy.PolicySource)"/>
      <method name="getEffectivePolicy()"/>
      <method name="getEffectivePolicyForFaultMessage(javax.xml.namespace.QName)"/>
      <method name="getEffectivePolicyForFaultMessage(javax.xml.namespace.QName,javax.xml.namespace.QName)"/>
      <method name="getEffectivePolicyForInputMessage()"/>
      <method name="getEffectivePolicyForInputMessage(javax.xml.namespace.QName)"/>
      <method name="getEffectivePolicyForOperation(javax.xml.namespace.QName)"/>
      <method name="getEffectivePolicyForOutputMessage()"/>
      <method name="getEffectivePolicyForOutputMessage(javax.xml.namespace.QName)"/>
    </class>
    <class name="PoliciesFeature">
      <constructor name="PoliciesFeature(boolean,weblogic.jws.Policy[])"/>
      <constructor name="PoliciesFeature(java.util.List)"/>
      <constructor name="PoliciesFeature(weblogic.jws.Policy[])"/>
      <constructor name="PoliciesFeature(weblogic.jws.jaxws.PolicyFeature[])"/>
      <method name="getID()"/>
      <method name="getPolicies()"/>
      <field name="ID"/>
    </class>
    <class name="PolicyFeature">
      <constructor name="PolicyFeature(boolean,java.lang.String,weblogic.jws.Policy.Direction,boolean)"/>
      <constructor name="PolicyFeature(java.lang.String)"/>
      <constructor name="PolicyFeature(java.lang.String,weblogic.jws.Policy.Direction)"/>
      <constructor name="PolicyFeature(java.lang.String,weblogic.jws.Policy.Direction,boolean)"/>
      <method name="isAttachToWsdl()"/>
      <method name="getID()"/>
      <method name="getUri()"/>
      <field name="ID"/>
      <method name="getDirection()"/>
    </class>
    <class name="WssConfigurationFeature">
      <constructor name="WssConfigurationFeature(boolean,java.lang.String)"/>
      <method name="getID()"/>
      <method name="getValue()"/>
      <field name="ID"/>
    </class>
  </package>
  <package name="weblogic.jws.jaxws.client">
    <class name="ClientIdentityFeature">
      <constructor name="ClientIdentityFeature()"/>
      <constructor name="ClientIdentityFeature(java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isGeneratedRawClientId()"/>
      <method name="hashCode()"/>
      <method name="calculateParentId()"/>
      <method name="getClientId()"/>
      <method name="getID()"/>
      <method name="getParentId()"/>
      <method name="getRawClientId()"/>
      <method name="toString()"/>
      <method name="setParentIdCalculator(weblogic.jws.jaxws.client.ClientIdentityFeature.ParentIdCalculator)"/>
      <method name="addPropertyChangeListener(java.beans.PropertyChangeListener)"/>
      <method name="dispose()"/>
      <method name="removePropertyChangeListener(java.beans.PropertyChangeListener)"/>
      <method name="setClientId(java.lang.String)"/>
      <method name="setClientId(java.lang.String,boolean)"/>
      <method name="setGeneratedRawClientId(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.jws.jaxws.client.async">
    <class name="AsyncClientHandlerFeature">
      <constructor name="AsyncClientHandlerFeature(java.lang.Object)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getHandler()"/>
      <method name="getID()"/>
      <method name="toString()"/>
      <field name="ID"/>
    </class>
  </package>
  <package name="weblogic.jws.jaxws.policy">
    <class name="PolicySource">
      <method name="getPolicy(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.jws.security">
    <class name="CallbackRolesAllowed" members="concealed"/>
    <class name="RolesAllowed" members="concealed"/>
    <class name="RolesReferenced" members="concealed"/>
    <class name="RunAs" members="concealed"/>
    <class name="SecurityIdentity" members="concealed"/>
    <class name="SecurityRole" members="concealed"/>
    <class name="SecurityRoleRef" members="concealed"/>
    <class name="SecurityRoles" members="concealed"/>
    <class name="UserDataConstraint" members="concealed"/>
    <class name="WssConfiguration" members="concealed"/>
  </package>
  <package name="weblogic.jws.soap">
    <class name="SOAPBinding" members="concealed"/>
  </package>
  <package name="weblogic.jws.wlw">
    <class name="UseWLW81BindingTypes" members="concealed"/>
    <class name="WLW81CallbackJWS" members="concealed"/>
    <class name="WLWRollbackOnCheckedException">
      <field name="ROLLBACK_ON_CHECKED_EXCEPTION"/>
    </class>
    <class name="WLWServiceControlCallbackJWS" members="concealed"/>
  </package>
  <package name="weblogic.wsee">
    <class name="WebServiceType" members="concealed"/>
  </package>
  <package name="weblogic.wsee.async">
    <class name="AsyncCallContextFactory">
      <method name="getAsyncPreCallContext()"/>
    </class>
    <class name="AsyncPostCallContext">
      <method name="getProperty(java.lang.String)"/>
      <method name="getStubName()"/>
    </class>
    <class name="AsyncPreCallContext">
      <method name="setProperty(java.lang.String,java.lang.Object)"/>
      <method name="setTimeout(long)"/>
    </class>
    <class name="AsyncSOAPInvokeState">
      <method name="isSoap12()"/>
      <method name="getServiceURI()"/>
      <method name="getMessageContextProperties()"/>
      <method name="getClonedSOAPMessage()"/>
      <method name="getSOAPMessage()"/>
    </class>
  </package>
  <package name="weblogic.wsee.client">
    <class name="ClientInterceptor">
      <method name="hasExtendedRequestContext(javax.xml.namespace.QName)"/>
      <method name="hasExtendedWebServiceFeatures(javax.xml.namespace.QName)"/>
      <method name="getExtendedRequestContext(java.util.Map,javax.xml.namespace.QName)"/>
      <method name="getTargetService()"/>
      <method name="getWebServiceFeaturesForPort(javax.xml.namespace.QName,java.util.Collection)"/>
    </class>
  </package>
  <package name="weblogic.wsee.connection.transport">
    <class name="TransportInfo" members="concealed"/>
  </package>
  <package name="weblogic.wsee.connection.transport.http">
    <class name="HttpTransportInfo">
      <method name="getPassword()"/>
      <method name="getProxyPassword()"/>
      <method name="getProxyUsername()"/>
      <method name="getUsername()"/>
      <method name="getProxy()"/>
      <method name="setPassword(byte[])"/>
      <method name="setProxy(java.net.Proxy)"/>
      <method name="setProxyPassword(byte[])"/>
      <method name="setProxyUsername(byte[])"/>
      <method name="setUsername(byte[])"/>
    </class>
  </package>
  <package name="weblogic.wsee.connection.transport.https">
    <class name="HttpsTransportInfo">
      <constructor name="HttpsTransportInfo()"/>
      <constructor name="HttpsTransportInfo(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier)"/>
      <constructor name="HttpsTransportInfo(weblogic.wsee.connection.transport.https.SSLAdapter)"/>
      <method name="getHostnameVerifier()"/>
      <method name="getKeyManagers()"/>
      <method name="getTrustManagers()"/>
      <field name="RELAXED_CHECKING_DEFAULT"/>
      <field name="STRICT_CHECKING_DEFAULT"/>
      <field name="DEFAULT_TRANSPORTINFO"/>
      <method name="setRelaxedTrustManagerDefault(boolean)"/>
      <method name="setStrictHostnameCheckDefault(boolean)"/>
      <method name="setHostnameVerifier(javax.net.ssl.HostnameVerifier)"/>
      <method name="setKeyManagers(javax.net.ssl.KeyManager[])"/>
      <method name="setSSLAdapter(weblogic.wsee.connection.transport.https.SSLAdapter)"/>
      <method name="setTrustManagers(javax.net.ssl.TrustManager[])"/>
      <method name="getSSLAdapter()"/>
    </class>
    <class name="JdkSSLAdapter">
      <method name="openConnection(java.net.URL,java.net.Proxy,weblogic.wsee.connection.transport.TransportInfo)"/>
    </class>
    <class name="SSLAdapter">
      <method name="openConnection(java.net.URL,java.net.Proxy,weblogic.wsee.connection.transport.TransportInfo)"/>
      <method name="setClientCert(java.lang.String,char[])"/>
      <method name="setKeystore(java.lang.String,char[],java.lang.String)"/>
    </class>
    <class name="SSLAdapterUtils">
      <method name="containsPEMdata(byte[])"/>
      <method name="getFileBytes(java.io.InputStream)"/>
      <field name="PEM_PREAMBLE_BYTES"/>
      <field name="PEM_PREAMBLE_STRING"/>
      <method name="openKeyStore(java.io.InputStream)"/>
    </class>
    <class name="WlsSSLAdapter">
      <constructor name="WlsSSLAdapter()"/>
      <method name="openConnection(java.net.URL,java.net.Proxy,weblogic.wsee.connection.transport.TransportInfo)"/>
      <method name="setClientCert(java.lang.String,char[])"/>
      <method name="setKeystore(java.lang.String,char[],java.lang.String)"/>
      <method name="setTrustManager(weblogic.security.SSL.TrustManager)"/>
    </class>
  </package>
  <package name="weblogic.wsee.connection.transport.jms">
    <class name="JMSServerTransport">
      <constructor name="JMSServerTransport(java.lang.String)"/>
      <method name="isReliable()"/>
      <method name="isUserInRole(java.lang.String)"/>
      <method name="receive(javax.xml.soap.MimeHeaders)"/>
      <method name="send(javax.xml.soap.MimeHeaders)"/>
      <method name="sendAuthorizationFault(javax.xml.soap.MimeHeaders)"/>
      <method name="sendAuthorizationRequiredFault(javax.xml.soap.MimeHeaders)"/>
      <method name="sendGeneralFault(javax.xml.soap.MimeHeaders)"/>
      <method name="getEndpointAddress()"/>
      <method name="getName()"/>
      <method name="getServiceURI()"/>
      <field name="uri"/>
      <method name="getUserPrincipal()"/>
      <method name="confirmOneway()"/>
    </class>
    <class name="JmsQueueConnection">
      <constructor name="JmsQueueConnection(weblogic.wsee.connection.transport.jms.JmsTransportInfo)"/>
      <method name="isAlive()"/>
      <method name="getBytesMessage()"/>
      <method name="getTextMessage()"/>
      <method name="getSender()"/>
      <field name="JNDI_FACTORY"/>
      <method name="close()"/>
      <method name="closeIgoreException()"/>
      <method name="setAlive(boolean)"/>
    </class>
    <class name="JmsQueueConnectionPool">
      <method name="getInstance()"/>
      <method name="close()"/>
      <method name="run()"/>
    </class>
    <class name="JmsServerQueueTransport">
      <constructor name="JmsServerQueueTransport(java.lang.String,javax.jms.Message,javax.jms.QueueConnectionFactory,java.lang.String,java.lang.String)"/>
      <method name="isBytesMessage()"/>
      <method name="isReliable()"/>
      <method name="isUserInRole(java.lang.String)"/>
      <method name="receive(javax.xml.soap.MimeHeaders)"/>
      <method name="send(javax.xml.soap.MimeHeaders)"/>
      <method name="sendAuthorizationFault(javax.xml.soap.MimeHeaders)"/>
      <method name="sendAuthorizationRequiredFault(javax.xml.soap.MimeHeaders)"/>
      <method name="sendGeneralFault(javax.xml.soap.MimeHeaders)"/>
      <method name="getEndpointAddress()"/>
      <method name="getName()"/>
      <method name="getServiceURI()"/>
      <method name="getUserPrincipal()"/>
      <method name="completeSend()"/>
      <method name="confirmOneway()"/>
    </class>
    <class name="JmsTransport">
      <constructor name="JmsTransport()"/>
      <method name="isBlocking()"/>
      <method name="receive(javax.xml.soap.MimeHeaders)"/>
      <method name="send(javax.xml.soap.MimeHeaders)"/>
      <method name="sendFault(javax.xml.soap.MimeHeaders)"/>
      <method name="getEndpointAddress()"/>
      <method name="getName()"/>
      <method name="getServiceURI()"/>
      <method name="confirmOneway()"/>
      <method name="connect(java.lang.String,weblogic.wsee.connection.transport.TransportInfo)"/>
      <method name="setConnectionTimeout(int)"/>
      <method name="setReadTimeout(int)"/>
    </class>
    <class name="JmsTransportInfo">
      <constructor name="JmsTransportInfo(java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isDefaultFactory()"/>
      <method name="isSendTo81()"/>
      <method name="isTransactional()"/>
      <method name="getPort()"/>
      <method name="hashCode()"/>
      <method name="getFactory()"/>
      <method name="getHost()"/>
      <method name="getJndiURL()"/>
      <method name="getPassword()"/>
      <method name="getQueue()"/>
      <method name="getServiceUri()"/>
      <method name="getUsername()"/>
      <method name="setFactory(java.lang.String)"/>
      <method name="setHost(java.lang.String)"/>
      <method name="setJndiURL(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPort(int)"/>
      <method name="setQueue(java.lang.String)"/>
      <method name="setTransactional(boolean)"/>
      <method name="setUsername(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.wsee.connection.transport.servlet">
    <class name="HttpTransportUtils">
      <method name="getHttpServletRequest(javax.xml.rpc.handler.MessageContext)"/>
      <method name="getHttpServletResponse(javax.xml.rpc.handler.MessageContext)"/>
    </class>
  </package>
  <package name="weblogic.wsee.conversation">
    <class name="ConversationIdNotYetAvailableException">
      <constructor name="ConversationIdNotYetAvailableException(java.lang.String)"/>
      <constructor name="ConversationIdNotYetAvailableException(java.lang.String,java.lang.Throwable)"/>
    </class>
    <class name="ConversationUtils">
      <field name="CONVERSATION_ID"/>
      <field name="SERVER_NAME"/>
      <method name="getConversationMethodBlockTimeout(javax.xml.rpc.Stub)"/>
      <method name="getConversationVersion(javax.xml.rpc.Stub)"/>
      <method name="getConversationAppVersion(weblogic.wsee.message.WlMessageContext)"/>
      <method name="getConversationId(javax.xml.rpc.Stub)"/>
      <method name="continueConversation(javax.xml.rpc.Stub,java.util.Map)"/>
      <method name="renewStub(javax.xml.rpc.Stub)"/>
      <method name="setConversationId(javax.xml.rpc.Stub,java.lang.String)"/>
      <method name="setConversationMethodBlockTimeout(javax.xml.rpc.Stub,int)"/>
      <method name="setConversationVersionOne(javax.xml.rpc.Stub)"/>
      <method name="setConversationVersionTwo(javax.xml.rpc.Stub)"/>
    </class>
    <class name="ConversationUtils2">
      <method name="isConversational(weblogic.wsee.wsdl.WsdlBinding)"/>
    </class>
  </package>
  <package name="weblogic.wsee.deploy">
    <class name="WsdlAddressInfo">
      <constructor name="WsdlAddressInfo()"/>
      <method name="getHost()"/>
      <method name="getImportPrefix()"/>
      <method name="getPolicyURL()"/>
      <method name="getPort()"/>
      <method name="getServiceUrl(javax.xml.namespace.QName)"/>
      <method name="getServiceUrl(javax.xml.namespace.QName,java.lang.String)"/>
      <method name="getWsdlLocation()"/>
      <method name="getServiceName()"/>
      <method name="addWsdlPort(javax.xml.namespace.QName,weblogic.wsee.deploy.WsdlAddressInfo.PortAddress)"/>
      <method name="setHost(java.lang.String)"/>
      <method name="setImportPrefix(java.lang.String)"/>
      <method name="setPolicyURL(java.lang.String)"/>
      <method name="setPort(java.lang.String)"/>
      <method name="setServiceName(javax.xml.namespace.QName)"/>
      <method name="setWsdlFilter(weblogic.wsee.wsdl.WsdlFilter)"/>
      <method name="setWsdlLocation(java.lang.String)"/>
      <method name="addWsdlPort(javax.xml.namespace.QName)"/>
      <method name="getPortAddress(javax.xml.namespace.QName)"/>
      <method name="removeWsdlPort(javax.xml.namespace.QName)"/>
      <method name="getWsdlFilter()"/>
    </class>
  </package>
  <package name="weblogic.wsee.handler">
    <class name="HandlerException">
      <constructor name="HandlerException(java.lang.String)"/>
      <constructor name="HandlerException(java.lang.String,java.lang.Throwable)"/>
    </class>
    <class name="HandlerList">
      <method name="contains(java.lang.String)"/>
      <method name="remove(java.lang.String)"/>
      <method name="insert(java.lang.String,javax.xml.rpc.handler.HandlerInfo,java.util.List,java.util.List)"/>
      <method name="lenientInsert(java.lang.String,javax.xml.rpc.handler.HandlerInfo,java.util.List,java.util.List)"/>
      <method name="size()"/>
      <method name="getName(int)"/>
      <method name="getHandlerNames()"/>
      <method name="getInfo(int)"/>
      <method name="add(java.lang.String,javax.xml.rpc.handler.HandlerInfo)"/>
      <method name="insert(java.lang.String,int,javax.xml.rpc.handler.HandlerInfo)"/>
      <method name="remove(int)"/>
    </class>
    <class name="InvocationException">
      <constructor name="InvocationException(java.lang.String)"/>
      <constructor name="InvocationException(java.lang.String,java.lang.Throwable)"/>
    </class>
  </package>
  <package name="weblogic.wsee.jaxrpc">
    <class name="WLStub">
      <field name="CONVERSATION_VERSION_ONE"/>
      <field name="CONVERSATION_VERSION_TWO"/>
      <field name="ACTION"/>
      <field name="CHARACTER_SET_ENCODING"/>
      <field name="CHECKING_SCT_EXPIRATION"/>
      <field name="COMPLEX"/>
      <field name="CONVERSATIONAL_METHOD_BLOCK_TIMEOUT"/>
      <field name="CONVERSATION_ID"/>
      <field name="CONVERSATION_VERSION_PROPERTY"/>
      <field name="ENFORCE_ASYNC_TRUST_EXCHANGE"/>
      <field name="FORCE_DOTNET_COMPATIBLE_BINDING"/>
      <field name="HANDLER_REGISTRY"/>
      <field name="HIGH_PERFORMANCE_SECURE_CONVERSATION"/>
      <field name="JMS_BYTESMESSAGE"/>
      <field name="JMS_TEXTMESSAGE"/>
      <field name="JMS_TRANSPORT_JNDI_URL"/>
      <field name="JMS_TRANSPORT_MESSAGE_TYPE"/>
      <field name="LAX_CHECKING_SCT_EXPIRATION"/>
      <field name="MARSHAL_FORCE_INCLUDE_XSI_TYPE"/>
      <field name="MARSHAL_FORCE_ORACLE1012_COMPATIBLE"/>
      <field name="POLICY_COMPATIBILITY_METRO"/>
      <field name="POLICY_COMPATIBILITY_MSFT"/>
      <field name="POLICY_COMPATIBILITY_ORDERING_PREFERENCE"/>
      <field name="POLICY_COMPATIBILITY_PREFERENCE"/>
      <field name="POLICY_COMPATIBILITY_WSSC13"/>
      <field name="POLICY_COMPATIBILITY_WSSC14"/>
      <field name="POLICY_PREFERENCE_COMPATIBILITY"/>
      <field name="POLICY_PREFERENCE_PERFORMANCE"/>
      <field name="POLICY_PREFERENCE_SECURITY"/>
      <field name="POLICY_SELECTION_PREFERENCE"/>
      <field name="PREFERENCE_COMPATIBILITY_PERFORMANCE_SECURITY"/>
      <field name="PREFERENCE_COMPATIBILITY_SECURITY_PERFORMANCE"/>
      <field name="PREFERENCE_DEFAULT"/>
      <field name="PREFERENCE_INTEROPERABILITY_PERFORMANCE_SECURITY"/>
      <field name="PREFERENCE_INTEROPERABILITY_SECURITY_PERFORMANCE"/>
      <field name="PREFERENCE_MSFT_WSSC13_WSSC14"/>
      <field name="PREFERENCE_MSFT_WSSC14_WSSC13"/>
      <field name="PREFERENCE_PERFORMANCE_COMPATIBILITY_SECURITY"/>
      <field name="PREFERENCE_PERFORMANCE_INTEROPERABILITY_SECURITY"/>
      <field name="PREFERENCE_PERFORMANCE_SECURITY_COMPATIBILITY"/>
      <field name="PREFERENCE_PERFORMANCE_SECURITY_INTEROPERABILITY"/>
      <field name="PREFERENCE_SECURITY_COMPATIBILITY_PERFORMANCE"/>
      <field name="PREFERENCE_SECURITY_INTEROPERABILITY_PERFORMANCE"/>
      <field name="PREFERENCE_SECURITY_PERFORMANCE_COMPATIBILITY"/>
      <field name="PREFERENCE_SECURITY_PERFORMANCE_INTEROPERABILITY"/>
      <field name="PREFERENCE_WSSC13_MSFT_WSSC14"/>
      <field name="PREFERENCE_WSSC13_WSSC14_MSFT"/>
      <field name="PREFERENCE_WSSC14_MSFT_WSSC13"/>
      <field name="PREFERENCE_WSSC14_WSSC13_MSFT"/>
      <field name="PROACTIVE_SCT_RENEWAL"/>
      <field name="PROXY_PASSWORD"/>
      <field name="PROXY_USERNAME"/>
      <field name="SAML_ATTRIBUTES"/>
      <field name="SAML_ATTRIBUTE_ONLY"/>
      <field name="SERVER_ENCRYPT_CERT"/>
      <field name="SERVER_VERIFY_CERT"/>
      <field name="SSL_ADAPTER"/>
      <field name="STRICT_CHECKING_SCT_EXPIRATION"/>
      <field name="STS_ENCRYPT_CERT"/>
      <field name="TOLERANT_CHECKING_SCT_EXPIRATION"/>
      <field name="TRANSPORT_SUBJECT_PROPERTY"/>
      <field name="USE_WSADDRESSING"/>
      <field name="VALIDATE_WEBSERVICE_RESPONSE"/>
      <field name="WSRM_ACKSTO_ANONYMOUS"/>
      <field name="WSRM_LAST_MESSAGE"/>
      <field name="WSRM_OFFER_SEQUENCE_EXPIRATION"/>
      <field name="WSRM_SEQUENCE_EXPIRATION"/>
      <field name="WSS_SUBJECT_PROPERTY"/>
      <field name="WST_STS_ENDPOINT_ON_SAML"/>
      <field name="WST_STS_ENDPOINT_ON_WSSC"/>
    </class>
  </package>
  <package name="weblogic.wsee.jaxws.framework.policy">
    <class name="OverrideProperty">
      <method name="getName()"/>
      <method name="getValue()"/>
    </class>
    <class name="PolicyReference">
      <method name="getEnabled()"/>
      <method name="isEnabled()"/>
      <method name="getCategory()"/>
      <method name="getPolicyURI()"/>
      <method name="getOverrideProperties()"/>
    </class>
    <class name="PolicySubjectBinding">
      <method name="getPolicyReferences()"/>
      <method name="getPolicySubjectMetadata()"/>
    </class>
    <class name="PolicySubjectMetadata">
      <method name="getApplicationName()"/>
      <method name="getModuleName()"/>
      <method name="getResourcePattern()"/>
      <method name="getSubjectName()"/>
      <method name="getPortQName()"/>
      <method name="getModuleType()"/>
      <method name="getType()"/>
    </class>
  </package>
  <package name="weblogic.wsee.jaxws.proxy">
    <class name="ClientProxyFeature">
      <method name="isIgnoreSystemNonProxyHosts()"/>
      <method name="isUseSunHttpHandler()"/>
      <method name="isUsedInPort()"/>
      <method name="getProxyPort()"/>
      <method name="getID()"/>
      <method name="getProxyHost()"/>
      <method name="getProxyPassword()"/>
      <method name="getProxyUserName()"/>
      <method name="getType()"/>
      <field name="ID"/>
      <method name="attachsPort(java.lang.Object)"/>
      <method name="setIgnoreSystemNonProxyHosts(boolean)"/>
      <method name="setProxyHost(java.lang.String)"/>
      <method name="setProxyPassword(java.lang.String)"/>
      <method name="setProxyPort(int)"/>
      <method name="setProxyUserName(java.lang.String)"/>
      <method name="setType(java.net.Proxy.Type)"/>
      <method name="setUseSunHttpHandler(boolean)"/>
    </class>
  </package>
  <package name="weblogic.wsee.jws">
    <class name="CallbackInterface">
      <method name="getTimeout()"/>
      <method name="getConversationID()"/>
      <method name="getEndpointAddress()"/>
      <method name="getPassword()"/>
      <method name="getUsername()"/>
      <method name="getEndPoint()"/>
      <method name="getInputHeaders()"/>
      <field name="serialVersionUID"/>
      <method name="reset()"/>
      <method name="setClientCert(java.lang.String,java.lang.String)"/>
      <method name="setEndPoint(java.net.URL)"/>
      <method name="setEndpointAddress(java.lang.String)"/>
      <method name="setKeystore(java.lang.String,java.lang.String)"/>
      <method name="setKeystore(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="setOutputHeaders(org.w3c.dom.Element[])"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setProtocol(weblogic.wsee.jws.Protocol)"/>
      <method name="setTimeout(int)"/>
      <method name="setTruststore(java.lang.String,java.lang.String)"/>
      <method name="setTruststore(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="setUsername(java.lang.String)"/>
      <method name="useClientKeySSL(boolean)"/>
      <method name="getProtocol()"/>
    </class>
    <class name="HandlerException">
      <constructor name="HandlerException(java.lang.String)"/>
      <constructor name="HandlerException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="HandlerException(java.lang.Throwable)"/>
    </class>
    <class name="JwsContext">
      <method name="getUnderstoodInputHeaders()"/>
      <method name="isCallerInRole(java.lang.String)"/>
      <method name="isFinished()"/>
      <method name="getCallerPrincipal()"/>
      <method name="getMessageContext()"/>
      <method name="getCurrentAge()"/>
      <method name="getCurrentIdleTime()"/>
      <method name="getMaxAge()"/>
      <method name="getMaxIdleTime()"/>
      <method name="getInputHeaders()"/>
      <method name="finishConversation()"/>
      <method name="resetIdleTime()"/>
      <method name="setMaxAge(java.lang.String)"/>
      <method name="setMaxAge(java.util.Date)"/>
      <method name="setMaxIdleTime(java.lang.String)"/>
      <method name="setMaxIdleTime(long)"/>
      <method name="setOutputHeaders(org.w3c.dom.Element[])"/>
      <method name="setUnderstoodInputHeaders(boolean)"/>
      <method name="getProtocol()"/>
      <method name="getService()"/>
      <method name="getLogger(java.lang.String)"/>
    </class>
    <class name="Protocol">
      <method name="getID()"/>
      <method name="getName()"/>
      <method name="toString()"/>
      <method name="isSoap(weblogic.wsee.jws.Protocol)"/>
      <method name="isSoap11(weblogic.wsee.jws.Protocol)"/>
      <method name="isSoap12(weblogic.wsee.jws.Protocol)"/>
      <field name="ID_HTTP_GET"/>
      <field name="ID_HTTP_POST"/>
      <field name="ID_HTTP_SOAP"/>
      <field name="ID_HTTP_SOAP12"/>
      <field name="ID_HTTP_XML"/>
      <field name="ID_JMS_SOAP"/>
      <field name="ID_JMS_SOAP12"/>
      <field name="ID_JMS_XML"/>
      <field name="SCHEME_HTTP"/>
      <field name="SCHEME_JAVA"/>
      <field name="SCHEME_JMS"/>
      <field name="HTTP_GET"/>
      <field name="HTTP_POST"/>
      <field name="HTTP_SOAP"/>
      <field name="HTTP_SOAP12"/>
      <field name="HTTP_XML"/>
      <field name="JAVA"/>
      <field name="JMS_SOAP"/>
      <field name="JMS_SOAP12"/>
      <field name="JMS_XML"/>
      <method name="getSchemeForProtocol(weblogic.wsee.jws.Protocol)"/>
      <method name="getProtocol(boolean,java.lang.String)"/>
      <method name="getProtocolByID(int)"/>
      <method name="getProtocolByName(java.lang.String)"/>
    </class>
    <class name="RetryException">
      <constructor name="RetryException(java.lang.String)"/>
      <constructor name="RetryException(java.lang.String,java.lang.String)"/>
      <constructor name="RetryException(java.lang.String,long)"/>
      <method name="getRetryDelay()"/>
      <field name="DEFAULT_DELAY"/>
    </class>
    <class name="ServiceHandle">
      <method name="getScheme()"/>
      <method name="getContextURI()"/>
      <method name="getControlID()"/>
      <method name="getConversationID()"/>
      <method name="getJNDIBaseName()"/>
      <method name="getURI()"/>
      <method name="getURL()"/>
      <method name="getURL(int)"/>
      <field name="SCHEME_DEFAULT"/>
      <field name="SCHEME_FILE"/>
      <field name="SCHEME_FTP"/>
      <field name="SCHEME_HTTP"/>
      <field name="SCHEME_JMS"/>
      <field name="SCHEME_SMTP"/>
    </class>
    <class name="SoapFaultException">
      <method name="hasDetail()"/>
      <method name="hasFault()"/>
      <method name="isCausedBySender()"/>
      <method name="soapFaultVersion()"/>
      <field name="FAULT_SOAP11"/>
      <field name="FAULT_SOAP12"/>
      <field name="FAULT_UNKNOWN"/>
      <method name="setCausedBySender(boolean)"/>
    </class>
  </package>
  <package name="weblogic.wsee.jws.jaxws.owsm">
    <class name="PolicySubjectBindingFeature">
      <constructor name="PolicySubjectBindingFeature(weblogic.wsee.jaxws.framework.policy.PolicySubjectBinding)"/>
      <method name="hasPolicyReferences()"/>
      <method name="getID()"/>
      <method name="getPolicyReferences()"/>
      <method name="create(java.util.List,weblogic.wsee.jaxws.framework.policy.PolicySubjectMetadata)"/>
      <method name="create(weblogic.wsee.jaxws.framework.policy.PolicyReference[],weblogic.wsee.jaxws.framework.policy.PolicySubjectMetadata)"/>
      <method name="createFeature(java.util.List,weblogic.wsee.jaxws.framework.policy.PolicySubjectMetadata)"/>
      <method name="getPolicySubjectBinding()"/>
    </class>
    <class name="Property" members="concealed"/>
    <class name="PropertyFeature">
      <constructor name="PropertyFeature(java.lang.String,java.lang.String)"/>
      <method name="getID()"/>
      <method name="getName()"/>
      <method name="getValue()"/>
      <field name="ID"/>
    </class>
    <class name="SecurityPolicies" members="concealed"/>
    <class name="SecurityPoliciesFeature">
      <constructor name="SecurityPoliciesFeature(boolean,weblogic.wsee.jws.jaxws.owsm.SecurityPolicy[])"/>
      <constructor name="SecurityPoliciesFeature(java.lang.String[])"/>
      <method name="getID()"/>
      <method name="getPolicies()"/>
      <field name="ID"/>
    </class>
    <class name="SecurityPolicy" members="concealed"/>
    <class name="SecurityPolicyFeature">
      <constructor name="SecurityPolicyFeature(boolean,java.lang.String)"/>
      <constructor name="SecurityPolicyFeature(boolean,java.lang.String,weblogic.wsee.jws.jaxws.owsm.Property[])"/>
      <constructor name="SecurityPolicyFeature(java.lang.String)"/>
      <method name="getID()"/>
      <method name="getSeedPolicyName()"/>
      <method name="getUri()"/>
      <method name="getProperties()"/>
      <method name="getPropertyMap()"/>
      <field name="ID"/>
      <method name="addPropertyFeature(weblogic.wsee.jws.jaxws.owsm.PropertyFeature)"/>
    </class>
  </package>
  <package name="weblogic.wsee.jws.util">
    <class name="Logger">
      <method name="isDebugEnabled()"/>
      <method name="isErrorEnabled()"/>
      <method name="isWarnEnabled()"/>
      <method name="debug(java.lang.String)"/>
      <method name="debug(java.lang.String,java.lang.Throwable)"/>
      <method name="error(java.lang.String)"/>
      <method name="error(java.lang.String,java.lang.Throwable)"/>
      <method name="info(java.lang.String)"/>
      <method name="info(java.lang.String,java.lang.Throwable)"/>
      <method name="warn(java.lang.String)"/>
      <method name="warn(java.lang.String,java.lang.Throwable)"/>
    </class>
  </package>
  <package name="weblogic.wsee.jws.wlw">
    <class name="SoapFaultException">
      <constructor name="SoapFaultException(org.apache.xmlbeans.XmlObject,java.lang.String)"/>
      <constructor name="SoapFaultException(org.apache.xmlbeans.XmlObject)"/>
      <constructor name="SoapFaultException(org.apache.xmlbeans.XmlObject[])"/>
      <method name="hasDetail()"/>
      <method name="hasFault()"/>
      <method name="isCausedBySender()"/>
      <method name="soapFaultVersion()"/>
      <method name="getFault()"/>
      <method name="getDetail()"/>
      <field name="FAULT_SOAP11"/>
      <field name="FAULT_SOAP12"/>
      <field name="FAULT_UNKNOWN"/>
      <method name="setCausedBySender(boolean)"/>
    </class>
  </package>
  <package name="weblogic.wsee.message">
    <class name="MsgHeader">
      <method name="getCurrentSoapEnvelopeNamespace()"/>
      <method name="addStandardNamespaces(org.w3c.dom.Element)"/>
      <method name="hasDuplicated()"/>
      <method name="isMultiple()"/>
      <method name="isMustUnderstand()"/>
      <method name="isRefParam()"/>
      <method name="getRole()"/>
      <method name="toString()"/>
      <method name="getName()"/>
      <method name="writeToParent(org.w3c.dom.Element)"/>
      <method name="read(org.w3c.dom.Element)"/>
      <method name="setDuplicated(boolean)"/>
      <method name="setMustUnderstand(boolean)"/>
      <method name="setRefParam(boolean)"/>
      <method name="setRole(java.lang.String)"/>
      <method name="toString(weblogic.wsee.util.ToStringWriter)"/>
      <method name="write(org.w3c.dom.Element)"/>
      <method name="getType()"/>
    </class>
    <class name="MsgHeaderException">
      <constructor name="MsgHeaderException(java.lang.String)"/>
      <constructor name="MsgHeaderException(java.lang.String,java.lang.Throwable)"/>
    </class>
    <class name="MsgHeaderType">
      <constructor name="MsgHeaderType()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
    </class>
    <class name="MsgHeaders">
      <method name="isEmpty()"/>
      <method name="listHeaders()"/>
      <method name="addHeader(weblogic.wsee.message.MsgHeader)"/>
      <method name="addHeaders(org.w3c.dom.NodeList)"/>
      <method name="getHeader(weblogic.wsee.message.MsgHeaderType)"/>
    </class>
    <class name="WlMessageContext">
      <constructor name="WlMessageContext()"/>
      <method name="containsProperty(java.lang.String)"/>
      <method name="hasFault()"/>
      <field name="propertyMap"/>
      <method name="getProperty(java.lang.String)"/>
      <field name="fault"/>
      <method name="getFault()"/>
      <method name="getPropertyNames()"/>
      <field name="APPLICATION_ID"/>
      <field name="CONTEXT_PATH"/>
      <field name="DK_LABEL_PROPERTY"/>
      <field name="DK_LENGTH_PROPERTY"/>
      <field name="END_POINT_ADDRESS"/>
      <field name="END_POINT_URI"/>
      <field name="INCOMING_FAULT_MSG"/>
      <field name="IS_CLIENT_CERT_REQUIRED"/>
      <field name="IS_MTOM_ENABLE_IN_JAXWS"/>
      <field name="IS_SECURE_SERVLET_REQUEST"/>
      <field name="MTOM_MESSAGE_RECVD"/>
      <field name="MTOM_THRESHOLD"/>
      <field name="SAML_CREDENTIAL"/>
      <field name="SCT_LIFETIME_PROPERTY"/>
      <field name="SECURITY_CONTEXT_CREDENTIAL"/>
      <field name="SECURITY_REALM"/>
      <field name="SERVICE_NAME"/>
      <field name="SERVICE_URI"/>
      <field name="SERVLET_REQUEST"/>
      <field name="SERVLET_RESPONSE"/>
      <field name="STREAM_ATTACHMENTS"/>
      <field name="STS_ENDPOINT_ADDRESS_PROPERTY"/>
      <field name="TRANSPORT_HEADERS"/>
      <field name="VALIDATE_REQUEST"/>
      <field name="WSS_MESSAGE_AGE"/>
      <field name="WST_BOOT_STRAP_POLICY"/>
      <method name="narrow(javax.xml.rpc.handler.MessageContext)"/>
      <method name="removeProperty(java.lang.String)"/>
      <method name="setFault(java.lang.Throwable)"/>
      <method name="setHeaders(weblogic.wsee.message.MsgHeaders)"/>
      <method name="setProperty(java.lang.String,java.lang.Object)"/>
      <method name="getHeaders()"/>
    </class>
  </package>
  <package name="weblogic.wsee.message.soap">
    <class name="SoapMessageContext">
      <constructor name="SoapMessageContext()"/>
      <constructor name="SoapMessageContext(boolean)"/>
      <method name="hasFault()"/>
      <method name="isSoap12()"/>
      <method name="toString()"/>
      <method name="getRoles()"/>
      <method name="getMessageFactory()"/>
      <method name="clearMessage()"/>
      <method name="clearMessage(boolean)"/>
      <method name="getMessage()"/>
      <field name="msg"/>
      <method name="setFault(java.lang.Throwable)"/>
      <method name="setMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="toString(weblogic.wsee.util.ToStringWriter)"/>
    </class>
    <class name="SoapMsgHeaders">
      <constructor name="SoapMsgHeaders(javax.xml.soap.SOAPMessage)"/>
      <constructor name="SoapMsgHeaders(org.w3c.dom.Element)"/>
      <method name="getMustUnderstand(org.w3c.dom.Element)"/>
      <method name="isEmpty()"/>
      <method name="getActor(org.w3c.dom.Element)"/>
      <method name="listHeaders()"/>
      <method name="addHeader(weblogic.wsee.message.MsgHeader)"/>
      <method name="addHeaders(org.w3c.dom.NodeList)"/>
      <method name="replaceHeader(weblogic.wsee.message.MsgHeader)"/>
      <method name="setActor(org.w3c.dom.Element,java.lang.String)"/>
      <method name="setMustUnderstand(org.w3c.dom.Element,boolean)"/>
      <method name="getHeader(weblogic.wsee.message.MsgHeaderType)"/>
    </class>
  </package>
  <package name="weblogic.wsee.policy.deployment">
    <class name="PolicyURIs">
      <method name="replaceURIWithId(java.net.URI,weblogic.wsee.wsdl.WsdlWriter)"/>
      <constructor name="PolicyURIs(java.lang.String)"/>
      <constructor name="PolicyURIs(java.lang.String[])"/>
      <constructor name="PolicyURIs(java.net.URI)"/>
      <constructor name="PolicyURIs(java.net.URI[])"/>
      <method name="getKey()"/>
      <method name="toString()"/>
      <method name="getURIs()"/>
      <method name="addURI(java.net.URI)"/>
      <method name="removeURI(java.net.URI)"/>
      <method name="write(org.w3c.dom.Element,weblogic.wsee.wsdl.WsdlWriter)"/>
    </class>
  </package>
  <package name="weblogic.wsee.policy.framework">
    <class name="NormalizedExpression">
      <constructor name="NormalizedExpression()"/>
      <constructor name="NormalizedExpression(java.lang.String)"/>
      <method name="containsPolicyAssertion(java.lang.Class)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isEmpty()"/>
      <method name="isUninitialized()"/>
      <method name="hashCode()"/>
      <method name="getPolicyNamespaceUri()"/>
      <field name="policyNamespaceUri"/>
      <method name="getPolicyAlternatives()"/>
      <method name="getPolicyAlternatives(java.lang.Class)"/>
      <method name="getPolicyAlternatives(weblogic.wsee.policy.framework.PolicyAssertion)"/>
      <method name="createEmptyExpression()"/>
      <method name="createFromPolicyAlternatives(java.util.Set)"/>
      <method name="createUnitializedExpression()"/>
      <method name="addAlternative(weblogic.wsee.policy.framework.PolicyAlternative)"/>
      <method name="addAlternatives(java.util.Set)"/>
      <method name="readExternal(java.io.ObjectInput)"/>
      <method name="setPolicyNamespaceUri(java.lang.String)"/>
      <method name="writeExternal(java.io.ObjectOutput)"/>
      <method name="getPolicyAlternative()"/>
      <method name="getPolicyAssertion(java.lang.Class)"/>
      <method name="toCompactForm(java.lang.String)"/>
    </class>
    <class name="OperatorType">
      <constructor name="OperatorType()"/>
      <method name="toString()"/>
      <field name="ALL"/>
      <field name="EXACTLY_ONE"/>
      <field name="ONE_OR_MORE"/>
      <field name="TERMINAL"/>
      <method name="readExternal(java.io.ObjectInput)"/>
      <method name="writeExternal(java.io.ObjectOutput)"/>
    </class>
    <class name="PolicyAlternative">
      <constructor name="PolicyAlternative()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isEmpty()"/>
      <method name="isTrue(weblogic.wsee.policy.framework.PolicyAssertion)"/>
      <method name="hashCode()"/>
      <method name="toString()"/>
      <method name="getAssertions()"/>
      <method name="getAssertions(java.lang.Class)"/>
      <field name="EMPTY_ALTERNATIVE"/>
      <method name="readExternal(java.io.ObjectInput)"/>
      <method name="writeExternal(java.io.ObjectOutput)"/>
      <method name="clone()"/>
    </class>
    <class name="PolicyAssertion">
      <method name="write(org.w3c.dom.Element,weblogic.wsee.wsdl.WsdlWriter)"/>
      <method name="getOptional()"/>
      <method name="isOptional()"/>
      <field name="optional"/>
      <method name="getPolicyNamespaceUri()"/>
      <field name="policyNamespaceUri"/>
      <method name="getName()"/>
      <method name="serialize(org.w3c.dom.Document)"/>
      <method name="readExternal(java.io.ObjectInput)"/>
      <method name="setOptional(boolean)"/>
      <method name="setPolicyNamespaceUri(java.lang.String)"/>
      <method name="setPolicySubject(weblogic.wsee.policy.framework.PolicyAssertion.PolicySubject)"/>
      <method name="writeExternal(java.io.ObjectOutput)"/>
      <method name="getPolicySubject()"/>
    </class>
    <class name="PolicyException">
      <constructor name="PolicyException()"/>
      <constructor name="PolicyException(java.lang.String)"/>
      <constructor name="PolicyException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="PolicyException(java.lang.Throwable)"/>
      <method name="toString()"/>
    </class>
    <class name="PolicyExpression">
      <constructor name="PolicyExpression(weblogic.wsee.policy.framework.OperatorType)"/>
      <constructor name="PolicyExpression(weblogic.wsee.policy.framework.OperatorType,weblogic.wsee.policy.framework.PolicyAssertion)"/>
      <method name="toXML(org.w3c.dom.Document)"/>
      <method name="write(org.w3c.dom.Element,weblogic.wsee.wsdl.WsdlWriter)"/>
      <constructor name="PolicyExpression()"/>
      <method name="isTerminal()"/>
      <method name="getPolicyNamespaceUri()"/>
      <field name="policyNamespaceUri"/>
      <method name="toString()"/>
      <field name="expressions"/>
      <method name="getExpressions()"/>
      <method name="createExpression(weblogic.wsee.policy.framework.OperatorType)"/>
      <method name="createTerminal(weblogic.wsee.policy.framework.PolicyAssertion)"/>
      <method name="addExpression(weblogic.wsee.policy.framework.PolicyExpression)"/>
      <method name="addExpressions(java.util.Collection)"/>
      <method name="readExternal(java.io.ObjectInput)"/>
      <method name="resetExpressions()"/>
      <method name="setAssertion(weblogic.wsee.policy.framework.PolicyAssertion)"/>
      <method name="setPolicyNamespaceUri(java.lang.String)"/>
      <method name="writeExternal(java.io.ObjectOutput)"/>
      <method name="normalize()"/>
      <field name="operator"/>
      <field name="assertion"/>
      <method name="getAssertion()"/>
    </class>
    <class name="PolicyStatement">
      <constructor name="PolicyStatement(java.lang.String)"/>
      <constructor name="PolicyStatement()"/>
      <constructor name="PolicyStatement(java.lang.String,java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isHasUnresolvedReferences()"/>
      <method name="hashCode()"/>
      <method name="getId()"/>
      <field name="id"/>
      <method name="toString()"/>
      <method name="toXML()"/>
      <method name="toXML(org.w3c.dom.Document)"/>
      <method name="createPolicyStatement(java.lang.String)"/>
      <method name="readExternal(java.io.ObjectInput)"/>
      <method name="setHasUnresolvedReferences(boolean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="write(org.w3c.dom.Element,weblogic.wsee.wsdl.WsdlWriter)"/>
      <method name="writeExternal(java.io.ObjectOutput)"/>
    </class>
  </package>
  <package name="weblogic.wsee.reliability">
    <class name="MessageRange">
      <constructor name="MessageRange(long,long)"/>
      <field name="lowerBounds"/>
      <field name="upperBounds"/>
      <method name="compareTo(java.lang.Object)"/>
    </class>
    <class name="ReliabilityErrorContext">
      <method name="getFaultSummaryMessage()"/>
      <method name="getOperationName()"/>
      <method name="getTargetName()"/>
      <method name="getFaults()"/>
      <method name="getSOAPMessage()"/>
      <method name="getAsyncPostCallContext()"/>
      <method name="getFault()"/>
    </class>
    <class name="ReliabilityErrorListener">
      <method name="onReliabilityError(weblogic.wsee.reliability.ReliabilityErrorContext)"/>
    </class>
    <class name="ReliabilityErrorListenerRegistry">
      <method name="getInstance()"/>
      <method name="registerListener(java.lang.String,weblogic.wsee.reliability.ReliabilityErrorListener)"/>
      <method name="getListener(java.lang.String)"/>
      <method name="unregisterListener(java.lang.String)"/>
    </class>
    <class name="ReliableDeliveryException">
      <constructor name="ReliableDeliveryException(java.lang.String)"/>
    </class>
    <class name="WsrmConstants">
      <field name="ACKNOWLEDGEMENT_INTERVAL"/>
      <field name="BASE_RETRANSMISSION_INTERVAL"/>
      <field name="BUFFER_QUEUE_JNDI_NAME"/>
      <field name="BUFFER_QUEUE_MDB_RUNAS_PRINCIPAL_NAME"/>
      <field name="FORCE_WSRM_1_0_CLIENT"/>
      <field name="INACTIVITY_TIMEOUT"/>
      <field name="NON_BUFFERED_DESTINATION"/>
      <field name="NON_BUFFERED_SOURCE"/>
      <field name="ORACLE_RM_PREFIX"/>
      <field name="RETRANSMISSION_EXPONENTIAL_BACKOFF"/>
      <field name="RETRY_COUNT"/>
      <field name="RETRY_DELAY"/>
      <field name="RM_VERSION"/>
      <field name="SEQUENCE_EXPIRATION"/>
      <field name="SEQUENCE_STR"/>
      <field name="SEQUENCE_TRANSPORT_SECURITY"/>
      <field name="PROP_NAMES_FOR_RM_DESTINATION"/>
      <field name="PROP_NAMES_FOR_RM_DESTINATION_ONLY"/>
      <field name="PROP_NAMES_FOR_RM_SOURCE"/>
      <field name="PROP_NAMES_FOR_RM_SOURCE_ONLY"/>
      <field name="PROP_NAMES_FOR_RM_SOURCE_OR_DESTINATION"/>
    </class>
    <class name="WsrmHelper">
      <method name="sendFault(javax.xml.rpc.handler.soap.SOAPMessageContext,weblogic.wsee.reliability.faults.WsrmFaultMsg)"/>
    </class>
    <class name="WsrmUtils">
      <method name="checkIsPiggyback(javax.xml.rpc.handler.soap.SOAPMessageContext,weblogic.wsee.reliability.WsrmConstants.Action)"/>
      <method name="isAnonymousAck(javax.xml.rpc.Stub)"/>
      <method name="isFinalMessage(javax.xml.rpc.Stub)"/>
      <method name="isLastMessage(javax.xml.rpc.Stub)"/>
      <method name="isSequenceInitialized(javax.xml.rpc.Stub)"/>
      <method name="getSequenceId(javax.xml.rpc.Stub)"/>
      <method name="waitForSequenceInitialization(javax.xml.rpc.Stub,long,long)"/>
      <method name="getExpires(javax.xml.rpc.Stub)"/>
      <method name="getOfferExpires(javax.xml.rpc.Stub)"/>
      <method name="closeSequence(javax.xml.rpc.Stub)"/>
      <method name="printSoapMsg(javax.xml.soap.SOAPMessage)"/>
      <method name="reset(javax.xml.rpc.Stub)"/>
      <method name="sendEmptyLastMessage(javax.xml.rpc.Stub)"/>
      <method name="setAnonymousAck(javax.xml.rpc.Stub)"/>
      <method name="setExpires(javax.xml.rpc.Stub,javax.xml.datatype.Duration)"/>
      <method name="setFinalMessage(javax.xml.rpc.Stub)"/>
      <method name="setLastMessage(javax.xml.rpc.Stub)"/>
      <method name="setOfferExpires(javax.xml.rpc.Stub,javax.xml.datatype.Duration)"/>
      <method name="terminateSequence(javax.xml.rpc.Stub)"/>
    </class>
  </package>
  <package name="weblogic.wsee.reliability.faults">
    <class name="SequenceFaultException">
      <constructor name="SequenceFaultException(java.lang.String)"/>
      <constructor name="SequenceFaultException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="SequenceFaultException(weblogic.wsee.reliability.faults.SequenceFaultMsg)"/>
      <method name="getSequenceId()"/>
      <method name="getMsg()"/>
    </class>
    <class name="SequenceFaultMsg">
      <constructor name="SequenceFaultMsg(weblogic.wsee.reliability.WsrmConstants.RMVersion,weblogic.wsee.reliability.WsrmConstants.FaultGeneratedBy,weblogic.wsee.reliability.WsrmConstants.FaultCode,java.lang.String,java.lang.String,weblogic.wsee.reliability.faults.SequenceFaultMsgType)"/>
      <method name="getSequenceId()"/>
      <method name="toString()"/>
      <method name="read(javax.xml.soap.SOAPMessage)"/>
      <method name="readDetail(org.w3c.dom.Element)"/>
      <method name="setSequenceId(java.lang.String)"/>
      <method name="write(javax.xml.soap.SOAPMessage)"/>
      <method name="writeDetail(org.w3c.dom.Element)"/>
      <method name="getGeneratedBy()"/>
    </class>
    <class name="SequenceFaultMsgType">
      <constructor name="SequenceFaultMsgType()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
    </class>
    <class name="WsrmFaultException">
      <constructor name="WsrmFaultException(java.lang.String)"/>
      <constructor name="WsrmFaultException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="WsrmFaultException(weblogic.wsee.reliability.faults.WsrmFaultMsg)"/>
      <method name="toString()"/>
      <method name="getWsrmFaultMsg()"/>
    </class>
    <class name="WsrmFaultMsg">
      <constructor name="WsrmFaultMsg(weblogic.wsee.reliability.WsrmConstants.RMVersion,weblogic.wsee.reliability.WsrmConstants.FaultCode,java.lang.String,java.lang.String,weblogic.wsee.reliability.faults.SequenceFaultMsgType)"/>
      <method name="getCodeLocalName(weblogic.wsee.reliability.WsrmConstants.SOAPVersion)"/>
      <method name="getCodeQualifiedName(weblogic.wsee.reliability.WsrmConstants.SOAPVersion)"/>
      <method name="getReason()"/>
      <method name="getSubCodeLocalName()"/>
      <method name="getSubCodeQualifiedName()"/>
      <field name="reason"/>
      <field name="subCode"/>
      <method name="toString()"/>
      <method name="getCodeQName(weblogic.wsee.reliability.WsrmConstants.SOAPVersion)"/>
      <method name="getSubCodeQName()"/>
      <method name="getSubCodeQNames(java.lang.Class)"/>
      <method name="getSubCodeQName(java.lang.Class,weblogic.wsee.reliability.WsrmConstants.RMVersion)"/>
      <method name="read(javax.xml.soap.SOAPMessage)"/>
      <method name="readDetail(org.w3c.dom.Element)"/>
      <method name="setReason(java.lang.String)"/>
      <method name="write(javax.xml.soap.SOAPMessage)"/>
      <method name="writeDetail(org.w3c.dom.Element)"/>
      <field name="code"/>
      <method name="getCode()"/>
      <method name="getRmVersion()"/>
      <method name="getType()"/>
      <field name="type"/>
    </class>
  </package>
  <package name="weblogic.wsee.reliability2">
    <class name="MessageRange">
      <constructor name="MessageRange(long,long)"/>
      <field name="lowerBounds"/>
      <field name="upperBounds"/>
      <method name="compareTo(java.lang.Object)"/>
    </class>
    <class name="WsrmConstants">
      <field name="ACKNOWLEDGEMENT_INTERVAL"/>
      <field name="BASE_RETRANSMISSION_INTERVAL"/>
      <field name="BUFFER_QUEUE_JNDI_NAME"/>
      <field name="BUFFER_QUEUE_MDB_RUNAS_PRINCIPAL_NAME"/>
      <field name="FORCE_WSRM_1_0_CLIENT"/>
      <field name="INACTIVITY_TIMEOUT"/>
      <field name="NON_BUFFERED_DESTINATION"/>
      <field name="NON_BUFFERED_SOURCE"/>
      <field name="ORACLE_RM_PREFIX"/>
      <field name="RETRANSMISSION_EXPONENTIAL_BACKOFF"/>
      <field name="RETRY_COUNT"/>
      <field name="RETRY_DELAY"/>
      <field name="RM_VERSION"/>
      <field name="SEQUENCE_EXPIRATION"/>
      <field name="SEQUENCE_STR"/>
      <field name="SEQUENCE_TRANSPORT_SECURITY"/>
      <field name="USE_SESSION_MANAGER_PROP"/>
      <field name="PROP_NAMES_FOR_RM_DESTINATION"/>
      <field name="PROP_NAMES_FOR_RM_DESTINATION_ONLY"/>
      <field name="PROP_NAMES_FOR_RM_SOURCE"/>
      <field name="PROP_NAMES_FOR_RM_SOURCE_ONLY"/>
      <field name="PROP_NAMES_FOR_RM_SOURCE_OR_DESTINATION"/>
    </class>
  </package>
  <package name="weblogic.wsee.reliability2.api">
    <class name="ReliabilityErrorContext">
      <method name="getRequest(javax.xml.bind.JAXBContext,java.lang.Class)"/>
      <method name="isRequestSpecific()"/>
      <method name="getFaultSummaryMessage()"/>
      <method name="getOperationName()"/>
      <method name="getFaults()"/>
      <method name="getUserRequestContextProperties()"/>
      <method name="getRequestStreamReader()"/>
    </class>
    <class name="ReliabilityErrorListener">
      <method name="onReliabilityError(weblogic.wsee.reliability2.api.ReliabilityErrorContext)"/>
    </class>
    <class name="SequenceState">
      <method name="isValidTransition(weblogic.wsee.reliability2.api.SequenceState)"/>
      <method name="isClosedState(weblogic.wsee.reliability2.api.SequenceState)"/>
      <method name="isTerminalState(weblogic.wsee.reliability2.api.SequenceState)"/>
    </class>
    <class name="WsrmClient">
      <method name="getId()"/>
      <method name="getSequenceId()"/>
      <method name="getAckRanges()"/>
      <method name="getMostRecentMessageNumber()"/>
      <method name="closeSequence()"/>
      <method name="dispose()"/>
      <method name="requestAcknowledgement()"/>
      <method name="reset()"/>
      <method name="sendWsrm10EmptyLastMessage()"/>
      <method name="setFinalMessage()"/>
      <method name="setSequenceId(java.lang.String)"/>
      <method name="terminateSequence()"/>
      <method name="getSequenceState()"/>
      <method name="getMessageInfo(long)"/>
    </class>
    <class name="WsrmClientFactory">
      <method name="isWsrmClientEnabledOnPort(java.lang.Object)"/>
      <method name="getWsrmClientFromPort(java.lang.Object)"/>
    </class>
  </package>
  <package name="weblogic.wsee.reliability2.exception">
    <class name="WsrmException">
      <constructor name="WsrmException(java.lang.String)"/>
      <constructor name="WsrmException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="WsrmException(java.lang.Throwable)"/>
    </class>
  </package>
  <package name="weblogic.wsee.reliability2.faults">
    <class name="SequenceFaultException">
      <constructor name="SequenceFaultException(java.lang.String)"/>
      <constructor name="SequenceFaultException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="SequenceFaultException(weblogic.wsee.reliability2.faults.SequenceFaultMsg)"/>
      <method name="getSequenceId()"/>
      <method name="getMsg()"/>
    </class>
    <class name="SequenceFaultMsg">
      <constructor name="SequenceFaultMsg(weblogic.wsee.reliability2.WsrmConstants.RMVersion,weblogic.wsee.reliability2.WsrmConstants.FaultGeneratedBy,weblogic.wsee.reliability2.WsrmConstants.FaultCode,java.lang.String,java.lang.String,weblogic.wsee.reliability2.faults.SequenceFaultMsgType)"/>
      <method name="getSequenceId()"/>
      <method name="toString()"/>
      <method name="read(javax.xml.soap.SOAPMessage)"/>
      <method name="readDetail(org.w3c.dom.Element)"/>
      <method name="setSequenceId(java.lang.String)"/>
      <method name="write(javax.xml.soap.SOAPMessage)"/>
      <method name="writeDetail(org.w3c.dom.Element)"/>
      <method name="getGeneratedBy()"/>
    </class>
    <class name="SequenceFaultMsgType">
      <constructor name="SequenceFaultMsgType()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
    </class>
    <class name="WsrmFaultException">
      <constructor name="WsrmFaultException(java.lang.String)"/>
      <constructor name="WsrmFaultException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="WsrmFaultException(weblogic.wsee.reliability2.faults.WsrmFaultMsg)"/>
      <method name="toString()"/>
      <method name="getWsrmFaultMsg()"/>
    </class>
    <class name="WsrmFaultMsg">
      <constructor name="WsrmFaultMsg(weblogic.wsee.reliability2.WsrmConstants.RMVersion,weblogic.wsee.reliability2.WsrmConstants.FaultCode,java.lang.String,java.lang.String,weblogic.wsee.reliability2.faults.SequenceFaultMsgType)"/>
      <method name="getCodeLocalName(weblogic.wsee.reliability2.WsrmConstants.SOAPVersion)"/>
      <method name="getCodeQualifiedName(weblogic.wsee.reliability2.WsrmConstants.SOAPVersion)"/>
      <method name="getReason()"/>
      <method name="getSubCodeLocalName()"/>
      <method name="getSubCodeQualifiedName()"/>
      <field name="reason"/>
      <field name="subCode"/>
      <method name="toString()"/>
      <method name="getCodeQName(weblogic.wsee.reliability2.WsrmConstants.SOAPVersion)"/>
      <method name="getSubCodeQName()"/>
      <method name="getSubCodeQNames(java.lang.Class)"/>
      <method name="getSubCodeQName(java.lang.Class,weblogic.wsee.reliability2.WsrmConstants.RMVersion)"/>
      <method name="read(javax.xml.soap.SOAPMessage)"/>
      <method name="readDetail(org.w3c.dom.Element)"/>
      <method name="setReason(java.lang.String)"/>
      <method name="write(javax.xml.soap.SOAPMessage)"/>
      <method name="writeDetail(org.w3c.dom.Element)"/>
      <field name="code"/>
      <method name="getCode()"/>
      <method name="getRmVersion()"/>
      <method name="getType()"/>
      <field name="type"/>
    </class>
  </package>
  <package name="weblogic.wsee.reliability2.sequence">
    <class name="CreateSequencePostSecurityTokenCallback">
      <field name="PROPERTY_NAME"/>
      <method name="processCallback(javax.xml.rpc.handler.MessageContext)"/>
      <method name="execute(javax.xml.rpc.handler.MessageContext)"/>
    </class>
    <class name="MessageInfo">
      <constructor name="MessageInfo(java.lang.String,java.lang.String,long,java.lang.String)"/>
      <constructor name="MessageInfo(weblogic.wsee.reliability2.sequence.MessageInfo)"/>
      <method name="getLock()"/>
      <method name="fireEvent(java.beans.PropertyChangeEvent)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isAck()"/>
      <method name="isEmptyLastMessage()"/>
      <method name="isLastMessage()"/>
      <method name="removePropertyChangeListener(java.beans.PropertyChangeListener)"/>
      <method name="getRequestPacket()"/>
      <method name="hashCode()"/>
      <method name="clone()"/>
      <method name="getMessageId()"/>
      <method name="getSOAPAction()"/>
      <method name="getSequenceId()"/>
      <method name="toString()"/>
      <method name="getMessageNum()"/>
      <method name="getTimestamp()"/>
      <field name="PROPERTY_ACK"/>
      <field name="PROPERTY_EMPTY_LAST_MESSAGE"/>
      <field name="PROPERTY_LAST_MESSAGE"/>
      <field name="PROPERTY_TIMESTAMP"/>
      <method name="addPropertyChangeListener(java.beans.PropertyChangeListener)"/>
      <method name="setAck(boolean)"/>
      <method name="setEmptyLastMessage(boolean)"/>
      <method name="setLastMessage(boolean)"/>
      <method name="setRequestPacket(com.sun.xml.ws.api.message.Packet)"/>
      <method name="setTimestamp(long)"/>
    </class>
    <class name="OfferSequence">
      <method name="getId()"/>
      <method name="getMainSequenceId()"/>
    </class>
    <class name="SourceMessageInfo">
      <constructor name="SourceMessageInfo(java.lang.String,java.lang.String,long,java.lang.String)"/>
      <constructor name="SourceMessageInfo(weblogic.wsee.reliability2.sequence.SourceMessageInfo)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="toString()"/>
      <method name="getResponseMessageNum()"/>
      <method name="setClientInvokeInfo(weblogic.wsee.reliability2.sequence.SourceMessageInfo.ClientInvokeInfo)"/>
      <method name="setResponseMessageNum(long)"/>
      <method name="getClientInvokeInfo()"/>
    </class>
    <class name="UnknownSequenceException">
      <constructor name="UnknownSequenceException(java.lang.String,weblogic.wsee.reliability2.WsrmConstants.RMVersion,boolean,java.lang.String)"/>
      <method name="isSourceSide()"/>
      <method name="getSequenceId()"/>
      <method name="getRmVersion()"/>
    </class>
    <class name="UnknownSourceSequenceException">
      <constructor name="UnknownSourceSequenceException(java.lang.String,weblogic.wsee.reliability2.WsrmConstants.RMVersion,java.lang.String)"/>
      <constructor name="UnknownSourceSequenceException(weblogic.wsee.reliability2.sequence.UnknownSequenceException)"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.bst">
    <class name="BST11CredentialProvider" members="concealed"/>
    <class name="BSTCredentialProvider">
      <method name="isForDecryption(weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="isForEncryption(weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="isForIdentity(weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="isForResponseEncryption(weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="isForSigning(weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="isForVerification(weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="getValueTypes()"/>
    </class>
    <class name="ClientBSTCredentialProvider">
      <constructor name="ClientBSTCredentialProvider(java.lang.String,java.lang.String)"/>
      <constructor name="ClientBSTCredentialProvider(java.lang.String,java.lang.String,java.lang.String)"/>
      <constructor name="ClientBSTCredentialProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <constructor name="ClientBSTCredentialProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <constructor name="ClientBSTCredentialProvider(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.cert.X509Certificate)"/>
      <constructor name="ClientBSTCredentialProvider(java.security.cert.CertPath,java.security.PrivateKey)"/>
      <constructor name="ClientBSTCredentialProvider(java.security.cert.X509Certificate,java.security.PrivateKey,java.security.cert.X509Certificate)"/>
      <constructor name="ClientBSTCredentialProvider(java.security.cert.X509Certificate,java.security.cert.CertPath,java.security.PrivateKey)"/>
      <method name="getCredential(java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="toString()"/>
      <method name="setServerCertificate(java.security.cert.X509Certificate)"/>
      <method name="cloneAndReplaceServerCert(java.security.cert.X509Certificate)"/>
    </class>
    <class name="ServerBSTCredentialProvider">
      <method name="getCredential(java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="isSSLUsingKeyStores()"/>
    </class>
    <class name="StubPropertyBSTCredProv">
      <constructor name="StubPropertyBSTCredProv(java.security.cert.X509Certificate,java.security.cert.X509Certificate)"/>
      <method name="getCredential(java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <field name="SERVER_ENCRYPT_CERT"/>
      <field name="SERVER_VERIFY_CERT"/>
      <method name="cloneAndReplaceServerCert(java.security.cert.X509Certificate)"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.policy">
    <class name="SecurityToken">
      <constructor name="SecurityToken()"/>
      <constructor name="SecurityToken(org.w3c.dom.Node,java.lang.String,java.lang.String,boolean)"/>
      <method name="isIncludeDerivedFromInMessage()"/>
      <method name="isIncludeInMessage()"/>
      <method name="isOptional()"/>
      <method name="getDerivedFromTokenType()"/>
      <method name="getIssuerName()"/>
      <method name="getTokenIssuer()"/>
      <method name="getTokenTypeUri()"/>
      <method name="toString()"/>
      <method name="getStrTypes()"/>
      <method name="getStrTypesForDKBaseToken()"/>
      <method name="getClaims()"/>
      <method name="setBootstrapPolicy(weblogic.wsee.policy.framework.NormalizedExpression)"/>
      <method name="setClaims(org.w3c.dom.Node)"/>
      <method name="setDerivedFromTokenType(java.lang.String)"/>
      <method name="setEncryptionMethod(weblogic.xml.crypto.encrypt.api.EncryptionMethod)"/>
      <method name="setIncludeDerivedFromInMessage(boolean)"/>
      <method name="setIncludeInMessage(boolean)"/>
      <method name="setIssuerName(java.lang.String)"/>
      <method name="setKeyWrapMethod(weblogic.xml.crypto.encrypt.api.EncryptionMethod)"/>
      <method name="setOptional(boolean)"/>
      <method name="setStrTypes(java.util.List)"/>
      <method name="setStrTypesForDKBaseToken(java.util.List)"/>
      <method name="setTokenIssuer(java.lang.String)"/>
      <method name="setTokenTypeUri(java.lang.String)"/>
      <method name="getBootstrapPolicy()"/>
      <method name="getEncryptionMethod()"/>
      <method name="getKeyWrapMethod()"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.saml">
    <class name="AbstractSAMLCredentialProvider">
      <constructor name="AbstractSAMLCredentialProvider()"/>
      <method name="getCredential(java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="getKeyInfoCredential(java.lang.String,java.lang.String,weblogic.xml.crypto.wss.SecurityTokenContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="getKeyInfoCredential(java.lang.String,java.lang.String,weblogic.xml.crypto.wss.SecurityTokenContextHandler,weblogic.xml.crypto.wss.provider.Purpose,org.w3c.dom.Node)"/>
      <method name="getValueTypes()"/>
      <method name="getSAMLAttributeData(javax.security.auth.Subject)"/>
    </class>
    <class name="AbstractSAMLTokenHandler">
      <constructor name="AbstractSAMLTokenHandler()"/>
      <method name="isSaml2()"/>
      <method name="isSupportedTokenType(java.lang.String)"/>
      <method name="isSupportedValueType(java.lang.String)"/>
      <method name="matches(weblogic.xml.crypto.wss.provider.SecurityToken,java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="getValueTypes()"/>
      <method name="getSubject(weblogic.xml.crypto.wss.provider.SecurityToken,javax.xml.rpc.handler.MessageContext)"/>
      <method name="getQNames()"/>
      <method name="getKeyProvider(weblogic.xml.crypto.wss.provider.SecurityToken,javax.xml.rpc.handler.MessageContext)"/>
      <method name="getSecurityToken(java.lang.String,java.lang.Object,weblogic.security.service.ContextHandler)"/>
      <method name="getSecurityToken(java.lang.String,java.lang.String,weblogic.xml.crypto.wss.provider.Purpose,weblogic.security.service.ContextHandler)"/>
      <method name="getSecurityToken(weblogic.xml.crypto.wss.provider.SecurityTokenReference,javax.xml.rpc.handler.MessageContext)"/>
      <method name="newSecurityToken(org.w3c.dom.Node)"/>
      <method name="getSTR(javax.xml.namespace.QName,java.lang.String,weblogic.xml.crypto.wss.provider.SecurityToken)"/>
      <method name="newSecurityTokenReference(org.w3c.dom.Node)"/>
    </class>
    <class name="CSSUtils">
      <method name="getEndpointPath(boolean,java.lang.String)"/>
      <method name="mapSAML2ConfMethod(java.lang.String)"/>
      <method name="mapSAMLConfMethod(java.lang.String)"/>
      <method name="getParser()"/>
      <method name="returnParser(javax.xml.parsers.DocumentBuilder)"/>
      <method name="isHolderOfKey(boolean,weblogic.xml.crypto.wss.SecurityTokenContextHandler)"/>
      <method name="isHolderOfKey(java.lang.String)"/>
      <field name="SAML2_ATTRIBUTES"/>
      <field name="SAML_ATTRIBUTES"/>
      <field name="SAML_ATTRIBUTE_ONLY"/>
      <field name="SAML_ATTRIBUTE_PRINCIPALS"/>
      <method name="getSAMLCredential(boolean,java.lang.String,weblogic.xml.crypto.wss.SecurityTokenContextHandler,java.lang.Object)"/>
      <method name="getSAMLAssertionFromCredMapper(weblogic.xml.crypto.wss.SecurityTokenContextHandler,java.lang.String)"/>
      <method name="getCurrentAuthenticatedSubject()"/>
      <method name="setupSAMLAttributesContextElements(boolean,weblogic.xml.crypto.wss.SecurityTokenContextHandler,boolean,weblogic.wsee.security.saml.SAMLAttributeStatementData)"/>
      <method name="setupSAMLContextElements(boolean,weblogic.xml.crypto.wss.SecurityTokenContextHandler,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="PKISAMLCredentialProvider" members="concealed"/>
    <class name="SAML2Constants">
      <field name="BEARER"/>
      <field name="CONFIRMATION_METHOD"/>
      <field name="DISABLE_REMOTE_WS_TRUST_CALL_FOR_SAML_TOKEN"/>
      <field name="HOLDER_OF_KEY"/>
      <field name="SAML10CM"/>
      <field name="SAML10_BEARER"/>
      <field name="SAML10_HOLDER_OF_KEY"/>
      <field name="SAML10_SENDER_VOUCHES"/>
      <field name="SAML10_TOKEN_TYPE"/>
      <field name="SAML10_VALUE_TYPE"/>
      <field name="SAML11"/>
      <field name="SAML11_TOKEN_TYPE"/>
      <field name="SAML11_VALUE_TYPE"/>
      <field name="SAML20"/>
      <field name="SAML20CM"/>
      <field name="SAML20_BEARER"/>
      <field name="SAML20_HOLDER_OF_KEY"/>
      <field name="SAML20_SENDER_VOUCHES"/>
      <field name="SAML20_TOKEN_TYPE"/>
      <field name="SAML2_NS"/>
      <field name="SAML2_PREFIX"/>
      <field name="SAML_TOKEN10_URI"/>
      <field name="SAML_TOKEN11_URI"/>
      <field name="SAML_VERSION_11"/>
      <field name="SAML_VERSION_20"/>
      <field name="SENDER_VOUCHES"/>
      <field name="WSS_SAML11_TOKEN10"/>
      <field name="WSS_SAML11_TOKEN11"/>
      <field name="WSS_SAML20_TOKEN11"/>
      <field name="SAML_TOKEN_TYPES"/>
      <field name="SAML_VALUE_TYPES"/>
      <field name="SAML2_ASST_QNAME"/>
      <field name="SAML2_ASST_QNAMES"/>
    </class>
    <class name="SAML2CredentialProvider">
      <method name="getValueTypes()"/>
    </class>
    <class name="SAML2TokenHandler">
      <method name="isSaml2()"/>
      <method name="isSupportedTokenType(java.lang.String)"/>
      <method name="isSupportedValueType(java.lang.String)"/>
      <method name="getValueTypes()"/>
      <method name="getQNames()"/>
    </class>
    <class name="SAMLAttributeData">
      <method name="isEmpty()"/>
      <method name="isSAML20()"/>
      <method name="getSAML2AttributeInfo()"/>
      <method name="getAttributeFriendlyName()"/>
      <method name="getAttributeName()"/>
      <method name="getAttributeNameFormat()"/>
      <method name="getAttributeNameSpace()"/>
      <method name="getAttributeValues()"/>
      <method name="addAttributeValue(java.lang.String)"/>
      <method name="addAttributeValues(java.util.Collection)"/>
      <method name="setAttributeFriendlyName(java.lang.String)"/>
      <method name="setAttributeName(java.lang.String)"/>
      <method name="setAttributeNameFormat(java.lang.String)"/>
      <method name="setAttributeNameSpace(java.lang.String)"/>
      <method name="setAttributeValues(java.util.Collection)"/>
      <method name="getSAMLAttributeInfo()"/>
    </class>
    <class name="SAMLAttributeDataImpl">
      <constructor name="SAMLAttributeDataImpl()"/>
      <constructor name="SAMLAttributeDataImpl(com.bea.security.saml2.providers.SAML2AttributeInfo)"/>
      <constructor name="SAMLAttributeDataImpl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Collection)"/>
      <constructor name="SAMLAttributeDataImpl(java.lang.String,java.util.Collection)"/>
      <constructor name="SAMLAttributeDataImpl(weblogic.security.providers.saml.SAMLAttributeInfo)"/>
      <method name="isEmpty()"/>
      <method name="isSAML20()"/>
      <method name="getSAML2AttributeInfo()"/>
      <method name="getAttributeFriendlyName()"/>
      <method name="getAttributeName()"/>
      <method name="getAttributeNameFormat()"/>
      <method name="getAttributeNameSpace()"/>
      <method name="toString()"/>
      <method name="valuesToString(java.lang.String)"/>
      <method name="getAttributeValues()"/>
      <field name="SAML_2_0_ATTRNAME_FORMAT_BASIC"/>
      <method name="consolation(java.util.List)"/>
      <method name="addAttributeValue(java.lang.String)"/>
      <method name="addAttributeValues(java.util.Collection)"/>
      <method name="setAttributeFriendlyName(java.lang.String)"/>
      <method name="setAttributeName(java.lang.String)"/>
      <method name="setAttributeNameFormat(java.lang.String)"/>
      <method name="setAttributeNameSpace(java.lang.String)"/>
      <method name="setAttributeValues(java.util.Collection)"/>
      <method name="setSAML20(boolean)"/>
      <method name="getSAMLAttributeInfo()"/>
    </class>
    <class name="SAMLAttributeStatementData">
      <method name="hasAttributeInfo(java.lang.String)"/>
      <method name="hasAttributeValue(java.lang.String,java.lang.String)"/>
      <method name="isAttributeOnlyRequest()"/>
      <method name="isEmpty()"/>
      <method name="size()"/>
      <method name="getCollectionsForSAML2AttributeStatementInfo()"/>
      <method name="getCollectionsForSAMLAttributeStatementInfo()"/>
      <method name="getAttributeInfo()"/>
      <method name="addAttributeInfo(java.util.Collection)"/>
      <method name="addAttributeInfo(weblogic.wsee.security.saml.SAMLAttributeData)"/>
      <method name="setAttributeOnlyRequest(boolean)"/>
      <method name="getAttributeInfo(java.lang.String)"/>
    </class>
    <class name="SAMLAttributeStatementDataFactory">
      <method name="makeSAMLAttributeStatementData(java.lang.Object)"/>
      <method name="makeSAMLAttributeStatementDataFromSAML2AttributeStatementInfo(java.util.Collection)"/>
      <method name="makeSAMLAttributeStatementDataFromSAMLAttributeStatementInfo(java.util.Collection)"/>
    </class>
    <class name="SAMLAttributeStatementDataHelper">
      <method name="getSAMLAttributeStatementData(javax.xml.ws.WebServiceContext)"/>
      <method name="getSAMLAssertion(javax.xml.ws.WebServiceContext)"/>
      <method name="getSAMLToken(javax.xml.ws.WebServiceContext)"/>
    </class>
    <class name="SAMLAttributeStatementDataImpl">
      <constructor name="SAMLAttributeStatementDataImpl()"/>
      <constructor name="SAMLAttributeStatementDataImpl(java.util.Collection)"/>
      <method name="hasAttributeInfo(java.lang.String)"/>
      <method name="hasAttributeValue(java.lang.String,java.lang.String)"/>
      <method name="isAttributeOnlyRequest()"/>
      <method name="isEmpty()"/>
      <method name="size()"/>
      <method name="toString()"/>
      <method name="getCollectionsForSAML2AttributeStatementInfo()"/>
      <method name="getCollectionsForSAMLAttributeStatementInfo()"/>
      <method name="getAttributeInfo()"/>
      <method name="getNameValuePair()"/>
      <method name="addAttributeInfo(java.util.Collection)"/>
      <method name="addAttributeInfo(weblogic.wsee.security.saml.SAMLAttributeData)"/>
      <method name="setAttributeOnlyRequest(boolean)"/>
      <method name="getAttributeInfo(java.lang.String)"/>
    </class>
    <class name="SAMLConstants">
      <field name="BEARER"/>
      <field name="CONFIRMATION_METHOD"/>
      <field name="HOLDER_OF_KEY"/>
      <field name="POLICY_URI"/>
      <field name="SAML_TOKEN_URI"/>
      <field name="SAML_TOKEN_URI_2004_01"/>
      <field name="SAML_VALUE_TYPE"/>
      <field name="SAML_VALUE_TYPE_2004_01"/>
      <field name="SENDER_VOUCHES"/>
      <field name="SAML_VALUE_TYPES"/>
      <field name="CONFIRMATION_METHOD_QNAME"/>
      <field name="SAML_ASST_QNAME"/>
      <field name="SAML_ASST_QNAMES"/>
    </class>
    <class name="SAMLCredential">
      <method name="isHolderOfKey()"/>
      <method name="isSaml2()"/>
      <method name="getCredential()"/>
      <method name="getAssertionID()"/>
      <method name="getTokenType()"/>
      <method name="getVersion()"/>
      <method name="getHolderOfKey()"/>
      <method name="getSymmetircKey()"/>
      <method name="getPrivateKey()"/>
      <method name="getX509Cert()"/>
      <method name="getEncryptedKey()"/>
      <method name="setAttributes(weblogic.wsee.security.saml.SAMLAttributeStatementData)"/>
      <method name="setCredential(java.lang.Object)"/>
      <method name="setEncryptedKeyProvider(weblogic.xml.crypto.common.keyinfo.EncryptedKeyProvider)"/>
      <method name="setPrivateKey(java.security.PrivateKey)"/>
      <method name="setSymmetircKey(java.security.Key)"/>
      <method name="getAttributes()"/>
      <method name="getEncryptedKeyProvider()"/>
    </class>
    <class name="SAMLCredentialImpl">
      <constructor name="SAMLCredentialImpl()"/>
      <constructor name="SAMLCredentialImpl(java.lang.String,java.lang.Object)"/>
      <constructor name="SAMLCredentialImpl(java.lang.String,java.lang.Object,java.security.PrivateKey)"/>
      <constructor name="SAMLCredentialImpl(org.w3c.dom.Node)"/>
      <method name="isHolderOfKey()"/>
      <method name="isSaml2()"/>
      <method name="getCredential()"/>
      <method name="getAssertionID()"/>
      <method name="getTokenType()"/>
      <method name="getVersion()"/>
      <method name="getHolderOfKey()"/>
      <method name="getSymmetircKey()"/>
      <method name="getPrivateKey()"/>
      <method name="getX509Cert()"/>
      <method name="getEncryptedKey()"/>
      <method name="setAttributes(weblogic.wsee.security.saml.SAMLAttributeStatementData)"/>
      <method name="setCredential(java.lang.Object)"/>
      <method name="setEncryptedKeyProvider(weblogic.xml.crypto.common.keyinfo.EncryptedKeyProvider)"/>
      <method name="setPrivateKey(java.security.PrivateKey)"/>
      <method name="setSymmetircKey(java.security.Key)"/>
      <method name="setTokenType(java.lang.String)"/>
      <method name="verbose()"/>
      <method name="getAttributes()"/>
      <method name="getEncryptedKeyProvider()"/>
      <method name="getSecurityTokenReference()"/>
    </class>
    <class name="SAMLCredentialProvider">
      <method name="getValueTypes()"/>
    </class>
    <class name="SAMLIssuedTokenHelper">
      <constructor name="SAMLIssuedTokenHelper(org.w3c.dom.Element)"/>
      <method name="isRequireExternalReference()"/>
      <method name="isRequireInternalReference()"/>
      <method name="getKeySize()"/>
      <method name="getIssuerAddressUri()"/>
      <method name="getKeyType()"/>
      <method name="getRequestSecurityTokenTemplateVale(javax.xml.namespace.QName)"/>
      <method name="getTokenType()"/>
      <method name="getTrustVersion()"/>
      <method name="isSymmetricKeyTypeFromIssuedTokenClaim(org.w3c.dom.Node)"/>
      <field name="ISSUED_TOKEN_POLICY"/>
      <field name="ISSUER_URI"/>
      <field name="REQ_EXTERNAL_REFERENCE"/>
      <field name="REQ_INTERNAL_REFERENCE"/>
      <field name="TRUST_VERSION"/>
      <field name="TRUST_VERSOIN_10"/>
      <field name="TRUST_VERSOIN_13"/>
      <field name="ISSUED_TK_POLICY_QNAME"/>
      <field name="TRUST10_TOKEN_TYPE"/>
      <field name="TRUST13_C14N_ALGO"/>
      <field name="TRUST13_ENC_ALGO"/>
      <field name="TRUST13_ENC_WITH"/>
      <field name="TRUST13_KEY_SIZE"/>
      <field name="TRUST13_KEY_TYPE"/>
      <field name="TRUST13_SIGN_WITH"/>
      <field name="TRUST13_TOKEN_TYPE"/>
      <method name="getClaimFromChildElt(org.w3c.dom.Node,java.lang.String)"/>
      <method name="getKeyTypeFromClaims(org.w3c.dom.Node)"/>
      <method name="getTrustKeyTypeFromIssuedTokenClaims(org.w3c.dom.Node)"/>
    </class>
    <class name="SAMLKeyProvider">
      <method name="getResult(java.security.Key)"/>
      <constructor name="SAMLKeyProvider(java.security.PublicKey,java.security.PrivateKey,java.lang.String,weblogic.xml.crypto.wss.provider.SecurityToken)"/>
      <method name="getKey(java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
    </class>
    <class name="SAMLTokenHandler">
      <method name="isSaml2()"/>
      <method name="isSupportedTokenType(java.lang.String)"/>
      <method name="isSupportedValueType(java.lang.String)"/>
      <method name="getValueTypes()"/>
      <method name="getQNames()"/>
    </class>
    <class name="SAMLTrustCredential">
      <constructor name="SAMLTrustCredential(weblogic.wsee.security.saml.SAMLCredential)"/>
      <method name="hasAttachedSecurityTokenReference()"/>
      <method name="hasUnattachedSecurityTokenReference()"/>
      <method name="getAppliesTo()"/>
      <method name="getIdentifier()"/>
      <method name="getCreated()"/>
      <method name="getExpires()"/>
      <method name="getAppliesToElement()"/>
      <method name="setAppliesTo(java.lang.String)"/>
      <method name="setAppliesToElement(org.w3c.dom.Element)"/>
      <method name="setCreated(java.util.Calendar)"/>
      <method name="setExpires(java.util.Calendar)"/>
      <method name="getCredential()"/>
    </class>
    <class name="SAMLTrustCredentialProvider">
      <method name="getMessageContext(weblogic.xml.crypto.wss.SecurityTokenContextHandler)"/>
      <method name="getSecurityCtxHandler(weblogic.security.service.ContextHandler)"/>
      <constructor name="SAMLTrustCredentialProvider()"/>
      <method name="getCredential(java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="getValueTypes()"/>
      <field name="SAML_VALUE_TYPES"/>
      <field name="EMPTY_CONTEXT"/>
    </class>
    <class name="SAMLTrustTokenProvider">
      <method name="getConfirmationMethod(java.lang.String,java.lang.String)"/>
    </class>
    <class name="SAMLUtils">
      <method name="hasAttributeNoAuthenticateStmt(org.w3c.dom.Element)"/>
      <method name="hasX509SubjectName(org.w3c.dom.Element)"/>
      <method name="isEquivalentSamlTokenType(java.lang.String,java.lang.String)"/>
      <method name="isSamlTokenType(java.lang.String)"/>
      <method name="isSymmetricKeyType(java.lang.String)"/>
      <field name="SAML_ATN_STATEMENT_TAG"/>
      <field name="SAML_ATTRIBUTE_STATEMENT_TAG"/>
      <field name="SAML_SUBJCONF_TAG"/>
      <field name="SAML_SUBJECT_TAG"/>
      <method name="getTokenTypeFromAssertionElement(org.w3c.dom.Element)"/>
      <method name="getJavaSubjectFromSamlElement(org.w3c.dom.Node)"/>
      <method name="getFirstMatchingChildElement(org.w3c.dom.Element,java.lang.String)"/>
      <method name="getNameIdentifierElm(org.w3c.dom.Element)"/>
      <method name="getSubjectElementFromSamlAssertion(org.w3c.dom.Element)"/>
      <method name="getReplaceAttributeStmtToAuthenticateStmtSAMLNode(org.w3c.dom.Element)"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.unt">
    <class name="ClientUNTCredentialProvider">
      <constructor name="ClientUNTCredentialProvider(byte[],byte[])"/>
      <constructor name="ClientUNTCredentialProvider(java.lang.String,java.lang.String)"/>
      <method name="getCredential(java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="toString()"/>
      <method name="getValueTypes()"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.util">
    <class name="CertUtils">
      <method name="getCertificate(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.wss">
    <class name="SecurityPolicyException">
      <constructor name="SecurityPolicyException()"/>
      <constructor name="SecurityPolicyException(java.lang.String)"/>
      <constructor name="SecurityPolicyException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="SecurityPolicyException(java.lang.Throwable)"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.wssc.utils">
    <class name="WSSCClientUtil">
      <method name="terminateWssc(javax.xml.rpc.Stub)"/>
      <method name="terminateWssc(javax.xml.ws.BindingProvider)"/>
    </class>
    <class name="WSSCCompatibilityUtil">
      <method name="isHeuristicCompatibility()"/>
      <method name="isHeuristicStrategyRequired(javax.xml.rpc.handler.MessageContext)"/>
      <field name="MSFT"/>
      <field name="WSSC13"/>
      <field name="WSSC14"/>
      <field name="WST_HEURISTIC_FLAG"/>
      <method name="getWSSCVersion(java.lang.String)"/>
      <method name="getWSSCVersion(javax.xml.rpc.handler.MessageContext)"/>
      <method name="getCompatibilityOrdering(weblogic.wsee.security.wssc.utils.WSSCCompatibilityUtil.OrderingIterator)"/>
      <method name="adjustOrderingPreference(javax.xml.rpc.handler.MessageContext)"/>
      <method name="getCompatibilityOrdering(java.lang.String)"/>
      <method name="resetCompatibilityOrdering(weblogic.wsee.security.wssc.utils.WSSCCompatibilityUtil.OrderingIterator,java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.wst.faults">
    <class name="WSTFaultException">
      <constructor name="WSTFaultException(java.lang.String)"/>
      <field name="faultCode"/>
      <field name="faultString"/>
      <method name="getFaultCode()"/>
      <method name="getFaultString()"/>
      <method name="getFault()"/>
    </class>
  </package>
  <package name="weblogic.wsee.security.wst.framework">
    <class name="TrustCredential">
      <method name="hasAttachedSecurityTokenReference()"/>
      <method name="hasUnattachedSecurityTokenReference()"/>
      <method name="getAppliesTo()"/>
      <method name="getIdentifier()"/>
      <method name="getCreated()"/>
      <method name="getExpires()"/>
      <method name="getAppliesToElement()"/>
    </class>
  </package>
  <package name="weblogic.wsee.tools">
    <class name="WsBuildException">
      <constructor name="WsBuildException()"/>
      <constructor name="WsBuildException(java.lang.String)"/>
      <constructor name="WsBuildException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="WsBuildException(java.lang.Throwable)"/>
    </class>
  </package>
  <package name="weblogic.wsee.util">
    <class name="DefaultHashFunction">
      <method name="hash(java.lang.Object)"/>
    </class>
    <class name="HashCodeUtil">
      <field name="SEED"/>
      <method name="hash(int,boolean)"/>
      <method name="hash(int,char)"/>
      <method name="hash(int,double)"/>
      <method name="hash(int,float)"/>
      <method name="hash(int,int)"/>
      <method name="hash(int,java.lang.Object)"/>
      <method name="hash(int,java.util.Collection)"/>
      <method name="hash(int,long)"/>
    </class>
    <class name="SecurityUtil">
      <method name="flagSecurityContextAsPersistable(com.sun.xml.ws.api.message.Packet)"/>
      <method name="invokeCheck(java.lang.reflect.Method)"/>
    </class>
    <class name="StableHash">
      <method name="get(java.lang.Object)"/>
      <constructor name="StableHash(weblogic.wsee.util.StableHash.HashFunction,int,java.util.Collection)"/>
      <method name="add(java.lang.Object)"/>
      <method name="remove(java.lang.Object)"/>
    </class>
    <class name="ToStringWriter">
      <method name="toString()"/>
      <method name="end()"/>
      <method name="start(java.lang.Object)"/>
      <method name="writeArray(java.lang.String,java.util.Iterator)"/>
      <method name="writeField(java.lang.String,int)"/>
      <method name="writeField(java.lang.String,java.lang.Object)"/>
      <method name="writeMap(java.lang.String,java.util.Map)"/>
    </class>
  </package>
  <package name="weblogic.wsee.wsdl">
    <class name="WsdlBinding">
      <method name="getBindingType()"/>
      <method name="getTransportProtocol()"/>
      <method name="getTransportURI()"/>
      <method name="getOperations()"/>
      <method name="getName()"/>
      <method name="setPolicyUris(weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="getPolicyUris()"/>
      <method name="getPortType()"/>
    </class>
    <class name="WsdlDefinitions">
      <method name="getEncoding()"/>
      <method name="getName()"/>
      <method name="getTargetNamespace()"/>
      <method name="getWsdlLocation()"/>
      <method name="getImportedWsdlDefinitions()"/>
      <method name="getImports()"/>
      <method name="getBindings()"/>
      <method name="getMessages()"/>
      <method name="getPorts()"/>
      <method name="getPortTypes()"/>
      <method name="getServices()"/>
      <method name="getKnownImportedWsdlLocations()"/>
      <method name="getTheOnlySchema()"/>
      <method name="getTypes()"/>
    </class>
    <class name="WsdlDocumentation">
      <method name="getDocumentation()"/>
    </class>
    <class name="WsdlElement">
      <method name="getDocumentation()"/>
    </class>
    <class name="WsdlExtensible">
      <method name="getExtensionList(java.lang.String)"/>
      <method name="getExtensions()"/>
      <method name="putExtension(weblogic.wsee.wsdl.WsdlExtension)"/>
      <method name="getExtension(java.lang.String)"/>
    </class>
    <class name="WsdlExtension">
      <method name="getKey()"/>
      <method name="write(org.w3c.dom.Element,weblogic.wsee.wsdl.WsdlWriter)"/>
    </class>
    <class name="WsdlFilter">
      <method name="isMessagePartSupported(javax.xml.namespace.QName,java.lang.String)"/>
      <method name="isPortSupported(javax.xml.namespace.QName)"/>
      <method name="rewritePortUrl(javax.xml.namespace.QName,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="WsdlMessage">
      <method name="getParts()"/>
      <method name="getName()"/>
      <method name="setPolicyUris(weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="getPolicyUris()"/>
    </class>
    <class name="WsdlMethod">
      <method name="getParameters()"/>
      <method name="getResultPart()"/>
    </class>
    <class name="WsdlOperation">
      <method name="isWrapped()"/>
      <method name="getType()"/>
      <method name="getInputAction()"/>
      <method name="getInputName()"/>
      <method name="getOutputAction()"/>
      <method name="getOutputName()"/>
      <method name="getFaults()"/>
      <method name="getName()"/>
      <field name="NOTIFICATION"/>
      <field name="ONE_WAY"/>
      <field name="REQUEST_RESPONSE"/>
      <field name="SOLICIT_RESPONSE"/>
      <method name="setFaultPolicyUris(java.lang.String,weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="setInputPolicyUris(weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="setOutputPolicyUris(weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="setPolicyUris(weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="getFaultPolicyUris(java.lang.String)"/>
      <method name="getInputPolicyUris()"/>
      <method name="getOutputPolicyUris()"/>
      <method name="getPolicyUris()"/>
      <method name="getInput()"/>
      <method name="getOutput()"/>
      <method name="getWsdlMethod()"/>
      <method name="getWsdlMethod(boolean)"/>
    </class>
    <class name="WsdlPart">
      <method name="getName()"/>
      <method name="getElement()"/>
      <method name="getType()"/>
    </class>
    <class name="WsdlPort">
      <method name="getTransport()"/>
      <method name="getName()"/>
      <method name="setPolicyUris(weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="setPortAddress(weblogic.wsee.deploy.WsdlAddressInfo.PortAddress)"/>
      <method name="getPortAddress()"/>
      <method name="getPolicyUris()"/>
      <method name="getBinding()"/>
      <method name="getDefinitions()"/>
      <method name="getPortType()"/>
      <method name="getService()"/>
    </class>
    <class name="WsdlPortType">
      <method name="getOperations()"/>
      <method name="getName()"/>
      <method name="setPolicyUris(weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="getPolicyUris()"/>
    </class>
    <class name="WsdlSchema">
      <method name="getLocationUrl()"/>
      <method name="getImports()"/>
      <method name="getWsdlDefinitions()"/>
    </class>
    <class name="WsdlSchemaImport">
      <method name="isRelative()"/>
      <method name="getNamespace()"/>
      <method name="getSchemaLocation()"/>
      <method name="getSchema()"/>
    </class>
    <class name="WsdlService">
      <method name="getPortTypes()"/>
      <method name="getPorts()"/>
      <method name="getName()"/>
      <method name="setPolicyUris(weblogic.wsee.policy.deployment.PolicyURIs)"/>
      <method name="getPolicyUris()"/>
      <method name="getDefinitions()"/>
      <method name="getWsdlFilter()"/>
    </class>
    <class name="WsdlTypes">
      <method name="getNodeList()"/>
      <method name="getNodeListWithoutImport()"/>
      <method name="getImportedWsdlSchemas()"/>
      <method name="getSchemaListWithoutImport()"/>
      <method name="getNameSpaceDefs()"/>
    </class>
    <class name="WsdlWriter">
      <constructor name="WsdlWriter()"/>
      <constructor name="WsdlWriter(org.w3c.dom.Document,org.w3c.dom.Element,java.lang.String)"/>
      <method name="isSameNS(java.lang.String)"/>
      <method name="createPrefix(java.lang.String)"/>
      <method name="getEndpointURL(java.lang.String)"/>
      <method name="getImportPrefix()"/>
      <method name="getRelativeToRootFile()"/>
      <method name="getTargetNS()"/>
      <method name="toString()"/>
      <method name="getAttachedPolices()"/>
      <method name="addChild(org.w3c.dom.Element,java.lang.String,java.lang.String)"/>
      <method name="addPrefix(java.lang.String,java.lang.String)"/>
      <method name="addText(org.w3c.dom.Element,java.lang.String)"/>
      <method name="setAttachedPolices(java.util.Map)"/>
      <method name="setAttribute(org.w3c.dom.Element,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="setAttribute(org.w3c.dom.Element,java.lang.String,java.lang.String,javax.xml.namespace.QName)"/>
      <method name="setCurrentWsdlPort(weblogic.wsee.wsdl.WsdlPort)"/>
      <method name="setRelativeToRootFile(java.lang.String)"/>
      <method name="setTargetNS(java.lang.String)"/>
      <method name="setWsdlAddressInfo(weblogic.wsee.deploy.WsdlAddressInfo)"/>
      <method name="toString(weblogic.wsee.util.ToStringWriter)"/>
      <method name="getWsdlAddressInfo()"/>
    </class>
  </package>
  <package name="weblogic.wsee.wstx">
    <class name="TransactionServices">
      <method name="enlistResource(javax.transaction.xa.XAResource,javax.transaction.xa.Xid)"/>
      <method name="getGlobalTransactionId()"/>
      <method name="getExpires()"/>
      <method name="prepare(byte[])"/>
      <method name="importTransaction(int,byte[])"/>
      <method name="getParentReference(javax.transaction.xa.Xid)"/>
      <method name="commit(byte[])"/>
      <method name="registerSynchronization(javax.transaction.Synchronization,javax.transaction.xa.Xid)"/>
      <method name="replayCompletion(java.lang.String,javax.transaction.xa.XAResource)"/>
      <method name="rollback(byte[])"/>
    </class>
  </package>
  <package name="weblogic.wsee.wstx.wsat">
    <class name="Transactional" members="concealed"/>
    <class name="TransactionalFeature">
      <constructor name="TransactionalFeature()"/>
      <constructor name="TransactionalFeature(boolean)"/>
      <constructor name="TransactionalFeature(boolean,weblogic.wsee.wstx.wsat.Transactional.TransactionFlowType,weblogic.wsee.wstx.wsat.Transactional.Version)"/>
      <method name="isEnabled(java.lang.String)"/>
      <method name="isExplicitMode()"/>
      <method name="getID()"/>
      <method name="getEnabledMap()"/>
      <method name="getFlowTypeMap()"/>
      <field name="ID"/>
      <method name="setEnabled(boolean)"/>
      <method name="setEnabled(java.lang.String,boolean)"/>
      <method name="setExplicitMode(boolean)"/>
      <method name="setFlowType(java.lang.String,weblogic.wsee.wstx.wsat.Transactional.TransactionFlowType)"/>
      <method name="setFlowType(weblogic.wsee.wstx.wsat.Transactional.TransactionFlowType)"/>
      <method name="setVersion(weblogic.wsee.wstx.wsat.Transactional.Version)"/>
      <method name="getFlowType()"/>
      <method name="getFlowType(java.lang.String)"/>
      <method name="getVersion()"/>
    </class>
    <class name="WSATClientHandler">
      <method name="doHandleMessage(javax.xml.soap.SOAPHeader,boolean)"/>
      <method name="handleFault(javax.xml.ws.handler.soap.SOAPMessageContext)"/>
      <method name="handleMessage(javax.xml.ws.handler.soap.SOAPMessageContext)"/>
      <method name="getHeaders()"/>
      <method name="close(javax.xml.ws.handler.MessageContext)"/>
      <method name="createMustUnderstandName(javax.xml.soap.SOAPMessage)"/>
      <method name="getTransaction()"/>
    </class>
    <class name="WSATConstants">
      <field name="ABORTED"/>
      <field name="ACTION"/>
      <field name="ADDRESS"/>
      <field name="BRANCHQUAL"/>
      <field name="COMMIT"/>
      <field name="COMMITTED"/>
      <field name="COORDINATION_CONTEXT"/>
      <field name="COORDINATION_TYPE"/>
      <field name="COORDINATOR_PROTOCOL_SERVICE"/>
      <field name="CURRENT_WSCOOR"/>
      <field name="DEBUG_WSAT"/>
      <field name="DURABLE_2PC"/>
      <field name="EXPIRES"/>
      <field name="FAULT_TO"/>
      <field name="FROM"/>
      <field name="HTTP_SCHEMAS_XMLSOAP_ORG_WS_2004_10_WSAT"/>
      <field name="HTTP_SCHEMAS_XMLSOAP_ORG_WS_2004_10_WSAT_DURABLE_2PC"/>
      <field name="HTTP_SCHEMAS_XMLSOAP_ORG_WS_2004_10_WSAT_VOLATILE_2PC"/>
      <field name="IDENTIFIER"/>
      <field name="MESSAGE_ID"/>
      <field name="MUST_UNDERSTAND"/>
      <field name="PARTICIPANT_PROTOCOL_SERVICE"/>
      <field name="PREPARE"/>
      <field name="PREPARED"/>
      <field name="PROTOCOL_IDENTIFIER"/>
      <field name="READONLY"/>
      <field name="REFERENCE_PARAMETERS"/>
      <field name="REGISTER"/>
      <field name="REGISTER_RESPONSE"/>
      <field name="REGISTRATION_SERVICE"/>
      <field name="REPLAY"/>
      <field name="REPLY_TO"/>
      <field name="ROLLBACK"/>
      <field name="ROUTING"/>
      <field name="SOAP_ENVELOPE"/>
      <field name="TO"/>
      <field name="TXID"/>
      <field name="TXPROP_WSAT_FOREIGN_RECOVERY_CONTEXT"/>
      <field name="VOLATILE_2PC"/>
      <field name="WLA_WSAT_NS_URI"/>
      <field name="WLS_WSAT"/>
      <field name="WSA"/>
      <field name="WSADDRESSING_NS_URI"/>
      <field name="WSAT"/>
      <field name="WSAT10_NS_URI"/>
      <field name="WSAT11_COORDINATORPORTTYPEPORT"/>
      <field name="WSAT11_DURABLE_2PC"/>
      <field name="WSAT11_NS_URI"/>
      <field name="WSAT11_PARTICIPANTPORTTYPEPORT"/>
      <field name="WSAT11_REGISTRATIONCOORDINATORPORTTYPEPORT"/>
      <field name="WSAT11_REGISTRATIONREQUESTERPORTTYPEPORT"/>
      <field name="WSAT11_VOLATILE_2PC"/>
      <field name="WSAT_COORDINATORPORTTYPEPORT"/>
      <field name="WSAT_PARTICIPANTPORTTYPEPORT"/>
      <field name="WSAT_REGISTRATIONCOORDINATORPORTTYPEPORT"/>
      <field name="WSAT_REGISTRATIONREQUESTERPORTTYPEPORT"/>
      <field name="WSCOOR"/>
      <field name="WSCOOR10_NS_URI"/>
      <field name="WSCOOR11_NS_URI"/>
      <field name="BRANCHQUAL_QNAME"/>
      <field name="ROUTING_QNAME"/>
      <field name="TXID_QNAME"/>
      <field name="WSCOOR11_CONTEXT_QNAME"/>
      <field name="WSCOOR11_REGISTER_QNAME"/>
      <field name="WSCOOR_CONTEXT_QNAME"/>
      <field name="WSCOOR_REGISTER_QNAME"/>
    </class>
    <class name="WSATException">
      <constructor name="WSATException(java.lang.Exception)"/>
      <constructor name="WSATException(java.lang.String)"/>
      <constructor name="WSATException(java.lang.String,javax.transaction.xa.XAException)"/>
      <field name="errorCode"/>
    </class>
    <class name="WSATFaultFactory">
      <method name="throwAlreadyRegisteredFault()"/>
      <method name="throwContextRefusedFault()"/>
      <method name="throwInconsistentInternalStateFault()"/>
      <method name="throwInvalidParametersFault()"/>
      <method name="throwInvalidProtocolFault()"/>
      <method name="throwInvalidStateFault()"/>
      <method name="throwNoActivityFault()"/>
    </class>
    <class name="WSATHelper">
      <constructor name="WSATHelper()"/>
      <method name="setDurableParticipantStatus(javax.transaction.xa.Xid,java.lang.String)"/>
      <method name="getWaitForReplyTimeout()"/>
      <method name="getBQualFromWebServiceContextHeaderList(javax.xml.ws.WebServiceContext)"/>
      <method name="getCoordinatorAddress()"/>
      <method name="getParticipantAddress()"/>
      <method name="getRegistrationCoordinatorAddress()"/>
      <method name="getRegistrationRequesterAddress()"/>
      <method name="getRoutingAddress()"/>
      <method name="getWSATTidFromWebServiceContextHeaderList(javax.xml.ws.WebServiceContext)"/>
      <method name="getVolatileParticipantSynchronizationMap()"/>
      <method name="getVolatileParticipantPortMap()"/>
      <method name="getDurableParticipantPortMap()"/>
      <method name="isDebugEnabled()"/>
      <field name="V10"/>
      <field name="V11"/>
      <method name="assignUUID()"/>
      <method name="getTransactionServices()"/>
      <method name="getInstance()"/>
      <method name="getInstance(weblogic.wsee.wstx.wsat.Transactional.Version)"/>
      <method name="beforeCompletion(javax.xml.ws.EndpointReference,javax.transaction.xa.Xid,weblogic.wsee.wstx.wsat.WSATSynchronization)"/>
      <method name="commit(javax.xml.ws.EndpointReference,javax.transaction.xa.Xid,weblogic.wsee.wstx.wsat.WSATXAResource)"/>
      <method name="debug(java.lang.String)"/>
      <method name="prepare(javax.xml.ws.EndpointReference,javax.transaction.xa.Xid,weblogic.wsee.wstx.wsat.WSATXAResource)"/>
      <method name="rollback(javax.xml.ws.EndpointReference,javax.transaction.xa.Xid,weblogic.wsee.wstx.wsat.WSATXAResource)"/>
      <method name="getXidFromWebServiceContextHeaderList(javax.xml.ws.WebServiceContext)"/>
    </class>
    <class name="WSATXAResource">
      <constructor name="WSATXAResource(javax.xml.ws.EndpointReference,javax.transaction.xa.Xid)"/>
      <constructor name="WSATXAResource(weblogic.wsee.wstx.wsat.Transactional.Version,javax.xml.ws.EndpointReference,javax.transaction.xa.Xid)"/>
      <constructor name="WSATXAResource(weblogic.wsee.wstx.wsat.Transactional.Version,javax.xml.ws.EndpointReference,javax.transaction.xa.Xid,boolean)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isSameRM(javax.transaction.xa.XAResource)"/>
      <method name="setTransactionTimeout(int)"/>
      <method name="getTransactionTimeout()"/>
      <method name="hashCode()"/>
      <method name="prepare(javax.transaction.xa.Xid)"/>
      <method name="toString()"/>
      <method name="getXid()"/>
      <method name="recover(int)"/>
      <method name="commit(javax.transaction.xa.Xid,boolean)"/>
      <method name="end(javax.transaction.xa.Xid,int)"/>
      <method name="forget(javax.transaction.xa.Xid)"/>
      <method name="rollback(javax.transaction.xa.Xid)"/>
      <method name="setBranchQualifier(byte[])"/>
      <method name="setStatus(java.lang.String)"/>
      <method name="start(javax.transaction.xa.Xid,int)"/>
    </class>
  </package>
  <package name="weblogic.xml.crypto.api">
    <class name="AlgorithmMethod">
      <method name="getAlgorithm()"/>
      <method name="getParameterSpec()"/>
    </class>
    <class name="Data" members="concealed"/>
    <class name="KeySelector">
      <method name="singletonKeySelector(java.security.Key)"/>
      <method name="select(weblogic.xml.crypto.dsig.api.keyinfo.KeyInfo,weblogic.xml.crypto.api.KeySelector.Purpose,weblogic.xml.crypto.api.AlgorithmMethod,weblogic.xml.crypto.api.XMLCryptoContext)"/>
    </class>
    <class name="KeySelectorException" members="concealed"/>
    <class name="KeySelectorResult">
      <method name="getKey()"/>
    </class>
    <class name="MarshalException">
      <method name="getCause()"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="URIDereferencer">
      <method name="dereference(weblogic.xml.crypto.api.URIReference,weblogic.xml.crypto.api.XMLCryptoContext)"/>
    </class>
    <class name="URIReference">
      <method name="getType()"/>
      <method name="getURI()"/>
    </class>
    <class name="URIReferenceException">
      <method name="getCause()"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
      <method name="getURIReference()"/>
    </class>
    <class name="XMLCryptoContext">
      <method name="getProperty(java.lang.String)"/>
      <method name="setProperty(java.lang.String,java.lang.Object)"/>
      <method name="getBaseURI()"/>
      <method name="setBaseURI(java.lang.String)"/>
      <method name="setKeySelector(weblogic.xml.crypto.api.KeySelector)"/>
      <method name="setURIDereferencer(weblogic.xml.crypto.api.URIDereferencer)"/>
      <method name="getKeySelector()"/>
      <method name="getURIDereferencer()"/>
    </class>
    <class name="XMLStructure">
      <method name="isFeatureSupported(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.xml.crypto.common.keyinfo">
    <class name="BaseKeyProvider">
      <method name="getIdentifier()"/>
      <method name="getName()"/>
      <method name="getUri()"/>
      <method name="toString()"/>
      <method name="getKeyByIdentifier(byte[],java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyByIssuerSerial(java.lang.String,java.math.BigInteger,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyByName(java.lang.String,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyBySTR(weblogic.xml.crypto.wss.provider.SecurityTokenReference,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyBySubjectName(java.lang.String,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyByURI(java.lang.String,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getSecurityToken()"/>
    </class>
    <class name="EncryptedKeyProvider">
      <method name="getKeyIdentifier(weblogic.xml.crypto.encrypt.api.keyinfo.EncryptedKey)"/>
      <field name="DEFAULT_GENKEY_ALG"/>
      <method name="getKeyIdentifiers(weblogic.xml.crypto.encrypt.api.keyinfo.EncryptedKey)"/>
      <method name="getKey(java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyByIdentifier(byte[],java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
    </class>
    <class name="KeyProvider">
      <field name="AES_ALGORITHMS"/>
      <field name="DSA_ALGORITHMS"/>
      <field name="RSA_ALGORITHMS"/>
      <field name="TRIPLEDES_ALGORITHMS"/>
      <method name="getKey(java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyByIdentifier(byte[],java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyByIssuerSerial(java.lang.String,java.math.BigInteger,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyByName(java.lang.String,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyBySTR(weblogic.xml.crypto.wss.provider.SecurityTokenReference,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyBySubjectName(java.lang.String,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
      <method name="getKeyByURI(java.lang.String,java.lang.String,weblogic.xml.crypto.api.KeySelector.Purpose)"/>
    </class>
    <class name="KeyResolver">
      <method name="getContextHandler(weblogic.xml.crypto.wss.WSSecurityInfo,java.lang.String,java.lang.Object)"/>
      <method name="removeKeyProvider(weblogic.xml.crypto.common.keyinfo.KeyProvider)"/>
      <field name="VERBOSE"/>
      <field name="VERBOSE_PROPERTY"/>
      <field name="BY_ALG_AND_PURPOSE"/>
      <field name="BY_KEY_NAME"/>
      <field name="BY_TOKEN_REFERENCE"/>
      <method name="addKeyProvider(weblogic.xml.crypto.common.keyinfo.KeyProvider)"/>
      <method name="select(weblogic.xml.crypto.dsig.api.keyinfo.KeyInfo,weblogic.xml.crypto.api.KeySelector.Purpose,weblogic.xml.crypto.api.AlgorithmMethod,weblogic.xml.crypto.api.XMLCryptoContext)"/>
      <method name="getKeyProviders()"/>
      <method name="copy()"/>
    </class>
  </package>
  <package name="weblogic.xml.crypto.dsig">
    <class name="KeyInfoObjectFactory">
      <method name="newKeyInfoObject(javax.xml.stream.XMLStreamReader)"/>
      <method name="getQName()"/>
    </class>
  </package>
  <package name="weblogic.xml.crypto.dsig.api.keyinfo">
    <class name="KeyInfo">
      <method name="getId()"/>
      <method name="getContent()"/>
    </class>
    <class name="X509IssuerSerial">
      <method name="getIssuerName()"/>
      <method name="getSerialNumber()"/>
    </class>
  </package>
  <package name="weblogic.xml.crypto.encrypt.api">
    <class name="CipherData" members="concealed"/>
    <class name="EncryptedType">
      <method name="decrypt(weblogic.xml.crypto.encrypt.api.XMLDecryptContext)"/>
      <method name="getCipherText()"/>
      <method name="getEncoding()"/>
      <method name="getId()"/>
      <method name="getMimeType()"/>
      <method name="getType()"/>
      <field name="CONTENT"/>
      <field name="ELEMENT"/>
      <method name="encrypt(weblogic.xml.crypto.encrypt.api.XMLEncryptContext)"/>
      <method name="getKeyInfo()"/>
      <method name="getCipherData()"/>
      <method name="getEncryptionMethod()"/>
      <method name="getEncryptionProperties()"/>
      <method name="getTBE()"/>
    </class>
    <class name="EncryptionMethod">
      <method name="getKeySize()"/>
      <field name="AES128_CBC"/>
      <field name="AES192_CBC"/>
      <field name="AES256_CBC"/>
      <field name="KW_AES128"/>
      <field name="KW_AES192"/>
      <field name="KW_AES256"/>
      <field name="KW_TRIPLEDES"/>
      <field name="RSA_1_5"/>
      <field name="RSA_OAEP_MGFLP"/>
      <field name="TRIPLEDES_CBC"/>
    </class>
    <class name="EncryptionProperties">
      <method name="getId()"/>
      <method name="getProperties()"/>
      <field name="TYPE"/>
    </class>
    <class name="TBE">
      <method name="getEncoding()"/>
      <method name="getMimeType()"/>
      <method name="getType()"/>
    </class>
    <class name="XMLDecryptContext" members="concealed"/>
    <class name="XMLEncryptContext" members="concealed"/>
    <class name="XMLEncryptionException" members="concealed"/>
  </package>
  <package name="weblogic.xml.crypto.encrypt.api.keyinfo">
    <class name="EncryptedKey">
      <method name="getCarriedKeyName()"/>
      <method name="getRecipient()"/>
      <method name="decryptKey(weblogic.xml.crypto.encrypt.api.XMLDecryptContext)"/>
      <method name="decryptKey(weblogic.xml.crypto.encrypt.api.XMLDecryptContext,weblogic.xml.crypto.api.AlgorithmMethod)"/>
      <method name="getReferenceList()"/>
      <field name="TYPE"/>
    </class>
  </package>
  <package name="weblogic.xml.crypto.wss">
    <class name="EncryptionInfo">
      <method name="getKey()"/>
      <method name="getNodes()"/>
    </class>
    <class name="SecurityTokenValidateResult">
      <method name="isDefferedValidation()"/>
      <method name="status()"/>
      <method name="getMsg()"/>
      <method name="toString()"/>
      <method name="setDefferedValidation(boolean)"/>
    </class>
    <class name="SignatureInfo">
      <method name="containsNode(org.w3c.dom.Node)"/>
      <method name="getC14NMethod()"/>
      <method name="getSignatureMethod()"/>
      <method name="getKey()"/>
      <method name="getReferences()"/>
    </class>
    <class name="WSSecurityContext">
      <field name="CREDENTIAL_PROVIDER_LIST"/>
      <field name="TRUST_MANAGER"/>
    </class>
    <class name="WSSecurityException">
      <method name="getFaultCode()"/>
    </class>
    <class name="WSSecurityInfo">
      <method name="getEncryptions()"/>
      <method name="getEncryptions(weblogic.xml.crypto.wss.provider.SecurityToken)"/>
      <method name="getSecurityTokens()"/>
      <method name="getSecurityTokens(java.lang.String)"/>
      <method name="getSignatures()"/>
      <method name="getSignatures(weblogic.xml.crypto.wss.provider.SecurityToken)"/>
      <method name="getTimestamp()"/>
    </class>
  </package>
  <package name="weblogic.xml.crypto.wss.api">
    <class name="KeyIdentifier">
      <method name="getIdentifier()"/>
      <method name="getEncodingType()"/>
    </class>
  </package>
  <package name="weblogic.xml.crypto.wss.provider">
    <class name="CredentialProvider">
      <method name="getCredential(java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="getValueTypes()"/>
    </class>
    <class name="Purpose">
      <method name="toString()"/>
      <field name="DECRYPT"/>
      <field name="ENCRYPT"/>
      <field name="ENCRYPT_RESPONSE"/>
      <field name="IDENTITY"/>
      <field name="SIGN"/>
      <field name="VERIFY"/>
      <method name="convert(weblogic.xml.crypto.api.KeySelector.Purpose)"/>
    </class>
    <class name="SecurityTokenHandler">
      <method name="matches(weblogic.xml.crypto.wss.provider.SecurityToken,java.lang.String,java.lang.String,weblogic.security.service.ContextHandler,weblogic.xml.crypto.wss.provider.Purpose)"/>
      <method name="getValueTypes()"/>
      <method name="getSubject(weblogic.xml.crypto.wss.provider.SecurityToken,javax.xml.rpc.handler.MessageContext)"/>
      <method name="getQNames()"/>
      <method name="getKeyProvider(weblogic.xml.crypto.wss.provider.SecurityToken,javax.xml.rpc.handler.MessageContext)"/>
      <method name="validateProcessed(weblogic.xml.crypto.wss.provider.SecurityToken,javax.xml.rpc.handler.MessageContext)"/>
      <method name="validateUnmarshalled(weblogic.xml.crypto.wss.provider.SecurityToken,javax.xml.rpc.handler.MessageContext)"/>
      <method name="getSecurityToken(java.lang.String,java.lang.Object,weblogic.security.service.ContextHandler)"/>
      <method name="getSecurityToken(java.lang.String,java.lang.String,weblogic.xml.crypto.wss.provider.Purpose,weblogic.security.service.ContextHandler)"/>
      <method name="getSecurityToken(weblogic.xml.crypto.wss.provider.SecurityTokenReference,javax.xml.rpc.handler.MessageContext)"/>
      <method name="newSecurityToken(org.w3c.dom.Node)"/>
      <method name="getSTR(javax.xml.namespace.QName,java.lang.String,weblogic.xml.crypto.wss.provider.SecurityToken)"/>
      <method name="newSecurityTokenReference(org.w3c.dom.Node)"/>
    </class>
  </package>
  <package name="weblogic.xml.schema.binding">
    <class name="ClassContext">
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="setSchemaType(weblogic.xml.stream.XMLName)"/>
      <method name="getSchemaType()"/>
    </class>
    <class name="CustomSchema">
      <method name="getSchema(javax.xml.namespace.QName,java.lang.String)"/>
    </class>
    <class name="DeserializationContext">
      <method name="isStrictValidation()"/>
      <method name="isValidateLocalNameOnly()"/>
      <method name="isValidateNames()"/>
      <method name="getObjectFromReference(java.lang.String)"/>
      <method name="resolveNullObject(java.lang.Object)"/>
      <method name="getCurrentPrefixToNamespaceMap()"/>
      <method name="getSOAPElement()"/>
      <method name="getSOAPMessage()"/>
      <method name="clearReferenceMap()"/>
      <method name="setCurrentPrefixToNamespaceMap(java.util.Map)"/>
      <method name="setEncodingStyle(weblogic.xml.schema.binding.EncodingStyle)"/>
      <method name="setMapping(weblogic.xml.schema.binding.TypeMapping)"/>
      <method name="setSOAPElement(javax.xml.soap.SOAPElement)"/>
      <method name="setSOAPMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="setStrictValidation(boolean)"/>
      <method name="setValidateLocalNameOnly(boolean)"/>
      <method name="setValidateNames(boolean)"/>
      <method name="storeObjectWithReference(java.lang.String,java.lang.Object)"/>
      <method name="getEncodingStyle()"/>
      <method name="getMapping()"/>
    </class>
    <class name="Deserializer">
      <method name="deserialize(weblogic.xml.stream.XMLName,weblogic.xml.stream.Attribute,weblogic.xml.schema.binding.DeserializationContext)"/>
      <method name="deserialize(weblogic.xml.stream.XMLName,weblogic.xml.stream.XMLInputStream,weblogic.xml.schema.binding.DeserializationContext)"/>
    </class>
    <class name="EncodingStyle">
      <method name="getEncodingName()"/>
      <method name="toString()"/>
      <field name="LITERAL"/>
      <field name="SOAP"/>
    </class>
    <class name="Holder">
      <method name="getValue()"/>
      <method name="setValue(java.lang.Object)"/>
    </class>
    <class name="SchemaContext">
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getJavaType()"/>
      <method name="setJavaType(java.lang.String)"/>
    </class>
    <class name="SerializationContext">
      <method name="isInAttribute()"/>
      <method name="isInTopLevelElement()"/>
      <method name="isIncludeXsiType()"/>
      <method name="isMultiRefEmpty()"/>
      <method name="isQualifyElements()"/>
      <method name="isStrictValidation()"/>
      <method name="getNextRandomPrefix()"/>
      <method name="getPrefixForUri(java.lang.String)"/>
      <method name="getNamespacePrefixMap()"/>
      <method name="getSOAPElement()"/>
      <method name="getSOAPMessage()"/>
      <method name="setEncodingStyle(weblogic.xml.schema.binding.EncodingStyle)"/>
      <method name="setInAttribute(boolean)"/>
      <method name="setInTopLevelElement(boolean)"/>
      <method name="setIncludeXsiType(boolean)"/>
      <method name="setMapping(weblogic.xml.schema.binding.TypeMapping)"/>
      <method name="setNamespacePrefixMap(java.util.Map)"/>
      <method name="setPhase(weblogic.xml.schema.binding.SerializationPhase)"/>
      <method name="setQualifyElements(boolean)"/>
      <method name="setSOAPElement(javax.xml.soap.SOAPElement)"/>
      <method name="setSOAPMessage(javax.xml.soap.SOAPMessage)"/>
      <method name="setStrictValidation(boolean)"/>
      <method name="getEncodingStyle()"/>
      <method name="getPhase()"/>
      <method name="getMapping()"/>
      <method name="getObjectRefTable()"/>
    </class>
    <class name="SerializationPhase">
      <method name="toString()"/>
      <field name="FILL"/>
      <field name="FINAL_WRITE"/>
      <field name="INITIAL_WRITE"/>
    </class>
    <class name="Serializer">
      <method name="serialize(java.lang.Object,weblogic.xml.stream.XMLName,weblogic.xml.stream.XMLOutputStream,weblogic.xml.schema.binding.SerializationContext)"/>
    </class>
    <class name="TypeMapping">
      <method name="add(java.lang.Class,weblogic.xml.stream.XMLName,javax.xml.rpc.encoding.SerializerFactory,javax.xml.rpc.encoding.DeserializerFactory)"/>
      <method name="add(java.lang.Class,weblogic.xml.stream.XMLName,weblogic.xml.schema.binding.Serializer,weblogic.xml.schema.binding.Deserializer)"/>
      <method name="add(weblogic.xml.schema.binding.TypeMappingEntry)"/>
      <method name="getClassFromXMLName(weblogic.xml.stream.XMLName)"/>
      <method name="getHolderClass(java.lang.Class,javax.xml.namespace.QName)"/>
      <method name="readXML(weblogic.xml.stream.XMLInputStream)"/>
      <method name="remove(weblogic.xml.schema.binding.TypeMappingEntry)"/>
      <method name="replace(weblogic.xml.schema.binding.TypeMappingEntry)"/>
      <method name="setParent(weblogic.xml.schema.binding.TypeMapping)"/>
      <method name="writeXML(weblogic.xml.stream.XMLOutputStream)"/>
      <method name="getParent()"/>
      <method name="get(java.lang.Class,weblogic.xml.schema.binding.ClassContext)"/>
      <method name="get(weblogic.xml.stream.XMLName,weblogic.xml.schema.binding.SchemaContext)"/>
      <method name="getEntries()"/>
      <method name="getXMLNameFromClass(java.lang.Class)"/>
    </class>
    <class name="TypeMappingEntry">
      <method name="getJavaType()"/>
      <method name="getDeserializer()"/>
      <method name="getSerializer()"/>
      <method name="setClassContext(weblogic.xml.schema.binding.ClassContext)"/>
      <method name="setDeserializer(javax.xml.rpc.encoding.DeserializerFactory)"/>
      <method name="setJavaType(java.lang.Class)"/>
      <method name="setSchemaContext(weblogic.xml.schema.binding.SchemaContext)"/>
      <method name="setSchemaType(weblogic.xml.stream.XMLName)"/>
      <method name="setSerializer(javax.xml.rpc.encoding.SerializerFactory)"/>
      <method name="getClassContext()"/>
      <method name="getSchemaContext()"/>
      <method name="getSchemaType()"/>
    </class>
  </package>
  <package name="weblogic.xml.schema.binding.util.runtime">
    <class name="ObjectRefTable">
      <method name="containsKey(java.lang.Object)"/>
      <method name="size()"/>
      <method name="getMultiRefObjects()"/>
      <method name="main(java.lang.String[])"/>
      <method name="clear()"/>
      <method name="dump(java.io.PrintStream)"/>
      <method name="put(java.lang.Object,weblogic.xml.schema.binding.util.runtime.ObjectRefTable.Entry)"/>
      <method name="get(java.lang.Object)"/>
      <method name="remove(java.lang.Object)"/>
    </class>
  </package>
  <package name="weblogic.xml.security">
    <class name="NamedKey">
      <method name="getIdentifier()"/>
      <method name="getName()"/>
      <method name="getKey()"/>
      <method name="setReferenceList(weblogic.xml.security.encryption.ReferenceList)"/>
      <method name="getReferenceList()"/>
    </class>
    <class name="SecurityAssertion">
      <method name="isAssertionType(java.lang.String)"/>
      <method name="repudiable()"/>
      <method name="getAssertionTypeCode()"/>
      <method name="getAssertionType()"/>
      <field name="CONFIDENTIALITY_CODE"/>
      <field name="IDENTITY_CODE"/>
      <field name="INTEGRITY_CODE"/>
      <field name="TYPE_CONFIDENTIALITY_CODE"/>
      <field name="TYPE_INTEGRITY_CODE"/>
      <field name="CONFIDENTIALITY_ASSERTION"/>
      <field name="IDENTITY_ASSERTION"/>
      <field name="INTEGRITY_ASSERTION"/>
      <field name="TYPE_CONFIDENTIALITY_ASSERTION"/>
      <field name="TYPE_INTEGRITY_ASSERTION"/>
    </class>
    <class name="UserInfo">
      <method name="verifyPassword(java.lang.String)"/>
      <method name="getPasswordDigest()"/>
      <method name="getPassword()"/>
      <method name="getUsername()"/>
    </class>
  </package>
  <package name="weblogic.xml.security.assertion">
    <class name="ConfidentialityAssertion">
      <method name="isAssertionType(java.lang.String)"/>
      <method name="repudiable()"/>
      <method name="getAssertionTypeCode()"/>
      <method name="getAssertionType()"/>
      <method name="getId()"/>
      <field name="id"/>
    </class>
    <class name="ElementAssertion">
      <method name="satisfies(weblogic.xml.security.specs.ElementIdentifier)"/>
      <method name="getElementLocalName()"/>
      <method name="getElementNamespace()"/>
      <method name="getRestriction()"/>
      <method name="getElementName()"/>
      <field name="BODY"/>
      <field name="HEADER"/>
    </class>
    <class name="ElementAssertionUtils" members="concealed"/>
    <class name="ElementConfidentialityAssertion">
      <method name="isAssertionType(java.lang.String)"/>
      <method name="satisfies(weblogic.xml.security.specs.ElementIdentifier)"/>
      <method name="getAssertionTypeCode()"/>
      <method name="getAssertionType()"/>
      <method name="getElementLocalName()"/>
      <method name="getElementNamespace()"/>
      <method name="getRestriction()"/>
      <method name="toString()"/>
      <method name="getElementName()"/>
    </class>
    <class name="ElementIntegrityAssertion">
      <method name="isAssertionType(java.lang.String)"/>
      <method name="satisfies(weblogic.xml.security.specs.ElementIdentifier)"/>
      <method name="getAssertionTypeCode()"/>
      <method name="getAssertionType()"/>
      <method name="getElementLocalName()"/>
      <method name="getElementNamespace()"/>
      <method name="getId()"/>
      <method name="getPolicyString()"/>
      <method name="getRestriction()"/>
      <method name="toString()"/>
      <method name="getElementName()"/>
    </class>
    <class name="IdentityAssertion">
      <method name="isAssertionType(java.lang.String)"/>
      <method name="repudiable()"/>
      <method name="getAssertionTypeCode()"/>
      <method name="getProofType()"/>
      <method name="getAssertionType()"/>
      <method name="proofAsString()"/>
      <method name="toString()"/>
      <method name="getX509Certificate()"/>
      <field name="NO_PROOF"/>
      <field name="POSSESSION_PROOF"/>
      <field name="SHARED_SECRET_PROOF"/>
      <field name="STRING_NO_PROOF"/>
      <field name="STRING_POSSESSION_PROOF"/>
      <field name="STRING_SHARED_SECRET_PROOF"/>
      <method name="getUserInfo()"/>
    </class>
    <class name="IntegrityAssertion">
      <method name="isAssertionType(java.lang.String)"/>
      <method name="repudiable()"/>
      <field name="id"/>
      <method name="getAssertionTypeCode()"/>
      <method name="getAssertionType()"/>
      <method name="getId()"/>
      <method name="getPolicyString()"/>
      <method name="getSignatureMethod()"/>
      <method name="toString()"/>
      <method name="getCertificate()"/>
      <method name="getType()"/>
    </class>
    <class name="ServerHelper">
      <method name="getSubject(weblogic.xml.security.assertion.IntegrityAssertion)"/>
      <method name="setSubject(weblogic.xml.security.assertion.IntegrityAssertion,javax.security.auth.Subject)"/>
    </class>
  </package>
  <package name="weblogic.xml.security.encryption">
    <class name="CipherData">
      <method name="getCipherBytes()"/>
      <method name="getInputStream()"/>
      <method name="getOutputStream()"/>
      <method name="clear()"/>
      <method name="setCipherBytes(byte[])"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
    </class>
    <class name="DataReference">
      <method name="getURI()"/>
      <method name="toString()"/>
    </class>
    <class name="EncryptedKey">
      <method name="getWrappedKeyBytes()"/>
      <method name="getCarriedKeyName()"/>
      <method name="getRecipient()"/>
      <method name="toString()"/>
      <method name="getWrappedKey()"/>
      <method name="getWrappedKey(weblogic.xml.security.encryption.EncryptionMethod)"/>
      <method name="getWrappedKey(weblogic.xml.security.encryption.EncryptionMethod,byte[])"/>
      <method name="main(java.lang.String[])"/>
      <method name="setCarriedKeyName(java.lang.String)"/>
      <method name="setEncryptionMethod(weblogic.xml.security.encryption.EncryptionMethod)"/>
      <method name="setRecipient(java.lang.String)"/>
      <method name="setReferenceList(weblogic.xml.security.encryption.ReferenceList)"/>
      <method name="setWrappedKey(java.security.Key)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,int)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="getReferenceList()"/>
    </class>
    <class name="EncryptedType">
      <method name="getType()"/>
      <method name="getEncryptionMethod()"/>
      <method name="getId()"/>
      <method name="getTypeURI()"/>
      <method name="toString()"/>
      <method name="getKey()"/>
      <field name="nsMap"/>
      <field name="TYPE_CONTENT"/>
      <field name="TYPE_ELEMENT"/>
      <field name="TYPE_OTHER"/>
      <field name="TYPE_CONTENT_URI"/>
      <field name="TYPE_ELEMENT_URI"/>
      <method name="clear()"/>
      <method name="setCipherData(weblogic.xml.security.encryption.CipherData)"/>
      <method name="setEncryptionMethod(java.lang.String)"/>
      <method name="setEncryptionMethod(weblogic.xml.security.encryption.EncryptionMethod)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setKey(java.security.Key)"/>
      <method name="setKey(weblogic.xml.security.encryption.EncryptedKey)"/>
      <method name="setKeyInfo(weblogic.xml.security.keyinfo.KeyInfo)"/>
      <method name="setKeyResolver(weblogic.xml.security.keyinfo.KeyResolver)"/>
      <method name="setType(int)"/>
      <method name="setType(java.lang.String)"/>
      <method name="getCipherData()"/>
      <method name="getKeyInfo()"/>
      <method name="getKeyResolver()"/>
    </class>
    <class name="EncryptionMethod">
      <method name="fromXMLInternal(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="toXMLInternal(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="getURI()"/>
      <method name="toString()"/>
      <field name="AES128_CBC"/>
      <field name="AES192_CBC"/>
      <field name="AES256_CBC"/>
      <field name="KW_AES128"/>
      <field name="KW_AES192"/>
      <field name="KW_AES256"/>
      <field name="KW_RSA_1_5"/>
      <field name="KW_RSA_OAEP"/>
      <field name="KW_TRIPLEDES"/>
      <field name="TRIPLEDES_CBC"/>
      <method name="main(java.lang.String[])"/>
      <method name="register(weblogic.xml.security.encryption.EncryptionMethodFactory)"/>
      <method name="get(java.lang.String)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
    </class>
    <class name="EncryptionMethodFactory">
      <method name="getURI()"/>
      <method name="newEncryptionMethod()"/>
    </class>
    <class name="KeyReference">
      <method name="getURI()"/>
      <method name="toString()"/>
    </class>
    <class name="ReferenceList">
      <method name="toString()"/>
      <method name="getReferences()"/>
      <method name="main(java.lang.String[])"/>
      <method name="addReference(weblogic.xml.security.encryption.DataReference)"/>
      <method name="addReference(weblogic.xml.security.encryption.KeyReference)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
    </class>
    <class name="XMLEncConstants">
      <field name="CONTENT_ONLY"/>
      <field name="VERBOSE"/>
      <field name="TC_ENCRYPTED_DATA"/>
      <field name="TC_ENCRYPTED_KEY"/>
      <field name="TC_ENCRYPTION_METHOD"/>
      <field name="TC_REFERENCE_LIST"/>
      <field name="ATTR_ALGORITHM"/>
      <field name="ATTR_ENCODING"/>
      <field name="ATTR_ID"/>
      <field name="ATTR_MIME_TYPE"/>
      <field name="ATTR_RECIPIENT"/>
      <field name="ATTR_TYPE"/>
      <field name="ATTR_URI"/>
      <field name="CONTENT_ONLY_PROPERTY"/>
      <field name="DEFAULT_ENC_ENCODING"/>
      <field name="TAG_CARRIED_KEY_NAME"/>
      <field name="TAG_CIPHER_DATA"/>
      <field name="TAG_CIPHER_VALUE"/>
      <field name="TAG_DATA_REFERENCE"/>
      <field name="TAG_ENCRYPTED_DATA"/>
      <field name="TAG_ENCRYPTED_KEY"/>
      <field name="TAG_ENCRYPTED_TYPE"/>
      <field name="TAG_ENCRYPTION_METHOD"/>
      <field name="TAG_KEY_REFERENCE"/>
      <field name="TAG_KEY_SIZE"/>
      <field name="TAG_OAEP_PARAMS"/>
      <field name="TAG_REFERENCE_LIST"/>
      <field name="VERBOSE_PROPERTY"/>
      <field name="VERBOSE_PROPERTY_ALT"/>
      <field name="XMLENC_PREFIX"/>
      <field name="XMLENC_URI"/>
    </class>
  </package>
  <package name="weblogic.xml.security.keyinfo">
    <class name="KeyInfo">
      <method name="getKeyName()"/>
      <method name="toString()"/>
      <method name="getCertificates()"/>
      <method name="getEncryptedKeys()"/>
      <method name="getKeyNames()"/>
      <method name="getKeyValues()"/>
      <method name="getPublicKeys()"/>
      <method name="getSecurityTokenReferences()"/>
      <method name="getSubjectNames()"/>
      <method name="getX509Data()"/>
      <method name="main(java.lang.String[])"/>
      <method name="addEncryptedKey(weblogic.xml.security.encryption.EncryptedKey)"/>
      <method name="addKeyName(java.lang.String)"/>
      <method name="addKeyValue(weblogic.xml.security.keyinfo.KeyValue)"/>
      <method name="addSecurityTokenReference(weblogic.xml.security.wsse.SecurityTokenReference)"/>
      <method name="addSecurityTokenReference(weblogic.xml.security.wsse.Token)"/>
      <method name="addX509Data(weblogic.xml.security.keyinfo.X509Data)"/>
      <method name="removeEncryptedKey(weblogic.xml.security.encryption.EncryptedKey)"/>
      <method name="removeKeyName(java.lang.String)"/>
      <method name="removeKeyValue(weblogic.xml.security.keyinfo.KeyValue)"/>
      <method name="removeSecurityTokenReference(weblogic.xml.security.wsse.SecurityTokenReference)"/>
      <method name="removeX509Data(weblogic.xml.security.keyinfo.X509Data)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,int)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="validate()"/>
    </class>
    <class name="KeyInfoException" members="concealed"/>
    <class name="KeyInfoValidationException" members="concealed"/>
    <class name="KeyProvider">
      <field name="AES_ALGORITHMS"/>
      <field name="DSA_ALGORITHMS"/>
      <field name="RSA_ALGORITHMS"/>
      <field name="TRIPLEDES_ALGORITHMS"/>
      <method name="getKey(java.lang.String,weblogic.xml.security.keyinfo.KeyPurpose)"/>
      <method name="getKeyByIdentifier(byte[],java.lang.String,weblogic.xml.security.keyinfo.KeyPurpose)"/>
      <method name="getKeyByIssuerSerial(java.lang.String,java.math.BigInteger,java.lang.String,weblogic.xml.security.keyinfo.KeyPurpose)"/>
      <method name="getKeyByName(java.lang.String,java.lang.String,weblogic.xml.security.keyinfo.KeyPurpose)"/>
      <method name="getKeyBySubjectName(java.lang.String,java.lang.String,weblogic.xml.security.keyinfo.KeyPurpose)"/>
      <method name="getKeyByURI(java.lang.String,java.lang.String,weblogic.xml.security.keyinfo.KeyPurpose)"/>
    </class>
    <class name="KeyPurpose">
      <method name="serves(weblogic.xml.security.keyinfo.KeyPurpose[],weblogic.xml.security.keyinfo.KeyPurpose)"/>
      <method name="served(weblogic.xml.security.keyinfo.KeyPurpose[])"/>
      <method name="toString()"/>
      <field name="DECRYPT"/>
      <field name="ENCRYPT"/>
      <field name="SIGN"/>
      <field name="VERIFY"/>
      <field name="ALL_PURPOSES"/>
      <field name="DSA_PRIVATE_KEY_PURPOSES"/>
      <field name="DSA_PUBLIC_KEY_PURPOSES"/>
      <field name="PRIVATE_KEY_PURPOSES"/>
      <field name="PUBLIC_KEY_PURPOSES"/>
      <method name="getPurposes(java.security.Key)"/>
    </class>
    <class name="KeyResolver">
      <method name="removeKeyProvider(weblogic.xml.security.keyinfo.KeyProvider)"/>
      <field name="BY_ALG_AND_PURPOSE"/>
      <field name="BY_KEY_NAME"/>
      <field name="BY_TOKEN_REFERENCE"/>
      <field name="BY_X509_DATA"/>
      <method name="addKeyProvider(weblogic.xml.security.keyinfo.KeyProvider)"/>
      <method name="getKeyProviders()"/>
      <method name="copy()"/>
      <method name="resolveKey(weblogic.xml.security.keyinfo.KeyPurpose,java.lang.String,weblogic.xml.security.keyinfo.KeyInfo)"/>
    </class>
    <class name="KeyResult">
      <method name="getKey()"/>
    </class>
    <class name="KeyValue">
      <method name="createFromKeySpec(java.lang.String,java.security.spec.KeySpec)"/>
      <method name="getPublicKey()"/>
      <method name="fromXML(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="getKeyValue(java.security.PublicKey)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="validate()"/>
    </class>
    <class name="X509Data">
      <method name="getCertificates()"/>
      <method name="getIssuerSerials()"/>
      <method name="getSubjectNames()"/>
      <method name="main(java.lang.String[])"/>
      <method name="addCertificate(java.security.cert.X509Certificate)"/>
      <method name="addIssuerSerial(weblogic.xml.security.keyinfo.X509IssuerSerial)"/>
      <method name="addSubjectName(java.lang.String)"/>
      <method name="removeCertificate(java.security.cert.X509Certificate)"/>
      <method name="removeIssuerSerial(weblogic.xml.security.keyinfo.X509IssuerSerial)"/>
      <method name="removeSubjectName(java.lang.String)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="validate()"/>
    </class>
    <class name="X509IssuerSerial">
      <method name="getIssuerName()"/>
      <method name="toString()"/>
      <method name="getIssuerSerialNumber()"/>
      <method name="fromXML(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
    </class>
  </package>
  <package name="weblogic.xml.security.signature">
    <class name="CanonicalizationMethod">
      <method name="getInclusiveNamesspacesPrefixList()"/>
      <method name="getInclusiveNamesSpacesFromXml(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="getURI()"/>
      <method name="toString()"/>
      <field name="EXC"/>
      <field name="W3C"/>
      <field name="W3C_WC"/>
      <method name="main(java.lang.String[])"/>
      <method name="register(weblogic.xml.security.signature.CanonicalizationMethodFactory)"/>
      <method name="get(java.lang.String)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="canonicalize(java.io.OutputStream,java.util.Map)"/>
    </class>
    <class name="CanonicalizationMethodFactory">
      <method name="getURI()"/>
      <method name="newCanonicalizationMethod()"/>
    </class>
    <class name="DSIGConstants">
      <field name="VERBOSE"/>
      <field name="TC_C14N_METHOD"/>
      <field name="TC_DIGEST_METHOD"/>
      <field name="TC_DSA_KEY_VALUE"/>
      <field name="TC_KEY_INFO"/>
      <field name="TC_KEY_VALUE"/>
      <field name="TC_REFERENCE"/>
      <field name="TC_RSA_KEY_VALUE"/>
      <field name="TC_SIGNATURE"/>
      <field name="TC_SIGNATURE_METHOD"/>
      <field name="TC_SIGNED_INFO"/>
      <field name="TC_TRANSFORMS"/>
      <field name="TC_X509_DATA"/>
      <field name="ATTR_ALGORITHM"/>
      <field name="ATTR_ID"/>
      <field name="ATTR_PREFIX_LIST"/>
      <field name="ATTR_URI"/>
      <field name="ATTR_XMLNS"/>
      <field name="DSIG_PREFIX"/>
      <field name="DSIG_URI"/>
      <field name="DSIG_URI2"/>
      <field name="EXC_C14N_DEFAULT_PREFIX"/>
      <field name="TAG_C14N_METHOD"/>
      <field name="TAG_DIGEST_METHOD"/>
      <field name="TAG_DIGEST_VALUE"/>
      <field name="TAG_DSA_G"/>
      <field name="TAG_DSA_KEY_VALUE"/>
      <field name="TAG_DSA_P"/>
      <field name="TAG_DSA_Q"/>
      <field name="TAG_DSA_Y"/>
      <field name="TAG_HMAC_OUTPUT_LENGTH"/>
      <field name="TAG_INCLUSIVE_NAMESPACES"/>
      <field name="TAG_KEY_INFO"/>
      <field name="TAG_KEY_NAME"/>
      <field name="TAG_KEY_VALUE"/>
      <field name="TAG_OBJECT"/>
      <field name="TAG_REFERENCE"/>
      <field name="TAG_RSA_EXPONENT"/>
      <field name="TAG_RSA_KEY_VALUE"/>
      <field name="TAG_RSA_MODULUS"/>
      <field name="TAG_SIGNATURE"/>
      <field name="TAG_SIGNATURE_METHOD"/>
      <field name="TAG_SIGNATURE_VALUE"/>
      <field name="TAG_SIGNED_INFO"/>
      <field name="TAG_TRANSFORM"/>
      <field name="TAG_TRANSFORMS"/>
      <field name="TAG_X509_CERTIFICATE"/>
      <field name="TAG_X509_DATA"/>
      <field name="TAG_X509_ISSUER_NAME"/>
      <field name="TAG_X509_ISSUER_SERIAL"/>
      <field name="TAG_X509_SERIAL_NUMBER"/>
      <field name="TAG_X509_SUBJECT_NAME"/>
      <field name="TAG_XPATH"/>
      <field name="VERBOSE_PROPERTY"/>
      <field name="VERBOSE_PROPERTY_ALT"/>
    </class>
    <class name="DigestMethod">
      <method name="getURI()"/>
      <method name="toString()"/>
      <method name="getMessageDigest()"/>
      <field name="SHA1"/>
      <field name="SHA256"/>
      <field name="SHA512"/>
      <method name="main(java.lang.String[])"/>
      <method name="register(weblogic.xml.security.signature.DigestMethodFactory)"/>
      <method name="get(java.lang.String)"/>
      <method name="fromXMLInternal(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
    </class>
    <class name="DigestMethodFactory">
      <method name="getURI()"/>
      <method name="newDigestMethod()"/>
    </class>
    <class name="Reference">
      <method name="getURI()"/>
      <method name="toString()"/>
      <method name="main(java.lang.String[])"/>
      <method name="addTransform(weblogic.xml.security.transforms.Transform)"/>
      <method name="print(java.lang.String,byte[])"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
    </class>
    <class name="Signature">
      <method name="getSignatureMethod()"/>
      <method name="getReferences()"/>
      <method name="main(java.lang.String[])"/>
      <method name="addReference(weblogic.xml.security.signature.Reference)"/>
      <method name="setCanonicalizationMethod(java.lang.String)"/>
      <method name="setCanonicalizationMethod(weblogic.xml.security.signature.CanonicalizationMethod)"/>
      <method name="setKeyInfo(weblogic.xml.security.keyinfo.KeyInfo)"/>
      <method name="setSignatureMethod(java.lang.String)"/>
      <method name="sign(java.security.Key)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="validate(java.security.Key)"/>
      <method name="validateReferences()"/>
      <method name="validateSignature(weblogic.xml.security.keyinfo.KeyResolver)"/>
      <method name="getKeyInfo()"/>
      <method name="getValidatingKey()"/>
    </class>
  </package>
  <package name="weblogic.xml.security.specs">
    <class name="BinarySecurityTokenSpec">
      <method name="fromXMLInternal(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="getEncoding()"/>
      <method name="getValueType()"/>
      <method name="toString()"/>
      <field name="DEFAULT_SPEC"/>
      <method name="getDefaultSpec()"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
    </class>
    <class name="ElementIdentifier">
      <method name="fromXMLInternal(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getLocalName()"/>
      <method name="getNamespace()"/>
      <method name="getRestriction()"/>
      <method name="toString()"/>
      <method name="validRestriction(java.lang.String)"/>
      <method name="main(java.lang.String[])"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="getXMLName()"/>
    </class>
    <class name="EncryptionKey">
      <method name="elementTagName()"/>
    </class>
    <class name="EncryptionSpec">
      <method name="getEncryptionMethod()"/>
      <method name="getKeyWrappingMethod()"/>
      <method name="toString()"/>
      <method name="getDefaultSpec()"/>
      <method name="setKeyWrappingMethod(java.lang.String)"/>
    </class>
    <class name="EntityDescriptor">
      <method name="elementTagName()"/>
      <method name="getName()"/>
      <method name="getPassword()"/>
      <method name="getValue(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="fromXMLInternal(weblogic.xml.stream.XMLInputStream)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream)"/>
    </class>
    <class name="OperationSpec">
      <method name="entireBody()"/>
      <field name="bodyList"/>
      <field name="headerList"/>
      <field name="unrestrictedList"/>
      <method name="addElement(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="addElement(javax.xml.namespace.QName,java.lang.String)"/>
    </class>
    <class name="SecurityDD">
      <method name="toString()"/>
      <method name="getSecuritySpecs()"/>
      <method name="main(java.lang.String[])"/>
      <method name="getDefaultSecurityDD()"/>
      <method name="addSecuritySpec(weblogic.xml.security.specs.SecuritySpec)"/>
      <method name="setEncryptionKey(weblogic.xml.security.specs.EncryptionKey)"/>
      <method name="setSigningKey(weblogic.xml.security.specs.SignatureKey)"/>
      <method name="setUser(weblogic.xml.security.specs.User)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream)"/>
      <method name="getEncryptionKey()"/>
      <method name="getSecuritySpec()"/>
      <method name="getSecuritySpec(java.lang.String)"/>
      <method name="getSpec()"/>
      <method name="removeSecuritySpec(java.lang.String)"/>
      <method name="getSigningKey()"/>
      <method name="getUser()"/>
    </class>
    <class name="SecuritySpec">
      <method name="getEnablePasswordAuth()"/>
      <method name="getId()"/>
      <method name="getRole()"/>
      <field name="DEFAULT_SPEC_ID"/>
      <method name="setEnablePasswordAuth(boolean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setNamespace(java.lang.String)"/>
      <method name="setRole(java.lang.String)"/>
      <method name="setBinarySecurityTokenSpec(java.lang.String)"/>
      <method name="setBinarySecurityTokenSpec(weblogic.xml.security.specs.BinarySecurityTokenSpec)"/>
      <method name="getEncryptionSpec()"/>
      <method name="setEncryptionSpec(java.lang.String,java.security.cert.X509Certificate)"/>
      <method name="setEncryptionSpec(java.lang.String,java.security.cert.X509Certificate,boolean)"/>
      <method name="setEncryptionSpec(weblogic.xml.security.specs.EncryptionSpec)"/>
      <method name="getSignatureSpec()"/>
      <method name="setSignatureSpec(java.lang.String,java.lang.String)"/>
      <method name="setSignatureSpec(java.lang.String,java.lang.String,boolean)"/>
      <method name="setSignatureSpec(weblogic.xml.security.specs.SignatureSpec)"/>
    </class>
    <class name="SignatureKey">
      <method name="elementTagName()"/>
    </class>
    <class name="SignatureSpec">
      <method name="getCanonicalizationMethod()"/>
      <method name="getSignatureMethod()"/>
      <method name="getDefaultSpec()"/>
    </class>
    <class name="SpecBase">
      <method name="fromXMLInternal(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
    </class>
    <class name="SpecConstants">
      <field name="ATTR_CANONICALIZATION_METHOD"/>
      <field name="ATTR_ENCODING"/>
      <field name="ATTR_ENCRYPTION_METHOD"/>
      <field name="ATTR_ENCRYPT_BODY"/>
      <field name="ATTR_ID"/>
      <field name="ATTR_KEYWRAPPING_METHOD"/>
      <field name="ATTR_KEY_ALIAS"/>
      <field name="ATTR_KEY_PASSWORD"/>
      <field name="ATTR_LOCALPART"/>
      <field name="ATTR_NAMESPACE"/>
      <field name="ATTR_PASSWORDTYPE"/>
      <field name="ATTR_REALM"/>
      <field name="ATTR_REF_ID"/>
      <field name="ATTR_RESTRICTION"/>
      <field name="ATTR_SIGNATURE_METHOD"/>
      <field name="ATTR_SIGN_BODY"/>
      <field name="ATTR_VALUETYPE"/>
      <field name="DEFAULT_PREFIX"/>
      <field name="RESTRICTION_BODY"/>
      <field name="RESTRICTION_HEADER"/>
      <field name="SOAP_ATTR_ROLE"/>
      <field name="SOAP_ENV_PREFIX"/>
      <field name="SPEC_URI"/>
      <field name="TAG_BINARY_SECURITY_TOKEN_SPEC"/>
      <field name="TAG_CLOCKS_SYNCHRONIZED"/>
      <field name="TAG_CLOCK_PRECISION"/>
      <field name="TAG_DD_SECURITY"/>
      <field name="TAG_ENCRYPTION_KEY"/>
      <field name="TAG_ENCRYPTION_SPEC"/>
      <field name="TAG_ENFORCE_PRECISION"/>
      <field name="TAG_ENTITY_NAME"/>
      <field name="TAG_ENTITY_PASSWORD"/>
      <field name="TAG_FRESHNESS"/>
      <field name="TAG_GENERATE_TS"/>
      <field name="TAG_REQUIRE_TS"/>
      <field name="TAG_SECURITY_SPEC"/>
      <field name="TAG_SECURITY_SPEC_REF"/>
      <field name="TAG_SIGNATURE_KEY"/>
      <field name="TAG_SIGNATURE_SPEC"/>
      <field name="TAG_TS_CONFIG"/>
      <field name="TAG_TYPE_IDENTIFIER"/>
      <field name="TAG_USER"/>
      <field name="TAG_USERNAME_TOKEN_SPEC"/>
      <field name="TAG_VALIDITY"/>
      <field name="XSD_FALSE"/>
      <field name="XSD_TRUE"/>
    </class>
    <class name="User">
      <method name="elementTagName()"/>
    </class>
  </package>
  <package name="weblogic.xml.security.transforms">
    <class name="Transform">
      <method name="fromXMLInternal(weblogic.xml.stream.XMLInputStream,java.lang.String)"/>
      <method name="toXMLInternal(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="getURI()"/>
      <field name="ENVELOPED"/>
      <field name="W3C_C14N"/>
      <field name="W3C_C14N_WC"/>
      <field name="W3C_EXC_C14N"/>
      <field name="W3C_EXC_C14N_WC"/>
      <field name="XPATH"/>
      <field name="xfactory"/>
      <method name="main(java.lang.String[])"/>
      <method name="getTransform(java.lang.String)"/>
      <method name="setDest(weblogic.xml.security.transforms.Transform)"/>
      <method name="setNamespaces(java.util.Map)"/>
      <method name="setParameter(java.lang.String,java.lang.String)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream,java.lang.String,int)"/>
      <method name="getXMLOutputStream()"/>
    </class>
  </package>
  <package name="weblogic.xml.security.utils">
    <class name="XMLObjectReader">
      <method name="register(java.lang.String,java.lang.String,int)"/>
      <method name="readObject(weblogic.xml.stream.XMLInputStream)"/>
      <method name="readObject(weblogic.xml.stream.XMLInputStream,int)"/>
      <method name="readObjectInternal(int,java.lang.String,weblogic.xml.stream.XMLInputStream)"/>
    </class>
    <class name="XMLWriter">
      <method name="getNamespaceMap()"/>
      <method name="close()"/>
      <method name="flush()"/>
      <method name="setDefaultNamespace(java.lang.String)"/>
      <method name="setDefaultPrefixes(java.util.Map)"/>
      <method name="setNamespaceMap(java.util.Map)"/>
      <method name="setPrefix(java.lang.String,java.lang.String)"/>
      <method name="writeAttribute(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="writeAttribute(java.lang.String,java.lang.String,javax.xml.namespace.QName)"/>
      <method name="writeCharacters(java.lang.String)"/>
      <method name="writeCharacters(javax.xml.namespace.QName)"/>
      <method name="writeEndElement()"/>
      <method name="writeStartElement(java.lang.String,java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.xml.security.wsse">
    <class name="BinarySecurityToken">
      <method name="setId(java.lang.String)"/>
    </class>
    <class name="KeyIdentifier">
      <method name="getIdentifier()"/>
      <method name="getIdentifierString()"/>
      <method name="getValueType()"/>
    </class>
    <class name="Security">
      <method name="expired()"/>
      <method name="expired(long)"/>
      <method name="getRole()"/>
      <field name="WSSE_VERBOSE"/>
      <field name="WSSE_VERBOSE_PROP"/>
      <method name="addEncryption(java.security.cert.X509Certificate,weblogic.xml.security.specs.EncryptionSpec)"/>
      <method name="addEncryption(weblogic.xml.security.wsse.Token,weblogic.xml.security.specs.EncryptionSpec)"/>
      <method name="addSignature(weblogic.xml.security.wsse.Token,weblogic.xml.security.specs.SignatureSpec)"/>
      <method name="addToken(java.security.cert.X509Certificate,java.security.PrivateKey)"/>
      <method name="addToken(weblogic.xml.security.UserInfo)"/>
      <method name="addToken(weblogic.xml.security.wsse.Token)"/>
      <method name="getTokenById(java.lang.String)"/>
      <method name="addTimestamp()"/>
      <method name="addTimestamp(java.util.Calendar)"/>
      <method name="addTimestamp(java.util.Calendar,java.util.Calendar)"/>
      <method name="addTimestamp(long)"/>
    </class>
    <class name="SecurityElementFactory">
      <method name="setDefaultFactory(weblogic.xml.security.wsse.SecurityElementFactory)"/>
      <method name="getDefaultFactory()"/>
      <method name="newInstance(java.lang.String)"/>
      <method name="createSecurity(java.lang.String)"/>
      <method name="createToken(java.lang.String,java.lang.String)"/>
      <method name="createToken(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createToken(java.security.cert.X509Certificate,java.security.PrivateKey)"/>
      <method name="createToken(weblogic.xml.security.UserInfo)"/>
    </class>
    <class name="SecurityTokenReference">
      <method name="references(weblogic.xml.security.wsse.Token)"/>
      <method name="getId()"/>
      <method name="getReference()"/>
      <method name="getSecretKey()"/>
      <method name="getPrivateKey()"/>
      <method name="setId(java.lang.String)"/>
      <method name="setReference(java.lang.String)"/>
      <method name="setToken(weblogic.xml.security.wsse.Token)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream)"/>
      <method name="getX509IssuerSerial()"/>
      <method name="getKeyIdentifier()"/>
      <method name="getToken()"/>
    </class>
    <class name="Token">
      <method name="getId()"/>
      <method name="getSecretKey()"/>
      <method name="getPrivateKey()"/>
      <method name="getPublicKey()"/>
      <method name="getCertificate()"/>
      <method name="getCertificateChain()"/>
    </class>
    <class name="UsernameToken">
      <method name="verifyDigest(java.lang.String)"/>
      <method name="getNonce()"/>
      <method name="getPassword()"/>
      <method name="getPasswordDigest()"/>
      <method name="getPasswordType()"/>
      <method name="getUsername()"/>
      <method name="getCreatedTimeInMillis()"/>
      <method name="setGenerateNonce(boolean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="getUserInfo()"/>
    </class>
    <class name="WSSEConstants">
      <field name="TC_BINARY_SECURITY_TOKEN"/>
      <field name="TC_KEY_IDENTIFIER"/>
      <field name="TC_PASSWORD"/>
      <field name="TC_REFERENCE"/>
      <field name="TC_SECURITY"/>
      <field name="TC_SECURITY_TOKEN_REFERNCE"/>
      <field name="TC_USERNAME"/>
      <field name="TC_USERNAME_TOKEN"/>
      <field name="ATTR_ENCODING"/>
      <field name="ATTR_MUST_UNDERSTAND"/>
      <field name="ATTR_ROLE"/>
      <field name="ATTR_TYPE"/>
      <field name="ATTR_URI"/>
      <field name="ATTR_VALUETYPE"/>
      <field name="DEFAULT_ENCODING"/>
      <field name="DEFAULT_PREFIX"/>
      <field name="ENCODING_BASE64"/>
      <field name="FAULT_FAILEDAUTHENTICATION"/>
      <field name="FAULT_FAILEDCHECK"/>
      <field name="FAULT_INVALIDSECURITY"/>
      <field name="FAULT_INVALIDSECURITYTOKEN"/>
      <field name="FAULT_SECURITYTOKENUNAVAILBLE"/>
      <field name="FAULT_UNSUPPORTEDALGORITHM"/>
      <field name="FAULT_UNSUPPORTEDSECURITYTOKEN"/>
      <field name="PASSWORDTYPE_PASSWORDDIGEST"/>
      <field name="PASSWORDTYPE_PASSWORDTEXT"/>
      <field name="TAG_BINARY_SECURITY_TOKEN"/>
      <field name="TAG_KEY_IDENTIFIER"/>
      <field name="TAG_NONCE"/>
      <field name="TAG_PASSWORD"/>
      <field name="TAG_REFERENCE"/>
      <field name="TAG_SECURITY"/>
      <field name="TAG_SECURITY_TOKEN_REFERENCE"/>
      <field name="TAG_USERNAME"/>
      <field name="TAG_USERNAME_TOKEN"/>
      <field name="USERNAME_TOKEN_URI"/>
      <field name="VALUETYPE_PKCS7"/>
      <field name="VALUETYPE_PKIPATH"/>
      <field name="VALUETYPE_X509SKID"/>
      <field name="VALUETYPE_X509V3"/>
      <field name="WSSE_PREFIX_URI"/>
      <field name="WSSE_URI"/>
      <field name="X509_URI"/>
      <field name="QNAME_ATTR_VALUETYPE"/>
      <field name="QNAME_FAULT_FAILEDAUTHENTICATION"/>
      <field name="QNAME_FAULT_FAILEDCHECK"/>
      <field name="QNAME_FAULT_INVALIDSECURITY"/>
      <field name="QNAME_FAULT_INVALIDSECURITYTOKEN"/>
      <field name="QNAME_FAULT_SECURITYTOKENUNAVAILBLE"/>
      <field name="QNAME_FAULT_UNSUPPORTEDALGORITHM"/>
      <field name="QNAME_FAULT_UNSUPPORTEDSECURITYTOKEN"/>
    </class>
    <class name="WSSEReader">
      <method name="readObjectInternal(int,java.lang.String,weblogic.xml.stream.XMLInputStream)"/>
      <method name="read(weblogic.xml.stream.XMLInputStream)"/>
      <method name="read(weblogic.xml.stream.XMLInputStream,int)"/>
    </class>
  </package>
  <package name="weblogic.xml.security.wsse.v200207">
    <class name="WSSEConstants">
      <field name="C14N_INCLUSIVE_NAMESPACES"/>
      <field name="SIGN_BST"/>
      <field name="TC_BINARY_SECURITY_TOKEN"/>
      <field name="TC_KEY_IDENTIFIER"/>
      <field name="TC_PASSWORD"/>
      <field name="TC_REFERENCE"/>
      <field name="TC_SECURITY"/>
      <field name="TC_SECURITY_TOKEN_REFERNCE"/>
      <field name="TC_USERNAME"/>
      <field name="TC_USERNAME_TOKEN"/>
      <field name="ATTR_ENCODING"/>
      <field name="ATTR_MUST_UNDERSTAND"/>
      <field name="ATTR_ROLE"/>
      <field name="ATTR_TYPE"/>
      <field name="ATTR_URI"/>
      <field name="ATTR_VALUETYPE"/>
      <field name="C14N_INCLUSIVE_PROPERTY"/>
      <field name="DEFAULT_ENCODING"/>
      <field name="DEFAULT_PREFIX"/>
      <field name="DEFAULT_URI"/>
      <field name="DEFAULT_USERNAME_TOKEN_URI"/>
      <field name="DEFAULT_WSSE_PREFIX_URI"/>
      <field name="DEFAULT_X509_URI"/>
      <field name="ENCODING_BASE64"/>
      <field name="FAULT_FAILEDAUTHENTICATION"/>
      <field name="FAULT_FAILEDCHECK"/>
      <field name="FAULT_INVALIDSECURITY"/>
      <field name="FAULT_INVALIDSECURITYTOKEN"/>
      <field name="FAULT_SECURITYTOKENUNAVAILBLE"/>
      <field name="FAULT_UNSUPPORTEDALGORITHM"/>
      <field name="FAULT_UNSUPPORTEDSECURITYTOKEN"/>
      <field name="OASIS_INTEROP_URI"/>
      <field name="PASSWORDTYPE_PASSWORDDIGEST"/>
      <field name="PASSWORDTYPE_PASSWORDTEXT"/>
      <field name="PROVIDED_URI"/>
      <field name="SIGN_BST_PROPERTY"/>
      <field name="TAG_BINARY_SECURITY_TOKEN"/>
      <field name="TAG_KEY_IDENTIFIER"/>
      <field name="TAG_NONCE"/>
      <field name="TAG_PASSWORD"/>
      <field name="TAG_REFERENCE"/>
      <field name="TAG_SECURITY"/>
      <field name="TAG_SECURITY_TOKEN_REFERENCE"/>
      <field name="TAG_USERNAME"/>
      <field name="TAG_USERNAME_TOKEN"/>
      <field name="USERNAME_TOKEN_URI"/>
      <field name="USERNAME_TOKEN_URI_PROP"/>
      <field name="VALUETYPE_PKCS7"/>
      <field name="VALUETYPE_PKIPATH"/>
      <field name="VALUETYPE_X509SKID"/>
      <field name="VALUETYPE_X509V3"/>
      <field name="WSSE_PREFIX_URI"/>
      <field name="WSSE_PREFIX_URI_PROP"/>
      <field name="WSSE_URI"/>
      <field name="WSSE_URI_PROPERTY"/>
      <field name="X509_URI"/>
      <field name="X509_URI_PROP"/>
      <field name="ID_NAMESPACES"/>
      <field name="QNAME_ATTR_VALUETYPE"/>
      <field name="QNAME_FAULT_FAILEDAUTHENTICATION"/>
      <field name="QNAME_FAULT_FAILEDCHECK"/>
      <field name="QNAME_FAULT_INVALIDSECURITY"/>
      <field name="QNAME_FAULT_INVALIDSECURITYTOKEN"/>
      <field name="QNAME_FAULT_SECURITYTOKENUNAVAILBLE"/>
      <field name="QNAME_FAULT_UNSUPPORTEDALGORITHM"/>
      <field name="QNAME_FAULT_UNSUPPORTEDSECURITYTOKEN"/>
      <field name="QNAME_PASSWORDTYPE_PASSWORDTEXT"/>
    </class>
  </package>
  <package name="weblogic.xml.security.wsu">
    <class name="AttributedDateTime">
      <method name="getId()"/>
      <method name="getTimeString()"/>
      <method name="getTime()"/>
      <method name="getValueType()"/>
      <method name="setId(java.lang.String)"/>
      <method name="toXML(javax.xml.soap.SOAPElement)"/>
      <method name="toXML(weblogic.xml.security.utils.XMLWriter)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream)"/>
    </class>
    <class name="Created" members="concealed"/>
    <class name="Expires" members="concealed"/>
    <class name="Received">
      <method name="getDelay()"/>
    </class>
    <class name="Timestamp">
      <method name="getMustUnderstand()"/>
      <method name="getId()"/>
      <method name="setExpires(java.util.Calendar)"/>
      <method name="setExpires(long)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setMustUnderstand(boolean)"/>
      <method name="toXML(javax.xml.soap.SOAPElement)"/>
      <method name="toXML(weblogic.xml.security.utils.XMLWriter)"/>
      <method name="toXML(weblogic.xml.stream.XMLOutputStream)"/>
      <method name="getCreated()"/>
      <method name="getExpires()"/>
      <method name="getReceived()"/>
    </class>
  </package>
</lib-exports>
