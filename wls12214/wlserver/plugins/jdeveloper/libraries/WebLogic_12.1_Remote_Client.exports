<?xml version="1.0" encoding="iso-8859-1" ?>
<lib-exports owner="weblogic" xmlns="http://xmlns.oracle.com/ide/export">
    <package name="javax.xml.rpc.soap"/>
    <package name="javax.xml.rpc.server"/>
    <package name="javax.xml.rpc.holders"/>
    <package name="javax.xml.rpc.handler.soap"/>
    <package name="javax.xml.rpc.handler"/>
    <package name="javax.xml.rpc.encoding"/>
    <package name="javax.xml.rpc"/>
    <package name="javax.wsdl.xml"/>
    <package name="javax.wsdl.factory"/>
    <package name="javax.wsdl.extensions.soap12"/>
    <package name="javax.wsdl.extensions.soap"/>
    <package name="javax.wsdl.extensions.schema"/>
    <package name="javax.wsdl.extensions.mime"/>
    <package name="javax.wsdl.extensions.http"/>
    <package name="javax.wsdl.extensions"/>
    <package name="javax.wsdl"/>
    <package name="javax.ws.rs.ext"/>
    <package name="javax.ws.rs.core"/>
    <package name="javax.ws.rs.container"/>
    <package name="javax.ws.rs.client"/>
    <package name="javax.ws.rs"/>
    <package name="javax.websocket.server"/>
    <package name="javax.websocket"/>
    <package name="javax.validation.spi"/>
    <package name="javax.validation.metadata"/>
    <package name="javax.validation.groups"/>
    <package name="javax.validation.executable"/>
    <package name="javax.validation.constraintvalidation"/>
    <package name="javax.validation.constraints"/>
    <package name="javax.validation.bootstrap"/>
    <package name="javax.validation"/>
    <package name="javax.transaction.xa"/>
    <package name="javax.transaction"/>
    <package name="javax.servlet.jsp.tagext"/>
    <package name="javax.servlet.jsp.jstl.tlv"/>
    <package name="javax.servlet.jsp.jstl.sql"/>
    <package name="javax.servlet.jsp.jstl.fmt"/>
    <package name="javax.servlet.jsp.jstl.core"/>
    <package name="javax.servlet.jsp.el"/>
    <package name="javax.servlet.jsp"/>
    <package name="javax.servlet.http"/>
    <package name="javax.servlet.descriptor"/>
    <package name="javax.servlet.annotation"/>
    <package name="javax.servlet"/>
    <package name="javax.security.jacc"/>
    <package name="javax.security.auth.message.module"/>
    <package name="javax.security.auth.message.config"/>
    <package name="javax.security.auth.message.callback"/>
    <package name="javax.security.auth.message"/>
    <package name="javax.resource.spi.work"/>
    <package name="javax.resource.spi.security"/>
    <package name="javax.resource.spi.endpoint"/>
    <package name="javax.resource.spi"/>
    <package name="javax.resource.cci"/>
    <package name="javax.resource"/>
    <package name="javax.realtime"/>
    <package name="javax.rcm.resource"/>
    <package name="javax.rcm.management"/>
    <package name="javax.rcm"/>
    <package name="javax.persistence.spi"/>
    <package name="javax.persistence.metamodel"/>
    <package name="javax.persistence.criteria"/>
    <package name="javax.persistence"/>
    <package name="javax.management.remote.rmi"/>
    <package name="javax.management.j2ee.statistics"/>
    <package name="javax.management.j2ee"/>
    <package name="javax.mail.util"/>
    <package name="javax.mail.search"/>
    <package name="javax.mail.internet"/>
    <package name="javax.mail.event"/>
    <package name="javax.mail"/>
    <package name="javax.json.stream"/>
    <package name="javax.json.spi"/>
    <package name="javax.json"/>
    <package name="javax.jms"/>
    <package name="javax.jdo.spi"/>
    <package name="javax.jdo.listener"/>
    <package name="javax.jdo.identity"/>
    <package name="javax.jdo.datastore"/>
    <package name="javax.jdo"/>
    <package name="javax.interceptor"/>
    <package name="javax.inject"/>
    <package name="javax.faces.webapp"/>
    <package name="javax.faces.view.facelets"/>
    <package name="javax.faces.view"/>
    <package name="javax.faces.validator"/>
    <package name="javax.faces.render"/>
    <package name="javax.faces.model"/>
    <package name="javax.faces.lifecycle"/>
    <package name="javax.faces.flow.builder"/>
    <package name="javax.faces.flow"/>
    <package name="javax.faces.event"/>
    <package name="javax.faces.el"/>
    <package name="javax.faces.convert"/>
    <package name="javax.faces.context"/>
    <package name="javax.faces.component.visit"/>
    <package name="javax.faces.component.html"/>
    <package name="javax.faces.component.behavior"/>
    <package name="javax.faces.component"/>
    <package name="javax.faces.bean"/>
    <package name="javax.faces.application"/>
    <package name="javax.faces"/>
    <package name="javax.enterprise.util"/>
    <package name="javax.enterprise.inject.spi"/>
    <package name="javax.enterprise.inject"/>
    <package name="javax.enterprise.event"/>
    <package name="javax.enterprise.deploy.spi.status"/>
    <package name="javax.enterprise.deploy.spi.factories"/>
    <package name="javax.enterprise.deploy.spi.exceptions"/>
    <package name="javax.enterprise.deploy.spi"/>
    <package name="javax.enterprise.deploy.shared.factories"/>
    <package name="javax.enterprise.deploy.shared"/>
    <package name="javax.enterprise.deploy.model.exceptions"/>
    <package name="javax.enterprise.deploy.model"/>
    <package name="javax.enterprise.context.spi"/>
    <package name="javax.enterprise.context"/>
    <package name="javax.enterprise.concurrent"/>
    <package name="javax.el"/>
    <package name="javax.ejb.spi"/>
    <package name="javax.ejb.embeddable"/>
    <package name="javax.ejb"/>
    <package name="javax.decorator"/>
    <package name="javax.batch.runtime.context"/>
    <package name="javax.batch.runtime"/>
    <package name="javax.batch.operations"/>
    <package name="javax.batch.api.partition"/>
    <package name="javax.batch.api.listener"/>
    <package name="javax.batch.api.chunk.listener"/>
    <package name="javax.batch.api.chunk"/>
    <package name="javax.batch.api"/>
    <package name="javax.annotation.sql"/>
    <package name="javax.annotation.security"/>
    <package name="javax.annotation"/>
  <package name="com.bea.common.security.saml2">
    <class name="SingleSignOnServicesConfigSpi">
      <method name="isAssertionEncryptionEnabled()"/>
      <method name="isForceAuthn()"/>
      <method name="isIdentityProviderArtifactBindingEnabled()"/>
      <method name="isIdentityProviderEnabled()"/>
      <method name="isIdentityProviderPOSTBindingEnabled()"/>
      <method name="isIdentityProviderRedirectBindingEnabled()"/>
      <method name="isPOSTOneUseCheckEnabled()"/>
      <method name="isPassive()"/>
      <method name="isRecipientCheckEnabled()"/>
      <method name="isReplicatedCacheEnabled()"/>
      <method name="isServiceProviderArtifactBindingEnabled()"/>
      <method name="isServiceProviderEnabled()"/>
      <method name="isServiceProviderPOSTBindingEnabled()"/>
      <method name="isSignAuthnRequests()"/>
      <method name="isWantArtifactRequestsSigned()"/>
      <method name="isWantAssertionsSigned()"/>
      <method name="isWantAuthnRequestsSigned()"/>
      <method name="isWantBasicAuthClientAuthentication()"/>
      <method name="isWantTransportLayerSecurityClientAuthentication()"/>
      <method name="getAssertionEncryptionDecryptionKeyPassPhraseEncrypted()"/>
      <method name="getBasicAuthPasswordEncrypted()"/>
      <method name="getSSOSigningKeyPassPhraseEncrypted()"/>
      <method name="getTransportLayerSecurityKeyPassPhraseEncrypted()"/>
      <method name="getArtifactMaxCacheSize()"/>
      <method name="getArtifactTimeout()"/>
      <method name="getAuthnRequestMaxCacheSize()"/>
      <method name="getAuthnRequestTimeout()"/>
      <method name="getAssertionEncryptionDecryptionKeyAlias()"/>
      <method name="getAssertionEncryptionDecryptionKeyPassPhrase()"/>
      <method name="getBasicAuthPassword()"/>
      <method name="getBasicAuthUsername()"/>
      <method name="getContactPersonCompany()"/>
      <method name="getContactPersonEmailAddress()"/>
      <method name="getContactPersonGivenName()"/>
      <method name="getContactPersonSurName()"/>
      <method name="getContactPersonTelephoneNumber()"/>
      <method name="getContactPersonType()"/>
      <method name="getDataEncryptionAlgorithm()"/>
      <method name="getDefaultURL()"/>
      <method name="getEntityID()"/>
      <method name="getErrorPath()"/>
      <method name="getIdentityProviderPreferredBinding()"/>
      <method name="getKeyEncryptionAlgorithm()"/>
      <method name="getLoginReturnQueryParameter()"/>
      <method name="getLoginURL()"/>
      <method name="getOrganizationName()"/>
      <method name="getOrganizationURL()"/>
      <method name="getPublishedSiteURL()"/>
      <method name="getSSOSigningKeyAlias()"/>
      <method name="getSSOSigningKeyPassPhrase()"/>
      <method name="getServiceProviderPreferredBinding()"/>
      <method name="getTransportLayerSecurityKeyAlias()"/>
      <method name="getTransportLayerSecurityKeyPassPhrase()"/>
      <method name="getAllowedTargetHosts()"/>
      <method name="getMetadataEncryptionAlgorithms()"/>
    </class>
  </package>
  <package name="com.bea.common.security.utils.encoders">
    <class name="BASE64Decoder" members="concealed"/>
    <class name="CharacterDecoder">
      <method name="decodeBuffer(java.lang.String)"/>
    </class>
  </package>
  <package name="com.bea.common.security.xacml">
    <class name="CollectionUtil">
      <method name="equals(java.util.Collection,java.util.Collection)"/>
      <method name="equalsWithSequence(java.util.Collection,java.util.Collection)"/>
    </class>
    <class name="DocumentParseException" members="concealed"/>
    <class name="FunctionException" members="concealed"/>
    <class name="IOException" members="concealed"/>
    <class name="InvalidAttributeException" members="concealed"/>
    <class name="InvalidParameterException" members="concealed"/>
    <class name="InvalidXACMLPolicyException" members="concealed"/>
    <class name="PolicyUtils">
      <method name="checkXACMLSchema(java.lang.String)"/>
    </class>
    <class name="SchemaObject">
      <method name="getPrintStream(java.io.OutputStream)"/>
      <method name="escapeXML(java.lang.String)"/>
      <method name="getLocalName(org.w3c.dom.Node)"/>
      <method name="hasBody()"/>
      <method name="hasChildren()"/>
      <method name="hashCode()"/>
      <method name="internalHashCode()"/>
      <method name="getDesiredNamespacePrefix()"/>
      <method name="getElementName()"/>
      <method name="getNamespace()"/>
      <method name="toString()"/>
      <method name="encode(java.io.OutputStream)"/>
      <method name="encode(java.util.Map,java.io.OutputStream)"/>
      <method name="encodeAttributes(java.io.PrintStream)"/>
      <method name="encodeBody(java.io.PrintStream)"/>
      <method name="encodeChildren(java.util.Map,java.io.PrintStream)"/>
    </class>
    <class name="Type">
      <constructor name="Type(com.bea.common.security.xacml.URI,boolean)"/>
      <constructor name="Type(com.bea.common.security.xacml.URI,java.lang.String,boolean)"/>
      <constructor name="Type(java.lang.String,java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isBag()"/>
      <method name="isCustom()"/>
      <method name="getDataType()"/>
      <method name="getShortName()"/>
      <method name="getType()"/>
      <method name="findType(java.lang.String)"/>
      <field name="ANY_URI"/>
      <field name="ANY_URI_BAG"/>
      <field name="BASE64_BINARY"/>
      <field name="BASE64_BINARY_BAG"/>
      <field name="BOOLEAN"/>
      <field name="BOOLEAN_BAG"/>
      <field name="CHARACTER"/>
      <field name="CHARACTER_BAG"/>
      <field name="CLASS"/>
      <field name="CLASS_BAG"/>
      <field name="DATE"/>
      <field name="DATE_BAG"/>
      <field name="DATE_TIME"/>
      <field name="DATE_TIME_BAG"/>
      <field name="DAY_TIME_DURATION"/>
      <field name="DAY_TIME_DURATION_BAG"/>
      <field name="DECIMAL"/>
      <field name="DECIMAL_BAG"/>
      <field name="DNS_ADDRESS"/>
      <field name="DNS_ADDRESS_BAG"/>
      <field name="DOUBLE"/>
      <field name="DOUBLE_BAG"/>
      <field name="FLOAT"/>
      <field name="FLOAT_BAG"/>
      <field name="FUNCTION"/>
      <field name="FUNCTION_BAG"/>
      <field name="HEX_BINARY"/>
      <field name="HEX_BINARY_BAG"/>
      <field name="INTEGER"/>
      <field name="INTEGER_BAG"/>
      <field name="IP_ADDRESS"/>
      <field name="IP_ADDRESS_BAG"/>
      <field name="LONG"/>
      <field name="LONG_BAG"/>
      <field name="OBJECT"/>
      <field name="OBJECT_BAG"/>
      <field name="RFC822_NAME"/>
      <field name="RFC822_NAME_BAG"/>
      <field name="STRING"/>
      <field name="STRING_BAG"/>
      <field name="TIME"/>
      <field name="TIME_BAG"/>
      <field name="X500_NAME"/>
      <field name="X500_NAME_BAG"/>
      <field name="YEAR_MONTH_DURATION"/>
      <field name="YEAR_MONTH_DURATION_BAG"/>
      <method name="getScalarTypes()"/>
    </class>
    <class name="URI" members="concealed"/>
    <class name="URISyntaxException" members="concealed"/>
    <class name="XACMLException" members="concealed"/>
  </package>
  <package name="com.bea.common.security.xacml.policy">
    <class name="AbstractPolicy">
      <method name="getCombiningName()"/>
      <method name="getPolicyPrefix()"/>
      <method name="encodeCombinerParameters(java.util.Map,java.io.PrintStream)"/>
      <method name="encodeDescription(java.io.PrintStream)"/>
      <method name="encodeObligations(java.util.Map,java.io.PrintStream)"/>
      <method name="encodeTarget(java.util.Map,java.io.PrintStream)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getCombiningAlgId()"/>
      <method name="getId()"/>
      <method name="internalHashCode()"/>
      <method name="getDescription()"/>
      <method name="getVersion()"/>
      <field name="VERSION_DEFAULT"/>
      <method name="encodeAttributes(java.io.PrintStream)"/>
    </class>
    <class name="Policy">
      <method name="getCombiningName()"/>
      <method name="getPolicyPrefix()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hasChildren()"/>
      <method name="internalHashCode()"/>
      <method name="getElementName()"/>
      <method name="getVariableDefinitions()"/>
      <method name="getRules()"/>
      <method name="getRuleCombinerParameters()"/>
      <method name="encodeChildren(java.util.Map,java.io.PrintStream)"/>
    </class>
    <class name="PolicySchemaObject">
      <method name="getDesiredNamespacePrefix()"/>
      <method name="getNamespace()"/>
      <field name="NAMESPACE"/>
      <field name="NAMESPACE_PREFIX"/>
    </class>
    <class name="PolicySet">
      <method name="getCombiningName()"/>
      <method name="getPolicyPrefix()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hasChildren()"/>
      <method name="internalHashCode()"/>
      <method name="getElementName()"/>
      <method name="getPolicyCombinerParameters()"/>
      <method name="getPolicySetCombinerParameters()"/>
      <method name="getPoliciesPolicySetsAndReferences()"/>
      <method name="encodeChildren(java.util.Map,java.io.PrintStream)"/>
    </class>
    <class name="PolicySetMember" members="concealed"/>
  </package>
  <package name="com.bea.core.jatmi.intf">
    <class name="TCAppKey">
      <method name="isCached()"/>
      <field name="GIDMASK"/>
      <field name="GIDSHIFT"/>
      <field name="TPSYSADM_KEY"/>
      <field name="TPSYSOP_KEY"/>
      <field name="UIDMASK"/>
      <method name="doCache(boolean)"/>
      <method name="init(java.lang.String,boolean,int)"/>
      <method name="uninit()"/>
      <method name="getTuxedoUserRecord(com.bea.core.jatmi.intf.TCAuthenticatedUser)"/>
    </class>
    <class name="TCAuthenticatedUser" members="concealed"/>
  </package>
  <package name="com.bea.httppubsub">
    <class name="AuthenticatedUser">
      <method name="isUserInRole(java.lang.String)"/>
      <method name="getUserName()"/>
      <method name="getUserPrincipal()"/>
    </class>
    <class name="BayeuxMessage">
      <method name="getType()"/>
      <method name="getClient()"/>
      <method name="getChannel()"/>
      <method name="toJSONRequestString()"/>
      <method name="toJSONResponseString()"/>
    </class>
    <class name="Channel">
      <method name="getParentChannel()"/>
      <method name="getName()"/>
      <method name="getAllSubChannels()"/>
      <method name="getSubChannels()"/>
      <method name="getClients(com.bea.httppubsub.Channel.ChannelPattern)"/>
      <method name="addSubChannel(com.bea.httppubsub.Channel)"/>
      <method name="destroy(com.bea.httppubsub.Client)"/>
      <method name="publish(com.bea.httppubsub.Client,com.bea.httppubsub.BayeuxMessage,com.bea.httppubsub.Channel.ChannelPattern)"/>
      <method name="removeSubChannel(com.bea.httppubsub.Channel)"/>
      <method name="subscribe(com.bea.httppubsub.Client)"/>
      <method name="subscribe(com.bea.httppubsub.Client,com.bea.httppubsub.Channel.ChannelPattern)"/>
      <method name="unsubscribe(com.bea.httppubsub.Client)"/>
      <method name="unsubscribe(com.bea.httppubsub.Client,com.bea.httppubsub.Channel.ChannelPattern)"/>
    </class>
    <class name="Client">
      <method name="getAuthenticatedUser()"/>
      <method name="getId()"/>
      <method name="getChannelSubscriptions()"/>
      <method name="getPublishedMessageCount()"/>
    </class>
    <class name="ClientManager">
      <method name="createLocalClient()"/>
    </class>
    <class name="DeliveredMessageEvent">
      <method name="getMessage()"/>
      <method name="getLocalClient()"/>
    </class>
    <class name="DeliveredMessageListener">
      <method name="onPublish(com.bea.httppubsub.DeliveredMessageEvent)"/>
    </class>
    <class name="EventMessage">
      <method name="getPayLoad()"/>
      <method name="setPayLoad(java.lang.String)"/>
    </class>
    <class name="FactoryFinder">
      <field name="PUBSUBSERVER_FACTORY"/>
      <method name="getFactory(java.lang.String)"/>
      <method name="setFactory(java.lang.String,java.lang.String)"/>
    </class>
    <class name="LocalClient">
      <method name="getAuthenticatedUser()"/>
      <method name="getChannelSubscriptions()"/>
      <method name="registerMessageListener(com.bea.httppubsub.DeliveredMessageListener)"/>
      <method name="unregisterMessageListener(com.bea.httppubsub.DeliveredMessageListener)"/>
    </class>
    <class name="MessageFactory">
      <method name="createEventMessage(com.bea.httppubsub.LocalClient,java.lang.String,java.lang.String)"/>
    </class>
    <class name="MessageFilter">
      <method name="handleMessage(com.bea.httppubsub.EventMessage)"/>
    </class>
    <class name="PubSubSecurityException" members="concealed"/>
    <class name="PubSubServer">
      <method name="findChannel(java.lang.String)"/>
      <method name="findOrCreateChannel(com.bea.httppubsub.Client,java.lang.String)"/>
      <method name="getClientManager()"/>
      <method name="getMessageFactory()"/>
      <method name="getName()"/>
      <method name="deleteChannel(com.bea.httppubsub.Client,java.lang.String)"/>
      <method name="publishToChannel(com.bea.httppubsub.LocalClient,java.lang.String,java.lang.String)"/>
      <method name="subscribeToChannel(com.bea.httppubsub.LocalClient,java.lang.String)"/>
      <method name="unsubscribeToChannel(com.bea.httppubsub.LocalClient,java.lang.String)"/>
    </class>
    <class name="PubSubServerException" members="concealed"/>
    <class name="PubSubServerFactory">
      <method name="lookupPubSubServer(java.lang.String)"/>
    </class>
  </package>
  <package name="com.bea.httppubsub.runtime">
    <class name="ChannelRuntimeMBean">
      <method name="getSubscriberCount()"/>
      <method name="getName()"/>
      <method name="getSubscribers()"/>
      <method name="getPublishedMessageCount()"/>
    </class>
    <class name="WebPubSubRuntimeMBean">
      <method name="getName()"/>
    </class>
  </package>
  <package name="com.bea.logging">
    <class name="BaseLogRecord">
      <method name="getSeverity()"/>
      <method name="getDiagnosticContextId()"/>
      <method name="getFormattedDate()"/>
      <method name="getId()"/>
      <method name="getLogMessage()"/>
      <method name="getMachineName()"/>
      <method name="getServerName()"/>
      <method name="getSubsystem()"/>
      <method name="getThreadName()"/>
      <method name="getTransactionId()"/>
      <method name="getUserId()"/>
      <method name="getThrown()"/>
      <method name="getSupplementalAttributes()"/>
      <method name="getTimestamp()"/>
    </class>
    <class name="LogLevel">
      <method name="getHeader(java.util.logging.Level)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getSeverity()"/>
      <method name="hashCode()"/>
      <method name="getLocalizedName()"/>
      <field name="ALERT"/>
      <field name="CRITICAL"/>
      <field name="DEBUG"/>
      <field name="EMERGENCY"/>
      <field name="ERROR"/>
      <field name="INFO"/>
      <field name="NOTICE"/>
      <field name="OFF"/>
      <field name="TRACE"/>
      <field name="WARNING"/>
      <field name="ALERT_INT"/>
      <field name="CRITICAL_INT"/>
      <field name="DEBUG_INT"/>
      <field name="EMERGENCY_INT"/>
      <field name="ERROR_INT"/>
      <field name="INFO_INT"/>
      <field name="NOTICE_INT"/>
      <field name="OFF_INT"/>
      <field name="TRACE_INT"/>
      <field name="WARNING_INT"/>
      <method name="getSeverity(java.util.logging.Level)"/>
      <method name="getLevel(int)"/>
    </class>
  </package>
  <package name="com.bea.security.saml2.providers">
    <class name="SAML2AttributeInfo">
      <method name="getAttributeFriendlyName()"/>
      <method name="getAttributeName()"/>
      <method name="getAttributeNameFormat()"/>
      <method name="toString()"/>
      <method name="getAttributeValues()"/>
      <field name="ATTR_NAME_FORMAT_BASIC"/>
      <method name="addAttributeValue(java.lang.String)"/>
      <method name="addAttributeValues(java.util.Collection)"/>
      <method name="setAttributeFriendlyName(java.lang.String)"/>
      <method name="setAttributeName(java.lang.String)"/>
      <method name="setAttributeNameFormat(java.lang.String)"/>
    </class>
    <class name="SAML2AttributeStatementInfo">
      <method name="toString()"/>
      <method name="getAttributeInfo()"/>
      <method name="addAttributeInfo(com.bea.security.saml2.providers.SAML2AttributeInfo)"/>
      <method name="addAttributeInfo(java.util.Collection)"/>
    </class>
    <class name="SAML2CredentialAttributeMapper">
      <method name="mapAttributes(javax.security.auth.Subject,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="SAML2CredentialNameMapper">
      <method name="mapName(java.lang.String,weblogic.security.service.ContextHandler)"/>
      <method name="mapSubject(javax.security.auth.Subject,weblogic.security.service.ContextHandler)"/>
      <method name="setNameQualifier(java.lang.String)"/>
    </class>
    <class name="SAML2IdentityAsserterAttributeMapper">
      <method name="mapAttributeInfo(java.util.Collection,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="SAML2IdentityAsserterNameMapper">
      <method name="mapNameInfo(com.bea.security.saml2.providers.SAML2NameMapperInfo,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="SAML2NameMapperInfo">
      <method name="getGroupAttrName()"/>
      <method name="getGroupAttrNameFormat()"/>
      <method name="getGroupAttrNamespace()"/>
      <method name="getName()"/>
      <method name="getNameFormat()"/>
      <method name="getNameQualifier()"/>
      <method name="getGroups()"/>
      <field name="ATTR_NAME_FORMAT_BASIC"/>
      <field name="BEA_GROUP_ATTR_NAME"/>
      <field name="BEA_GROUP_ATTR_NAMEFORMAT"/>
      <field name="BEA_GROUP_ATTR_NAMESPACE"/>
      <field name="NAME_FORMAT_ENTITY"/>
      <field name="NAME_FORMAT_KERBEROS"/>
      <field name="NAME_FORMAT_PERSISTENT"/>
      <field name="NAME_FORMAT_TRANSIENT"/>
      <field name="NAME_FORMAT_UNSPECIFIED"/>
      <method name="setGroupAttrName(java.lang.String)"/>
      <method name="setGroupAttrNameFormat(java.lang.String)"/>
      <method name="setGroupAttrNamespace(java.lang.String)"/>
      <method name="setGroups(java.util.Collection)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setNameFormat(java.lang.String)"/>
      <method name="setNameQualifier(java.lang.String)"/>
    </class>
  </package>
  <package name="com.bea.security.saml2.providers.registry">
    <class name="BindingClientPartner">
      <method name="isClientPasswordSet()"/>
      <method name="getClientPasswordEncrypted()"/>
      <method name="getClientUsername()"/>
      <method name="getTransportLayerClientCert()"/>
      <method name="setClientPassword(java.lang.String)"/>
      <method name="setClientUsername(java.lang.String)"/>
      <method name="setTransportLayerClientCert(java.security.cert.X509Certificate)"/>
    </class>
    <class name="Endpoint">
      <method name="getBinding()"/>
      <method name="getLocation()"/>
      <field name="HTTP_ARTIFACT_BINDING"/>
      <field name="HTTP_ARTIFACT_URN"/>
      <field name="HTTP_POST_BINDING"/>
      <field name="HTTP_POST_URN"/>
      <field name="HTTP_REDIRECT_BINDING"/>
      <field name="HTTP_REDIRECT_URN"/>
      <field name="SOAP_BINDING"/>
      <field name="SOAP_HTTP_URN"/>
      <method name="setBinding(java.lang.String)"/>
      <method name="setLocation(java.lang.String)"/>
    </class>
    <class name="IdPPartner">
      <method name="isProcessAttributes()"/>
      <method name="isVirtualUserEnabled()"/>
      <method name="isWantAssertionsSigned()"/>
      <method name="getIdentityProviderNameMapperClassname()"/>
      <method name="getIssuerURI()"/>
      <method name="setIdentityProviderNameMapperClassname(java.lang.String)"/>
      <method name="setIssuerURI(java.lang.String)"/>
      <method name="setProcessAttributes(boolean)"/>
      <method name="setVirtualUserEnabled(boolean)"/>
      <method name="setWantAssertionsSigned(boolean)"/>
    </class>
    <class name="IndexedEndpoint">
      <method name="isDefault()"/>
      <method name="isDefaultSet()"/>
      <method name="getIndex()"/>
      <method name="setDefault(boolean)"/>
      <method name="setIndex(int)"/>
      <method name="unsetDefault()"/>
    </class>
    <class name="MetadataPartner">
      <method name="getContactPersonCompany()"/>
      <method name="getContactPersonEmailAddress()"/>
      <method name="getContactPersonGivenName()"/>
      <method name="getContactPersonSurName()"/>
      <method name="getContactPersonTelephoneNumber()"/>
      <method name="getContactPersonType()"/>
      <method name="getEntityID()"/>
      <method name="getErrorURL()"/>
      <method name="getOrganizationName()"/>
      <method name="getOrganizationURL()"/>
      <method name="setContactPersonCompany(java.lang.String)"/>
      <method name="setContactPersonEmailAddress(java.lang.String)"/>
      <method name="setContactPersonGivenName(java.lang.String)"/>
      <method name="setContactPersonSurName(java.lang.String)"/>
      <method name="setContactPersonTelephoneNumber(java.lang.String)"/>
      <method name="setContactPersonType(java.lang.String)"/>
      <method name="setEntityID(java.lang.String)"/>
      <method name="setErrorURL(java.lang.String)"/>
      <method name="setOrganizationName(java.lang.String)"/>
      <method name="setOrganizationURL(java.lang.String)"/>
    </class>
    <class name="Partner">
      <method name="isEnabled()"/>
      <method name="isNameModified()"/>
      <method name="getDescription()"/>
      <method name="getName()"/>
      <method name="getAudienceURIs()"/>
      <field name="ASSERTION_TYPE_BEARER"/>
      <field name="ASSERTION_TYPE_HOLDER_OF_KEY"/>
      <field name="ASSERTION_TYPE_SENDER_VOUCHES"/>
      <method name="setAudienceURIs(java.lang.String[])"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="SPPartner">
      <method name="isGenerateAttributes()"/>
      <method name="isIncludeOneTimeUseCondition()"/>
      <method name="isKeyinfoIncluded()"/>
      <method name="isWantAssertionsSigned()"/>
      <method name="getTimeToLive()"/>
      <method name="getTimeToLiveOffset()"/>
      <method name="getServiceProviderNameMapperClassname()"/>
      <method name="setGenerateAttributes(boolean)"/>
      <method name="setIncludeOneTimeUseCondition(boolean)"/>
      <method name="setKeyinfoIncluded(boolean)"/>
      <method name="setServiceProviderNameMapperClassname(java.lang.String)"/>
      <method name="setTimeToLive(int)"/>
      <method name="setTimeToLiveOffset(int)"/>
      <method name="setWantAssertionsSigned(boolean)"/>
    </class>
    <class name="WSSIdPPartner">
      <method name="getAssertionSigningCert()"/>
      <method name="setAssertionSigningCert(java.security.cert.X509Certificate)"/>
    </class>
    <class name="WSSPartner">
      <method name="getConfirmationMethod()"/>
      <method name="setConfirmationMethod(java.lang.String)"/>
    </class>
    <class name="WSSSPPartner" members="concealed"/>
    <class name="WebSSOIdPPartner">
      <method name="isWantAuthnRequestsSigned()"/>
      <method name="getSingleSignOnService()"/>
      <method name="getRedirectURIs()"/>
      <method name="setRedirectURIs(java.lang.String[])"/>
      <method name="setSingleSignOnService(com.bea.security.saml2.providers.registry.Endpoint[])"/>
      <method name="setWantAuthnRequestsSigned(boolean)"/>
    </class>
    <class name="WebSSOPartner">
      <method name="isArtifactBindingUsePOSTMethod()"/>
      <method name="isWantArtifactRequestSigned()"/>
      <method name="getArtifactResolutionService()"/>
      <method name="getArtifactBindingPostForm()"/>
      <method name="getPostBindingPostForm()"/>
      <method name="getSSOSigningCert()"/>
      <method name="setArtifactBindingPostForm(java.lang.String)"/>
      <method name="setArtifactBindingUsePOSTMethod(boolean)"/>
      <method name="setArtifactResolutionService(com.bea.security.saml2.providers.registry.IndexedEndpoint[])"/>
      <method name="setPostBindingPostForm(java.lang.String)"/>
      <method name="setSSOSigningCert(java.security.cert.X509Certificate)"/>
      <method name="setWantArtifactRequestSigned(boolean)"/>
    </class>
    <class name="WebSSOSPPartner">
      <method name="isWantAuthnRequestsSigned()"/>
      <method name="getAssertionConsumerService()"/>
      <method name="getAssertionEncryptionCert()"/>
      <method name="getEncryptionAlgorithms()"/>
      <method name="setAssertionConsumerService(com.bea.security.saml2.providers.registry.IndexedEndpoint[])"/>
      <method name="setAssertionEncryptionCert(java.security.cert.X509Certificate)"/>
      <method name="setEncryptionAlgorithms(java.util.List)"/>
      <method name="setWantAuthnRequestsSigned(boolean)"/>
    </class>
  </package>
  <package name="com.bea.wls.redef.runtime">
    <class name="ClassRedefinitionRuntimeMBean">
      <method name="redefineClasses()"/>
      <method name="redefineClasses(java.lang.String,java.lang.String[])"/>
      <method name="getClassRedefinitionTasks()"/>
      <method name="getClassRedefinitionCount()"/>
      <method name="getFailedClassRedefinitionCount()"/>
      <method name="getProcessedClassesCount()"/>
      <method name="getTotalClassRedefinitionTime()"/>
    </class>
    <class name="ClassRedefinitionTaskRuntimeMBean">
      <method name="getCandidateClassesCount()"/>
      <method name="getProcessedClassesCount()"/>
    </class>
  </package>
  <package name="com.bea.xbean.util">
    <class name="Base64">
      <field name="base64Alphabet"/>
      <field name="lookUpBase64Alphabet"/>
      <field name="fDebug"/>
      <field name="PAD"/>
      <field name="BASELENGTH"/>
      <field name="EIGHTBIT"/>
      <field name="FOURBYTE"/>
      <field name="LOOKUPLENGTH"/>
      <field name="SIGN"/>
      <field name="SIXTEENBIT"/>
      <field name="TWENTYFOURBITGROUP"/>
      <constructor name="Base64()"/>
      <method name="isBase64(byte)"/>
      <method name="isData(byte)"/>
      <method name="isPad(byte)"/>
      <method name="isWhiteSpace(byte)"/>
      <method name="removeWhiteSpace(byte[])"/>
      <method name="decode(byte[])"/>
      <method name="encode(byte[])"/>
    </class>
  </package>
  <package name="com.oracle.weblogic.lifecycle">
    <class name="Orchestrator" members="concealed"/>
  </package>
  <package name="com.oracle.weblogic.lifecycle.core">
    <class name="LifecycleUtils" members="concealed"/>
  </package>
  <package name="commonj.timers">
    <class name="CancelTimerListener">
      <method name="timerCancel(commonj.timers.Timer)"/>
    </class>
    <class name="StopTimerListener">
      <method name="timerStop(commonj.timers.Timer)"/>
    </class>
    <class name="Timer">
      <method name="cancel()"/>
      <method name="getTimerListener()"/>
      <method name="getPeriod()"/>
      <method name="getScheduledExecutionTime()"/>
    </class>
    <class name="TimerListener">
      <method name="timerExpired(commonj.timers.Timer)"/>
    </class>
    <class name="TimerManager">
      <method name="isStopped()"/>
      <method name="isStopping()"/>
      <method name="isSuspended()"/>
      <method name="isSuspending()"/>
      <method name="waitForStop(long)"/>
      <method name="waitForSuspend(long)"/>
      <method name="schedule(commonj.timers.TimerListener,java.util.Date,long)"/>
      <method name="schedule(commonj.timers.TimerListener,java.util.Date)"/>
      <method name="schedule(commonj.timers.TimerListener,long)"/>
      <method name="schedule(commonj.timers.TimerListener,long,long)"/>
      <method name="scheduleAtFixedRate(commonj.timers.TimerListener,java.util.Date,long)"/>
      <method name="scheduleAtFixedRate(commonj.timers.TimerListener,long,long)"/>
      <field name="IMMEDIATE"/>
      <field name="INDEFINITE"/>
      <method name="resume()"/>
      <method name="stop()"/>
      <method name="suspend()"/>
    </class>
  </package>
  <package name="commonj.work">
    <class name="RemoteWorkItem">
      <method name="getPinnedWorkManager()"/>
      <method name="release()"/>
    </class>
    <class name="Work">
      <method name="isDaemon()"/>
      <method name="release()"/>
    </class>
    <class name="WorkCompletedException">
      <method name="getExceptionList()"/>
    </class>
    <class name="WorkEvent">
      <method name="getException()"/>
      <method name="getWorkItem()"/>
      <method name="getType()"/>
      <field name="WORK_ACCEPTED"/>
      <field name="WORK_COMPLETED"/>
      <field name="WORK_REJECTED"/>
      <field name="WORK_STARTED"/>
    </class>
    <class name="WorkException" members="concealed"/>
    <class name="WorkItem">
      <method name="getResult()"/>
      <method name="getStatus()"/>
    </class>
    <class name="WorkListener">
      <method name="workAccepted(commonj.work.WorkEvent)"/>
      <method name="workCompleted(commonj.work.WorkEvent)"/>
      <method name="workRejected(commonj.work.WorkEvent)"/>
      <method name="workStarted(commonj.work.WorkEvent)"/>
    </class>
    <class name="WorkManager">
      <method name="waitForAll(java.util.Collection,long)"/>
      <method name="schedule(commonj.work.Work)"/>
      <method name="schedule(commonj.work.Work,commonj.work.WorkListener)"/>
      <method name="waitForAny(java.util.Collection,long)"/>
      <field name="IMMEDIATE"/>
      <field name="INDEFINITE"/>
    </class>
    <class name="WorkRejectedException" members="concealed"/>
  </package>
  <package name="oracle.classloader.util">
    <class name="URLHandlerFactory">
      <method name="createFromProperty(java.lang.String)"/>
      <method name="removeHandlerFromURLCache(java.lang.String)"/>
      <method name="init()"/>
      <constructor name="URLHandlerFactory()"/>
      <method name="createURLStreamHandler(java.lang.String)"/>
      <field name="warning"/>
      <field name="PREFIX_PROPERTY"/>
      <method name="create(java.lang.String)"/>
      <method name="remove(java.lang.String)"/>
      <field name="urlCache"/>
      <field name="factories"/>
      <field name="instance"/>
      <method name="register(java.lang.String,java.net.URLStreamHandler)"/>
      <method name="register(java.lang.String,java.net.URLStreamHandler,boolean)"/>
    </class>
  </package>
  <package name="oracle.ucp">
    <class name="ConnectionAffinityCallback">
      <method name="setConnectionAffinityContext(java.lang.Object)"/>
      <method name="getConnectionAffinityContext()"/>
      <method name="getAffinityPolicy()"/>
      <method name="setAffinityPolicy(oracle.ucp.ConnectionAffinityCallback.AffinityPolicy)"/>
    </class>
    <class name="ConnectionHarvestingCallback">
      <method name="cleanup()"/>
    </class>
    <class name="ConnectionLabelingCallback">
      <method name="configure(java.util.Properties,java.lang.Object)"/>
      <method name="cost(java.util.Properties,java.util.Properties)"/>
    </class>
  </package>
  <package name="oracle.ucp.jdbc">
    <class name="ConnectionInitializationCallback">
      <method name="initialize(java.sql.Connection)"/>
    </class>
    <class name="ConnectionLabelingCallback">
      <method name="getRequestedLabels()"/>
    </class>
    <class name="HarvestableConnection">
      <method name="isConnectionHarvestable()"/>
      <method name="registerConnectionHarvestingCallback(oracle.ucp.ConnectionHarvestingCallback)"/>
      <method name="removeConnectionHarvestingCallback()"/>
      <method name="setConnectionHarvestable(boolean)"/>
    </class>
    <class name="LabelableConnection">
      <method name="getConnectionLabels()"/>
      <method name="getUnmatchedConnectionLabels(java.util.Properties)"/>
      <method name="applyConnectionLabel(java.lang.String,java.lang.String)"/>
      <method name="removeConnectionLabel(java.lang.String)"/>
    </class>
  </package>
  <package name="oracle.ucp.jdbc.oracle">
    <class name="DataBasedConnectionAffinityCallback">
      <method name="setDataKey(java.lang.Object)"/>
      <method name="getPartitionId()"/>
    </class>
    <class name="RACAffinityContext">
      <method name="getDatabaseUniqueName()"/>
      <method name="getInstanceName()"/>
      <method name="getServiceName()"/>
      <method name="getVersionNumber()"/>
      <method name="getAffinityType()"/>
    </class>
  </package>
  <package name="weblogic.application">
    <class name="ApplicationContext">
      <method name="getApplicationId()"/>
      <method name="getApplicationName()"/>
      <method name="getApplicationSecurityRealmName()"/>
      <method name="getPartialApplicationId(boolean)"/>
      <method name="getAppDeploymentMBean()"/>
    </class>
    <class name="ApplicationException">
      <constructor name="ApplicationException()"/>
      <constructor name="ApplicationException(java.lang.String)"/>
      <constructor name="ApplicationException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="ApplicationException(java.lang.Throwable)"/>
    </class>
    <class name="ApplicationLifecycleEvent">
      <method name="isStaticOperation()"/>
      <method name="getApplicationContext()"/>
      <method name="getDeploymentOperation()"/>
    </class>
    <class name="ApplicationLifecycleListener">
      <constructor name="ApplicationLifecycleListener()"/>
      <method name="postStart(weblogic.application.ApplicationLifecycleEvent)"/>
      <method name="postStop(weblogic.application.ApplicationLifecycleEvent)"/>
      <method name="preStart(weblogic.application.ApplicationLifecycleEvent)"/>
      <method name="preStop(weblogic.application.ApplicationLifecycleEvent)"/>
    </class>
    <class name="ApplicationVersionLifecycleEvent">
      <method name="isActiveVersion()"/>
      <method name="isAdminMode()"/>
      <method name="isOwnVersion()"/>
      <method name="isOwnVersionActive()"/>
      <method name="getApplicationId()"/>
      <method name="getApplicationName()"/>
      <method name="getArchiveVersion()"/>
      <method name="getLibImplVersion()"/>
      <method name="getLibSpecVersion()"/>
      <method name="getPlanVersion()"/>
      <method name="getVersionId()"/>
      <method name="toString()"/>
    </class>
    <class name="ApplicationVersionLifecycleListener">
      <method name="postDelete(weblogic.application.ApplicationVersionLifecycleEvent)"/>
      <method name="postDeploy(weblogic.application.ApplicationVersionLifecycleEvent)"/>
      <method name="preDeploy(weblogic.application.ApplicationVersionLifecycleEvent)"/>
      <method name="preUndeploy(weblogic.application.ApplicationVersionLifecycleEvent)"/>
    </class>
    <class name="DeploymentOperationType" members="concealed"/>
    <class name="MergedDescriptorModule">
      <method name="getDescriptorMappings()"/>
    </class>
  </package>
  <package name="weblogic.application.library">
    <class name="LibraryContext" members="concealed"/>
  </package>
  <package name="weblogic.cluster.migration">
    <class name="Migratable">
      <method name="getOrder()"/>
      <method name="getName()"/>
      <field name="ACTIVATING"/>
      <field name="ACTIVE"/>
      <field name="DEFAULT_ORDER"/>
      <field name="EARLY_ORDER"/>
      <field name="FILESTORE_ORDER"/>
      <field name="INACTIVE"/>
      <field name="LATE_ORDER"/>
      <field name="MDB_ORDER"/>
      <method name="migratableActivate()"/>
      <method name="migratableDeactivate()"/>
      <method name="migratableInitialize()"/>
    </class>
    <class name="MigrationException">
      <method name="isFatal()"/>
    </class>
  </package>
  <package name="weblogic.cluster.singleton">
    <class name="MigratorInterface">
      <method name="migrate(java.lang.String,java.lang.String)"/>
      <method name="migrate(java.lang.String,java.lang.String,boolean,boolean)"/>
      <method name="migrateJTA(java.lang.String,java.lang.String,boolean,boolean)"/>
    </class>
    <class name="SingletonService">
      <method name="activate()"/>
      <method name="deactivate()"/>
    </class>
  </package>
  <package name="weblogic.coherence.descriptor.wl">
    <class name="CoherenceAddressProviderBean">
      <method name="getName()"/>
      <method name="destroyCoherenceSocketAddress(weblogic.coherence.descriptor.wl.CoherenceSocketAddressBean)"/>
      <method name="setName(java.lang.String)"/>
      <method name="createCoherenceSocketAddress(java.lang.String)"/>
      <method name="lookupCoherenceSocketAddress(java.lang.String)"/>
      <method name="getCoherenceSocketAddresses()"/>
    </class>
    <class name="CoherenceAddressProvidersBean">
      <method name="destroyCoherenceAddressProvider(weblogic.coherence.descriptor.wl.CoherenceAddressProviderBean)"/>
      <method name="createCoherenceAddressProvider(java.lang.String)"/>
      <method name="lookupCoherenceAddressProvider(java.lang.String)"/>
      <method name="getCoherenceAddressProviders()"/>
    </class>
    <class name="CoherenceCacheBean">
      <method name="getName()"/>
      <method name="getPartition()"/>
      <method name="setName(java.lang.String)"/>
      <method name="setPartition(java.lang.String)"/>
    </class>
    <class name="CoherenceClusterParamsBean">
      <method name="isSecurityFrameworkEnabled()"/>
      <method name="isUnicastPortAutoAdjust()"/>
      <method name="getClusterListenPort()"/>
      <method name="getMulticastListenPort()"/>
      <method name="getTimeToLive()"/>
      <method name="getUnicastListenPort()"/>
      <method name="getClusteringMode()"/>
      <method name="getMulticastListenAddress()"/>
      <method name="getTransport()"/>
      <field name="IMB"/>
      <field name="MULTICAST"/>
      <field name="SDMB"/>
      <field name="SSL"/>
      <field name="TCP"/>
      <field name="TMB"/>
      <field name="UDP"/>
      <field name="UNICAST"/>
      <method name="destroyCoherenceCache(weblogic.coherence.descriptor.wl.CoherenceCacheBean)"/>
      <method name="destroyCoherenceService(weblogic.coherence.descriptor.wl.CoherenceServiceBean)"/>
      <method name="setClusterListenPort(int)"/>
      <method name="setClusteringMode(java.lang.String)"/>
      <method name="setMulticastListenAddress(java.lang.String)"/>
      <method name="setMulticastListenPort(int)"/>
      <method name="setSecurityFrameworkEnabled(boolean)"/>
      <method name="setTimeToLive(int)"/>
      <method name="setTransport(java.lang.String)"/>
      <method name="setUnicastListenPort(int)"/>
      <method name="setUnicastPortAutoAdjust(boolean)"/>
      <method name="createCoherenceCache(java.lang.String)"/>
      <method name="lookupCoherenceCache(java.lang.String)"/>
      <method name="getCoherenceCaches()"/>
      <method name="getCoherenceClusterWellKnownAddresses()"/>
      <method name="getCoherenceIdentityAsserter()"/>
      <method name="getCoherenceKeystoreParams()"/>
      <method name="createCoherenceService(java.lang.String)"/>
      <method name="lookupCoherenceService(java.lang.String)"/>
      <method name="getCoherenceServices()"/>
    </class>
    <class name="CoherenceClusterWellKnownAddressBean">
      <method name="getListenPort()"/>
      <method name="getListenAddress()"/>
      <method name="getName()"/>
      <method name="setListenAddress(java.lang.String)"/>
      <method name="setListenPort(int)"/>
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="CoherenceClusterWellKnownAddressesBean">
      <method name="destroyCoherenceClusterWellKnownAddress(weblogic.coherence.descriptor.wl.CoherenceClusterWellKnownAddressBean)"/>
      <method name="createCoherenceClusterWellKnownAddress(java.lang.String)"/>
      <method name="lookupCoherenceClusterWellKnownAddress(java.lang.String)"/>
      <method name="getCoherenceClusterWellKnownAddresses()"/>
    </class>
    <class name="CoherenceFederationParamsBean">
      <method name="getRemoteCoherenceClusterListenPort()"/>
      <method name="getFederationTopology()"/>
      <method name="getRemoteCoherenceClusterName()"/>
      <method name="getRemoteParticipantHosts()"/>
      <method name="addRemoteParticipantHost(java.lang.String)"/>
      <method name="removeRemoteParticipantHost(java.lang.String)"/>
      <method name="setFederationTopology(java.lang.String)"/>
      <method name="setRemoteCoherenceClusterListenPort(int)"/>
      <method name="setRemoteCoherenceClusterName(java.lang.String)"/>
      <method name="setRemoteParticipantHosts(java.lang.String[])"/>
    </class>
    <class name="CoherenceIdentityAsserterBean">
      <method name="getClassName()"/>
      <method name="destroyCoherenceInitParam(weblogic.coherence.descriptor.wl.CoherenceInitParamBean)"/>
      <method name="setClassName(java.lang.String)"/>
      <method name="setCoherenceInitParams(weblogic.coherence.descriptor.wl.CoherenceInitParamBean[])"/>
      <method name="createCoherenceInitParam(java.lang.String)"/>
      <method name="lookupCoherenceInitParam(java.lang.String)"/>
      <method name="getCoherenceInitParams()"/>
    </class>
    <class name="CoherenceInitParamBean">
      <method name="getName()"/>
      <method name="getParamType()"/>
      <method name="getParamValue()"/>
      <field name="BOOLEAN_TYPE"/>
      <field name="BOOLEAN_TYPE_ABBREV"/>
      <field name="DATETIME_TYPE"/>
      <field name="DATETIME_TYPE_ABBREV"/>
      <field name="DATE_TYPE"/>
      <field name="DATE_TYPE_ABBREV"/>
      <field name="DECIMAL_TYPE"/>
      <field name="DECIMAL_TYPE_ABBREV"/>
      <field name="DOUBLE_TYPE"/>
      <field name="DOUBLE_TYPE_ABBREV"/>
      <field name="FILE_TYPE"/>
      <field name="FILE_TYPE_ABBREV"/>
      <field name="INT_TYPE"/>
      <field name="INT_TYPE_ABBREV"/>
      <field name="LONG_TYPE"/>
      <field name="LONG_TYPE_ABBREV"/>
      <field name="STRING_TYPE"/>
      <field name="STRING_TYPE_ABBREV"/>
      <field name="TIME_TYPE"/>
      <field name="TIME_TYPE_ABBREV"/>
      <method name="setName(java.lang.String)"/>
      <method name="setParamType(java.lang.String)"/>
      <method name="setParamValue(java.lang.String)"/>
    </class>
    <class name="CoherenceKeystoreParamsBean">
      <method name="getCoherencePrivateKeyPassPhraseEncrypted()"/>
      <method name="getCoherenceIdentityAlias()"/>
      <method name="getCoherencePrivateKeyPassPhrase()"/>
      <method name="setCoherenceIdentityAlias(java.lang.String)"/>
      <method name="setCoherencePrivateKeyPassPhrase(java.lang.String)"/>
      <method name="setCoherencePrivateKeyPassPhraseEncrypted(byte[])"/>
    </class>
    <class name="CoherenceLoggingParamsBean">
      <method name="isEnabled()"/>
      <method name="getLoggerName()"/>
      <method name="getMessageFormat()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setLoggerName(java.lang.String)"/>
      <method name="setMessageFormat(java.lang.String)"/>
    </class>
    <class name="CoherencePersistenceParamsBean">
      <method name="getActiveDirectory()"/>
      <method name="getDefaultPersistenceMode()"/>
      <method name="getSnapshotDirectory()"/>
      <method name="getTrashDirectory()"/>
      <method name="setActiveDirectory(java.lang.String)"/>
      <method name="setDefaultPersistenceMode(java.lang.String)"/>
      <method name="setSnapshotDirectory(java.lang.String)"/>
      <method name="setTrashDirectory(java.lang.String)"/>
    </class>
    <class name="CoherenceServiceBean">
      <method name="getName()"/>
      <method name="getPartition()"/>
      <method name="setName(java.lang.String)"/>
      <method name="setPartition(java.lang.String)"/>
    </class>
    <class name="CoherenceSocketAddressBean">
      <method name="getPort()"/>
      <method name="getAddress()"/>
      <method name="getName()"/>
      <method name="setAddress(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setPort(int)"/>
    </class>
    <class name="WeblogicCoherenceBean">
      <method name="getCustomClusterConfigurationFileName()"/>
      <method name="getName()"/>
      <method name="getVersion()"/>
      <method name="getCustomClusterConfigurationFileLastUpdatedTimestamp()"/>
      <method name="setName(java.lang.String)"/>
      <method name="setVersion(java.lang.String)"/>
      <method name="getCoherenceAddressProviders()"/>
      <method name="getCoherenceClusterParams()"/>
      <method name="getCoherenceFederationParams()"/>
      <method name="getCoherenceLoggingParams()"/>
      <method name="getCoherencePersistenceParams()"/>
    </class>
  </package>
  <package name="weblogic.common">
    <class name="ClientCallback">
      <method name="dispatch(java.lang.Throwable,java.lang.Object)"/>
    </class>
    <class name="CompletionListener">
      <method name="onCompletion(weblogic.common.CompletionRequest,java.lang.Object)"/>
      <method name="onException(weblogic.common.CompletionRequest,java.lang.Throwable)"/>
    </class>
    <class name="CompletionRequest">
      <method name="hasResult()"/>
      <method name="removeListener(weblogic.common.CompletionListener)"/>
      <method name="runListenersInSetResult(boolean)"/>
      <method name="getResult()"/>
      <method name="addFirstListener(weblogic.common.CompletionListener)"/>
      <method name="addListener(weblogic.common.CompletionListener)"/>
      <method name="reset()"/>
      <method name="run()"/>
      <method name="setResult(java.lang.Object)"/>
    </class>
    <class name="ConnectDeadException" members="concealed"/>
    <class name="ConnectDisabledException" members="concealed"/>
    <class name="DisconnectEvent">
      <method name="getSource()"/>
      <method name="getReason()"/>
      <method name="toString()"/>
    </class>
    <class name="DisconnectListener">
      <method name="disconnectOccurred(weblogic.common.DisconnectEvent)"/>
    </class>
    <class name="ParamSetException" members="concealed"/>
    <class name="ParamValue">
      <method name="asBoolean()"/>
      <method name="isBoolean()"/>
      <method name="isByte()"/>
      <method name="isChar()"/>
      <method name="isDate()"/>
      <method name="isDouble()"/>
      <method name="isFloat()"/>
      <method name="isInt()"/>
      <method name="isLong()"/>
      <method name="isNull()"/>
      <method name="isNull(int)"/>
      <method name="isObject()"/>
      <method name="isScalar()"/>
      <method name="isShort()"/>
      <method name="isString()"/>
      <method name="isVector()"/>
      <method name="asByte()"/>
      <method name="asChar()"/>
      <method name="asDouble()"/>
      <method name="asFloat()"/>
      <method name="asInt()"/>
      <field name="paramMode"/>
      <method name="paramMode()"/>
      <field name="paramType"/>
      <method name="paramType()"/>
      <method name="size()"/>
      <method name="asObject()"/>
      <method name="clone()"/>
      <method name="asString()"/>
      <method name="dump()"/>
      <method name="name()"/>
      <field name="paramDesc"/>
      <method name="paramDesc()"/>
      <method name="paramModeString()"/>
      <field name="paramName"/>
      <method name="paramTypeString()"/>
      <method name="toString()"/>
      <method name="asDate()"/>
      <method name="asLong()"/>
      <method name="asShort()"/>
      <method name="destroy()"/>
      <method name="initialize()"/>
      <method name="readExternal(java.io.ObjectInput)"/>
      <method name="setElementAt(java.lang.Object,int)"/>
      <method name="writeExternal(java.io.ObjectOutput)"/>
      <method name="elementAt(int)"/>
      <method name="set(boolean)"/>
      <method name="set(boolean,int)"/>
      <method name="set(byte)"/>
      <method name="set(char)"/>
      <method name="set(char,int)"/>
      <method name="set(double)"/>
      <method name="set(double,int)"/>
      <method name="set(float)"/>
      <method name="set(float,int)"/>
      <method name="set(int)"/>
      <method name="set(int,int)"/>
      <method name="set(java.lang.Object)"/>
      <method name="set(java.lang.Object,int)"/>
      <method name="set(java.lang.String)"/>
      <method name="set(java.lang.String,int)"/>
      <method name="set(java.util.Date)"/>
      <method name="set(java.util.Date,int)"/>
      <method name="set(long)"/>
      <method name="set(long,int)"/>
      <method name="set(short)"/>
      <method name="set(short,int)"/>
      <method name="set(weblogic.common.ParamValue)"/>
      <method name="set(weblogic.common.ParamValue,int)"/>
    </class>
    <class name="ProxyAuthenticator">
      <method name="getLoginAndPassword()"/>
      <field name="AUTHENTICATOR_PROPERTY"/>
      <method name="init(java.lang.String,int,java.lang.String,java.lang.String)"/>
    </class>
    <class name="ResourceException" members="concealed"/>
    <class name="WLObjectOutput">
      <method name="writeAbbrevString(java.lang.String)"/>
      <method name="writeArrayList(java.util.ArrayList)"/>
      <method name="writeArrayOfObjects(java.lang.Object[])"/>
      <method name="writeBytes(byte[])"/>
      <method name="writeDate(java.util.Date)"/>
      <method name="writeImmutable(java.lang.Object)"/>
      <method name="writeObjectWL(java.lang.Object)"/>
      <method name="writeProperties(java.util.Properties)"/>
      <method name="writeString(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.connector.extensions">
    <class name="ExtendedBootstrapContext">
      <method name="getDyeBits()"/>
      <method name="getDiagnosticContextID()"/>
      <method name="getBeanManager()"/>
      <method name="getValidator()"/>
      <method name="getValidatorFactory()"/>
      <method name="complete()"/>
      <method name="setDiagnosticContextID(java.lang.String)"/>
      <method name="setDyeBits(byte)"/>
    </class>
    <class name="LongRunning" members="concealed"/>
    <class name="Suspendable">
      <method name="isInboundSuspended(javax.resource.spi.endpoint.MessageEndpointFactory)"/>
      <method name="isSuspended(int)"/>
      <method name="supportsInit()"/>
      <method name="supportsSuspend(int)"/>
      <method name="supportsVersioning()"/>
      <field name="ALL"/>
      <field name="INBOUND"/>
      <field name="OUTBOUND"/>
      <field name="RESUME"/>
      <field name="SUSPEND"/>
      <field name="WORK"/>
      <method name="init(javax.resource.spi.ResourceAdapter,java.util.Properties)"/>
      <method name="resume(int,java.util.Properties)"/>
      <method name="resumeInbound(javax.resource.spi.endpoint.MessageEndpointFactory,java.util.Properties)"/>
      <method name="startVersioning(javax.resource.spi.ResourceAdapter,java.util.Properties)"/>
      <method name="suspend(int,java.util.Properties)"/>
      <method name="suspendInbound(javax.resource.spi.endpoint.MessageEndpointFactory,java.util.Properties)"/>
    </class>
    <class name="SuspendableAdapter">
      <method name="isInboundSuspended(javax.resource.spi.endpoint.MessageEndpointFactory)"/>
      <method name="isSuspended(int)"/>
      <method name="supportsInit()"/>
      <method name="supportsSuspend(int)"/>
      <method name="supportsVersioning()"/>
      <method name="getXAResources(javax.resource.spi.ActivationSpec[])"/>
      <method name="endpointActivation(javax.resource.spi.endpoint.MessageEndpointFactory,javax.resource.spi.ActivationSpec)"/>
      <method name="endpointDeactivation(javax.resource.spi.endpoint.MessageEndpointFactory,javax.resource.spi.ActivationSpec)"/>
      <method name="init(javax.resource.spi.ResourceAdapter,java.util.Properties)"/>
      <method name="resume(int,java.util.Properties)"/>
      <method name="resumeInbound(javax.resource.spi.endpoint.MessageEndpointFactory,java.util.Properties)"/>
      <method name="start(javax.resource.spi.BootstrapContext)"/>
      <method name="startVersioning(javax.resource.spi.ResourceAdapter,java.util.Properties)"/>
      <method name="stop()"/>
      <method name="suspend(int,java.util.Properties)"/>
      <method name="suspendInbound(javax.resource.spi.endpoint.MessageEndpointFactory,java.util.Properties)"/>
    </class>
    <class name="Unshareable" members="concealed"/>
  </package>
  <package name="weblogic.deploy.api.internal">
    <class name="Closable">
      <method name="close()"/>
    </class>
  </package>
  <package name="weblogic.deploy.api.model">
    <class name="WebLogicDDBean">
      <method name="isModified()"/>
      <method name="addXpathListener(java.lang.String,javax.enterprise.deploy.model.XpathListener)"/>
      <method name="removeXpathListener(java.lang.String,javax.enterprise.deploy.model.XpathListener)"/>
    </class>
    <class name="WebLogicDDBeanRoot">
      <method name="export(int)"/>
      <method name="export(weblogic.descriptor.DescriptorBean,java.lang.String[])"/>
      <method name="getDescriptorBean()"/>
    </class>
    <class name="WebLogicDeployableObject">
      <method name="setLibraries(weblogic.deploy.api.internal.utils.LibrarySpec[])"/>
      <method name="setPlan(java.io.File)"/>
      <method name="setPlanDir(java.io.File)"/>
      <method name="setUri(java.lang.String)"/>
      <method name="getPlan()"/>
      <method name="getPlandir()"/>
      <method name="getEntry(java.lang.String)"/>
      <method name="getClassFromScope(java.lang.String)"/>
      <field name="contextRoot"/>
      <method name="getContextRoot()"/>
      <method name="getModuleDTDVersion()"/>
      <method name="toString()"/>
      <method name="getText(java.lang.String)"/>
      <method name="entries()"/>
      <method name="getDDBeanRoot()"/>
      <method name="getDDBeanRoot(java.lang.String)"/>
      <method name="getDDBeanRoots()"/>
      <method name="getChildBean(java.lang.String)"/>
      <method name="getType()"/>
      <method name="close()"/>
      <method name="setContextRoot(java.lang.String)"/>
      <method name="getDescriptorBean()"/>
      <method name="getPlanBean()"/>
    </class>
    <class name="WebLogicJ2eeApplicationObject">
      <method name="getModuleUris()"/>
      <method name="getModuleUris(javax.enterprise.deploy.shared.ModuleType)"/>
      <method name="getText(javax.enterprise.deploy.shared.ModuleType,java.lang.String)"/>
      <method name="getChildBean(javax.enterprise.deploy.shared.ModuleType,java.lang.String)"/>
      <method name="getDeployableObject(java.lang.String)"/>
      <method name="getDeployableObjects()"/>
      <method name="getDeployableObjects(java.lang.String)"/>
      <method name="getDeployableObjects(javax.enterprise.deploy.shared.ModuleType)"/>
      <method name="addXpathListener(javax.enterprise.deploy.shared.ModuleType,java.lang.String,javax.enterprise.deploy.model.XpathListener)"/>
      <method name="close()"/>
      <method name="removeXpathListener(javax.enterprise.deploy.shared.ModuleType,java.lang.String,javax.enterprise.deploy.model.XpathListener)"/>
      <method name="getDescriptorBean()"/>
    </class>
  </package>
  <package name="weblogic.deploy.api.shared">
    <class name="PlanConstants">
      <field name="ANY"/>
      <field name="CHANGABLE"/>
      <field name="CONFIGURABLE"/>
      <field name="DECLARATION"/>
      <field name="DEPENDENCY"/>
      <field name="DYNAMIC"/>
    </class>
    <class name="WebLogicCommandType">
      <method name="getValue()"/>
      <method name="toString()"/>
      <field name="ACTIVATE"/>
      <field name="DEACTIVATE"/>
      <field name="DEPLOY"/>
      <field name="REMOVE"/>
      <field name="UPDATE"/>
      <method name="getCommandType(int)"/>
    </class>
    <class name="WebLogicModuleType">
      <method name="getValue()"/>
      <method name="getModuleExtension()"/>
      <field name="MODULETYPE_BPEL"/>
      <field name="MODULETYPE_GAR"/>
      <field name="MODULETYPE_JAVA"/>
      <field name="MODULETYPE_SCA_EXTENSION"/>
      <field name="MODULETYPE_SPRING"/>
      <field name="COHERENCE_CLUSTER"/>
      <field name="GAR"/>
      <field name="JDBC"/>
      <field name="JMS"/>
      <field name="REST_WEBSERVICE"/>
      <field name="SCA_BPEL"/>
      <field name="SCA_EXTENSION"/>
      <field name="SCA_JAVA"/>
      <field name="SCA_SPRING"/>
      <field name="UNKNOWN"/>
      <field name="WLDF"/>
      <field name="WSEE"/>
      <method name="getModuleType(int)"/>
      <method name="getTypeFromString(java.lang.String)"/>
    </class>
    <class name="WebLogicTargetType">
      <method name="getValue()"/>
      <method name="toString()"/>
      <field name="CLUSTER"/>
      <field name="JMSSERVER"/>
      <field name="SAFAGENT"/>
      <field name="SERVER"/>
      <field name="VIRTUALHOST"/>
      <field name="VIRTUALTARGET"/>
      <method name="getWebLogicTargetType(int)"/>
    </class>
  </package>
  <package name="weblogic.deploy.api.spi">
    <class name="DeploymentOptions">
      <method name="getOverwriteFile()"/>
      <method name="getSpecifiedTargetsOnly()"/>
      <method name="isAdminMode()"/>
      <method name="isGracefulIgnoreSessions()"/>
      <method name="isGracefulProductionToAdmin()"/>
      <method name="isLibrary()"/>
      <method name="isNameFromLibrary()"/>
      <method name="isNoVersion()"/>
      <method name="isRemote()"/>
      <method name="isRemovePlanOverride()"/>
      <method name="isRetireGracefully()"/>
      <method name="isSecurityValidationEnabled()"/>
      <method name="isSucceedIfNameUsed()"/>
      <method name="isUndeployAllVersions()"/>
      <method name="getClusterDeploymentTimeout()"/>
      <method name="getDeploymentOrder()"/>
      <method name="getRMIGracePeriodSecs()"/>
      <method name="getRetireTime()"/>
      <method name="getAltDD()"/>
      <method name="getAltWlsDD()"/>
      <method name="getArchiveVersion()"/>
      <method name="getDeploymentPrincipalName()"/>
      <method name="getLibImplVersion()"/>
      <method name="getLibSpecVersion()"/>
      <method name="getName()"/>
      <method name="getPartition()"/>
      <method name="getPlanStageMode()"/>
      <method name="getPlanVersion()"/>
      <method name="getResourceGroup()"/>
      <method name="getResourceGroupTemplate()"/>
      <method name="getSecurityModel()"/>
      <method name="getStageMode()"/>
      <method name="getUploadPath()"/>
      <method name="getVersionIdentifier()"/>
      <method name="toString()"/>
      <method name="getForceUndeployTimeout()"/>
      <method name="getTimeout()"/>
      <field name="ADMIN_ACCESS"/>
      <field name="FULL_ACCESS"/>
      <field name="CLUSTER_DEPLOYMENT_TIMEOUT"/>
      <field name="EXTERNAL_STAGE"/>
      <field name="NOSTAGE"/>
      <field name="PLAN_EXTERNAL_STAGE"/>
      <field name="PLAN_NOSTAGE"/>
      <field name="PLAN_STAGE"/>
      <field name="PLAN_STAGE_DEFAULT"/>
      <field name="STAGE"/>
      <field name="STAGE_DEFAULT"/>
      <method name="setAdminMode(boolean)"/>
      <method name="setAltDD(java.lang.String)"/>
      <method name="setAltWlsDD(java.lang.String)"/>
      <method name="setArchiveVersion(java.lang.String)"/>
      <method name="setClusterDeploymentTimeout(int)"/>
      <method name="setDeploymentOrder(int)"/>
      <method name="setDeploymentPrincipalName(java.lang.String)"/>
      <method name="setForceUndeployTimeout(long)"/>
      <method name="setGracefulIgnoreSessions(boolean)"/>
      <method name="setGracefulProductionToAdmin(boolean)"/>
      <method name="setLibImplVersion(java.lang.String)"/>
      <method name="setLibSpecVersion(java.lang.String)"/>
      <method name="setLibrary(boolean)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setNameFromLibrary(boolean)"/>
      <method name="setNoVersion(boolean)"/>
      <method name="setOverwriteFile(boolean)"/>
      <method name="setPartition(java.lang.String)"/>
      <method name="setPlanStageMode(java.lang.String)"/>
      <method name="setPlanVersion(java.lang.String)"/>
      <method name="setRMIGracePeriodSecs(int)"/>
      <method name="setRemote(boolean)"/>
      <method name="setRemovePlanOverride(boolean)"/>
      <method name="setResourceGroup(java.lang.String)"/>
      <method name="setResourceGroupTemplate(java.lang.String)"/>
      <method name="setRetireGracefully(boolean)"/>
      <method name="setRetireTime(int)"/>
      <method name="setSecurityModel(java.lang.String)"/>
      <method name="setSecurityValidationEnabled(boolean)"/>
      <method name="setSpecifiedTargetsOnly(boolean)"/>
      <method name="setStageMode(java.lang.String)"/>
      <method name="setSucceedIfNameUsed(boolean)"/>
      <method name="setTimeout(long)"/>
      <method name="setUndeployAllVersions(boolean)"/>
      <method name="setUploadPath(java.lang.String)"/>
      <method name="setVersionIdentifier(java.lang.String)"/>
    </class>
    <class name="WebLogicDConfigBean">
      <method name="isModified()"/>
      <method name="notifyDDChange(javax.enterprise.deploy.model.XpathEvent)"/>
      <method name="getDescriptorBean()"/>
    </class>
    <class name="WebLogicDConfigBeanRoot">
      <method name="getUri()"/>
      <method name="close()"/>
      <method name="export(int)"/>
      <method name="export(weblogic.descriptor.DescriptorBean,java.lang.String[])"/>
    </class>
    <class name="WebLogicDeploymentConfiguration">
      <method name="getModuleName(javax.enterprise.deploy.model.DDBeanRoot)"/>
      <field name="DEFAULT_APPNAME"/>
      <method name="close()"/>
      <method name="export(int)"/>
      <method name="export(int,boolean)"/>
      <method name="export(int,boolean,java.lang.String)"/>
      <method name="getPlan()"/>
    </class>
    <class name="WebLogicDeploymentManager">
      <method name="isConnected()"/>
      <method name="isDConfigBeanVersionSupported(javax.enterprise.deploy.shared.DConfigBeanVersionType)"/>
      <method name="isLocal()"/>
      <method name="isLocaleSupported(java.util.Locale)"/>
      <method name="isRedeploySupported()"/>
      <method name="confirmApplicationName(boolean,java.io.File,java.io.File,java.lang.String,java.lang.String)"/>
      <method name="confirmApplicationName(boolean,java.io.File,java.io.File,java.lang.String,java.lang.String,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="confirmApplicationName(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="confirmApplicationName(boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="getDomain()"/>
      <method name="getCurrentLocale()"/>
      <method name="getDefaultLocale()"/>
      <method name="getSupportedLocales()"/>
      <method name="getDConfigBeanVersion()"/>
      <method name="createConfiguration(javax.enterprise.deploy.model.DeployableObject)"/>
      <method name="filter(javax.enterprise.deploy.spi.TargetModuleID[],java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getAvailableModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[])"/>
      <method name="getAvailableModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[],weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="getModules(weblogic.management.configuration.ConfigurationMBean)"/>
      <method name="getNonRunningModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[])"/>
      <method name="getNonRunningModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[],weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="getRunningModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[])"/>
      <method name="getRunningModules(javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target[],weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="getTargets()"/>
      <method name="getTargets(weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="getTargets(weblogic.deploy.api.spi.DeploymentOptions,boolean)"/>
      <method name="appendToExtensionLoader(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="deploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,java.io.File,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="distribute(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,java.io.File,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="distribute(javax.enterprise.deploy.spi.Target[],java.io.File,java.io.File)"/>
      <method name="distribute(javax.enterprise.deploy.spi.Target[],java.io.File,java.io.File,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="distribute(javax.enterprise.deploy.spi.Target[],java.io.InputStream,java.io.InputStream)"/>
      <method name="distribute(javax.enterprise.deploy.spi.Target[],java.io.InputStream,java.io.InputStream,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="distribute(javax.enterprise.deploy.spi.Target[],javax.enterprise.deploy.shared.ModuleType,java.io.InputStream,java.io.InputStream)"/>
      <method name="redeploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,java.lang.String[],weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="redeploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,java.io.File)"/>
      <method name="redeploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,java.io.File,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="redeploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.InputStream,java.io.InputStream)"/>
      <method name="redeploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.InputStream,java.io.InputStream,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="start(javax.enterprise.deploy.spi.TargetModuleID[])"/>
      <method name="start(javax.enterprise.deploy.spi.TargetModuleID[],weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="stop(javax.enterprise.deploy.spi.TargetModuleID[])"/>
      <method name="stop(javax.enterprise.deploy.spi.TargetModuleID[],weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="undeploy(javax.enterprise.deploy.spi.TargetModuleID[])"/>
      <method name="undeploy(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,java.lang.String[],weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="undeploy(javax.enterprise.deploy.spi.TargetModuleID[],weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="update(javax.enterprise.deploy.spi.TargetModuleID[],java.io.File,weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="enableFileUploads()"/>
      <method name="release()"/>
      <method name="setDConfigBeanVersion(javax.enterprise.deploy.shared.DConfigBeanVersionType)"/>
      <method name="setLocale(java.util.Locale)"/>
      <method name="createTargetModuleID(java.lang.String,javax.enterprise.deploy.shared.ModuleType,javax.enterprise.deploy.spi.Target)"/>
      <method name="createTargetModuleID(javax.enterprise.deploy.spi.TargetModuleID,java.lang.String,javax.enterprise.deploy.shared.ModuleType)"/>
    </class>
    <class name="WebLogicTarget">
      <method name="equals(java.lang.Object)"/>
      <method name="isCluster()"/>
      <method name="isJMSServer()"/>
      <method name="isSAFAgent()"/>
      <method name="isServer()"/>
      <method name="isVirtualHost()"/>
      <method name="isVirtualTarget()"/>
      <method name="hashCode()"/>
      <method name="getDescription()"/>
      <method name="getName()"/>
    </class>
    <class name="WebLogicTargetModuleID">
      <method name="isOnCluster()"/>
      <method name="isOnJMSServer()"/>
      <method name="isOnSAFAgent()"/>
      <method name="isOnServer()"/>
      <method name="isOnVirtualHost()"/>
      <method name="isOnVirtualTarget()"/>
      <method name="isTargeted()"/>
      <method name="getApplicationName()"/>
      <method name="getArchiveVersion()"/>
      <method name="getModuleID()"/>
      <method name="getPlanVersion()"/>
      <method name="getVersion()"/>
      <method name="getServers()"/>
    </class>
  </package>
  <package name="weblogic.deploy.api.spi.factories">
    <class name="WebLogicDeploymentFactory">
      <method name="createUri(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createUri(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createUri(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getUris()"/>
      <method name="getDeploymentManager(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getDisconnectedDeploymentManager(java.lang.String)"/>
      <field name="AUTH_URI_INDEX"/>
      <field name="DEFAULT_PORT"/>
      <field name="LOCAL_URI_INDEX"/>
      <field name="REMOTE_URI_INDEX"/>
      <field name="AUTH_DM_URI"/>
      <field name="DEFAULT_HOST"/>
      <field name="DEFAULT_PORT_STRING"/>
      <field name="DEFAULT_PROTOCOL"/>
      <field name="DEFAULT_URL"/>
      <field name="LOCAL_DM_URI"/>
      <field name="REMOTE_DM_URI"/>
    </class>
  </package>
  <package name="weblogic.deploy.api.spi.status">
    <class name="WebLogicDeploymentStatus">
      <method name="isCompleted()"/>
      <method name="isFailed()"/>
      <method name="isRunning()"/>
      <method name="getRootException()"/>
    </class>
  </package>
  <package name="weblogic.deploy.api.tools">
    <class name="ModuleInfo">
      <method name="hasDataSource()"/>
      <method name="isArchived()"/>
      <method name="isRestService()"/>
      <method name="isWebService()"/>
      <method name="getName()"/>
      <method name="getBeans()"/>
      <method name="getContextRoots()"/>
      <method name="getDataSources()"/>
      <method name="getRestServices()"/>
      <method name="getSubDeployments()"/>
      <method name="getWebServices()"/>
      <method name="getType()"/>
      <method name="getSubModules()"/>
    </class>
    <class name="SessionHelper">
      <method name="finalize()"/>
      <method name="isFullInit()"/>
      <method name="isUpdatePlanVersion()"/>
      <method name="getApplication()"/>
      <method name="getApplicationRoot()"/>
      <method name="getPlan()"/>
      <method name="getPlandir()"/>
      <method name="getTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="getDefaultJMSTargetModuleIDs(weblogic.management.configuration.DomainMBean,weblogic.management.configuration.TargetMBean[],java.lang.String,java.lang.String)"/>
      <method name="getDeploymentManager(java.lang.String,java.lang.String)"/>
      <method name="getDeploymentManager(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getDeploymentManager(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getDeploymentManager(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getDisconnectedDeploymentManager()"/>
      <method name="getRemoteDeploymentManager(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getRemoteDeploymentManager(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getRemoteDeploymentManager(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getInstance(weblogic.deploy.api.spi.WebLogicDeploymentManager)"/>
      <method name="close()"/>
      <method name="initializeConfiguration()"/>
      <method name="inspect()"/>
      <method name="saveApplicationRoot()"/>
      <method name="savePlan()"/>
      <method name="setApplication(java.io.File)"/>
      <method name="setApplicationRoot(java.io.File)"/>
      <method name="setFullInit(boolean)"/>
      <method name="setPlan(java.io.File)"/>
      <method name="setPlandir(java.io.File)"/>
      <method name="setUpdatePlanVersion(boolean)"/>
      <method name="getDeployableObject()"/>
      <method name="getConfiguration()"/>
      <method name="getModuleInfo()"/>
    </class>
  </package>
  <package name="weblogic.deploy.version">
    <class name="AppActiveVersionState" members="concealed"/>
  </package>
  <package name="weblogic.deployment.configuration">
    <class name="DeploymentValidationContext">
      <method name="getSessionHelper()"/>
      <method name="getLogger()"/>
    </class>
    <class name="DeploymentValidationLogger">
      <method name="log(java.lang.String)"/>
    </class>
    <class name="DeploymentValidationPlugin">
      <method name="initialize(weblogic.management.configuration.ParameterMBean[])"/>
      <method name="validate(weblogic.deployment.configuration.DeploymentValidationContext)"/>
    </class>
    <class name="DeploymentValidationPluginFactory">
      <method name="create()"/>
    </class>
    <class name="ValidationResult">
      <method name="isDeploymentValid()"/>
      <method name="getException()"/>
    </class>
  </package>
  <package name="weblogic.descriptor">
    <class name="BeanAlreadyExistsException">
      <method name="getExistingBean()"/>
    </class>
    <class name="DescriptorBean">
      <method name="isEditable()"/>
      <method name="addPropertyChangeListener(java.beans.PropertyChangeListener)"/>
      <method name="removePropertyChangeListener(java.beans.PropertyChangeListener)"/>
      <method name="createChildCopyIncludingObsolete(java.lang.String,weblogic.descriptor.DescriptorBean)"/>
      <method name="getParentBean()"/>
    </class>
    <class name="SettableBean" members="concealed"/>
  </package>
  <package name="weblogic.descriptor.annotation">
    <class name="AnnotationDefinition">
      <method name="constructMessage(java.lang.String,weblogic.descriptor.beangen.PropertyDeclaration,java.lang.String)"/>
      <method name="error(java.lang.String,weblogic.descriptor.beangen.PropertyDeclaration,java.lang.String)"/>
      <method name="warning(java.lang.String,weblogic.descriptor.beangen.PropertyDeclaration,java.lang.String)"/>
      <method name="isAllowedType(java.lang.Class)"/>
      <method name="isDefined(com.bea.util.jam.JAnnotatedElement)"/>
      <method name="getAnnotationValue(com.bea.util.jam.JAnnotatedElement)"/>
      <method name="getAnnotationValues(com.bea.util.jam.JAnnotatedElement)"/>
      <method name="toString()"/>
      <method name="getAliases()"/>
      <method name="validate(weblogic.descriptor.beangen.PropertyDeclaration,java.lang.String)"/>
      <field name="INHERIT_FROM_CLASS"/>
      <field name="INHERIT_FROM_SUPERCLASS"/>
    </class>
    <class name="BeanAnnotations">
      <field name="ABSTRACT"/>
      <field name="ALLOW_DIFF_WITH_SIBLING_CLASS"/>
      <field name="BASE_INTERFACE"/>
      <field name="BEAN"/>
      <field name="CUSTOMIZER"/>
      <field name="CUSTOMIZER_FACTORY"/>
      <field name="DELEGATE_BEAN"/>
      <field name="INHERIT_SUPER_CUSTOMIZER"/>
      <field name="REFERENCEABLE"/>
      <field name="ROOT"/>
      <field name="SCHEMA_LOCATION"/>
      <field name="TARGET_NAMESPACE"/>
      <field name="VALIDATOR"/>
      <field name="XML_TYPE_NAME"/>
    </class>
    <class name="GlobalAnnotations">
      <field name="CONFIGURABLE"/>
      <field name="DYNAMIC"/>
      <field name="EXCLUDE"/>
      <field name="OBSOLETE"/>
      <field name="OWNER"/>
      <field name="ROLE_ALLOWED"/>
      <field name="ROLE_EXCLUDED"/>
      <field name="ROLE_PERMIT_ALL"/>
      <field name="VISIBLE_TO_PARTITION"/>
    </class>
    <class name="MethodAnnotations">
      <field name="ALLOW_SECURITY_OPERATIONS"/>
      <field name="OPERATION"/>
    </class>
    <class name="PropertyAnnotations">
      <field name="AGGREGATE"/>
      <field name="COMPONENT_NAME"/>
      <field name="DEFAULT"/>
      <field name="DEFERRED_VALIDATOR"/>
      <field name="DERIVED_DEFAULT"/>
      <field name="ENUMERATION"/>
      <field name="INITIALIZER"/>
      <field name="KEY"/>
      <field name="KEY_CHOICE"/>
      <field name="KEY_COMPONENT"/>
      <field name="LEGAL_MAX"/>
      <field name="LEGAL_MIN"/>
      <field name="LEGAL_ZERO_LENGTH"/>
      <field name="MERGERULE"/>
      <field name="META_DATA"/>
      <field name="NULLABLE"/>
      <field name="PREPROCESSOR"/>
      <field name="PRESERVE_WHITE_SPACE"/>
      <field name="PRODUCTION_DEFAULT"/>
      <field name="REFERENCE"/>
      <field name="REMOVE_VALIDATOR"/>
      <field name="REQUIRED"/>
      <field name="TRANSIENT"/>
      <field name="UN_SET_VALUE"/>
      <field name="VALIDATE_PROPERTY_DECLARATION"/>
      <field name="VALIDATOR"/>
      <field name="XML_ELEMENT_NAME"/>
      <method name="getAnnotationDefinition(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.descriptor.beangen">
    <class name="BeanElement" members="concealed"/>
    <class name="Customizer" members="concealed"/>
    <class name="CustomizerFactory">
      <method name="createCustomizer(java.lang.Object)"/>
    </class>
    <class name="MethodType">
      <field name="KEY_GETTER"/>
    </class>
    <class name="PostGenValidation">
      <method name="getMessage()"/>
      <field name="propName"/>
      <method name="getValidationCode()"/>
      <field name="code"/>
    </class>
    <class name="PropertyDeclaration">
      <method name="getComponentJClass()"/>
      <method name="getAllAnnotationNames()"/>
      <method name="arrayOrderSensitive()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hasAddressableComponents()"/>
      <method name="hasAnnotationListener()"/>
      <method name="hasComponents()"/>
      <method name="hasRestarts()"/>
      <method name="hasRestrictiveAccess()"/>
      <method name="hasTransientOverride()"/>
      <method name="isAnnotationDefinedOnPropertyInterface(java.lang.String)"/>
      <method name="isArray()"/>
      <method name="isAttribute()"/>
      <method name="isBean()"/>
      <method name="isChild()"/>
      <method name="isConfigurable()"/>
      <method name="isDeclaredEncrypted()"/>
      <method name="isDynamic()"/>
      <method name="isExcludedFromSchema()"/>
      <method name="isKey()"/>
      <method name="isKeyChoice()"/>
      <method name="isKeyComponent()"/>
      <method name="isMergeRuleIgnoreSourceDefined()"/>
      <method name="isMergeRuleIgnoreTargetDefined()"/>
      <method name="isMergeRulePrependDefined()"/>
      <method name="isPreviouslyPersisted()"/>
      <method name="isReadOnly()"/>
      <method name="isReference()"/>
      <method name="isReferenceable()"/>
      <method name="isRequired()"/>
      <method name="isSuperProperty()"/>
      <method name="isTransient()"/>
      <method name="needsPostGenValidation()"/>
      <method name="getAnnotationValue(weblogic.descriptor.annotation.AnnotationDefinition)"/>
      <method name="getJClass()"/>
      <method name="compareTo(java.lang.Object)"/>
      <method name="getIndex()"/>
      <method name="hashCode()"/>
      <method name="getAbsoluteType()"/>
      <method name="getComponentImplType()"/>
      <method name="getComponentName()"/>
      <method name="getComponentType()"/>
      <method name="getDecapitalizedName()"/>
      <method name="getDefault()"/>
      <method name="getDeprecatedString()"/>
      <method name="getDerivedDefault()"/>
      <method name="getElementNameAnnotation()"/>
      <method name="getInitializer()"/>
      <method name="getJClassAnnotationString(java.lang.String)"/>
      <method name="getLegalValues()"/>
      <method name="getName()"/>
      <method name="getRemoveValidator()"/>
      <method name="getRestartsMethod()"/>
      <method name="getType()"/>
      <method name="getValueFromString(java.lang.String)"/>
      <method name="getXMLElementName()"/>
      <method name="toString()"/>
      <method name="setDelegatedProperty(weblogic.descriptor.beangen.PropertyDeclaration)"/>
      <method name="setRestrictiveAccess()"/>
      <method name="getPostGenValidations()"/>
      <method name="getDelegatedProperty()"/>
    </class>
    <class name="PropertyMethodType">
      <field name="GETTER"/>
    </class>
  </package>
  <package name="weblogic.diagnostics.accessor.runtime">
    <class name="AccessRuntimeMBean">
      <method name="getAvailableDiagnosticDataAccessorNames()"/>
      <field name="SINGLETON_NAME"/>
      <method name="lookupDataAccessRuntime(java.lang.String)"/>
      <method name="getDataAccessRuntimes()"/>
    </class>
    <class name="ArchiveRuntimeMBean">
      <method name="getRecordRetrievalTime()"/>
      <method name="getRecordSeekCount()"/>
      <method name="getRecordSeekTime()"/>
      <method name="getRetrievedRecordCount()"/>
    </class>
    <class name="DataAccessRuntimeMBean">
      <method name="hasMoreData(java.lang.String)"/>
      <method name="isTimestampAvailable()"/>
      <method name="deleteDataRecords(long,long,java.lang.String)"/>
      <method name="getDataRecordCount(java.lang.String)"/>
      <method name="getDataRecordCount(long,long,long,java.lang.String)"/>
      <method name="getDataRecordCount(long,long,java.lang.String)"/>
      <method name="fetch(java.lang.String)"/>
      <method name="fetch(java.lang.String,int)"/>
      <method name="openCursor(java.lang.String)"/>
      <method name="openCursor(java.lang.String,long)"/>
      <method name="openCursor(long,long,long,java.lang.String)"/>
      <method name="openCursor(long,long,long,java.lang.String,long)"/>
      <method name="openCursor(long,long,java.lang.String)"/>
      <method name="openCursor(long,long,java.lang.String,long)"/>
      <method name="getColumnIndexMap()"/>
      <method name="getColumnTypeMap()"/>
      <method name="getEarliestAvailableTimestamp()"/>
      <method name="getLatestAvailableTimestamp()"/>
      <method name="getLatestRecordId()"/>
      <field name="DEFAULT_CURSOR_TIMEOUT"/>
      <method name="closeCursor(java.lang.String)"/>
    </class>
    <class name="DataRetirementTaskRuntimeMBean">
      <method name="getRetiredRecordsCount()"/>
    </class>
    <class name="DbstoreArchiveRuntimeMBean">
      <method name="getDeletionCount()"/>
      <method name="getDeletionTime()"/>
      <method name="getInsertionCount()"/>
      <method name="getInsertionTime()"/>
    </class>
    <class name="EditableArchiveRuntimeMBean">
      <method name="getDataRetirementCycles()"/>
      <method name="purgeDataRetirementTasks(long)"/>
      <method name="getDataRetirementTotalTime()"/>
      <method name="getLastDataRetirementStartTime()"/>
      <method name="getLastDataRetirementTime()"/>
      <method name="getRetiredRecordCount()"/>
      <method name="performRetirement()"/>
      <method name="getDataRetirementTasks()"/>
    </class>
    <class name="FileArchiveRuntimeMBean">
      <method name="getIncrementalIndexCycleCount()"/>
      <method name="getIndexCycleCount()"/>
      <method name="getRotatedFilesCount()"/>
      <method name="getIncrementalIndexTime()"/>
      <method name="getIndexTime()"/>
    </class>
    <class name="WlstoreArchiveRuntimeMBean">
      <method name="getIndexPageCount()"/>
      <method name="getDeletionCount()"/>
      <method name="getDeletionTime()"/>
      <method name="getInsertionCount()"/>
      <method name="getInsertionTime()"/>
      <method name="getRecordCount()"/>
    </class>
  </package>
  <package name="weblogic.diagnostics.context">
    <class name="DiagnosticContextConstants">
      <field name="ADDR1"/>
      <field name="ADDR2"/>
      <field name="ADDR3"/>
      <field name="ADDR4"/>
      <field name="CONNECTOR1"/>
      <field name="CONNECTOR2"/>
      <field name="CONNECTOR3"/>
      <field name="CONNECTOR4"/>
      <field name="COOKIE1"/>
      <field name="COOKIE2"/>
      <field name="COOKIE3"/>
      <field name="COOKIE4"/>
      <field name="DYE_0"/>
      <field name="DYE_1"/>
      <field name="DYE_2"/>
      <field name="DYE_3"/>
      <field name="DYE_4"/>
      <field name="DYE_6"/>
      <field name="DYE_7"/>
      <field name="PROTOCOL_HTTP"/>
      <field name="PROTOCOL_IIOP"/>
      <field name="PROTOCOL_JRMP"/>
      <field name="PROTOCOL_RMI"/>
      <field name="PROTOCOL_SSL"/>
      <field name="PROTOCOL_T3"/>
      <field name="THROTTLE"/>
      <field name="USER1"/>
      <field name="USER2"/>
      <field name="USER3"/>
      <field name="USER4"/>
    </class>
    <class name="DiagnosticContextHelper">
      <method name="isDyedWith(byte)"/>
      <method name="getLogLevel()"/>
      <method name="getContextId()"/>
      <method name="getPayload()"/>
      <method name="getRID()"/>
      <method name="getDyeFlagNames()"/>
      <method name="getDyeVector()"/>
      <method name="parseDyeMask(java.lang.String)"/>
      <method name="parseDyeMask(java.lang.String[])"/>
      <method name="handleLocalContextAsNonInheritable()"/>
      <method name="setApplicationDye(byte,boolean)"/>
      <method name="setDye(byte,boolean)"/>
      <method name="setLogLevel(int)"/>
      <method name="setPayload(java.lang.String)"/>
    </class>
    <class name="InvalidDyeException">
      <constructor name="InvalidDyeException()"/>
      <constructor name="InvalidDyeException(java.lang.String)"/>
      <constructor name="InvalidDyeException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="InvalidDyeException(java.lang.Throwable)"/>
    </class>
  </package>
  <package name="weblogic.diagnostics.debug">
    <class name="DebugScopeBean">
      <method name="isEnabled()"/>
      <method name="getName()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setName(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.diagnostics.debugpatch">
    <class name="DebugPatchHelper">
      <method name="removeBuffer(java.lang.String,java.lang.Object)"/>
      <method name="removeInteger(java.lang.String,java.lang.Object)"/>
      <method name="removeList(java.lang.String,java.lang.Object)"/>
      <method name="removeLong(java.lang.String,java.lang.Object)"/>
      <method name="removeMap(java.lang.String,java.lang.Object)"/>
      <method name="removeAll()"/>
      <method name="removeBuffers()"/>
      <method name="removeIntegers()"/>
      <method name="removeLists()"/>
      <method name="removeLongs()"/>
      <method name="removeMaps()"/>
      <method name="getPrintableMapData(java.lang.String,java.lang.Object)"/>
      <method name="findOrCreateBuffer(java.lang.String,java.lang.Object)"/>
      <method name="findOrCreateList(java.lang.String,java.lang.Object)"/>
      <method name="findOrCreateMap(java.lang.String,java.lang.Object)"/>
      <method name="findOrCreateInteger(java.lang.String,java.lang.Object)"/>
      <method name="findOrCreateLong(java.lang.String,java.lang.Object)"/>
    </class>
  </package>
  <package name="weblogic.diagnostics.descriptor">
    <class name="WLDFActionBean">
      <method name="getType()"/>
      <method name="lookupConfigurationProperty(java.lang.String)"/>
    </class>
    <class name="WLDFArrayPropertyBean">
      <method name="getValue()"/>
      <field name="DEFAULT_VALUE"/>
      <method name="setValue(java.lang.String[])"/>
    </class>
    <class name="WLDFBean">
      <method name="getName()"/>
      <method name="getId()"/>
    </class>
    <class name="WLDFConfigurationPropertiesBean" members="concealed"/>
    <class name="WLDFConfigurationPropertyBean" members="concealed"/>
    <class name="WLDFEncryptedPropertyBean">
      <method name="getEncryptedValueEncrypted()"/>
      <method name="getEncryptedValue()"/>
    </class>
    <class name="WLDFHarvestedTypeBean">
      <method name="isEnabled()"/>
      <method name="isKnownType()"/>
      <method name="getName()"/>
      <method name="getNamespace()"/>
      <method name="getHarvestedAttributes()"/>
      <method name="getHarvestedInstances()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setHarvestedAttributes(java.lang.String[])"/>
      <method name="setHarvestedInstances(java.lang.String[])"/>
      <method name="setKnownType(boolean)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setNamespace(java.lang.String)"/>
    </class>
    <class name="WLDFHarvesterBean">
      <method name="isEnabled()"/>
      <method name="getSamplePeriod()"/>
      <method name="destroyHarvestedType(weblogic.diagnostics.descriptor.WLDFHarvestedTypeBean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setSamplePeriod(long)"/>
      <method name="createHarvestedType(java.lang.String)"/>
      <method name="lookupHarvestedType(java.lang.String)"/>
      <method name="getHarvestedTypes()"/>
    </class>
    <class name="WLDFHeapDumpActionBean">
      <method name="isLiveSetOnly()"/>
      <method name="setLiveSetOnly(boolean)"/>
    </class>
    <class name="WLDFImageNotificationBean">
      <method name="getImageLockout()"/>
      <method name="getImageDirectory()"/>
      <method name="setImageDirectory(java.lang.String)"/>
      <method name="setImageLockout(int)"/>
    </class>
    <class name="WLDFInstrumentationBean">
      <method name="isEnabled()"/>
      <method name="getExcludes()"/>
      <method name="getIncludes()"/>
      <method name="destroyWLDFInstrumentationMonitor(weblogic.diagnostics.descriptor.WLDFInstrumentationMonitorBean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setExcludes(java.lang.String[])"/>
      <method name="setIncludes(java.lang.String[])"/>
      <method name="createWLDFInstrumentationMonitor(java.lang.String)"/>
      <method name="getWLDFInstrumentationMonitors()"/>
    </class>
    <class name="WLDFInstrumentationMonitorBean">
      <method name="isDyeFilteringEnabled()"/>
      <method name="isEnabled()"/>
      <method name="getDescription()"/>
      <method name="getDyeMask()"/>
      <method name="getLocationType()"/>
      <method name="getPointcut()"/>
      <method name="getProperties()"/>
      <method name="getActions()"/>
      <method name="getExcludes()"/>
      <method name="getIncludes()"/>
      <method name="setActions(java.lang.String[])"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setDyeFilteringEnabled(boolean)"/>
      <method name="setDyeMask(java.lang.String)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setExcludes(java.lang.String[])"/>
      <method name="setIncludes(java.lang.String[])"/>
      <method name="setLocationType(java.lang.String)"/>
      <method name="setPointcut(java.lang.String)"/>
      <method name="setProperties(java.lang.String)"/>
    </class>
    <class name="WLDFJMSNotificationBean">
      <method name="getConnectionFactoryJNDIName()"/>
      <method name="getDestinationJNDIName()"/>
      <method name="setConnectionFactoryJNDIName(java.lang.String)"/>
      <method name="setDestinationJNDIName(java.lang.String)"/>
    </class>
    <class name="WLDFJMXNotificationBean">
      <method name="getNotificationType()"/>
      <method name="setNotificationType(java.lang.String)"/>
    </class>
    <class name="WLDFLogActionBean">
      <method name="getMessage()"/>
      <method name="getSeverity()"/>
      <method name="getSubsystemName()"/>
      <method name="setMessage(java.lang.String)"/>
      <method name="setSeverity(java.lang.String)"/>
      <method name="setSubsystemName(java.lang.String)"/>
    </class>
    <class name="WLDFNotificationBean">
      <method name="isEnabled()"/>
      <method name="getTimeout()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setTimeout(int)"/>
    </class>
    <class name="WLDFPropertyBean">
      <method name="getValue()"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="WLDFRESTNotificationBean">
      <method name="getHttpAuthenticationPasswordEncrypted()"/>
      <method name="getAcceptedResponseType()"/>
      <method name="getEndpointURL()"/>
      <method name="getHttpAuthenticationMode()"/>
      <method name="getHttpAuthenticationPassword()"/>
      <method name="getHttpAuthenticationUserName()"/>
      <method name="getRestInvocationMethodType()"/>
      <method name="getCustomNotificationProperties()"/>
      <field name="BASIC_HTTP_AUTH"/>
      <field name="NO_HTTP_AUTH"/>
      <field name="REST_POST_METHOD"/>
      <field name="REST_PUT_METHOD"/>
      <method name="setAcceptedResponseType(java.lang.String)"/>
      <method name="setEndpointURL(java.lang.String)"/>
      <method name="setHttpAuthenticationMode(java.lang.String)"/>
      <method name="setHttpAuthenticationPassword(java.lang.String)"/>
      <method name="setHttpAuthenticationPasswordEncrypted(byte[])"/>
      <method name="setHttpAuthenticationUserName(java.lang.String)"/>
      <method name="setRestInvocationMethodType(java.lang.String)"/>
    </class>
    <class name="WLDFResourceBean">
      <method name="getHarvester()"/>
      <method name="getInstrumentation()"/>
      <method name="getWatchNotification()"/>
    </class>
    <class name="WLDFSMTPNotificationBean">
      <method name="getBody()"/>
      <method name="getMailSessionJNDIName()"/>
      <method name="getSubject()"/>
      <method name="getRecipients()"/>
      <method name="addRecipient(java.lang.String)"/>
      <method name="removeRecipient(java.lang.String)"/>
      <method name="setBody(java.lang.String)"/>
      <method name="setMailSessionJNDIName(java.lang.String)"/>
      <method name="setRecipients(java.lang.String[])"/>
      <method name="setSubject(java.lang.String)"/>
    </class>
    <class name="WLDFSNMPNotificationBean" members="concealed"/>
    <class name="WLDFScaleDownActionBean" members="concealed"/>
    <class name="WLDFScaleUpActionBean" members="concealed"/>
    <class name="WLDFScalingActionBean">
      <method name="getScalingSize()"/>
      <method name="getClusterName()"/>
      <method name="setClusterName(java.lang.String)"/>
      <method name="setScalingSize(int)"/>
    </class>
    <class name="WLDFScheduleBean">
      <method name="getDayOfMonth()"/>
      <method name="getDayOfWeek()"/>
      <method name="getHour()"/>
      <method name="getMinute()"/>
      <method name="getMonth()"/>
      <method name="getSecond()"/>
      <method name="getTimezone()"/>
      <method name="getYear()"/>
      <method name="setDayOfMonth(java.lang.String)"/>
      <method name="setDayOfWeek(java.lang.String)"/>
      <method name="setHour(java.lang.String)"/>
      <method name="setMinute(java.lang.String)"/>
      <method name="setMonth(java.lang.String)"/>
      <method name="setSecond(java.lang.String)"/>
      <method name="setTimezone(java.lang.String)"/>
      <method name="setYear(java.lang.String)"/>
    </class>
    <class name="WLDFScriptActionBean">
      <method name="getPathToScript()"/>
      <method name="getWorkingDirectory()"/>
      <method name="getParameters()"/>
      <method name="getEnvironment()"/>
      <method name="setEnvironment(java.util.Properties)"/>
      <method name="setParameters(java.lang.String[])"/>
      <method name="setPathToScript(java.lang.String)"/>
      <method name="setWorkingDirectory(java.lang.String)"/>
    </class>
    <class name="WLDFThreadDumpActionBean">
      <method name="getThreadDumpCount()"/>
      <method name="getThreadDumpDelaySeconds()"/>
      <method name="setThreadDumpCount(int)"/>
      <method name="setThreadDumpDelaySeconds(int)"/>
    </class>
    <class name="WLDFWatchBean">
      <method name="addNotification(weblogic.diagnostics.descriptor.WLDFNotificationBean)"/>
      <method name="isEnabled()"/>
      <method name="removeNotification(weblogic.diagnostics.descriptor.WLDFNotificationBean)"/>
      <method name="getAlarmResetPeriod()"/>
      <method name="getAlarmType()"/>
      <method name="getExpressionLanguage()"/>
      <method name="getRuleExpression()"/>
      <method name="getRuleType()"/>
      <method name="getSeverity()"/>
      <field name="AUTO_RESET_ALARM_TYPE"/>
      <field name="DOMAIN_LOG_RULE_TYPE"/>
      <field name="EL_LANGUAGE_TYPE"/>
      <field name="EVENT_DATA_RULE_TYPE"/>
      <field name="HARVESTER_RULE_TYPE"/>
      <field name="LOG_RULE_TYPE"/>
      <field name="MANUAL_RESET_ALARM_TYPE"/>
      <field name="NONE_ALARM_TYPE"/>
      <field name="WLDF_LANGUAGE_TYPE"/>
      <method name="setAlarmResetPeriod(int)"/>
      <method name="setAlarmType(java.lang.String)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setExpressionLanguage(java.lang.String)"/>
      <method name="setNotifications(weblogic.diagnostics.descriptor.WLDFNotificationBean[])"/>
      <method name="setRuleExpression(java.lang.String)"/>
      <method name="setRuleType(java.lang.String)"/>
      <method name="setSeverity(java.lang.String)"/>
      <method name="getNotifications()"/>
      <method name="getSchedule()"/>
    </class>
    <class name="WLDFWatchNotificationBean">
      <method name="isEnabled()"/>
      <method name="getLogWatchSeverity()"/>
      <method name="getSeverity()"/>
      <method name="destroyAction(weblogic.diagnostics.descriptor.WLDFActionBean)"/>
      <method name="destroyHeapDumpAction(weblogic.diagnostics.descriptor.WLDFHeapDumpActionBean)"/>
      <method name="destroyImageNotification(weblogic.diagnostics.descriptor.WLDFImageNotificationBean)"/>
      <method name="destroyJMSNotification(weblogic.diagnostics.descriptor.WLDFJMSNotificationBean)"/>
      <method name="destroyJMXNotification(weblogic.diagnostics.descriptor.WLDFJMXNotificationBean)"/>
      <method name="destroyLogAction(weblogic.diagnostics.descriptor.WLDFLogActionBean)"/>
      <method name="destroyRESTNotification(weblogic.diagnostics.descriptor.WLDFRESTNotificationBean)"/>
      <method name="destroySMTPNotification(weblogic.diagnostics.descriptor.WLDFSMTPNotificationBean)"/>
      <method name="destroySNMPNotification(weblogic.diagnostics.descriptor.WLDFSNMPNotificationBean)"/>
      <method name="destroyScaleDownAction(weblogic.diagnostics.descriptor.WLDFScaleDownActionBean)"/>
      <method name="destroyScaleUpAction(weblogic.diagnostics.descriptor.WLDFScaleUpActionBean)"/>
      <method name="destroyScriptAction(weblogic.diagnostics.descriptor.WLDFScriptActionBean)"/>
      <method name="destroyThreadDumpAction(weblogic.diagnostics.descriptor.WLDFThreadDumpActionBean)"/>
      <method name="destroyWatch(weblogic.diagnostics.descriptor.WLDFWatchBean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setLogWatchSeverity(java.lang.String)"/>
      <method name="setSeverity(java.lang.String)"/>
      <method name="createAction(java.lang.String,java.lang.String)"/>
      <method name="lookupAction(java.lang.String)"/>
      <method name="getActions()"/>
      <method name="lookupActions(java.lang.String)"/>
      <method name="createHeapDumpAction(java.lang.String)"/>
      <method name="lookupHeapDumpAction(java.lang.String)"/>
      <method name="getHeapDumpActions()"/>
      <method name="createImageNotification(java.lang.String)"/>
      <method name="lookupImageNotification(java.lang.String)"/>
      <method name="getImageNotifications()"/>
      <method name="createJMSNotification(java.lang.String)"/>
      <method name="lookupJMSNotification(java.lang.String)"/>
      <method name="getJMSNotifications()"/>
      <method name="createJMXNotification(java.lang.String)"/>
      <method name="lookupJMXNotification(java.lang.String)"/>
      <method name="getJMXNotifications()"/>
      <method name="createLogAction(java.lang.String)"/>
      <method name="lookupLogAction(java.lang.String)"/>
      <method name="getLogActions()"/>
      <method name="lookupNotification(java.lang.String)"/>
      <method name="getNotifications()"/>
      <method name="createRESTNotification(java.lang.String)"/>
      <method name="lookupRESTNotification(java.lang.String)"/>
      <method name="getRESTNotifications()"/>
      <method name="createSMTPNotification(java.lang.String)"/>
      <method name="lookupSMTPNotification(java.lang.String)"/>
      <method name="getSMTPNotifications()"/>
      <method name="createSNMPNotification(java.lang.String)"/>
      <method name="lookupSNMPNotification(java.lang.String)"/>
      <method name="getSNMPNotifications()"/>
      <method name="createScaleDownAction(java.lang.String)"/>
      <method name="lookupScaleDownAction(java.lang.String)"/>
      <method name="getScaleDownActions()"/>
      <method name="createScaleUpAction(java.lang.String)"/>
      <method name="lookupScaleUpAction(java.lang.String)"/>
      <method name="getScaleUpActions()"/>
      <method name="createScriptAction(java.lang.String)"/>
      <method name="lookupScriptAction(java.lang.String)"/>
      <method name="getScriptActions()"/>
      <method name="createThreadDumpAction(java.lang.String)"/>
      <method name="lookupThreadDumpAction(java.lang.String)"/>
      <method name="getThreadDumpActions()"/>
      <method name="createWatch(java.lang.String)"/>
      <method name="lookupWatch(java.lang.String)"/>
      <method name="getWatches()"/>
    </class>
  </package>
  <package name="weblogic.diagnostics.harvester">
    <class name="HarvesterException">
      <field name="serialVersionUID"/>
    </class>
  </package>
  <package name="weblogic.diagnostics.instrumentation">
    <class name="EventPayload" members="concealed"/>
  </package>
  <package name="weblogic.diagnostics.type">
    <class name="DiagnosticException">
      <constructor name="DiagnosticException()"/>
      <constructor name="DiagnosticException(java.lang.String)"/>
      <constructor name="DiagnosticException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="DiagnosticException(java.lang.Throwable)"/>
    </class>
  </package>
  <package name="weblogic.diagnostics.watch">
    <class name="JMXWatchNotification">
      <field name="GLOBAL_JMX_NOTIFICATION_PRODUCER_NAME"/>
      <method name="getExtendedInfo()"/>
    </class>
    <class name="WatchNotification">
      <method name="getMessage()"/>
      <method name="getWatchAlarmResetPeriod()"/>
      <method name="getWatchAlarmType()"/>
      <method name="getWatchDataToString()"/>
      <method name="getWatchDomainName()"/>
      <method name="getWatchName()"/>
      <method name="getWatchRule()"/>
      <method name="getWatchRuleType()"/>
      <method name="getWatchServerName()"/>
      <method name="getWatchSeverityLevel()"/>
      <method name="getWatchTime()"/>
    </class>
  </package>
  <package name="weblogic.ejb">
    <class name="CachingHome">
      <method name="invalidate(java.lang.Object)"/>
      <method name="invalidate(java.util.Collection)"/>
      <method name="invalidateAll()"/>
      <method name="invalidateAllLocalServer()"/>
      <method name="invalidateLocalServer(java.lang.Object)"/>
      <method name="invalidateLocalServer(java.util.Collection)"/>
    </class>
    <class name="CachingLocalHome">
      <method name="invalidate(java.lang.Object)"/>
      <method name="invalidate(java.util.Collection)"/>
      <method name="invalidateAll()"/>
      <method name="invalidateAllLocalServer()"/>
      <method name="invalidateLocalServer(java.lang.Object)"/>
      <method name="invalidateLocalServer(java.util.Collection)"/>
    </class>
    <class name="GenericEnterpriseBean">
      <method name="isTracingEnabled()"/>
      <method name="getEnvEntry(java.lang.String)"/>
      <method name="getCurrentTransactionStatus()"/>
      <method name="getCurrentXID()"/>
      <method name="getInitialContext()"/>
      <method name="logDebugMessage(java.lang.String)"/>
      <method name="logDebugMessage(java.lang.String,java.lang.Throwable)"/>
      <method name="logErrorMessage(java.lang.String)"/>
      <method name="logErrorMessage(java.lang.String,java.lang.Throwable)"/>
      <method name="setTracingEnabled(boolean)"/>
      <method name="trace(java.lang.String)"/>
      <method name="trace(java.lang.String,java.lang.Object)"/>
      <method name="getCurrentTransaction()"/>
      <method name="getTransactionManager()"/>
    </class>
    <class name="GenericEntityBean">
      <method name="getEntityContext()"/>
      <method name="ejbActivate()"/>
      <method name="ejbLoad()"/>
      <method name="ejbPassivate()"/>
      <method name="ejbRemove()"/>
      <method name="ejbStore()"/>
      <method name="setEntityContext(javax.ejb.EntityContext)"/>
      <method name="unsetEntityContext()"/>
    </class>
    <class name="GenericMessageDrivenBean">
      <method name="getMessageDriveContext()"/>
      <method name="getMessageDrivenContext()"/>
      <method name="ejbCreate()"/>
      <method name="ejbRemove()"/>
      <method name="setMessageDrivenContext(javax.ejb.MessageDrivenContext)"/>
    </class>
    <class name="GenericSessionBean">
      <method name="getSessionContext()"/>
      <method name="ejbActivate()"/>
      <method name="ejbCreate()"/>
      <method name="ejbPassivate()"/>
      <method name="ejbRemove()"/>
      <method name="setSessionContext(javax.ejb.SessionContext)"/>
    </class>
    <class name="NonDestructiveRuntimeException" members="concealed"/>
    <class name="OptimisticConcurrencyException" members="concealed"/>
    <class name="PreparedQuery">
      <method name="getEjbql()"/>
      <method name="execute()"/>
      <method name="find()"/>
      <method name="setBigDecimal(int,java.math.BigDecimal)"/>
      <method name="setBigInteger(int,java.math.BigInteger)"/>
      <method name="setBinary(int,byte[])"/>
      <method name="setBoolean(int,boolean)"/>
      <method name="setByte(int,byte)"/>
      <method name="setCalender(int,java.util.Calendar)"/>
      <method name="setCharacter(int,char)"/>
      <method name="setDate(int,java.sql.Date)"/>
      <method name="setDate(int,java.util.Date)"/>
      <method name="setDouble(int,double)"/>
      <method name="setFloat(int,float)"/>
      <method name="setInt(int,int)"/>
      <method name="setLong(int,long)"/>
      <method name="setObject(int,java.lang.Object)"/>
      <method name="setShort(int,short)"/>
      <method name="setString(int,java.lang.String)"/>
      <method name="setTime(int,java.sql.Time)"/>
      <method name="setTime(int,java.util.Date)"/>
      <method name="setTimestamp(int,java.sql.Timestamp)"/>
      <method name="setTimestamp(int,java.util.Date)"/>
    </class>
    <class name="Query">
      <method name="getLanguage()"/>
      <method name="execute(java.lang.String)"/>
      <method name="execute(java.lang.String,java.util.Properties)"/>
      <method name="find(java.lang.String)"/>
      <method name="find(java.lang.String,java.util.Properties)"/>
    </class>
    <class name="QueryHome">
      <method name="getDatabaseProductName()"/>
      <method name="getDatabaseProductVersion()"/>
      <method name="nativeQuery(java.lang.String)"/>
      <method name="prepareQuery(java.lang.String)"/>
      <method name="prepareQuery(java.lang.String,java.util.Properties)"/>
      <method name="createQuery()"/>
      <method name="createSqlQuery()"/>
    </class>
    <class name="QueryLocalHome">
      <method name="getDatabaseProductName()"/>
      <method name="getDatabaseProductVersion()"/>
      <method name="nativeQuery(java.lang.String)"/>
      <method name="prepareQuery(java.lang.String)"/>
      <method name="prepareQuery(java.lang.String,java.util.Properties)"/>
      <method name="createQuery()"/>
      <method name="createSqlQuery()"/>
    </class>
    <class name="QueryProperties">
      <method name="getEnableQueryCaching()"/>
      <method name="getIncludeUpdates()"/>
      <method name="isResultTypeRemote()"/>
      <method name="getMaxElements()"/>
      <method name="getTransaction()"/>
      <field name="TX_MANDATORY"/>
      <field name="TX_REQUIRED"/>
      <field name="TX_REQUIRES_NEW"/>
      <method name="setEnableQueryCaching(boolean)"/>
      <method name="setIncludeUpdates(boolean)"/>
      <method name="setMaxElements(int)"/>
      <method name="setResultTypeRemote(boolean)"/>
      <method name="setTransaction(short)"/>
    </class>
    <class name="WLQueryProperties">
      <method name="getSQLSelectDistinct()"/>
      <method name="getIsolationLevel()"/>
      <method name="getFieldGroupName()"/>
      <method name="getRelationshipCachingName()"/>
      <method name="getSqlShapeName()"/>
      <field name="NONE"/>
      <field name="READ_COMMITTED"/>
      <field name="READ_COMMITTED_FOR_UPDATE"/>
      <field name="READ_UNCOMMITTED"/>
      <field name="REPEATABLE_READ"/>
      <field name="SERIALIZABLE"/>
      <field name="GROUP_NAME"/>
      <field name="ISOLATION_LEVEL"/>
      <field name="RELATIONSHIP_CACHING_NAME"/>
      <field name="SQL_SELECT_DISTINCT"/>
      <method name="setFieldGroupName(java.lang.String)"/>
      <method name="setIsolationLevel(int)"/>
      <method name="setRelationshipCachingName(java.lang.String)"/>
      <method name="setSQLSelectDistinct(boolean)"/>
      <method name="setSqlShapeName(java.lang.String)"/>
    </class>
    <class name="WLTimer">
      <method name="getCompletedTimeoutCount()"/>
      <method name="getMaximumRetryAttempts()"/>
      <method name="getRetryAttemptCount()"/>
    </class>
    <class name="WLTimerInfo">
      <method name="getMaxRetryAttempts()"/>
      <method name="getMaxTimeouts()"/>
      <method name="getTimeoutFailureAction()"/>
      <method name="getRetryDelay()"/>
      <field name="DISABLE_TIMER_ACTION"/>
      <field name="REMOVE_TIMER_ACTION"/>
      <field name="SKIP_TIMEOUT_ACTION"/>
      <method name="setMaxRetryAttempts(int)"/>
      <method name="setMaxTimeouts(int)"/>
      <method name="setRetryDelay(long)"/>
      <method name="setTimeoutFailureAction(int)"/>
    </class>
    <class name="WLTimerService">
      <method name="createTimer(java.util.Date,java.io.Serializable,weblogic.ejb.WLTimerInfo)"/>
      <method name="createTimer(java.util.Date,long,java.io.Serializable,weblogic.ejb.WLTimerInfo)"/>
      <method name="createTimer(long,java.io.Serializable,weblogic.ejb.WLTimerInfo)"/>
      <method name="createTimer(long,long,java.io.Serializable,weblogic.ejb.WLTimerInfo)"/>
    </class>
  </package>
  <package name="weblogic.ejbgen">
    <class name="ActivationConfigProperties" members="concealed"/>
    <class name="ActivationConfigProperty" members="concealed"/>
    <class name="AutomaticKeyGeneration" members="concealed"/>
    <class name="CmpField" members="concealed"/>
    <class name="CmrField" members="concealed"/>
    <class name="Compatibility" members="concealed"/>
    <class name="Constants" members="concealed"/>
    <class name="CreateDefaultDbmsTables" members="concealed"/>
    <class name="CreateDefaultRdbmsTables" members="concealed"/>
    <class name="DBSpecificSQL" members="concealed"/>
    <class name="EjbClientJar" members="concealed"/>
    <class name="EjbInterface" members="concealed"/>
    <class name="EjbLocalRef" members="concealed"/>
    <class name="EjbLocalRefs" members="concealed"/>
    <class name="EjbRef" members="concealed"/>
    <class name="EjbRefs" members="concealed"/>
    <class name="Entity" members="concealed"/>
    <class name="EntityCacheRef" members="concealed"/>
    <class name="EnvEntries" members="concealed"/>
    <class name="EnvEntry" members="concealed"/>
    <class name="FileGeneration" members="concealed"/>
    <class name="Finder" members="concealed"/>
    <class name="Finders" members="concealed"/>
    <class name="ForeignJmsProvider" members="concealed"/>
    <class name="JCA" members="concealed"/>
    <class name="JMS" members="concealed"/>
    <class name="JarSettings" members="concealed"/>
    <class name="JndiName" members="concealed"/>
    <class name="LocalHomeMethod" members="concealed"/>
    <class name="LocalMethod" members="concealed"/>
    <class name="MessageDestination" members="concealed"/>
    <class name="MessageDestinationRef" members="concealed"/>
    <class name="MessageDestinationRefs" members="concealed"/>
    <class name="MessageDestinations" members="concealed"/>
    <class name="MessageDriven" members="concealed"/>
    <class name="MethodIsolationLevelPattern" members="concealed"/>
    <class name="MethodIsolationLevelPatterns" members="concealed"/>
    <class name="MethodPermissionPattern" members="concealed"/>
    <class name="MethodPermissionPatterns" members="concealed"/>
    <class name="PrimkeyField" members="concealed"/>
    <class name="Relation" members="concealed"/>
    <class name="Relations" members="concealed"/>
    <class name="RelationshipCachingElement" members="concealed"/>
    <class name="RelationshipCachingElements" members="concealed"/>
    <class name="RemoteHomeMethod" members="concealed"/>
    <class name="RemoteMethod" members="concealed"/>
    <class name="ResourceEnvRef" members="concealed"/>
    <class name="ResourceEnvRefs" members="concealed"/>
    <class name="ResourceRef" members="concealed"/>
    <class name="ResourceRefs" members="concealed"/>
    <class name="RoleMapping" members="concealed"/>
    <class name="RoleMappings" members="concealed"/>
    <class name="SecurityRoleRef" members="concealed"/>
    <class name="SecurityRoleRefs" members="concealed"/>
    <class name="Select" members="concealed"/>
    <class name="ServiceEndpointMethod" members="concealed"/>
    <class name="ServiceRef" members="concealed"/>
    <class name="ServiceRefs" members="concealed"/>
    <class name="Session" members="concealed"/>
    <class name="SqlFinder" members="concealed"/>
    <class name="SqlFinders" members="concealed"/>
    <class name="SqlShape" members="concealed"/>
    <class name="SqlShapeTable" members="concealed"/>
    <class name="SqlShapes" members="concealed"/>
    <class name="ValueObject" members="concealed"/>
    <class name="ValueObjectField" members="concealed"/>
    <class name="WeblogicCompatibility" members="concealed"/>
  </package>
  <package name="weblogic.health">
    <class name="HealthFeedback">
      <method name="getHealthState()"/>
    </class>
    <class name="HealthFeedbackCallback">
      <method name="healthStateChange(weblogic.health.HealthState)"/>
    </class>
    <class name="HealthState">
      <method name="getCompositeDataMap()"/>
      <method name="getCompositeType()"/>
      <method name="compareSeverityTo(int)"/>
      <method name="compareSeverityTo(weblogic.health.HealthState)"/>
      <method name="getState()"/>
      <method name="getPartitionName()"/>
      <method name="getSubsystemName()"/>
      <method name="toString()"/>
      <method name="getReasonCode()"/>
      <method name="toCompositeData()"/>
      <field name="HEALTH_CRITICAL"/>
      <field name="HEALTH_FAILED"/>
      <field name="HEALTH_OK"/>
      <field name="HEALTH_OVERLOADED"/>
      <field name="HEALTH_WARN"/>
      <field name="LOW_MEMORY_REASON"/>
      <method name="compareSeverities(int,int)"/>
      <method name="getSymptoms()"/>
    </class>
    <class name="HealthUtils">
      <method name="logAndGetFreeMemoryPercent()"/>
      <method name="logDebug(int,long,long,long)"/>
    </class>
    <class name="Symptom">
      <constructor name="Symptom(weblogic.health.Symptom.SymptomType,weblogic.health.Symptom.Severity,java.lang.String,java.lang.String)"/>
      <method name="getInfo()"/>
      <method name="getInstanceId()"/>
      <method name="getSeverity()"/>
      <method name="getType()"/>
    </class>
  </package>
  <package name="weblogic.i18n">
    <class name="Localizer">
      <constructor name="Localizer(java.util.ResourceBundle)"/>
      <method name="getStackTrace(java.lang.String)"/>
      <method name="getSeverity(java.lang.String)"/>
      <method name="getObject(java.lang.String,int)"/>
      <method name="getObject(java.lang.String,java.lang.String)"/>
      <method name="get(java.lang.String)"/>
      <method name="getAction(java.lang.String)"/>
      <method name="getBody(java.lang.String)"/>
      <method name="getCause(java.lang.String)"/>
      <method name="getDetail(java.lang.String)"/>
      <method name="getDiagnosticVolume(java.lang.String)"/>
      <method name="getI18nPackage()"/>
      <method name="getL10nPackage()"/>
      <method name="getPrefix()"/>
      <method name="getString(java.lang.String,int)"/>
      <method name="getString(java.lang.String,java.lang.String)"/>
      <method name="getSubSystem()"/>
      <method name="getVersion()"/>
      <method name="getBundle()"/>
      <field name="ACTION"/>
      <field name="CAUSE"/>
      <field name="DIAGNOSTIC_VOLUME"/>
      <field name="EXCLUDE_PARTITIONED"/>
      <field name="I18N_PACKAGE"/>
      <field name="L10N_PACKAGE"/>
      <field name="MESSAGE_BODY"/>
      <field name="MESSAGE_DETAIL"/>
      <field name="PREFIX"/>
      <field name="PREFIX_DELIM"/>
      <field name="SEVERITY"/>
      <field name="STACKTRACE"/>
      <field name="SUBSYSTEM"/>
      <field name="VERSION"/>
      <field name="NON_SERVER_SEVERITIES"/>
      <field name="SERVER_SEVERITIES"/>
    </class>
  </package>
  <package name="weblogic.i18n.logging">
    <class name="Loggable">
      <method name="getId()"/>
      <method name="getMessage()"/>
      <method name="getMessage(java.util.Locale)"/>
      <method name="getMessageBody()"/>
      <method name="getMessageText()"/>
      <method name="getMessageText(java.util.Locale)"/>
      <method name="log()"/>
      <method name="isAppendStackTraceEnabled()"/>
    </class>
    <class name="NonCatalogLogger">
      <method name="alert(java.lang.String)"/>
      <method name="alert(java.lang.String,java.lang.Throwable)"/>
      <method name="critical(java.lang.String)"/>
      <method name="critical(java.lang.String,java.lang.Throwable)"/>
      <method name="debug(java.lang.String)"/>
      <method name="debug(java.lang.String,java.lang.Throwable)"/>
      <method name="emergency(java.lang.String)"/>
      <method name="emergency(java.lang.String,java.lang.Throwable)"/>
      <method name="error(java.lang.String)"/>
      <method name="error(java.lang.String,java.lang.Throwable)"/>
      <method name="info(java.lang.String)"/>
      <method name="info(java.lang.String,java.lang.Throwable)"/>
      <method name="notice(java.lang.String)"/>
      <method name="notice(java.lang.String,java.lang.Throwable)"/>
      <method name="trace(java.lang.String)"/>
      <method name="trace(java.lang.String,java.lang.Throwable)"/>
      <method name="warning(java.lang.String)"/>
      <method name="warning(java.lang.String,java.lang.Throwable)"/>
    </class>
    <class name="Severities">
      <field name="ALERT"/>
      <field name="CRITICAL"/>
      <field name="DEBUG"/>
      <field name="EMERGENCY"/>
      <field name="ERROR"/>
      <field name="INFO"/>
      <field name="NOTICE"/>
      <field name="OFF"/>
      <field name="TRACE"/>
      <field name="WARNING"/>
      <field name="ALERT_TEXT"/>
      <field name="CRITICAL_TEXT"/>
      <field name="DEBUG_TEXT"/>
      <field name="EMERGENCY_TEXT"/>
      <field name="ERROR_TEXT"/>
      <field name="INFO_TEXT"/>
      <field name="NOTICE_TEXT"/>
      <field name="OFF_TEXT"/>
      <field name="TRACE_TEXT"/>
      <field name="WARNING_TEXT"/>
      <method name="getSeverity(java.util.logging.Level)"/>
    </class>
  </package>
  <package name="weblogic.i18ntools">
    <class name="GetText">
      <method name="getDetailedText(java.lang.String)"/>
      <method name="getDetailedText(java.lang.String,java.util.Locale)"/>
      <method name="getRetiredMessage(java.lang.String)"/>
      <method name="getRetiredMessage(java.lang.String,java.lang.String)"/>
      <method name="getText(java.lang.String)"/>
      <method name="getText(java.lang.String,boolean,boolean,java.lang.String,java.util.Locale)"/>
      <method name="getText(java.lang.String,java.util.Locale)"/>
    </class>
    <class name="L10nLookup">
      <method name="put(java.lang.Object,java.lang.Object)"/>
      <method name="getSubSystems()"/>
      <method name="getLocalizer(java.util.Locale,java.lang.String)"/>
      <method name="getLocalizer(java.util.Locale,java.lang.String,java.lang.ClassLoader)"/>
      <method name="getL10n()"/>
      <method name="ensureResourcesLoaded()"/>
      <method name="getLocalizer(int)"/>
      <method name="getLocalizer(int,java.util.Locale)"/>
      <method name="getLocalizer(java.lang.String)"/>
      <method name="getLocalizer(java.lang.String,java.util.Locale)"/>
      <method name="getLocalizer(java.lang.String,java.util.Locale,boolean)"/>
    </class>
  </package>
  <package name="weblogic.j2ee.descriptor">
    <class name="AddressingBean">
      <method name="isEnabled()"/>
      <method name="isRequired()"/>
      <method name="getResponses()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setRequired(boolean)"/>
      <method name="setResponses(java.lang.String)"/>
    </class>
    <class name="AdministeredObjectBean" members="concealed"/>
    <class name="AroundInvokeBean">
      <method name="getClassName()"/>
      <method name="getMethodName()"/>
      <method name="setClassName(java.lang.String)"/>
      <method name="setMethodName(java.lang.String)"/>
    </class>
    <class name="AroundTimeoutBean">
      <method name="getClassName()"/>
      <method name="getMethodName()"/>
      <method name="setClassName(java.lang.String)"/>
      <method name="setMethodName(java.lang.String)"/>
    </class>
    <class name="ConnectionFactoryResourceBean" members="concealed"/>
    <class name="DataSourceBean">
      <method name="isTransactional()"/>
      <method name="getInitialPoolSize()"/>
      <method name="getLoginTimeout()"/>
      <method name="getMaxIdleTime()"/>
      <method name="getMaxPoolSize()"/>
      <method name="getMaxStatements()"/>
      <method name="getMinPoolSize()"/>
      <method name="getPortNumber()"/>
      <method name="getClassName()"/>
      <method name="getDatabaseName()"/>
      <method name="getDescription()"/>
      <method name="getId()"/>
      <method name="getIsolationLevel()"/>
      <method name="getName()"/>
      <method name="getPassword()"/>
      <method name="getServerName()"/>
      <method name="getUrl()"/>
      <method name="getUser()"/>
      <method name="destroyProperty(weblogic.j2ee.descriptor.JavaEEPropertyBean)"/>
      <method name="setClassName(java.lang.String)"/>
      <method name="setDatabaseName(java.lang.String)"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setInitialPoolSize(int)"/>
      <method name="setIsolationLevel(java.lang.String)"/>
      <method name="setLoginTimeout(int)"/>
      <method name="setMaxIdleTime(int)"/>
      <method name="setMaxPoolSize(int)"/>
      <method name="setMaxStatements(int)"/>
      <method name="setMinPoolSize(int)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPortNumber(int)"/>
      <method name="setServerName(java.lang.String)"/>
      <method name="setTransactional(boolean)"/>
      <method name="setUrl(java.lang.String)"/>
      <method name="setUser(java.lang.String)"/>
      <method name="createProperty()"/>
      <method name="lookupProperty(java.lang.String)"/>
      <method name="getProperties()"/>
    </class>
    <class name="EjbLocalRefBean">
      <method name="getEjbLink()"/>
      <method name="getEjbRefName()"/>
      <method name="getEjbRefType()"/>
      <method name="getId()"/>
      <method name="getLocal()"/>
      <method name="getLocalHome()"/>
      <method name="getLookupName()"/>
      <method name="getMappedName()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setEjbLink(java.lang.String)"/>
      <method name="setEjbRefName(java.lang.String)"/>
      <method name="setEjbRefType(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setLocal(java.lang.String)"/>
      <method name="setLocalHome(java.lang.String)"/>
      <method name="setLookupName(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
    </class>
    <class name="EjbRefBean">
      <method name="getEjbLink()"/>
      <method name="getEjbRefName()"/>
      <method name="getEjbRefType()"/>
      <method name="getHome()"/>
      <method name="getId()"/>
      <method name="getLookupName()"/>
      <method name="getMappedName()"/>
      <method name="getRemote()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setEjbLink(java.lang.String)"/>
      <method name="setEjbRefName(java.lang.String)"/>
      <method name="setEjbRefType(java.lang.String)"/>
      <method name="setHome(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setLookupName(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="setRemote(java.lang.String)"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
    </class>
    <class name="EmptyBean">
      <method name="getId()"/>
      <method name="setId(java.lang.String)"/>
    </class>
    <class name="EnvEntryBean">
      <method name="getEnvEntryName()"/>
      <method name="getEnvEntryType()"/>
      <method name="getEnvEntryValue()"/>
      <method name="getId()"/>
      <method name="getLookupName()"/>
      <method name="getMappedName()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setEnvEntryName(java.lang.String)"/>
      <method name="setEnvEntryType(java.lang.String)"/>
      <method name="setEnvEntryValue(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setLookupName(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
    </class>
    <class name="HandlerChainBean">
      <method name="getId()"/>
      <method name="getPortNamePattern()"/>
      <method name="getProtocolBindings()"/>
      <method name="getServiceNamePattern()"/>
      <method name="destroyHandler(weblogic.j2ee.descriptor.PortComponentHandlerBean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setPortNamePattern(java.lang.String)"/>
      <method name="setProtocolBindings(java.lang.String)"/>
      <method name="setServiceNamePattern(java.lang.String)"/>
      <method name="createHandler()"/>
      <method name="getHandlers()"/>
    </class>
    <class name="HandlerChainsBean">
      <method name="getId()"/>
      <method name="destroyHandlerChain(weblogic.j2ee.descriptor.HandlerChainBean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="createHandlerChain()"/>
      <method name="getHandlerChains()"/>
    </class>
    <class name="IconBean">
      <method name="getId()"/>
      <method name="getLang()"/>
      <method name="getLargeIcon()"/>
      <method name="getSmallIcon()"/>
      <method name="setId(java.lang.String)"/>
      <method name="setLang(java.lang.String)"/>
      <method name="setLargeIcon(java.lang.String)"/>
      <method name="setSmallIcon(java.lang.String)"/>
    </class>
    <class name="InjectionTargetBean">
      <method name="getInjectionTargetClass()"/>
      <method name="getInjectionTargetName()"/>
      <method name="setInjectionTargetClass(java.lang.String)"/>
      <method name="setInjectionTargetName(java.lang.String)"/>
    </class>
    <class name="InterceptorMethodsBean">
      <method name="destroyAroundInvoke(weblogic.j2ee.descriptor.AroundInvokeBean)"/>
      <method name="destroyAroundTimeout(weblogic.j2ee.descriptor.AroundTimeoutBean)"/>
      <method name="createAroundInvoke()"/>
      <method name="getAroundInvokes()"/>
      <method name="createAroundTimeout()"/>
      <method name="getAroundTimeouts()"/>
    </class>
    <class name="J2eeClientEnvironmentBean">
      <method name="destroyAdministeredObject(weblogic.j2ee.descriptor.AdministeredObjectBean)"/>
      <method name="destroyConnectionFactory(weblogic.j2ee.descriptor.ConnectionFactoryResourceBean)"/>
      <method name="destroyDataSource(weblogic.j2ee.descriptor.DataSourceBean)"/>
      <method name="destroyEjbRef(weblogic.j2ee.descriptor.EjbRefBean)"/>
      <method name="destroyEnvEntry(weblogic.j2ee.descriptor.EnvEntryBean)"/>
      <method name="destroyJmsConnectionFactory(weblogic.j2ee.descriptor.JmsConnectionFactoryBean)"/>
      <method name="destroyJmsDestination(weblogic.j2ee.descriptor.JmsDestinationBean)"/>
      <method name="destroyMailSession(weblogic.j2ee.descriptor.MailSessionBean)"/>
      <method name="destroyMessageDestinationRef(weblogic.j2ee.descriptor.MessageDestinationRefBean)"/>
      <method name="destroyPersistenceUnitRef(weblogic.j2ee.descriptor.PersistenceUnitRefBean)"/>
      <method name="destroyPostConstruct(weblogic.j2ee.descriptor.LifecycleCallbackBean)"/>
      <method name="destroyPreDestroy(weblogic.j2ee.descriptor.LifecycleCallbackBean)"/>
      <method name="destroyResourceEnvRef(weblogic.j2ee.descriptor.ResourceEnvRefBean)"/>
      <method name="destroyResourceRef(weblogic.j2ee.descriptor.ResourceRefBean)"/>
      <method name="destroyServiceRef(weblogic.j2ee.descriptor.ServiceRefBean)"/>
      <method name="createAdministeredObjectBean()"/>
      <method name="getAdministeredObjects()"/>
      <method name="createConnectionFactoryResourceBean()"/>
      <method name="getConnectionFactories()"/>
      <method name="createDataSource()"/>
      <method name="getDataSources()"/>
      <method name="createEjbRef()"/>
      <method name="getEjbRefs()"/>
      <method name="createEnvEntry()"/>
      <method name="getEnvEntries()"/>
      <method name="createJmsConnectionFactory()"/>
      <method name="getJmsConnectionFactories()"/>
      <method name="createJmsDestination()"/>
      <method name="getJmsDestinations()"/>
      <method name="createPostConstruct()"/>
      <method name="createPreDestroy()"/>
      <method name="getPostConstructs()"/>
      <method name="getPreDestroys()"/>
      <method name="createMailSession()"/>
      <method name="getMailSessions()"/>
      <method name="createMessageDestinationRef()"/>
      <method name="getMessageDestinationRefs()"/>
      <method name="createPersistenceUnitRef()"/>
      <method name="getPersistenceUnitRefs()"/>
      <method name="createResourceEnvRef()"/>
      <method name="getResourceEnvRefs()"/>
      <method name="createResourceRef()"/>
      <method name="getResourceRefs()"/>
      <method name="createServiceRef()"/>
      <method name="getServiceRefs()"/>
    </class>
    <class name="J2eeEnvironmentBean">
      <method name="destroyEjbLocalRef(weblogic.j2ee.descriptor.EjbLocalRefBean)"/>
      <method name="destroyPersistenceContextRef(weblogic.j2ee.descriptor.PersistenceContextRefBean)"/>
      <method name="createEjbLocalRef()"/>
      <method name="getEjbLocalRefs()"/>
      <method name="createPersistenceContextRef()"/>
      <method name="getPersistenceContextRefs()"/>
    </class>
    <class name="JavaEEPropertyBean">
      <method name="getName()"/>
      <method name="getValue()"/>
      <method name="setName(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="JmsConnectionFactoryBean" members="concealed"/>
    <class name="JmsDestinationBean" members="concealed"/>
    <class name="LifecycleCallbackBean">
      <method name="getLifecycleCallbackClass()"/>
      <method name="getLifecycleCallbackMethod()"/>
      <method name="setLifecycleCallbackClass(java.lang.String)"/>
      <method name="setLifecycleCallbackMethod(java.lang.String)"/>
    </class>
    <class name="MailSessionBean" members="concealed"/>
    <class name="MessageDestinationRefBean">
      <method name="getId()"/>
      <method name="getLookupName()"/>
      <method name="getMappedName()"/>
      <method name="getMessageDestinationLink()"/>
      <method name="getMessageDestinationRefName()"/>
      <method name="getMessageDestinationType()"/>
      <method name="getMessageDestinationUsage()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setId(java.lang.String)"/>
      <method name="setLookupName(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="setMessageDestinationLink(java.lang.String)"/>
      <method name="setMessageDestinationRefName(java.lang.String)"/>
      <method name="setMessageDestinationType(java.lang.String)"/>
      <method name="setMessageDestinationUsage(java.lang.String)"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
    </class>
    <class name="MethodParamPartsMappingBean">
      <method name="getParamPosition()"/>
      <method name="getId()"/>
      <method name="getParamType()"/>
      <method name="destroyWsdlMessageMapping(weblogic.j2ee.descriptor.WsdlMessageMappingBean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setParamPosition(int)"/>
      <method name="setParamType(java.lang.String)"/>
      <method name="createWsdlMessageMapping()"/>
      <method name="getWsdlMessageMapping()"/>
    </class>
    <class name="ParamValueBean">
      <method name="isParamValueSet()"/>
      <method name="getId()"/>
      <method name="getParamName()"/>
      <method name="getParamValue()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setId(java.lang.String)"/>
      <method name="setParamName(java.lang.String)"/>
      <method name="setParamValue(java.lang.String)"/>
    </class>
    <class name="PersistenceContextRefBean">
      <method name="getId()"/>
      <method name="getMappedName()"/>
      <method name="getPersistenceContextRefName()"/>
      <method name="getPersistenceContextType()"/>
      <method name="getPersistenceUnitName()"/>
      <method name="getSynchronizationType()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="destroyPersistenceProperty(weblogic.j2ee.descriptor.JavaEEPropertyBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="setPersistenceContextRefName(java.lang.String)"/>
      <method name="setPersistenceContextType(java.lang.String)"/>
      <method name="setPersistenceUnitName(java.lang.String)"/>
      <method name="setSynchronizationType(java.lang.String)"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
      <method name="createPersistenceProperty()"/>
      <method name="getPersistenceProperties()"/>
    </class>
    <class name="PersistenceUnitRefBean">
      <method name="getId()"/>
      <method name="getMappedName()"/>
      <method name="getPersistenceUnitName()"/>
      <method name="getPersistenceUnitRefName()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="setPersistenceUnitName(java.lang.String)"/>
      <method name="setPersistenceUnitRefName(java.lang.String)"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
    </class>
    <class name="PortComponentBean">
      <method name="isEnableMtom()"/>
      <method name="getDescription()"/>
      <method name="getDisplayName()"/>
      <method name="getId()"/>
      <method name="getPortComponentName()"/>
      <method name="getProtocolBinding()"/>
      <method name="getServiceEndpointInterface()"/>
      <method name="getWsdlPort()"/>
      <method name="getWsdlService()"/>
      <method name="destroyHandler(weblogic.j2ee.descriptor.PortComponentHandlerBean)"/>
      <method name="destroyHandlerChains(weblogic.j2ee.descriptor.HandlerChainsBean)"/>
      <method name="destroyIcon(weblogic.j2ee.descriptor.IconBean)"/>
      <method name="destroyServiceImplBean(weblogic.j2ee.descriptor.ServiceImplBeanBean)"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setDisplayName(java.lang.String)"/>
      <method name="setEnableMtom(boolean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setPortComponentName(java.lang.String)"/>
      <method name="setProtocolBinding(java.lang.String)"/>
      <method name="setServiceEndpointInterface(java.lang.String)"/>
      <method name="setWsdlPort(javax.xml.namespace.QName)"/>
      <method name="setWsdlService(javax.xml.namespace.QName)"/>
      <method name="createHandlerChains()"/>
      <method name="getHandlerChains()"/>
      <method name="createIcon()"/>
      <method name="getIcon()"/>
      <method name="createHandler()"/>
      <method name="getHandlers()"/>
      <method name="createServiceImplBean()"/>
      <method name="getServiceImplBean()"/>
    </class>
    <class name="PortComponentHandlerBean">
      <method name="getHandlerClass()"/>
      <method name="getHandlerName()"/>
      <method name="getId()"/>
      <method name="getDescriptions()"/>
      <method name="getDisplayNames()"/>
      <method name="getSoapRoles()"/>
      <method name="getSoapHeaders()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="addDisplayName(java.lang.String)"/>
      <method name="addSoapHeader(javax.xml.namespace.QName)"/>
      <method name="addSoapRole(java.lang.String)"/>
      <method name="destroyAdministeredObject(weblogic.j2ee.descriptor.AdministeredObjectBean)"/>
      <method name="destroyConnectionFactory(weblogic.j2ee.descriptor.ConnectionFactoryResourceBean)"/>
      <method name="destroyDataSource(weblogic.j2ee.descriptor.DataSourceBean)"/>
      <method name="destroyEjbLocalRef(weblogic.j2ee.descriptor.EjbLocalRefBean)"/>
      <method name="destroyEjbRef(weblogic.j2ee.descriptor.EjbRefBean)"/>
      <method name="destroyEnvEntry(weblogic.j2ee.descriptor.EnvEntryBean)"/>
      <method name="destroyIcon(weblogic.j2ee.descriptor.IconBean)"/>
      <method name="destroyInitParam(weblogic.j2ee.descriptor.ParamValueBean)"/>
      <method name="destroyJmsConnectionFactory(weblogic.j2ee.descriptor.JmsConnectionFactoryBean)"/>
      <method name="destroyJmsDestination(weblogic.j2ee.descriptor.JmsDestinationBean)"/>
      <method name="destroyMailSession(weblogic.j2ee.descriptor.MailSessionBean)"/>
      <method name="destroyMessageDestinationRef(weblogic.j2ee.descriptor.MessageDestinationRefBean)"/>
      <method name="destroyPersistenceContextRef(weblogic.j2ee.descriptor.PersistenceContextRefBean)"/>
      <method name="destroyPersistenceUnitRef(weblogic.j2ee.descriptor.PersistenceUnitRefBean)"/>
      <method name="destroyPostConstruct(weblogic.j2ee.descriptor.LifecycleCallbackBean)"/>
      <method name="destroyPreDestroy(weblogic.j2ee.descriptor.LifecycleCallbackBean)"/>
      <method name="destroyResourceEnvRef(weblogic.j2ee.descriptor.ResourceEnvRefBean)"/>
      <method name="destroyResourceRef(weblogic.j2ee.descriptor.ResourceRefBean)"/>
      <method name="destroyServiceRef(weblogic.j2ee.descriptor.ServiceRefBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="removeDisplayName(java.lang.String)"/>
      <method name="removeSoapHeader(javax.xml.namespace.QName)"/>
      <method name="removeSoapRole(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setDisplayNames(java.lang.String[])"/>
      <method name="setHandlerClass(java.lang.String)"/>
      <method name="setHandlerName(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setSoapHeaders(javax.xml.namespace.QName[])"/>
      <method name="setSoapRoles(java.lang.String[])"/>
      <method name="createAdministeredObjectBean()"/>
      <method name="getAdministeredObjects()"/>
      <method name="createConnectionFactoryResourceBean()"/>
      <method name="getConnectionFactories()"/>
      <method name="createDataSource()"/>
      <method name="getDataSources()"/>
      <method name="createEjbLocalRef()"/>
      <method name="getEjbLocalRefs()"/>
      <method name="createEjbRef()"/>
      <method name="getEjbRefs()"/>
      <method name="createEnvEntry()"/>
      <method name="getEnvEntries()"/>
      <method name="createIcon()"/>
      <method name="getIcons()"/>
      <method name="createJmsConnectionFactory()"/>
      <method name="getJmsConnectionFactories()"/>
      <method name="createJmsDestination()"/>
      <method name="getJmsDestinations()"/>
      <method name="createPostConstruct()"/>
      <method name="createPreDestroy()"/>
      <method name="getPostConstructs()"/>
      <method name="getPreDestroys()"/>
      <method name="createMailSession()"/>
      <method name="getMailSessions()"/>
      <method name="createMessageDestinationRef()"/>
      <method name="getMessageDestinationRefs()"/>
      <method name="createInitParam()"/>
      <method name="getInitParams()"/>
      <method name="createPersistenceContextRef()"/>
      <method name="getPersistenceContextRefs()"/>
      <method name="createPersistenceUnitRef()"/>
      <method name="getPersistenceUnitRefs()"/>
      <method name="createResourceEnvRef()"/>
      <method name="getResourceEnvRefs()"/>
      <method name="createResourceRef()"/>
      <method name="getResourceRefs()"/>
      <method name="createServiceRef()"/>
      <method name="getServiceRefs()"/>
    </class>
    <class name="PortComponentRefBean">
      <method name="isEnableMtom()"/>
      <method name="getMtomThreshold()"/>
      <method name="getId()"/>
      <method name="getPortComponentLink()"/>
      <method name="getServiceEndpointInterface()"/>
      <method name="destroyAddressing(weblogic.j2ee.descriptor.AddressingBean)"/>
      <method name="destroyRespectBinding(weblogic.j2ee.descriptor.RespectBindingBean)"/>
      <method name="setEnableMtom(boolean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setMtomThreshold(int)"/>
      <method name="setPortComponentLink(java.lang.String)"/>
      <method name="setServiceEndpointInterface(java.lang.String)"/>
      <method name="createAddressing()"/>
      <method name="getAddressing()"/>
      <method name="createRespectBinding()"/>
      <method name="getRespectBinding()"/>
    </class>
    <class name="ResourceEnvRefBean">
      <method name="getId()"/>
      <method name="getLookupName()"/>
      <method name="getMappedName()"/>
      <method name="getResourceEnvRefName()"/>
      <method name="getResourceEnvRefType()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setId(java.lang.String)"/>
      <method name="setLookupName(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="setResourceEnvRefName(java.lang.String)"/>
      <method name="setResourceEnvRefType(java.lang.String)"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
    </class>
    <class name="ResourceRefBean">
      <method name="getId()"/>
      <method name="getLookupName()"/>
      <method name="getMappedName()"/>
      <method name="getResAuth()"/>
      <method name="getResRefName()"/>
      <method name="getResSharingScope()"/>
      <method name="getResType()"/>
      <method name="getDescriptions()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setId(java.lang.String)"/>
      <method name="setLookupName(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="setResAuth(java.lang.String)"/>
      <method name="setResRefName(java.lang.String)"/>
      <method name="setResSharingScope(java.lang.String)"/>
      <method name="setResType(java.lang.String)"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
    </class>
    <class name="RespectBindingBean">
      <method name="isEnabled()"/>
      <method name="setEnabled(boolean)"/>
    </class>
    <class name="ServiceImplBeanBean">
      <method name="getEjbLink()"/>
      <method name="getId()"/>
      <method name="getServletLink()"/>
      <method name="setEjbLink(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setServletLink(java.lang.String)"/>
    </class>
    <class name="ServiceRefBean">
      <method name="getId()"/>
      <method name="getJaxrpcMappingFile()"/>
      <method name="getMappedName()"/>
      <method name="getServiceInterface()"/>
      <method name="getServiceRefName()"/>
      <method name="getServiceRefType()"/>
      <method name="getWsdlFile()"/>
      <method name="getDescriptions()"/>
      <method name="getDisplayNames()"/>
      <method name="getServiceQname()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="addDisplayName(java.lang.String)"/>
      <method name="destroyHandler(weblogic.j2ee.descriptor.ServiceRefHandlerBean)"/>
      <method name="destroyHandlerChains(weblogic.j2ee.descriptor.ServiceRefHandlerChainsBean)"/>
      <method name="destroyIcon(weblogic.j2ee.descriptor.IconBean)"/>
      <method name="destroyInjectionTarget(weblogic.j2ee.descriptor.InjectionTargetBean)"/>
      <method name="destroyPortComponentRef(weblogic.j2ee.descriptor.PortComponentRefBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="removeDisplayName(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setDisplayNames(java.lang.String[])"/>
      <method name="setId(java.lang.String)"/>
      <method name="setJaxrpcMappingFile(java.lang.String)"/>
      <method name="setMappedName(java.lang.String)"/>
      <method name="setServiceInterface(java.lang.String)"/>
      <method name="setServiceQname(javax.xml.namespace.QName)"/>
      <method name="setServiceRefName(java.lang.String)"/>
      <method name="setServiceRefType(java.lang.String)"/>
      <method name="setWsdlFile(java.lang.String)"/>
      <method name="createIcon()"/>
      <method name="getIcons()"/>
      <method name="createInjectionTarget()"/>
      <method name="getInjectionTargets()"/>
      <method name="createPortComponentRef()"/>
      <method name="getPortComponentRefs()"/>
      <method name="createHandler()"/>
      <method name="getHandlers()"/>
      <method name="createHandlerChains()"/>
      <method name="getHandlerChains()"/>
    </class>
    <class name="ServiceRefHandlerBean">
      <method name="getHandlerClass()"/>
      <method name="getHandlerName()"/>
      <method name="getId()"/>
      <method name="getDescriptions()"/>
      <method name="getDisplayNames()"/>
      <method name="getPortNames()"/>
      <method name="getSoapRoles()"/>
      <method name="getSoapHeaders()"/>
      <method name="addDescription(java.lang.String)"/>
      <method name="addDisplayName(java.lang.String)"/>
      <method name="addPortName(java.lang.String)"/>
      <method name="addSoapHeader(javax.xml.namespace.QName)"/>
      <method name="addSoapRole(java.lang.String)"/>
      <method name="destroyAdministeredObject(weblogic.j2ee.descriptor.AdministeredObjectBean)"/>
      <method name="destroyConnectionFactory(weblogic.j2ee.descriptor.ConnectionFactoryResourceBean)"/>
      <method name="destroyDataSource(weblogic.j2ee.descriptor.DataSourceBean)"/>
      <method name="destroyEjbLocalRef(weblogic.j2ee.descriptor.EjbLocalRefBean)"/>
      <method name="destroyEjbRef(weblogic.j2ee.descriptor.EjbRefBean)"/>
      <method name="destroyEnvEntry(weblogic.j2ee.descriptor.EnvEntryBean)"/>
      <method name="destroyIcon(weblogic.j2ee.descriptor.IconBean)"/>
      <method name="destroyInitParam(weblogic.j2ee.descriptor.ParamValueBean)"/>
      <method name="destroyJmsConnectionFactory(weblogic.j2ee.descriptor.JmsConnectionFactoryBean)"/>
      <method name="destroyJmsDestination(weblogic.j2ee.descriptor.JmsDestinationBean)"/>
      <method name="destroyMailSession(weblogic.j2ee.descriptor.MailSessionBean)"/>
      <method name="destroyMessageDestinationRef(weblogic.j2ee.descriptor.MessageDestinationRefBean)"/>
      <method name="destroyPersistenceContextRef(weblogic.j2ee.descriptor.PersistenceContextRefBean)"/>
      <method name="destroyPersistenceUnitRef(weblogic.j2ee.descriptor.PersistenceUnitRefBean)"/>
      <method name="destroyPostConstruct(weblogic.j2ee.descriptor.LifecycleCallbackBean)"/>
      <method name="destroyPreDestroy(weblogic.j2ee.descriptor.LifecycleCallbackBean)"/>
      <method name="destroyResourceEnvRef(weblogic.j2ee.descriptor.ResourceEnvRefBean)"/>
      <method name="destroyResourceRef(weblogic.j2ee.descriptor.ResourceRefBean)"/>
      <method name="destroyServiceRef(weblogic.j2ee.descriptor.ServiceRefBean)"/>
      <method name="removeDescription(java.lang.String)"/>
      <method name="removeDisplayName(java.lang.String)"/>
      <method name="removePortName(java.lang.String)"/>
      <method name="removeSoapHeader(javax.xml.namespace.QName)"/>
      <method name="removeSoapRole(java.lang.String)"/>
      <method name="setDescriptions(java.lang.String[])"/>
      <method name="setDisplayNames(java.lang.String[])"/>
      <method name="setHandlerClass(java.lang.String)"/>
      <method name="setHandlerName(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setPortNames(java.lang.String[])"/>
      <method name="setSoapHeaders(javax.xml.namespace.QName[])"/>
      <method name="setSoapRoles(java.lang.String[])"/>
      <method name="createAdministeredObjectBean()"/>
      <method name="getAdministeredObjects()"/>
      <method name="createConnectionFactoryResourceBean()"/>
      <method name="getConnectionFactories()"/>
      <method name="createDataSource()"/>
      <method name="getDataSources()"/>
      <method name="createEjbLocalRef()"/>
      <method name="getEjbLocalRefs()"/>
      <method name="createEjbRef()"/>
      <method name="getEjbRefs()"/>
      <method name="createEnvEntry()"/>
      <method name="getEnvEntries()"/>
      <method name="createIcon()"/>
      <method name="getIcons()"/>
      <method name="createJmsConnectionFactory()"/>
      <method name="getJmsConnectionFactories()"/>
      <method name="createJmsDestination()"/>
      <method name="getJmsDestinations()"/>
      <method name="createPostConstruct()"/>
      <method name="createPreDestroy()"/>
      <method name="getPostConstructs()"/>
      <method name="getPreDestroys()"/>
      <method name="createMailSession()"/>
      <method name="getMailSessions()"/>
      <method name="createMessageDestinationRef()"/>
      <method name="getMessageDestinationRefs()"/>
      <method name="createInitParam()"/>
      <method name="getInitParams()"/>
      <method name="createPersistenceContextRef()"/>
      <method name="getPersistenceContextRefs()"/>
      <method name="createPersistenceUnitRef()"/>
      <method name="getPersistenceUnitRefs()"/>
      <method name="createResourceEnvRef()"/>
      <method name="getResourceEnvRefs()"/>
      <method name="createResourceRef()"/>
      <method name="getResourceRefs()"/>
      <method name="createServiceRef()"/>
      <method name="getServiceRefs()"/>
    </class>
    <class name="ServiceRefHandlerChainBean">
      <method name="getId()"/>
      <method name="getPortNamePattern()"/>
      <method name="getProtocolBindings()"/>
      <method name="getServiceNamePattern()"/>
      <method name="destroyHandler(weblogic.j2ee.descriptor.ServiceRefHandlerBean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setPortNamePattern(java.lang.String)"/>
      <method name="setProtocolBindings(java.lang.String)"/>
      <method name="setServiceNamePattern(java.lang.String)"/>
      <method name="createHandler()"/>
      <method name="getHandlers()"/>
    </class>
    <class name="ServiceRefHandlerChainsBean">
      <method name="getId()"/>
      <method name="destroyHandlerChain(weblogic.j2ee.descriptor.ServiceRefHandlerChainBean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="createHandlerChain()"/>
      <method name="getHandlerChains()"/>
    </class>
    <class name="SourceTrackerBean">
      <method name="getBeanSource()"/>
      <field name="SOURCE_I_ANNOTATION"/>
      <field name="SOURCE_I_DESCRIPTOR"/>
      <method name="setBeanSource(int)"/>
    </class>
    <class name="WsdlMessageMappingBean">
      <method name="getId()"/>
      <method name="getParameterMode()"/>
      <method name="getWsdlMessagePartName()"/>
      <method name="getWsdlMessage()"/>
      <method name="destroySoapHeader(weblogic.j2ee.descriptor.EmptyBean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setParameterMode(java.lang.String)"/>
      <method name="setWsdlMessage(javax.xml.namespace.QName)"/>
      <method name="setWsdlMessagePartName(java.lang.String)"/>
      <method name="createSoapHeader()"/>
      <method name="getSoapHeader()"/>
    </class>
  </package>
  <package name="weblogic.j2ee.descriptor.wl">
    <class name="ApplicationAdminModeTriggerBean">
      <method name="getMaxStuckThreadTime()"/>
      <method name="getStuckThreadCount()"/>
      <method name="getId()"/>
      <method name="setId(java.lang.String)"/>
      <method name="setMaxStuckThreadTime(int)"/>
      <method name="setStuckThreadCount(int)"/>
    </class>
    <class name="CapacityBean">
      <method name="getCount()"/>
      <method name="getId()"/>
      <method name="getName()"/>
      <method name="setCount(int)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="ClientParamsBean">
      <method name="isAllowCloseInOnMessage()"/>
      <method name="getMessagesMaximum()"/>
      <method name="getAcknowledgePolicy()"/>
      <method name="getClientId()"/>
      <method name="getClientIdPolicy()"/>
      <method name="getMulticastOverrunPolicy()"/>
      <method name="getReconnectPolicy()"/>
      <method name="getSubscriptionSharingPolicy()"/>
      <method name="getSynchronousPrefetchMode()"/>
      <method name="getReconnectBlockingMillis()"/>
      <method name="getTotalReconnectPeriodMillis()"/>
      <method name="setAcknowledgePolicy(java.lang.String)"/>
      <method name="setAllowCloseInOnMessage(boolean)"/>
      <method name="setClientId(java.lang.String)"/>
      <method name="setClientIdPolicy(java.lang.String)"/>
      <method name="setMessagesMaximum(int)"/>
      <method name="setMulticastOverrunPolicy(java.lang.String)"/>
      <method name="setReconnectBlockingMillis(long)"/>
      <method name="setReconnectPolicy(java.lang.String)"/>
      <method name="setSubscriptionSharingPolicy(java.lang.String)"/>
      <method name="setSynchronousPrefetchMode(java.lang.String)"/>
      <method name="setTotalReconnectPeriodMillis(long)"/>
    </class>
    <class name="ClientSAFBean">
      <method name="destroyConnectionFactory(weblogic.j2ee.descriptor.wl.JMSConnectionFactoryBean)"/>
      <method name="destroySAFErrorHandling(weblogic.j2ee.descriptor.wl.SAFErrorHandlingBean)"/>
      <method name="destroySAFImportedDestinations(weblogic.j2ee.descriptor.wl.SAFImportedDestinationsBean)"/>
      <method name="destroySAFRemoteContext(weblogic.j2ee.descriptor.wl.SAFRemoteContextBean)"/>
      <method name="getPersistentStore()"/>
      <method name="getSAFAgent()"/>
      <method name="createConnectionFactory(java.lang.String)"/>
      <method name="lookupConnectionFactory(java.lang.String)"/>
      <method name="getConnectionFactories()"/>
      <method name="createSAFErrorHandling(java.lang.String)"/>
      <method name="lookupSAFErrorHandling(java.lang.String)"/>
      <method name="getSAFErrorHandlings()"/>
      <method name="createSAFImportedDestinations(java.lang.String)"/>
      <method name="lookupSAFImportedDestinations(java.lang.String)"/>
      <method name="getSAFImportedDestinations()"/>
      <method name="createSAFRemoteContext(java.lang.String)"/>
      <method name="lookupSAFRemoteContext(java.lang.String)"/>
      <method name="getSAFRemoteContexts()"/>
    </class>
    <class name="ConfigResourceOverrideBean">
      <method name="getResourceName()"/>
      <method name="getResourceType()"/>
      <method name="destroyVariableAssignment(weblogic.j2ee.descriptor.wl.VariableAssignmentBean)"/>
      <method name="setResourceName(java.lang.String)"/>
      <method name="setResourceType(java.lang.String)"/>
      <method name="createVariableAssignment()"/>
      <method name="getVariableAssignments()"/>
    </class>
    <class name="ContextCaseBean">
      <method name="getGroupName()"/>
      <method name="getId()"/>
      <method name="getRequestClassName()"/>
      <method name="getUserName()"/>
      <method name="destroyFairShareRequestClass()"/>
      <method name="destroyResponseTimeRequestClass()"/>
      <method name="setGroupName(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setRequestClassName(java.lang.String)"/>
      <method name="setUserName(java.lang.String)"/>
      <method name="createFairShareRequestClass()"/>
      <method name="getFairShareRequestClass()"/>
      <method name="createResponseTimeRequestClass()"/>
      <method name="getResponseTimeRequestClass()"/>
    </class>
    <class name="ContextRequestClassBean">
      <method name="getId()"/>
      <method name="getName()"/>
      <method name="destroyContextCase(weblogic.j2ee.descriptor.wl.ContextCaseBean)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="createContextCase()"/>
      <method name="getContextCases()"/>
    </class>
    <class name="DefaultDeliveryParamsBean">
      <method name="getDefaultCompressionThreshold()"/>
      <method name="getDefaultPriority()"/>
      <method name="getDefaultDeliveryMode()"/>
      <method name="getDefaultTimeToDeliver()"/>
      <method name="getDefaultUnitOfOrder()"/>
      <method name="getDefaultRedeliveryDelay()"/>
      <method name="getDefaultTimeToLive()"/>
      <method name="getSendTimeout()"/>
      <method name="setDefaultCompressionThreshold(int)"/>
      <method name="setDefaultDeliveryMode(java.lang.String)"/>
      <method name="setDefaultPriority(int)"/>
      <method name="setDefaultRedeliveryDelay(long)"/>
      <method name="setDefaultTimeToDeliver(java.lang.String)"/>
      <method name="setDefaultTimeToLive(long)"/>
      <method name="setDefaultUnitOfOrder(java.lang.String)"/>
      <method name="setSendTimeout(long)"/>
    </class>
    <class name="DefaultPersistentStoreBean">
      <method name="getDirectoryPath()"/>
      <method name="getNotes()"/>
      <method name="getSynchronousWritePolicy()"/>
      <method name="setDirectoryPath(java.lang.String)"/>
      <method name="setNotes(java.lang.String)"/>
      <method name="setSynchronousWritePolicy(java.lang.String)"/>
    </class>
    <class name="DefaultResourcePrincipalBean">
      <method name="getName()"/>
      <method name="getPassword()"/>
    </class>
    <class name="DefaultSAFAgentBean">
      <method name="isLoggingEnabled()"/>
      <method name="getDefaultRetryDelayMultiplier()"/>
      <method name="getMaximumMessageSize()"/>
      <method name="getWindowSize()"/>
      <method name="getNotes()"/>
      <method name="getPagingDirectory()"/>
      <method name="getBytesMaximum()"/>
      <method name="getDefaultRetryDelayBase()"/>
      <method name="getDefaultRetryDelayMaximum()"/>
      <method name="getDefaultTimeToLive()"/>
      <method name="getMessageBufferSize()"/>
      <method name="getMessagesMaximum()"/>
      <method name="getWindowInterval()"/>
      <method name="setBytesMaximum(long)"/>
      <method name="setDefaultRetryDelayBase(long)"/>
      <method name="setDefaultRetryDelayMaximum(long)"/>
      <method name="setDefaultRetryDelayMultiplier(double)"/>
      <method name="setDefaultTimeToLive(long)"/>
      <method name="setLoggingEnabled(boolean)"/>
      <method name="setMaximumMessageSize(int)"/>
      <method name="setMessageBufferSize(long)"/>
      <method name="setMessagesMaximum(long)"/>
      <method name="setNotes(java.lang.String)"/>
      <method name="setPagingDirectory(java.lang.String)"/>
      <method name="setWindowInterval(long)"/>
      <method name="setWindowSize(int)"/>
    </class>
    <class name="DeliveryFailureParamsBean">
      <method name="getRedeliveryLimit()"/>
      <method name="findSubDeploymentName()"/>
      <method name="getExpirationLoggingPolicy()"/>
      <method name="getExpirationPolicy()"/>
      <method name="setErrorDestination(weblogic.j2ee.descriptor.wl.DestinationBean)"/>
      <method name="setExpirationLoggingPolicy(java.lang.String)"/>
      <method name="setExpirationPolicy(java.lang.String)"/>
      <method name="setRedeliveryLimit(int)"/>
      <method name="getErrorDestination()"/>
      <method name="getTemplateBean()"/>
    </class>
    <class name="DeliveryParamsOverridesBean">
      <method name="getPriority()"/>
      <method name="getDeliveryMode()"/>
      <method name="getTimeToDeliver()"/>
      <method name="getRedeliveryDelay()"/>
      <method name="getTimeToLive()"/>
      <method name="setDeliveryMode(java.lang.String)"/>
      <method name="setPriority(int)"/>
      <method name="setRedeliveryDelay(long)"/>
      <method name="setTimeToDeliver(java.lang.String)"/>
      <method name="setTimeToLive(long)"/>
      <method name="getTemplateBean()"/>
    </class>
    <class name="DeploymentPlanBean">
      <method name="hasVariable(weblogic.j2ee.descriptor.wl.ModuleDescriptorBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="isGlobalVariables()"/>
      <method name="isRemovable(weblogic.descriptor.DescriptorBean)"/>
      <method name="rootModule(java.lang.String)"/>
      <method name="valueOf(weblogic.j2ee.descriptor.wl.VariableBean)"/>
      <method name="getApplicationName()"/>
      <method name="getConfigRoot()"/>
      <method name="getDescription()"/>
      <method name="getVersion()"/>
      <method name="destroyModuleOverride(weblogic.j2ee.descriptor.wl.ModuleOverrideBean)"/>
      <method name="setApplicationName(java.lang.String)"/>
      <method name="setConfigRoot(java.lang.String)"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setGlobalVariables(boolean)"/>
      <method name="setVersion(java.lang.String)"/>
      <method name="findModuleDescriptor(java.lang.String,java.lang.String)"/>
      <method name="createModuleOverride()"/>
      <method name="findModuleOverride(java.lang.String)"/>
      <method name="findRootModule()"/>
      <method name="getModuleOverrides()"/>
      <method name="assignVariable(weblogic.j2ee.descriptor.wl.VariableBean,weblogic.j2ee.descriptor.wl.ModuleDescriptorBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="findVariableAssignment(weblogic.j2ee.descriptor.wl.ModuleDescriptorBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="findVariableAssignments(weblogic.j2ee.descriptor.wl.VariableBean)"/>
      <method name="findOrCreateVariable(weblogic.j2ee.descriptor.wl.ModuleDescriptorBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="findOrCreateVariable(weblogic.j2ee.descriptor.wl.ModuleDescriptorBean,weblogic.descriptor.DescriptorBean,java.lang.String,boolean)"/>
      <method name="findOrCreateVariable(weblogic.j2ee.descriptor.wl.ModuleDescriptorBean,weblogic.descriptor.DescriptorBean,java.lang.String,boolean,java.lang.Object)"/>
      <method name="findVariable(weblogic.j2ee.descriptor.wl.ModuleDescriptorBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="getVariableDefinition()"/>
    </class>
    <class name="DestinationBean">
      <method name="isConsumptionPausedAtStartup()"/>
      <method name="isDefaultUnitOfOrder()"/>
      <method name="isInsertionPausedAtStartup()"/>
      <method name="isProductionPausedAtStartup()"/>
      <method name="getIncompleteWorkExpirationTime()"/>
      <method name="getMaximumMessageSize()"/>
      <method name="getMessagingPerformancePreference()"/>
      <method name="getAttachSender()"/>
      <method name="getJMSCreateDestinationIdentifier()"/>
      <method name="getJNDIName()"/>
      <method name="getLoadBalancingPolicy()"/>
      <method name="getLocalJNDIName()"/>
      <method name="getSAFExportPolicy()"/>
      <method name="getUnitOfOrderRouting()"/>
      <method name="getUnitOfWorkHandlingPolicy()"/>
      <method name="getDestinationKeys()"/>
      <method name="addDestinationKey(java.lang.String)"/>
      <method name="removeDestinationKey(java.lang.String)"/>
      <method name="setAttachSender(java.lang.String)"/>
      <method name="setConsumptionPausedAtStartup(boolean)"/>
      <method name="setDefaultUnitOfOrder(boolean)"/>
      <method name="setDestinationKeys(java.lang.String[])"/>
      <method name="setIncompleteWorkExpirationTime(int)"/>
      <method name="setInsertionPausedAtStartup(boolean)"/>
      <method name="setJMSCreateDestinationIdentifier(java.lang.String)"/>
      <method name="setJNDIName(java.lang.String)"/>
      <method name="setLoadBalancingPolicy(java.lang.String)"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setMaximumMessageSize(int)"/>
      <method name="setMessagingPerformancePreference(int)"/>
      <method name="setProductionPausedAtStartup(boolean)"/>
      <method name="setQuota(weblogic.j2ee.descriptor.wl.QuotaBean)"/>
      <method name="setSAFExportPolicy(java.lang.String)"/>
      <method name="setTemplate(weblogic.j2ee.descriptor.wl.TemplateBean)"/>
      <method name="setUnitOfOrderRouting(java.lang.String)"/>
      <method name="setUnitOfWorkHandlingPolicy(java.lang.String)"/>
      <method name="getDeliveryFailureParams()"/>
      <method name="getDeliveryParamsOverrides()"/>
      <method name="getMessageLoggingParams()"/>
      <method name="getQuota()"/>
      <method name="getTemplate()"/>
      <method name="getThresholds()"/>
    </class>
    <class name="DestinationKeyBean">
      <method name="getKeyType()"/>
      <method name="getProperty()"/>
      <method name="getSortOrder()"/>
      <method name="setKeyType(java.lang.String)"/>
      <method name="setProperty(java.lang.String)"/>
      <method name="setSortOrder(java.lang.String)"/>
    </class>
    <class name="DistributedDestinationBean">
      <method name="getJNDIName()"/>
      <method name="getLoadBalancingPolicy()"/>
      <method name="getSAFExportPolicy()"/>
      <method name="getUnitOfOrderRouting()"/>
      <method name="setJNDIName(java.lang.String)"/>
      <method name="setLoadBalancingPolicy(java.lang.String)"/>
      <method name="setSAFExportPolicy(java.lang.String)"/>
      <method name="setUnitOfOrderRouting(java.lang.String)"/>
    </class>
    <class name="DistributedDestinationMemberBean">
      <method name="getWeight()"/>
      <method name="getPhysicalDestinationName()"/>
      <method name="setPhysicalDestinationName(java.lang.String)"/>
      <method name="setWeight(int)"/>
    </class>
    <class name="DistributedQueueBean">
      <method name="getResetDeliveryCountOnForward()"/>
      <method name="getForwardDelay()"/>
      <method name="destroyDistributedQueueMember(weblogic.j2ee.descriptor.wl.DistributedDestinationMemberBean)"/>
      <method name="setForwardDelay(int)"/>
      <method name="setResetDeliveryCountOnForward(boolean)"/>
      <method name="createDistributedQueueMember(java.lang.String)"/>
      <method name="lookupDistributedQueueMember(java.lang.String)"/>
      <method name="getDistributedQueueMembers()"/>
    </class>
    <class name="DistributedTopicBean">
      <method name="destroyDistributedTopicMember(weblogic.j2ee.descriptor.wl.DistributedDestinationMemberBean)"/>
      <method name="createDistributedTopicMember(java.lang.String)"/>
      <method name="lookupDistributedTopicMember(java.lang.String)"/>
      <method name="getDistributedTopicMembers()"/>
    </class>
    <class name="ExternalResourceOverrideBean">
      <method name="getDescriptorFilePath()"/>
      <method name="getResourceName()"/>
      <method name="getResourceType()"/>
      <method name="getRootElement()"/>
      <method name="destroyVariableAssignment(weblogic.j2ee.descriptor.wl.VariableAssignmentBean)"/>
      <method name="setDescriptorFilePath(java.lang.String)"/>
      <method name="setResourceName(java.lang.String)"/>
      <method name="setResourceType(java.lang.String)"/>
      <method name="setRootElement(java.lang.String)"/>
      <method name="createVariableAssignment()"/>
      <method name="getVariableAssignments()"/>
    </class>
    <class name="FairShareRequestClassBean">
      <method name="getFairShare()"/>
      <method name="getId()"/>
      <method name="getName()"/>
      <method name="setFairShare(int)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="FlowControlParamsBean">
      <method name="isFlowControlEnabled()"/>
      <method name="getFlowInterval()"/>
      <method name="getFlowMaximum()"/>
      <method name="getFlowMinimum()"/>
      <method name="getFlowSteps()"/>
      <method name="getOneWaySendWindowSize()"/>
      <method name="getOneWaySendMode()"/>
      <method name="setFlowControlEnabled(boolean)"/>
      <method name="setFlowInterval(int)"/>
      <method name="setFlowMaximum(int)"/>
      <method name="setFlowMinimum(int)"/>
      <method name="setFlowSteps(int)"/>
      <method name="setOneWaySendMode(java.lang.String)"/>
      <method name="setOneWaySendWindowSize(int)"/>
    </class>
    <class name="ForeignConnectionFactoryBean">
      <method name="getPasswordEncrypted()"/>
      <method name="getConnectionHealthChecking()"/>
      <method name="getPassword()"/>
      <method name="getUsername()"/>
      <method name="setConnectionHealthChecking(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setUsername(java.lang.String)"/>
    </class>
    <class name="ForeignDestinationBean" members="concealed"/>
    <class name="ForeignJNDIObjectBean">
      <method name="getLocalJNDIName()"/>
      <method name="getRemoteJNDIName()"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setRemoteJNDIName(java.lang.String)"/>
    </class>
    <class name="ForeignServerBean">
      <method name="getJNDIPropertiesCredentialEncrypted()"/>
      <method name="getConnectionURL()"/>
      <method name="getInitialContextFactory()"/>
      <method name="getJNDIPropertiesCredential()"/>
      <method name="destroyForeignConnectionFactory(weblogic.j2ee.descriptor.wl.ForeignConnectionFactoryBean)"/>
      <method name="destroyForeignDestination(weblogic.j2ee.descriptor.wl.ForeignDestinationBean)"/>
      <method name="destroyJNDIProperty(weblogic.j2ee.descriptor.wl.PropertyBean)"/>
      <method name="setConnectionURL(java.lang.String)"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
      <method name="setJNDIPropertiesCredential(java.lang.String)"/>
      <method name="setJNDIPropertiesCredentialEncrypted(byte[])"/>
      <method name="createForeignConnectionFactory(java.lang.String)"/>
      <method name="lookupForeignConnectionFactory(java.lang.String)"/>
      <method name="getForeignConnectionFactories()"/>
      <method name="createForeignDestination(java.lang.String)"/>
      <method name="lookupForeignDestination(java.lang.String)"/>
      <method name="getForeignDestinations()"/>
      <method name="createJNDIProperty(java.lang.String)"/>
      <method name="lookupJNDIProperty(java.lang.String)"/>
      <method name="getJNDIProperties()"/>
    </class>
    <class name="GroupParamsBean">
      <method name="getSubDeploymentName()"/>
      <method name="setErrorDestination(weblogic.j2ee.descriptor.wl.DestinationBean)"/>
      <method name="setSubDeploymentName(java.lang.String)"/>
      <method name="getErrorDestination()"/>
    </class>
    <class name="JDBCConnectionPoolParamsBean">
      <method name="isCredentialMappingEnabled()"/>
      <method name="isIdentityBasedConnectionPoolingEnabled()"/>
      <method name="isIgnoreInUseConnectionsEnabled()"/>
      <method name="isPinnedToThread()"/>
      <method name="isRemoveInfectedConnections()"/>
      <method name="isTestConnectionsOnReserve()"/>
      <method name="isWrapJdbc()"/>
      <method name="isWrapTypes()"/>
      <method name="getCapacityIncrement()"/>
      <method name="getConnectionCreationRetryFrequencySeconds()"/>
      <method name="getConnectionHarvestMaxCount()"/>
      <method name="getConnectionHarvestTriggerCount()"/>
      <method name="getConnectionReserveTimeoutSeconds()"/>
      <method name="getCountOfRefreshFailuresTillDisable()"/>
      <method name="getCountOfTestFailuresTillFlush()"/>
      <method name="getHighestNumWaiters()"/>
      <method name="getInactiveConnectionTimeoutSeconds()"/>
      <method name="getInitialCapacity()"/>
      <method name="getJDBCXADebugLevel()"/>
      <method name="getLoginDelaySeconds()"/>
      <method name="getMaxCapacity()"/>
      <method name="getMinCapacity()"/>
      <method name="getProfileConnectionLeakTimeoutSeconds()"/>
      <method name="getProfileHarvestFrequencySeconds()"/>
      <method name="getProfileType()"/>
      <method name="getSecondsToTrustAnIdlePoolConnection()"/>
      <method name="getShrinkFrequencySeconds()"/>
      <method name="getStatementCacheSize()"/>
      <method name="getStatementTimeout()"/>
      <method name="getTestFrequencySeconds()"/>
      <method name="getConnectionLabelingCallback()"/>
      <method name="getDriverInterceptor()"/>
      <method name="getFatalErrorCodes()"/>
      <method name="getInitSql()"/>
      <method name="getStatementCacheType()"/>
      <method name="getTestTableName()"/>
      <method name="setCapacityIncrement(int)"/>
      <method name="setConnectionCreationRetryFrequencySeconds(int)"/>
      <method name="setConnectionHarvestMaxCount(int)"/>
      <method name="setConnectionHarvestTriggerCount(int)"/>
      <method name="setConnectionLabelingCallback(java.lang.String)"/>
      <method name="setConnectionReserveTimeoutSeconds(int)"/>
      <method name="setCountOfRefreshFailuresTillDisable(int)"/>
      <method name="setCountOfTestFailuresTillFlush(int)"/>
      <method name="setCredentialMappingEnabled(boolean)"/>
      <method name="setDriverInterceptor(java.lang.String)"/>
      <method name="setFatalErrorCodes(java.lang.String)"/>
      <method name="setHighestNumWaiters(int)"/>
      <method name="setIdentityBasedConnectionPoolingEnabled(boolean)"/>
      <method name="setIgnoreInUseConnectionsEnabled(boolean)"/>
      <method name="setInactiveConnectionTimeoutSeconds(int)"/>
      <method name="setInitSql(java.lang.String)"/>
      <method name="setInitialCapacity(int)"/>
      <method name="setJDBCXADebugLevel(int)"/>
      <method name="setLoginDelaySeconds(int)"/>
      <method name="setMaxCapacity(int)"/>
      <method name="setMinCapacity(int)"/>
      <method name="setPinnedToThread(boolean)"/>
      <method name="setProfileConnectionLeakTimeoutSeconds(int)"/>
      <method name="setProfileHarvestFrequencySeconds(int)"/>
      <method name="setProfileType(int)"/>
      <method name="setRemoveInfectedConnections(boolean)"/>
      <method name="setSecondsToTrustAnIdlePoolConnection(int)"/>
      <method name="setShrinkFrequencySeconds(int)"/>
      <method name="setStatementCacheSize(int)"/>
      <method name="setStatementCacheType(java.lang.String)"/>
      <method name="setStatementTimeout(int)"/>
      <method name="setTestConnectionsOnReserve(boolean)"/>
      <method name="setTestFrequencySeconds(int)"/>
      <method name="setTestTableName(java.lang.String)"/>
      <method name="setWrapJdbc(boolean)"/>
      <method name="setWrapTypes(boolean)"/>
    </class>
    <class name="JDBCDataSourceBean">
      <method name="getDatasourceType()"/>
      <method name="getName()"/>
      <method name="getVersion()"/>
      <method name="getId()"/>
      <method name="setDatasourceType(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setVersion(java.lang.String)"/>
      <method name="getJDBCConnectionPoolParams()"/>
      <method name="getJDBCDataSourceParams()"/>
      <method name="getJDBCDriverParams()"/>
      <method name="getJDBCOracleParams()"/>
      <method name="getJDBCXAParams()"/>
    </class>
    <class name="JDBCDataSourceParamsBean">
      <method name="isFailoverRequestIfBusy()"/>
      <method name="isKeepConnAfterGlobalTx()"/>
      <method name="isKeepConnAfterLocalTx()"/>
      <method name="isRowPrefetch()"/>
      <method name="getRowPrefetchSize()"/>
      <method name="getStreamChunkSize()"/>
      <method name="getAlgorithmType()"/>
      <method name="getConnectionPoolFailoverCallbackHandler()"/>
      <method name="getDataSourceList()"/>
      <method name="getGlobalTransactionsProtocol()"/>
      <method name="getProxySwitchingCallback()"/>
      <method name="getProxySwitchingProperties()"/>
      <method name="getScope()"/>
      <method name="getJNDINames()"/>
      <method name="addJNDIName(java.lang.String)"/>
      <method name="removeJNDIName(java.lang.String)"/>
      <method name="setAlgorithmType(java.lang.String)"/>
      <method name="setConnectionPoolFailoverCallbackHandler(java.lang.String)"/>
      <method name="setDataSourceList(java.lang.String)"/>
      <method name="setFailoverRequestIfBusy(boolean)"/>
      <method name="setGlobalTransactionsProtocol(java.lang.String)"/>
      <method name="setJNDINames(java.lang.String[])"/>
      <method name="setKeepConnAfterGlobalTx(boolean)"/>
      <method name="setKeepConnAfterLocalTx(boolean)"/>
      <method name="setProxySwitchingCallback(java.lang.String)"/>
      <method name="setProxySwitchingProperties(java.lang.String)"/>
      <method name="setRowPrefetch(boolean)"/>
      <method name="setRowPrefetchSize(int)"/>
      <method name="setScope(java.lang.String)"/>
      <method name="setStreamChunkSize(int)"/>
    </class>
    <class name="JDBCDriverParamsBean">
      <method name="isUsePasswordIndirection()"/>
      <method name="isUseXaDataSourceInterface()"/>
      <method name="getPasswordEncrypted()"/>
      <method name="getDriverName()"/>
      <method name="getPassword()"/>
      <method name="getUrl()"/>
      <method name="setDriverName(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setUrl(java.lang.String)"/>
      <method name="setUsePasswordIndirection(boolean)"/>
      <method name="setUseXaDataSourceInterface(boolean)"/>
      <method name="getProperties()"/>
    </class>
    <class name="JDBCOracleParamsBean">
      <method name="isActiveGridlink()"/>
      <method name="isFanEnabled()"/>
      <method name="isOracleEnableJavaNetFastPath()"/>
      <method name="isOracleOptimizeUtf8Conversion()"/>
      <method name="isOracleProxySession()"/>
      <method name="isUseDatabaseCredentials()"/>
      <method name="getOnsWalletPasswordEncrypted()"/>
      <method name="getReplayInitiationTimeout()"/>
      <method name="getAffinityPolicy()"/>
      <method name="getConnectionInitializationCallback()"/>
      <method name="getOnsNodeList()"/>
      <method name="getOnsWalletFile()"/>
      <method name="getOnsWalletPassword()"/>
      <method name="setActiveGridlink(boolean)"/>
      <method name="setAffinityPolicy(java.lang.String)"/>
      <method name="setConnectionInitializationCallback(java.lang.String)"/>
      <method name="setFanEnabled(boolean)"/>
      <method name="setOnsNodeList(java.lang.String)"/>
      <method name="setOnsWalletFile(java.lang.String)"/>
      <method name="setOnsWalletPassword(java.lang.String)"/>
      <method name="setOnsWalletPasswordEncrypted(byte[])"/>
      <method name="setOracleEnableJavaNetFastPath(boolean)"/>
      <method name="setOracleOptimizeUtf8Conversion(boolean)"/>
      <method name="setOracleProxySession(boolean)"/>
      <method name="setReplayInitiationTimeout(int)"/>
      <method name="setUseDatabaseCredentials(boolean)"/>
    </class>
    <class name="JDBCPropertiesBean">
      <method name="destroyProperty(weblogic.j2ee.descriptor.wl.JDBCPropertyBean)"/>
      <method name="createProperty(java.lang.String)"/>
      <method name="createProperty(java.lang.String,java.lang.String)"/>
      <method name="lookupProperty(java.lang.String)"/>
      <method name="getProperties()"/>
    </class>
    <class name="JDBCPropertyBean">
      <method name="getEncryptedValueEncrypted()"/>
      <method name="getEncryptedValue()"/>
      <method name="getName()"/>
      <method name="getSysPropValue()"/>
      <method name="getValue()"/>
      <method name="setEncryptedValue(java.lang.String)"/>
      <method name="setEncryptedValueEncrypted(byte[])"/>
      <method name="setName(java.lang.String)"/>
      <method name="setSysPropValue(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="JDBCXAParamsBean">
      <method name="isKeepLogicalConnOpenOnRelease()"/>
      <method name="isKeepXaConnTillTxComplete()"/>
      <method name="isNeedTxCtxOnClose()"/>
      <method name="isNewXaConnForCommit()"/>
      <method name="isRecoverOnlyOnce()"/>
      <method name="isResourceHealthMonitoring()"/>
      <method name="isRollbackLocalTxUponConnClose()"/>
      <method name="isXaEndOnlyOnce()"/>
      <method name="isXaSetTransactionTimeout()"/>
      <method name="getXaRetryDurationSeconds()"/>
      <method name="getXaRetryIntervalSeconds()"/>
      <method name="getXaTransactionTimeout()"/>
      <method name="setKeepLogicalConnOpenOnRelease(boolean)"/>
      <method name="setKeepXaConnTillTxComplete(boolean)"/>
      <method name="setNeedTxCtxOnClose(boolean)"/>
      <method name="setNewXaConnForCommit(boolean)"/>
      <method name="setRecoverOnlyOnce(boolean)"/>
      <method name="setResourceHealthMonitoring(boolean)"/>
      <method name="setRollbackLocalTxUponConnClose(boolean)"/>
      <method name="setXaEndOnlyOnce(boolean)"/>
      <method name="setXaRetryDurationSeconds(int)"/>
      <method name="setXaRetryIntervalSeconds(int)"/>
      <method name="setXaSetTransactionTimeout(boolean)"/>
      <method name="setXaTransactionTimeout(int)"/>
    </class>
    <class name="JMSBean">
      <method name="getVersion()"/>
      <method name="getNotes()"/>
      <method name="destroyConnectionFactory(weblogic.j2ee.descriptor.wl.JMSConnectionFactoryBean)"/>
      <method name="destroyDestinationKey(weblogic.j2ee.descriptor.wl.DestinationKeyBean)"/>
      <method name="destroyDistributedQueue(weblogic.j2ee.descriptor.wl.DistributedQueueBean)"/>
      <method name="destroyDistributedTopic(weblogic.j2ee.descriptor.wl.DistributedTopicBean)"/>
      <method name="destroyForeignServer(weblogic.j2ee.descriptor.wl.ForeignServerBean)"/>
      <method name="destroyQueue(weblogic.j2ee.descriptor.wl.QueueBean)"/>
      <method name="destroyQuota(weblogic.j2ee.descriptor.wl.QuotaBean)"/>
      <method name="destroySAFErrorHandling(weblogic.j2ee.descriptor.wl.SAFErrorHandlingBean)"/>
      <method name="destroySAFImportedDestinations(weblogic.j2ee.descriptor.wl.SAFImportedDestinationsBean)"/>
      <method name="destroySAFRemoteContext(weblogic.j2ee.descriptor.wl.SAFRemoteContextBean)"/>
      <method name="destroyTemplate(weblogic.j2ee.descriptor.wl.TemplateBean)"/>
      <method name="destroyTopic(weblogic.j2ee.descriptor.wl.TopicBean)"/>
      <method name="destroyUniformDistributedQueue(weblogic.j2ee.descriptor.wl.UniformDistributedQueueBean)"/>
      <method name="destroyUniformDistributedTopic(weblogic.j2ee.descriptor.wl.UniformDistributedTopicBean)"/>
      <method name="setNotes(java.lang.String)"/>
      <method name="setVersion(int)"/>
      <method name="createDestinationKey(java.lang.String)"/>
      <method name="lookupDestinationKey(java.lang.String)"/>
      <method name="getDestinationKeys()"/>
      <method name="createDistributedQueue(java.lang.String)"/>
      <method name="lookupDistributedQueue(java.lang.String)"/>
      <method name="getDistributedQueues()"/>
      <method name="createDistributedTopic(java.lang.String)"/>
      <method name="lookupDistributedTopic(java.lang.String)"/>
      <method name="getDistributedTopics()"/>
      <method name="createForeignServer(java.lang.String)"/>
      <method name="lookupForeignServer(java.lang.String)"/>
      <method name="getForeignServers()"/>
      <method name="createConnectionFactory(java.lang.String)"/>
      <method name="lookupConnectionFactory(java.lang.String)"/>
      <method name="getConnectionFactories()"/>
      <method name="createQueue(java.lang.String)"/>
      <method name="lookupQueue(java.lang.String)"/>
      <method name="getQueues()"/>
      <method name="createQuota(java.lang.String)"/>
      <method name="lookupQuota(java.lang.String)"/>
      <method name="getQuotas()"/>
      <method name="createSAFErrorHandling(java.lang.String)"/>
      <method name="lookupSAFErrorHandling(java.lang.String)"/>
      <method name="getSAFErrorHandlings()"/>
      <method name="createSAFImportedDestinations(java.lang.String)"/>
      <method name="lookupSAFImportedDestinations(java.lang.String)"/>
      <method name="getSAFImportedDestinations()"/>
      <method name="createSAFRemoteContext(java.lang.String)"/>
      <method name="lookupSAFRemoteContext(java.lang.String)"/>
      <method name="getSAFRemoteContexts()"/>
      <method name="createTemplate(java.lang.String)"/>
      <method name="lookupTemplate(java.lang.String)"/>
      <method name="getTemplates()"/>
      <method name="createTopic(java.lang.String)"/>
      <method name="lookupTopic(java.lang.String)"/>
      <method name="getTopics()"/>
      <method name="createUniformDistributedQueue(java.lang.String)"/>
      <method name="lookupUniformDistributedQueue(java.lang.String)"/>
      <method name="getUniformDistributedQueues()"/>
      <method name="createUniformDistributedTopic(java.lang.String)"/>
      <method name="lookupUniformDistributedTopic(java.lang.String)"/>
      <method name="getUniformDistributedTopics()"/>
    </class>
    <class name="JMSConnectionFactoryBean">
      <method name="getJNDIName()"/>
      <method name="getLocalJNDIName()"/>
      <method name="getName()"/>
      <method name="setJNDIName(java.lang.String)"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="getClientParams()"/>
      <method name="getDefaultDeliveryParams()"/>
      <method name="getFlowControlParams()"/>
      <method name="getLoadBalancingParams()"/>
      <method name="getSecurityParams()"/>
      <method name="getTransactionParams()"/>
    </class>
    <class name="LoadBalancingParamsBean">
      <method name="isLoadBalancingEnabled()"/>
      <method name="isServerAffinityEnabled()"/>
      <method name="getProducerLoadBalancingPolicy()"/>
      <method name="setLoadBalancingEnabled(boolean)"/>
      <method name="setProducerLoadBalancingPolicy(java.lang.String)"/>
      <method name="setServerAffinityEnabled(boolean)"/>
    </class>
    <class name="ManagedBeanBean">
      <method name="getManagedBeanClass()"/>
      <method name="getManagedBeanName()"/>
      <method name="destroyAdministeredObject(weblogic.j2ee.descriptor.AdministeredObjectBean)"/>
      <method name="destroyAroundInvoke(weblogic.j2ee.descriptor.AroundInvokeBean)"/>
      <method name="destroyAroundTimeout(weblogic.j2ee.descriptor.AroundTimeoutBean)"/>
      <method name="destroyConnectionFactory(weblogic.j2ee.descriptor.ConnectionFactoryResourceBean)"/>
      <method name="destroyDataSource(weblogic.j2ee.descriptor.DataSourceBean)"/>
      <method name="destroyEjbLocalRef(weblogic.j2ee.descriptor.EjbLocalRefBean)"/>
      <method name="destroyEjbRef(weblogic.j2ee.descriptor.EjbRefBean)"/>
      <method name="destroyEnvEntry(weblogic.j2ee.descriptor.EnvEntryBean)"/>
      <method name="destroyJmsConnectionFactory(weblogic.j2ee.descriptor.JmsConnectionFactoryBean)"/>
      <method name="destroyJmsDestination(weblogic.j2ee.descriptor.JmsDestinationBean)"/>
      <method name="destroyMailSession(weblogic.j2ee.descriptor.MailSessionBean)"/>
      <method name="destroyMessageDestinationRef(weblogic.j2ee.descriptor.MessageDestinationRefBean)"/>
      <method name="destroyPersistenceContextRef(weblogic.j2ee.descriptor.PersistenceContextRefBean)"/>
      <method name="destroyPersistenceUnitRef(weblogic.j2ee.descriptor.PersistenceUnitRefBean)"/>
      <method name="destroyPostConstruct(weblogic.j2ee.descriptor.LifecycleCallbackBean)"/>
      <method name="destroyPreDestroy(weblogic.j2ee.descriptor.LifecycleCallbackBean)"/>
      <method name="destroyResourceEnvRef(weblogic.j2ee.descriptor.ResourceEnvRefBean)"/>
      <method name="destroyResourceRef(weblogic.j2ee.descriptor.ResourceRefBean)"/>
      <method name="destroyServiceRef(weblogic.j2ee.descriptor.ServiceRefBean)"/>
      <method name="setManagedBeanClass(java.lang.String)"/>
      <method name="setManagedBeanName(java.lang.String)"/>
      <method name="createAdministeredObjectBean()"/>
      <method name="getAdministeredObjects()"/>
      <method name="createAroundInvoke()"/>
      <method name="getAroundInvokes()"/>
      <method name="createAroundTimeout()"/>
      <method name="getAroundTimeouts()"/>
      <method name="createConnectionFactoryResourceBean()"/>
      <method name="getConnectionFactories()"/>
      <method name="createDataSource()"/>
      <method name="getDataSources()"/>
      <method name="createEjbLocalRef()"/>
      <method name="getEjbLocalRefs()"/>
      <method name="createEjbRef()"/>
      <method name="getEjbRefs()"/>
      <method name="createEnvEntry()"/>
      <method name="getEnvEntries()"/>
      <method name="createJmsConnectionFactory()"/>
      <method name="getJmsConnectionFactories()"/>
      <method name="createJmsDestination()"/>
      <method name="getJmsDestinations()"/>
      <method name="createPostConstruct()"/>
      <method name="createPreDestroy()"/>
      <method name="getPostConstructs()"/>
      <method name="getPreDestroys()"/>
      <method name="createMailSession()"/>
      <method name="getMailSessions()"/>
      <method name="createMessageDestinationRef()"/>
      <method name="getMessageDestinationRefs()"/>
      <method name="createPersistenceContextRef()"/>
      <method name="getPersistenceContextRefs()"/>
      <method name="createPersistenceUnitRef()"/>
      <method name="getPersistenceUnitRefs()"/>
      <method name="createResourceEnvRef()"/>
      <method name="getResourceEnvRefs()"/>
      <method name="createResourceRef()"/>
      <method name="getResourceRefs()"/>
      <method name="createServiceRef()"/>
      <method name="getServiceRefs()"/>
    </class>
    <class name="MaxThreadsConstraintBean">
      <method name="getCount()"/>
      <method name="getQueueSize()"/>
      <method name="getId()"/>
      <method name="getName()"/>
      <method name="getPoolName()"/>
      <method name="setCount(int)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setPoolName(java.lang.String)"/>
      <method name="setQueueSize(int)"/>
    </class>
    <class name="MessageDestinationDescriptorBean">
      <method name="getDestinationJNDIName()"/>
      <method name="getDestinationResourceLink()"/>
      <method name="getId()"/>
      <method name="getInitialContextFactory()"/>
      <method name="getMessageDestinationName()"/>
      <method name="getProviderUrl()"/>
      <method name="setDestinationJNDIName(java.lang.String)"/>
      <method name="setDestinationResourceLink(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
      <method name="setMessageDestinationName(java.lang.String)"/>
      <method name="setProviderUrl(java.lang.String)"/>
    </class>
    <class name="MessageLoggingParamsBean">
      <method name="isMessageLoggingEnabled()"/>
      <method name="getMessageLoggingFormat()"/>
      <method name="setMessageLoggingEnabled(boolean)"/>
      <method name="setMessageLoggingFormat(java.lang.String)"/>
      <method name="getTemplateBean()"/>
    </class>
    <class name="MethodParamsBean">
      <method name="getId()"/>
      <method name="getMethodParams()"/>
      <method name="addMethodParam(java.lang.String)"/>
      <method name="removeMethodParam(java.lang.String)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setMethodParams(java.lang.String[])"/>
    </class>
    <class name="MinThreadsConstraintBean">
      <method name="getCount()"/>
      <method name="getId()"/>
      <method name="getName()"/>
      <method name="setCount(int)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="ModuleDescriptorBean">
      <method name="isExternal()"/>
      <method name="getHashCode()"/>
      <method name="getRootElement()"/>
      <method name="getUri()"/>
      <method name="destroyVariableAssignment(weblogic.j2ee.descriptor.wl.VariableAssignmentBean)"/>
      <method name="setExternal(boolean)"/>
      <method name="setHashCode(java.lang.String)"/>
      <method name="setRootElement(java.lang.String)"/>
      <method name="setUri(java.lang.String)"/>
      <method name="createVariableAssignment()"/>
      <method name="getVariableAssignments()"/>
    </class>
    <class name="ModuleOverrideBean">
      <method name="getModuleName()"/>
      <method name="getModuleType()"/>
      <method name="destroyModuleDescriptor(weblogic.j2ee.descriptor.wl.ModuleDescriptorBean)"/>
      <method name="setModuleName(java.lang.String)"/>
      <method name="setModuleType(java.lang.String)"/>
      <method name="createModuleDescriptor()"/>
      <method name="getModuleDescriptors()"/>
    </class>
    <class name="MulticastParamsBean">
      <method name="getMulticastPort()"/>
      <method name="getMulticastTimeToLive()"/>
      <method name="getMulticastAddress()"/>
      <method name="setMulticastAddress(java.lang.String)"/>
      <method name="setMulticastPort(int)"/>
      <method name="setMulticastTimeToLive(int)"/>
      <method name="getTemplateBean()"/>
    </class>
    <class name="NamedEntityBean">
      <method name="getName()"/>
      <method name="getNotes()"/>
      <method name="getId()"/>
      <method name="setName(java.lang.String)"/>
      <method name="setNotes(java.lang.String)"/>
    </class>
    <class name="OperationInfoBean">
      <method name="getName()"/>
      <method name="destroyWSATConfig()"/>
      <method name="setName(java.lang.String)"/>
      <method name="createWSATConfig()"/>
      <method name="getWSATConfig()"/>
    </class>
    <class name="OwsmPolicyBean">
      <method name="getCategory()"/>
      <method name="getStatus()"/>
      <method name="getUri()"/>
      <method name="destroySecurityConfigurationProperty(weblogic.j2ee.descriptor.wl.PropertyNamevalueBean)"/>
      <method name="setCategory(java.lang.String)"/>
      <method name="setStatus(java.lang.String)"/>
      <method name="setUri(java.lang.String)"/>
      <method name="createSecurityConfigurationProperty()"/>
      <method name="getSecurityConfigurationProperties()"/>
    </class>
    <class name="PortInfoBean">
      <method name="getPortName()"/>
      <method name="destroyCallProperty(weblogic.j2ee.descriptor.wl.PropertyNamevalueBean)"/>
      <method name="destroyOperation(weblogic.j2ee.descriptor.wl.OperationInfoBean)"/>
      <method name="destroyOwsmPolicy(weblogic.j2ee.descriptor.wl.OwsmPolicyBean)"/>
      <method name="destroyStubProperty(weblogic.j2ee.descriptor.wl.PropertyNamevalueBean)"/>
      <method name="destroyWSATConfig()"/>
      <method name="setPortName(java.lang.String)"/>
      <method name="createOperation()"/>
      <method name="lookupOperation(java.lang.String)"/>
      <method name="getOperations()"/>
      <method name="createOwsmPolicy()"/>
      <method name="getOwsmPolicy()"/>
      <method name="createCallProperty()"/>
      <method name="createStubProperty()"/>
      <method name="getCallProperties()"/>
      <method name="getStubProperties()"/>
      <method name="createWSATConfig()"/>
      <method name="getWSATConfig()"/>
    </class>
    <class name="PropertyBean">
      <method name="getKey()"/>
      <method name="getValue()"/>
      <method name="setKey(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="PropertyNamevalueBean">
      <method name="getName()"/>
      <method name="getValue()"/>
      <method name="setName(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="QueueBean">
      <method name="getResetDeliveryCountOnForward()"/>
      <method name="getForwardDelay()"/>
      <method name="setForwardDelay(int)"/>
      <method name="setResetDeliveryCountOnForward(boolean)"/>
    </class>
    <class name="QuotaBean">
      <method name="isShared()"/>
      <method name="getPolicy()"/>
      <method name="getBytesMaximum()"/>
      <method name="getMessagesMaximum()"/>
      <method name="setBytesMaximum(long)"/>
      <method name="setMessagesMaximum(long)"/>
      <method name="setPolicy(java.lang.String)"/>
      <method name="setShared(boolean)"/>
    </class>
    <class name="ResourceDeploymentPlanBean">
      <method name="hasVariable(weblogic.j2ee.descriptor.wl.ConfigResourceOverrideBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="isGlobalVariables()"/>
      <method name="isRemovable(weblogic.descriptor.DescriptorBean)"/>
      <method name="valueOf(weblogic.j2ee.descriptor.wl.VariableBean)"/>
      <method name="getDescription()"/>
      <method name="destroyConfigResourceOverride(weblogic.j2ee.descriptor.wl.ConfigResourceOverrideBean)"/>
      <method name="destroyExternalResourceOverride(weblogic.j2ee.descriptor.wl.ExternalResourceOverrideBean)"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setGlobalVariables(boolean)"/>
      <method name="createConfigResourceOverride()"/>
      <method name="findConfigResourceOverride(java.lang.String)"/>
      <method name="getConfigResourceOverrides()"/>
      <method name="createExternalResourceOverride()"/>
      <method name="findExternalResourceOverride(java.lang.String)"/>
      <method name="getExternalResourceOverrides()"/>
      <method name="assignVariable(weblogic.j2ee.descriptor.wl.VariableBean,weblogic.j2ee.descriptor.wl.ConfigResourceOverrideBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="findVariableAssignment(weblogic.j2ee.descriptor.wl.ConfigResourceOverrideBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="findVariableAssignments(weblogic.j2ee.descriptor.wl.VariableBean)"/>
      <method name="findOrCreateVariable(weblogic.j2ee.descriptor.wl.ConfigResourceOverrideBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="findOrCreateVariable(weblogic.j2ee.descriptor.wl.ConfigResourceOverrideBean,weblogic.descriptor.DescriptorBean,java.lang.String,boolean)"/>
      <method name="findOrCreateVariable(weblogic.j2ee.descriptor.wl.ConfigResourceOverrideBean,weblogic.descriptor.DescriptorBean,java.lang.String,boolean,java.lang.Object)"/>
      <method name="findVariable(weblogic.j2ee.descriptor.wl.ConfigResourceOverrideBean,weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="getVariableDefinition()"/>
    </class>
    <class name="ResponseTimeRequestClassBean">
      <method name="getGoalMs()"/>
      <method name="getId()"/>
      <method name="getName()"/>
      <method name="setGoalMs(int)"/>
      <method name="setId(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="SAFDestinationBean">
      <method name="isUseSAFTimeToLiveDefault()"/>
      <method name="getLocalJNDIName()"/>
      <method name="getNonPersistentQos()"/>
      <method name="getPersistentQos()"/>
      <method name="getRemoteJNDIName()"/>
      <method name="getUnitOfOrderRouting()"/>
      <method name="getTimeToLiveDefault()"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setNonPersistentQos(java.lang.String)"/>
      <method name="setPersistentQos(java.lang.String)"/>
      <method name="setRemoteJNDIName(java.lang.String)"/>
      <method name="setSAFErrorHandling(weblogic.j2ee.descriptor.wl.SAFErrorHandlingBean)"/>
      <method name="setTimeToLiveDefault(long)"/>
      <method name="setUnitOfOrderRouting(java.lang.String)"/>
      <method name="setUseSAFTimeToLiveDefault(boolean)"/>
      <method name="getMessageLoggingParams()"/>
      <method name="getSAFErrorHandling()"/>
    </class>
    <class name="SAFErrorHandlingBean">
      <method name="getLogFormat()"/>
      <method name="getPolicy()"/>
      <method name="setLogFormat(java.lang.String)"/>
      <method name="setPolicy(java.lang.String)"/>
      <method name="setSAFErrorDestination(weblogic.j2ee.descriptor.wl.SAFDestinationBean)"/>
      <method name="getSAFErrorDestination()"/>
    </class>
    <class name="SAFImportedDestinationsBean">
      <method name="isUseSAFTimeToLiveDefault()"/>
      <method name="getExactlyOnceLoadBalancingPolicy()"/>
      <method name="getJNDIPrefix()"/>
      <method name="getUnitOfOrderRouting()"/>
      <method name="getTimeToLiveDefault()"/>
      <method name="destroySAFQueue(weblogic.j2ee.descriptor.wl.SAFQueueBean)"/>
      <method name="destroySAFTopic(weblogic.j2ee.descriptor.wl.SAFTopicBean)"/>
      <method name="setExactlyOnceLoadBalancingPolicy(java.lang.String)"/>
      <method name="setJNDIPrefix(java.lang.String)"/>
      <method name="setSAFErrorHandling(weblogic.j2ee.descriptor.wl.SAFErrorHandlingBean)"/>
      <method name="setSAFRemoteContext(weblogic.j2ee.descriptor.wl.SAFRemoteContextBean)"/>
      <method name="setTimeToLiveDefault(long)"/>
      <method name="setUnitOfOrderRouting(java.lang.String)"/>
      <method name="setUseSAFTimeToLiveDefault(boolean)"/>
      <method name="getMessageLoggingParams()"/>
      <method name="getSAFErrorHandling()"/>
      <method name="createSAFQueue(java.lang.String)"/>
      <method name="lookupSAFQueue(java.lang.String)"/>
      <method name="getSAFQueues()"/>
      <method name="getSAFRemoteContext()"/>
      <method name="createSAFTopic(java.lang.String)"/>
      <method name="lookupSAFTopic(java.lang.String)"/>
      <method name="getSAFTopics()"/>
    </class>
    <class name="SAFLoginContextBean">
      <method name="getPasswordEncrypted()"/>
      <method name="getLoginURL()"/>
      <method name="getPassword()"/>
      <method name="getUsername()"/>
      <method name="setLoginURL(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setUsername(java.lang.String)"/>
    </class>
    <class name="SAFQueueBean" members="concealed"/>
    <class name="SAFRemoteContextBean">
      <method name="getCompressionThreshold()"/>
      <method name="getReplyToSAFRemoteContextName()"/>
      <method name="setCompressionThreshold(int)"/>
      <method name="setReplyToSAFRemoteContextName(java.lang.String)"/>
      <method name="getSAFLoginContext()"/>
    </class>
    <class name="SAFTopicBean" members="concealed"/>
    <class name="SecurityParamsBean">
      <method name="isAttachJMSXUserId()"/>
      <method name="setAttachJMSXUserId(boolean)"/>
    </class>
    <class name="TargetableBean">
      <method name="isDefaultTargetingEnabled()"/>
      <method name="getSubDeploymentName()"/>
      <method name="setDefaultTargetingEnabled(boolean)"/>
      <method name="setSubDeploymentName(java.lang.String)"/>
    </class>
    <class name="TemplateBean">
      <method name="isConsumptionPausedAtStartup()"/>
      <method name="isDefaultUnitOfOrder()"/>
      <method name="isInsertionPausedAtStartup()"/>
      <method name="isProductionPausedAtStartup()"/>
      <method name="getIncompleteWorkExpirationTime()"/>
      <method name="getMaximumMessageSize()"/>
      <method name="getMessagingPerformancePreference()"/>
      <method name="getAttachSender()"/>
      <method name="getSafExportPolicy()"/>
      <method name="getUnitOfWorkHandlingPolicy()"/>
      <method name="getDestinationKeys()"/>
      <method name="addDestinationKey(java.lang.String)"/>
      <method name="destroyGroupParams(weblogic.j2ee.descriptor.wl.GroupParamsBean)"/>
      <method name="removeDestinationKey(java.lang.String)"/>
      <method name="setAttachSender(java.lang.String)"/>
      <method name="setConsumptionPausedAtStartup(boolean)"/>
      <method name="setDefaultUnitOfOrder(boolean)"/>
      <method name="setDestinationKeys(java.lang.String[])"/>
      <method name="setIncompleteWorkExpirationTime(int)"/>
      <method name="setInsertionPausedAtStartup(boolean)"/>
      <method name="setMaximumMessageSize(int)"/>
      <method name="setMessagingPerformancePreference(int)"/>
      <method name="setProductionPausedAtStartup(boolean)"/>
      <method name="setQuota(weblogic.j2ee.descriptor.wl.QuotaBean)"/>
      <method name="setSafExportPolicy(java.lang.String)"/>
      <method name="setUnitOfWorkHandlingPolicy(java.lang.String)"/>
      <method name="getDeliveryFailureParams()"/>
      <method name="getDeliveryParamsOverrides()"/>
      <method name="findErrorDestination(java.lang.String)"/>
      <method name="createGroupParams(java.lang.String)"/>
      <method name="lookupGroupParams(java.lang.String)"/>
      <method name="getGroupParams()"/>
      <method name="getMessageLoggingParams()"/>
      <method name="getMulticast()"/>
      <method name="getQuota()"/>
      <method name="getThresholds()"/>
      <method name="getTopicSubscriptionParams()"/>
    </class>
    <class name="ThresholdParamsBean">
      <method name="getBytesHigh()"/>
      <method name="getBytesLow()"/>
      <method name="getMessagesHigh()"/>
      <method name="getMessagesLow()"/>
      <method name="setBytesHigh(long)"/>
      <method name="setBytesLow(long)"/>
      <method name="setMessagesHigh(long)"/>
      <method name="setMessagesLow(long)"/>
      <method name="getTemplateBean()"/>
    </class>
    <class name="TopicBean">
      <method name="getForwardingPolicy()"/>
      <method name="setForwardingPolicy(java.lang.String)"/>
      <method name="getMulticast()"/>
      <method name="getTopicSubscriptionParams()"/>
    </class>
    <class name="TopicSubscriptionParamsBean">
      <method name="getMessagesLimitOverride()"/>
      <method name="setMessagesLimitOverride(long)"/>
      <method name="getTemplateBean()"/>
    </class>
    <class name="TransactionParamsBean">
      <method name="isXAConnectionFactoryEnabled()"/>
      <method name="getTransactionTimeout()"/>
      <method name="setTransactionTimeout(long)"/>
      <method name="setXAConnectionFactoryEnabled(boolean)"/>
    </class>
    <class name="UniformDistributedDestinationBean" members="concealed"/>
    <class name="UniformDistributedQueueBean" members="concealed"/>
    <class name="UniformDistributedTopicBean" members="concealed"/>
    <class name="VariableAssignmentBean">
      <method name="getDescription()"/>
      <method name="getName()"/>
      <method name="getOperation()"/>
      <method name="getXpath()"/>
      <field name="ADD"/>
      <field name="NOTPLANBASED"/>
      <field name="PLANBASED"/>
      <field name="REMOVE"/>
      <field name="REPLACE"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setOperation(java.lang.String)"/>
      <method name="setOrigin(java.lang.String)"/>
      <method name="setXpath(java.lang.String)"/>
    </class>
    <class name="VariableBean">
      <method name="getDescription()"/>
      <method name="getName()"/>
      <method name="getValue()"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="VariableDefinitionBean">
      <method name="destroyVariable(weblogic.j2ee.descriptor.wl.VariableBean)"/>
      <method name="createVariable()"/>
      <method name="getVariables()"/>
    </class>
    <class name="WSATConfigBean">
      <method name="isEnabled()"/>
      <method name="getFlowType()"/>
      <method name="getVersion()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setFlowType(java.lang.String)"/>
      <method name="setVersion(java.lang.String)"/>
    </class>
    <class name="WorkManagerShutdownTriggerBean">
      <method name="getMaxStuckThreadTime()"/>
      <method name="getStuckThreadCount()"/>
      <method name="getId()"/>
      <method name="setId(java.lang.String)"/>
      <method name="setMaxStuckThreadTime(int)"/>
      <method name="setStuckThreadCount(int)"/>
    </class>
  </package>
  <package name="weblogic.javaee">
    <class name="CallByReference" members="concealed"/>
    <class name="TransactionTimeoutSeconds" members="concealed"/>
  </package>
  <package name="weblogic.jdbc.extensions">
    <class name="AffinityCallback">
      <method name="isApplicationContextAvailable()"/>
    </class>
    <class name="ConnectionDeadSQLException">
      <constructor name="ConnectionDeadSQLException(java.lang.String)"/>
    </class>
    <class name="ConnectionPoolFailoverCallback">
      <method name="allowPoolFailover(java.lang.String,java.lang.String,int)"/>
      <field name="DONOT_FAILOVER"/>
      <field name="OK"/>
      <field name="OPCODE_CURR_POOL_BUSY"/>
      <field name="OPCODE_CURR_POOL_DEAD"/>
      <field name="OPCODE_REENABLE_CURR_POOL"/>
      <field name="RETRY_CURRENT"/>
    </class>
    <class name="ConnectionUnavailableSQLException">
      <constructor name="ConnectionUnavailableSQLException(java.lang.String)"/>
    </class>
    <class name="DataAffinityCallback" members="concealed"/>
    <class name="DataSourceSwitchingCallback">
      <method name="getDataSource(java.lang.String,java.lang.String)"/>
    </class>
    <class name="DriverInterceptor">
      <method name="preInvokeCallback(java.lang.Object,java.lang.String,java.lang.Object[])"/>
      <field name="INTERFACE_NAME"/>
      <method name="postInvokeCallback(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Object)"/>
      <method name="postInvokeExceptionCallback(java.lang.Object,java.lang.String,java.lang.Object[],java.lang.Throwable)"/>
    </class>
    <class name="PoolDisabledSQLException">
      <constructor name="PoolDisabledSQLException(java.lang.String)"/>
    </class>
    <class name="PoolLimitSQLException">
      <constructor name="PoolLimitSQLException(java.lang.String)"/>
    </class>
    <class name="PoolPermissionsSQLException">
      <constructor name="PoolPermissionsSQLException(java.lang.String)"/>
    </class>
    <class name="PoolUnavailableSQLException">
      <constructor name="PoolUnavailableSQLException(java.lang.String)"/>
    </class>
    <class name="WLConnection">
      <method name="clearCallableStatement(java.lang.String)"/>
      <method name="clearCallableStatement(java.lang.String,int,int)"/>
      <method name="clearPreparedStatement(java.lang.String)"/>
      <method name="clearPreparedStatement(java.lang.String,int,int)"/>
      <method name="isValid()"/>
      <method name="isValid(int)"/>
      <method name="getReplayAttemptCount()"/>
      <method name="getPoolName()"/>
      <method name="getVendorConnection()"/>
      <method name="getVendorConnectionSafe()"/>
      <method name="getConnectionLabels()"/>
      <method name="getUnmatchedConnectionLabels(java.util.Properties)"/>
      <method name="applyConnectionLabel(java.lang.String,java.lang.String)"/>
      <method name="clearStatementCache()"/>
      <method name="removeConnectionLabel(java.lang.String)"/>
      <method name="setFailed()"/>
    </class>
    <class name="WLDataSource">
      <method name="createConnection(java.util.Properties)"/>
      <method name="createConnectionToInstance(java.lang.String,java.util.Properties)"/>
      <method name="getConnection(java.lang.String,java.lang.String,java.util.Properties)"/>
      <method name="getConnection(java.util.Properties)"/>
      <method name="registerConnectionInitializationCallback(oracle.ucp.jdbc.ConnectionInitializationCallback)"/>
      <method name="registerConnectionLabelingCallback(oracle.ucp.ConnectionLabelingCallback)"/>
      <method name="removeConnectionLabelingCallback()"/>
      <method name="unregisterConnectionInitializationCallback()"/>
    </class>
  </package>
  <package name="weblogic.jdbc.rowset">
    <class name="BaseRowSet">
      <method name="absolute(int)"/>
      <method name="columnUpdated(int)"/>
      <method name="columnUpdated(java.lang.String)"/>
      <method name="first()"/>
      <method name="getBoolean(int)"/>
      <method name="getBoolean(java.lang.String)"/>
      <method name="getEscapeProcessing()"/>
      <method name="getShowDeleted()"/>
      <method name="isAfterLast()"/>
      <method name="isBeforeFirst()"/>
      <method name="isClosed()"/>
      <method name="isFirst()"/>
      <method name="isLast()"/>
      <method name="isReadOnly()"/>
      <method name="last()"/>
      <method name="next()"/>
      <method name="previous()"/>
      <method name="relative(int)"/>
      <method name="rowDeleted()"/>
      <method name="rowInserted()"/>
      <method name="rowUpdated()"/>
      <method name="wasNull()"/>
      <method name="getByte(int)"/>
      <method name="getByte(java.lang.String)"/>
      <method name="getBytes(int)"/>
      <method name="getBytes(java.lang.String)"/>
      <method name="getDouble(int)"/>
      <method name="getDouble(java.lang.String)"/>
      <method name="getFloat(int)"/>
      <method name="getFloat(java.lang.String)"/>
      <method name="findColumn(java.lang.String)"/>
      <method name="getConcurrency()"/>
      <method name="getFetchDirection()"/>
      <method name="getFetchSize()"/>
      <method name="getHoldability()"/>
      <method name="getInt(int)"/>
      <method name="getInt(java.lang.String)"/>
      <method name="getMaxFieldSize()"/>
      <method name="getMaxRows()"/>
      <method name="getQueryTimeout()"/>
      <method name="getRow()"/>
      <method name="getTransactionIsolation()"/>
      <method name="getType()"/>
      <method name="size()"/>
      <method name="getKeyColumns()"/>
      <method name="getMatchColumnIndexes()"/>
      <method name="getAsciiStream(int)"/>
      <method name="getAsciiStream(java.lang.String)"/>
      <method name="getBinaryStream(int)"/>
      <method name="getBinaryStream(java.lang.String)"/>
      <method name="getUnicodeStream(int)"/>
      <method name="getUnicodeStream(java.lang.String)"/>
      <method name="getCharacterStream(int)"/>
      <method name="getCharacterStream(java.lang.String)"/>
      <method name="getNCharacterStream(int)"/>
      <method name="getNCharacterStream(java.lang.String)"/>
      <method name="getObject(int)"/>
      <method name="getObject(int,java.util.Map)"/>
      <method name="getObject(java.lang.String)"/>
      <method name="getObject(java.lang.String,java.util.Map)"/>
      <method name="getCommand()"/>
      <method name="getCursorName()"/>
      <method name="getDataSourceName()"/>
      <method name="getNString(int)"/>
      <method name="getNString(java.lang.String)"/>
      <method name="getPassword()"/>
      <method name="getString(int)"/>
      <method name="getString(java.lang.String)"/>
      <method name="getTableName()"/>
      <method name="getUrl()"/>
      <method name="getUsername()"/>
      <method name="getMatchColumnNames()"/>
      <method name="getBigDecimal(int)"/>
      <method name="getBigDecimal(int,int)"/>
      <method name="getBigDecimal(java.lang.String)"/>
      <method name="getBigDecimal(java.lang.String,int)"/>
      <method name="getURL(int)"/>
      <method name="getURL(java.lang.String)"/>
      <method name="getArray(int)"/>
      <method name="getArray(java.lang.String)"/>
      <method name="getBlob(int)"/>
      <method name="getBlob(java.lang.String)"/>
      <method name="getClob(int)"/>
      <method name="getClob(java.lang.String)"/>
      <method name="getConnection()"/>
      <method name="getDate(int)"/>
      <method name="getDate(int,java.util.Calendar)"/>
      <method name="getDate(java.lang.String)"/>
      <method name="getDate(java.lang.String,java.util.Calendar)"/>
      <method name="getNClob(int)"/>
      <method name="getNClob(java.lang.String)"/>
      <method name="getRef(int)"/>
      <method name="getRef(java.lang.String)"/>
      <method name="getMetaData()"/>
      <method name="getRowId(int)"/>
      <method name="getRowId(java.lang.String)"/>
      <method name="getWarnings()"/>
      <method name="getSQLXML(int)"/>
      <method name="getSQLXML(java.lang.String)"/>
      <method name="getStatement()"/>
      <method name="getTime(int)"/>
      <method name="getTime(int,java.util.Calendar)"/>
      <method name="getTime(java.lang.String)"/>
      <method name="getTime(java.lang.String,java.util.Calendar)"/>
      <method name="getTimestamp(int)"/>
      <method name="getTimestamp(int,java.util.Calendar)"/>
      <method name="getTimestamp(java.lang.String)"/>
      <method name="getTimestamp(java.lang.String,java.util.Calendar)"/>
      <method name="getTypeMap()"/>
      <method name="getDataSource()"/>
      <method name="getRowSetWarnings()"/>
      <method name="getSyncProvider()"/>
      <method name="getLong(int)"/>
      <method name="getLong(java.lang.String)"/>
      <method name="getShort(int)"/>
      <method name="getShort(java.lang.String)"/>
      <method name="addRowSetListener(javax.sql.RowSetListener)"/>
      <method name="afterLast()"/>
      <method name="beforeFirst()"/>
      <method name="clearParameters()"/>
      <method name="clearWarnings()"/>
      <method name="removeRowSetListener(javax.sql.RowSetListener)"/>
      <method name="setArray(int,java.sql.Array)"/>
      <method name="setAsciiStream(int,java.io.InputStream,int)"/>
      <method name="setAsciiStream(int,java.io.InputStream)"/>
      <method name="setAsciiStream(java.lang.String,java.io.InputStream)"/>
      <method name="setAsciiStream(java.lang.String,java.io.InputStream,int)"/>
      <method name="setBigDecimal(int,java.math.BigDecimal)"/>
      <method name="setBigDecimal(java.lang.String,java.math.BigDecimal)"/>
      <method name="setBinaryStream(int,java.io.InputStream,int)"/>
      <method name="setBinaryStream(int,java.io.InputStream)"/>
      <method name="setBinaryStream(java.lang.String,java.io.InputStream)"/>
      <method name="setBinaryStream(java.lang.String,java.io.InputStream,int)"/>
      <method name="setBlob(int,java.sql.Blob)"/>
      <method name="setBlob(int,java.io.InputStream)"/>
      <method name="setBlob(int,java.io.InputStream,long)"/>
      <method name="setBlob(java.lang.String,java.io.InputStream)"/>
      <method name="setBlob(java.lang.String,java.io.InputStream,long)"/>
      <method name="setBlob(java.lang.String,java.sql.Blob)"/>
      <method name="setBoolean(int,boolean)"/>
      <method name="setBoolean(java.lang.String,boolean)"/>
      <method name="setByte(int,byte)"/>
      <method name="setByte(java.lang.String,byte)"/>
      <method name="setBytes(int,byte[])"/>
      <method name="setBytes(java.lang.String,byte[])"/>
      <method name="setCharacterStream(int,java.io.Reader,int)"/>
      <method name="setCharacterStream(int,java.io.Reader)"/>
      <method name="setCharacterStream(java.lang.String,java.io.Reader)"/>
      <method name="setCharacterStream(java.lang.String,java.io.Reader,int)"/>
      <method name="setClob(int,java.sql.Clob)"/>
      <method name="setClob(int,java.io.Reader)"/>
      <method name="setClob(int,java.io.Reader,long)"/>
      <method name="setClob(java.lang.String,java.io.Reader)"/>
      <method name="setClob(java.lang.String,java.io.Reader,long)"/>
      <method name="setClob(java.lang.String,java.sql.Clob)"/>
      <method name="setCommand(java.lang.String)"/>
      <method name="setConcurrency(int)"/>
      <method name="setDataSource(javax.sql.DataSource)"/>
      <method name="setDataSourceName(java.lang.String)"/>
      <method name="setDate(int,java.sql.Date)"/>
      <method name="setDate(int,java.sql.Date,java.util.Calendar)"/>
      <method name="setDate(java.lang.String,java.sql.Date)"/>
      <method name="setDate(java.lang.String,java.sql.Date,java.util.Calendar)"/>
      <method name="setDouble(int,double)"/>
      <method name="setDouble(java.lang.String,double)"/>
      <method name="setEscapeProcessing(boolean)"/>
      <method name="setFetchDirection(int)"/>
      <method name="setFetchSize(int)"/>
      <method name="setFloat(int,float)"/>
      <method name="setFloat(java.lang.String,float)"/>
      <method name="setInt(int,int)"/>
      <method name="setInt(java.lang.String,int)"/>
      <method name="setKeyColumns(int[])"/>
      <method name="setLong(int,long)"/>
      <method name="setLong(java.lang.String,long)"/>
      <method name="setMatchColumn(int)"/>
      <method name="setMatchColumn(int[])"/>
      <method name="setMatchColumn(java.lang.String)"/>
      <method name="setMatchColumn(java.lang.String[])"/>
      <method name="setMaxFieldSize(int)"/>
      <method name="setMaxRows(int)"/>
      <method name="setMetaData(javax.sql.RowSetMetaData)"/>
      <method name="setNCharacterStream(int,java.io.Reader,long)"/>
      <method name="setNCharacterStream(int,java.io.Reader)"/>
      <method name="setNCharacterStream(java.lang.String,java.io.Reader)"/>
      <method name="setNCharacterStream(java.lang.String,java.io.Reader,long)"/>
      <method name="setNClob(int,java.sql.NClob)"/>
      <method name="setNClob(int,java.io.Reader)"/>
      <method name="setNClob(int,java.io.Reader,long)"/>
      <method name="setNClob(java.lang.String,java.io.Reader)"/>
      <method name="setNClob(java.lang.String,java.io.Reader,long)"/>
      <method name="setNClob(java.lang.String,java.sql.NClob)"/>
      <method name="setNString(int,java.lang.String)"/>
      <method name="setNString(java.lang.String,java.lang.String)"/>
      <method name="setNull(int,int)"/>
      <method name="setNull(int,int,java.lang.String)"/>
      <method name="setNull(java.lang.String,int)"/>
      <method name="setNull(java.lang.String,int,java.lang.String)"/>
      <method name="setObject(int,java.lang.Object)"/>
      <method name="setObject(int,java.lang.Object,int)"/>
      <method name="setObject(int,java.lang.Object,int,int)"/>
      <method name="setObject(java.lang.String,java.lang.Object)"/>
      <method name="setObject(java.lang.String,java.lang.Object,int)"/>
      <method name="setObject(java.lang.String,java.lang.Object,int,int)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setQueryTimeout(int)"/>
      <method name="setReadOnly(boolean)"/>
      <method name="setRef(int,java.sql.Ref)"/>
      <method name="setRowId(int,java.sql.RowId)"/>
      <method name="setRowId(java.lang.String,java.sql.RowId)"/>
      <method name="setSQLXML(int,java.sql.SQLXML)"/>
      <method name="setSQLXML(java.lang.String,java.sql.SQLXML)"/>
      <method name="setShort(int,short)"/>
      <method name="setShort(java.lang.String,short)"/>
      <method name="setShowDeleted(boolean)"/>
      <method name="setString(int,java.lang.String)"/>
      <method name="setString(java.lang.String,java.lang.String)"/>
      <method name="setSyncProvider(java.lang.String)"/>
      <method name="setTableName(java.lang.String)"/>
      <method name="setTime(int,java.sql.Time)"/>
      <method name="setTime(int,java.sql.Time,java.util.Calendar)"/>
      <method name="setTime(java.lang.String,java.sql.Time)"/>
      <method name="setTime(java.lang.String,java.sql.Time,java.util.Calendar)"/>
      <method name="setTimestamp(int,java.sql.Timestamp)"/>
      <method name="setTimestamp(int,java.sql.Timestamp,java.util.Calendar)"/>
      <method name="setTimestamp(java.lang.String,java.sql.Timestamp)"/>
      <method name="setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)"/>
      <method name="setTransactionIsolation(int)"/>
      <method name="setType(int)"/>
      <method name="setTypeMap(java.util.Map)"/>
      <method name="setURL(int,java.net.URL)"/>
      <method name="setUrl(java.lang.String)"/>
      <method name="setUsername(java.lang.String)"/>
      <method name="unsetMatchColumn(int)"/>
      <method name="unsetMatchColumn(int[])"/>
      <method name="unsetMatchColumn(java.lang.String)"/>
      <method name="unsetMatchColumn(java.lang.String[])"/>
      <method name="updateArray(int,java.sql.Array)"/>
      <method name="updateArray(java.lang.String,java.sql.Array)"/>
      <method name="updateAsciiStream(int,java.io.InputStream)"/>
      <method name="updateAsciiStream(int,java.io.InputStream,long)"/>
      <method name="updateAsciiStream(int,java.io.InputStream,int)"/>
      <method name="updateAsciiStream(java.lang.String,java.io.InputStream)"/>
      <method name="updateAsciiStream(java.lang.String,java.io.InputStream,long)"/>
      <method name="updateAsciiStream(java.lang.String,java.io.InputStream,int)"/>
      <method name="updateBigDecimal(int,java.math.BigDecimal)"/>
      <method name="updateBigDecimal(java.lang.String,java.math.BigDecimal)"/>
      <method name="updateBinaryStream(int,java.io.InputStream)"/>
      <method name="updateBinaryStream(int,java.io.InputStream,long)"/>
      <method name="updateBinaryStream(int,java.io.InputStream,int)"/>
      <method name="updateBinaryStream(java.lang.String,java.io.InputStream)"/>
      <method name="updateBinaryStream(java.lang.String,java.io.InputStream,long)"/>
      <method name="updateBinaryStream(java.lang.String,java.io.InputStream,int)"/>
      <method name="updateBlob(int,java.sql.Blob)"/>
      <method name="updateBlob(int,java.io.InputStream)"/>
      <method name="updateBlob(int,java.io.InputStream,long)"/>
      <method name="updateBlob(java.lang.String,java.io.InputStream)"/>
      <method name="updateBlob(java.lang.String,java.io.InputStream,long)"/>
      <method name="updateBlob(java.lang.String,java.sql.Blob)"/>
      <method name="updateBoolean(int,boolean)"/>
      <method name="updateBoolean(java.lang.String,boolean)"/>
      <method name="updateByte(int,byte)"/>
      <method name="updateByte(java.lang.String,byte)"/>
      <method name="updateBytes(int,byte[])"/>
      <method name="updateBytes(java.lang.String,byte[])"/>
      <method name="updateCharacterStream(int,java.io.Reader)"/>
      <method name="updateCharacterStream(int,java.io.Reader,long)"/>
      <method name="updateCharacterStream(int,java.io.Reader,int)"/>
      <method name="updateCharacterStream(java.lang.String,java.io.Reader)"/>
      <method name="updateCharacterStream(java.lang.String,java.io.Reader,long)"/>
      <method name="updateCharacterStream(java.lang.String,java.io.Reader,int)"/>
      <method name="updateClob(int,java.sql.Clob)"/>
      <method name="updateClob(int,java.io.Reader)"/>
      <method name="updateClob(int,java.io.Reader,long)"/>
      <method name="updateClob(java.lang.String,java.io.Reader)"/>
      <method name="updateClob(java.lang.String,java.io.Reader,long)"/>
      <method name="updateClob(java.lang.String,java.sql.Clob)"/>
      <method name="updateDate(int,java.sql.Date)"/>
      <method name="updateDate(java.lang.String,java.sql.Date)"/>
      <method name="updateDouble(int,double)"/>
      <method name="updateDouble(java.lang.String,double)"/>
      <method name="updateFloat(int,float)"/>
      <method name="updateFloat(java.lang.String,float)"/>
      <method name="updateInt(int,int)"/>
      <method name="updateInt(java.lang.String,int)"/>
      <method name="updateLong(int,long)"/>
      <method name="updateLong(java.lang.String,long)"/>
      <method name="updateNCharacterStream(int,java.io.Reader)"/>
      <method name="updateNCharacterStream(int,java.io.Reader,long)"/>
      <method name="updateNCharacterStream(int,java.io.Reader,int)"/>
      <method name="updateNCharacterStream(java.lang.String,java.io.Reader)"/>
      <method name="updateNCharacterStream(java.lang.String,java.io.Reader,long)"/>
      <method name="updateNCharacterStream(java.lang.String,java.io.Reader,int)"/>
      <method name="updateNClob(int,java.io.Reader)"/>
      <method name="updateNClob(int,java.io.Reader,long)"/>
      <method name="updateNClob(int,java.sql.NClob)"/>
      <method name="updateNClob(java.lang.String,java.io.Reader)"/>
      <method name="updateNClob(java.lang.String,java.io.Reader,long)"/>
      <method name="updateNClob(java.lang.String,java.sql.NClob)"/>
      <method name="updateNString(int,java.lang.String)"/>
      <method name="updateNString(java.lang.String,java.lang.String)"/>
      <method name="updateNull(int)"/>
      <method name="updateNull(java.lang.String)"/>
      <method name="updateObject(int,java.lang.Object)"/>
      <method name="updateObject(int,java.lang.Object,int)"/>
      <method name="updateObject(java.lang.String,java.lang.Object)"/>
      <method name="updateObject(java.lang.String,java.lang.Object,int)"/>
      <method name="updateRef(int,java.sql.Ref)"/>
      <method name="updateRef(java.lang.String,java.sql.Ref)"/>
      <method name="updateRowId(int,java.sql.RowId)"/>
      <method name="updateRowId(java.lang.String,java.sql.RowId)"/>
      <method name="updateSQLXML(int,java.sql.SQLXML)"/>
      <method name="updateSQLXML(java.lang.String,java.sql.SQLXML)"/>
      <method name="updateShort(int,short)"/>
      <method name="updateShort(java.lang.String,short)"/>
      <method name="updateString(int,java.lang.String)"/>
      <method name="updateString(java.lang.String,java.lang.String)"/>
      <method name="updateTime(int,java.sql.Time)"/>
      <method name="updateTime(java.lang.String,java.sql.Time)"/>
      <method name="updateTimestamp(int,java.sql.Timestamp)"/>
      <method name="updateTimestamp(java.lang.String,java.sql.Timestamp)"/>
    </class>
    <class name="CachedRow" members="concealed"/>
    <class name="CachedRowSetImpl">
      <method name="getObject(int,java.lang.Class)"/>
      <method name="getObject(java.lang.String,java.lang.Class)"/>
      <method name="unwrap(java.lang.Class)"/>
      <method name="executeAndGuessTableNameAndPrimaryKeys()"/>
      <method name="isWrapperFor(java.lang.Class)"/>
      <method name="nextPage()"/>
      <method name="previousPage()"/>
      <method name="getPageSize()"/>
      <method name="size()"/>
      <method name="executeAndGuessTableName()"/>
      <method name="getOriginal()"/>
      <method name="getOriginalRow()"/>
      <method name="toCollection()"/>
      <method name="toCollection(int)"/>
      <method name="toCollection(java.lang.String)"/>
      <method name="getSorter()"/>
      <method name="getCurrentRow()"/>
      <method name="getRow(int)"/>
      <method name="createShared()"/>
      <method name="createCopy()"/>
      <method name="createCopyNoConstraints()"/>
      <method name="createCopySchema()"/>
      <method name="getFilter()"/>
      <method name="acceptChanges()"/>
      <method name="acceptChanges(java.sql.Connection)"/>
      <method name="cancelRowUpdates()"/>
      <method name="close()"/>
      <method name="commit()"/>
      <method name="deleteRow()"/>
      <method name="execute()"/>
      <method name="execute(java.sql.Connection)"/>
      <method name="insertRow()"/>
      <method name="moveToCurrentRow()"/>
      <method name="moveToInsertRow()"/>
      <method name="moveToUpdateRow()"/>
      <method name="populate(java.sql.ResultSet)"/>
      <method name="populate(java.sql.ResultSet,int)"/>
      <method name="readXml(java.io.InputStream)"/>
      <method name="readXml(java.io.Reader)"/>
      <method name="readXml(weblogic.xml.stream.XMLInputStream)"/>
      <method name="refreshRow()"/>
      <method name="release()"/>
      <method name="restoreOriginal()"/>
      <method name="rollback()"/>
      <method name="rollback(java.sql.Savepoint)"/>
      <method name="rowSetPopulated(javax.sql.RowSetEvent,int)"/>
      <method name="setFilter(javax.sql.rowset.Predicate)"/>
      <method name="setOriginalRow()"/>
      <method name="setPageSize(int)"/>
      <method name="setRowSetSynced()"/>
      <method name="setRowSynced()"/>
      <method name="setSorter(java.util.Comparator)"/>
      <method name="undoDelete()"/>
      <method name="undoInsert()"/>
      <method name="undoUpdate()"/>
      <method name="updateRow()"/>
      <method name="writeXml(java.io.OutputStream)"/>
      <method name="writeXml(java.io.Writer)"/>
      <method name="writeXml(java.sql.ResultSet,java.io.OutputStream)"/>
      <method name="writeXml(java.sql.ResultSet,java.io.Writer)"/>
      <method name="populateInternal(java.sql.ResultSet)"/>
    </class>
    <class name="FilteredRowSetImpl">
      <method name="getObject(int,java.lang.Class)"/>
      <method name="getObject(java.lang.String,java.lang.Class)"/>
    </class>
    <class name="JdbcRowSetFactory">
      <method name="createCachedRowSet()"/>
      <method name="createFilteredRowSet()"/>
      <method name="createJdbcRowSet()"/>
      <method name="createJoinRowSet()"/>
      <method name="createWebRowSet()"/>
    </class>
    <class name="JdbcRowSetImpl">
      <method name="getObject(int,java.lang.Class)"/>
      <method name="getObject(java.lang.String,java.lang.Class)"/>
      <method name="unwrap(java.lang.Class)"/>
      <method name="absolute(int)"/>
      <method name="first()"/>
      <method name="getAutoCommit()"/>
      <method name="getBoolean(int)"/>
      <method name="getBoolean(java.lang.String)"/>
      <method name="getEscapeProcessing()"/>
      <method name="getShowDeleted()"/>
      <method name="isAfterLast()"/>
      <method name="isBeforeFirst()"/>
      <method name="isClosed()"/>
      <method name="isFirst()"/>
      <method name="isLast()"/>
      <method name="isReadOnly()"/>
      <method name="isWrapperFor(java.lang.Class)"/>
      <method name="last()"/>
      <method name="next()"/>
      <method name="previous()"/>
      <method name="relative(int)"/>
      <method name="rowDeleted()"/>
      <method name="rowInserted()"/>
      <method name="rowUpdated()"/>
      <method name="wasNull()"/>
      <method name="getByte(int)"/>
      <method name="getByte(java.lang.String)"/>
      <method name="getBytes(int)"/>
      <method name="getBytes(java.lang.String)"/>
      <method name="getDouble(int)"/>
      <method name="getDouble(java.lang.String)"/>
      <method name="getFloat(int)"/>
      <method name="getFloat(java.lang.String)"/>
      <method name="getConcurrency()"/>
      <method name="getFetchDirection()"/>
      <method name="getFetchSize()"/>
      <method name="getHoldability()"/>
      <method name="getInt(int)"/>
      <method name="getInt(java.lang.String)"/>
      <method name="getMaxFieldSize()"/>
      <method name="getMaxRows()"/>
      <method name="getQueryTimeout()"/>
      <method name="getRow()"/>
      <method name="getTransactionIsolation()"/>
      <method name="getType()"/>
      <method name="getMatchColumnIndexes()"/>
      <method name="getAsciiStream(int)"/>
      <method name="getAsciiStream(java.lang.String)"/>
      <method name="getBinaryStream(int)"/>
      <method name="getBinaryStream(java.lang.String)"/>
      <method name="getUnicodeStream(int)"/>
      <method name="getUnicodeStream(java.lang.String)"/>
      <method name="getCharacterStream(int)"/>
      <method name="getCharacterStream(java.lang.String)"/>
      <method name="getNCharacterStream(int)"/>
      <method name="getNCharacterStream(java.lang.String)"/>
      <method name="getObject(int)"/>
      <method name="getObject(int,java.util.Map)"/>
      <method name="getObject(java.lang.String)"/>
      <method name="getObject(java.lang.String,java.util.Map)"/>
      <method name="getCommand()"/>
      <method name="getCursorName()"/>
      <method name="getDataSourceName()"/>
      <method name="getNString(int)"/>
      <method name="getNString(java.lang.String)"/>
      <method name="getPassword()"/>
      <method name="getString(int)"/>
      <method name="getString(java.lang.String)"/>
      <method name="getUrl()"/>
      <method name="getUsername()"/>
      <method name="getMatchColumnNames()"/>
      <method name="getBigDecimal(int)"/>
      <method name="getBigDecimal(int,int)"/>
      <method name="getBigDecimal(java.lang.String)"/>
      <method name="getBigDecimal(java.lang.String,int)"/>
      <method name="getURL(int)"/>
      <method name="getURL(java.lang.String)"/>
      <method name="getArray(int)"/>
      <method name="getArray(java.lang.String)"/>
      <method name="getBlob(int)"/>
      <method name="getBlob(java.lang.String)"/>
      <method name="getClob(int)"/>
      <method name="getClob(java.lang.String)"/>
      <method name="getDate(int)"/>
      <method name="getDate(int,java.util.Calendar)"/>
      <method name="getDate(java.lang.String)"/>
      <method name="getDate(java.lang.String,java.util.Calendar)"/>
      <method name="getNClob(int)"/>
      <method name="getNClob(java.lang.String)"/>
      <method name="getRef(int)"/>
      <method name="getRef(java.lang.String)"/>
      <method name="getMetaData()"/>
      <method name="getRowId(int)"/>
      <method name="getRowId(java.lang.String)"/>
      <method name="getWarnings()"/>
      <method name="getSQLXML(int)"/>
      <method name="getSQLXML(java.lang.String)"/>
      <method name="getStatement()"/>
      <method name="getTime(int)"/>
      <method name="getTime(int,java.util.Calendar)"/>
      <method name="getTime(java.lang.String)"/>
      <method name="getTime(java.lang.String,java.util.Calendar)"/>
      <method name="getTimestamp(int)"/>
      <method name="getTimestamp(int,java.util.Calendar)"/>
      <method name="getTimestamp(java.lang.String)"/>
      <method name="getTimestamp(java.lang.String,java.util.Calendar)"/>
      <method name="getTypeMap()"/>
      <method name="getRowSetWarnings()"/>
      <method name="getLong(int)"/>
      <method name="getLong(java.lang.String)"/>
      <method name="getShort(int)"/>
      <method name="getShort(java.lang.String)"/>
      <method name="addRowSetListener(javax.sql.RowSetListener)"/>
      <method name="afterLast()"/>
      <method name="beforeFirst()"/>
      <method name="cancelRowUpdates()"/>
      <method name="clearParameters()"/>
      <method name="clearWarnings()"/>
      <method name="close()"/>
      <method name="commit()"/>
      <method name="deleteRow()"/>
      <method name="execute()"/>
      <method name="moveToCurrentRow()"/>
      <method name="moveToInsertRow()"/>
      <method name="removeRowSetListener(javax.sql.RowSetListener)"/>
      <method name="rollback()"/>
      <method name="rollback(java.sql.Savepoint)"/>
      <method name="setArray(int,java.sql.Array)"/>
      <method name="setAsciiStream(int,java.io.InputStream)"/>
      <method name="setAsciiStream(int,java.io.InputStream,int)"/>
      <method name="setAsciiStream(java.lang.String,java.io.InputStream)"/>
      <method name="setAsciiStream(java.lang.String,java.io.InputStream,int)"/>
      <method name="setAutoCommit(boolean)"/>
      <method name="setBigDecimal(int,java.math.BigDecimal)"/>
      <method name="setBigDecimal(java.lang.String,java.math.BigDecimal)"/>
      <method name="setBinaryStream(int,java.io.InputStream)"/>
      <method name="setBinaryStream(int,java.io.InputStream,int)"/>
      <method name="setBinaryStream(java.lang.String,java.io.InputStream)"/>
      <method name="setBinaryStream(java.lang.String,java.io.InputStream,int)"/>
      <method name="setBlob(int,java.sql.Blob)"/>
      <method name="setBlob(int,java.io.InputStream)"/>
      <method name="setBlob(int,java.io.InputStream,long)"/>
      <method name="setBlob(java.lang.String,java.io.InputStream)"/>
      <method name="setBlob(java.lang.String,java.io.InputStream,long)"/>
      <method name="setBlob(java.lang.String,java.sql.Blob)"/>
      <method name="setBoolean(int,boolean)"/>
      <method name="setBoolean(java.lang.String,boolean)"/>
      <method name="setByte(int,byte)"/>
      <method name="setByte(java.lang.String,byte)"/>
      <method name="setBytes(int,byte[])"/>
      <method name="setBytes(java.lang.String,byte[])"/>
      <method name="setCharacterStream(int,java.io.Reader)"/>
      <method name="setCharacterStream(int,java.io.Reader,int)"/>
      <method name="setCharacterStream(java.lang.String,java.io.Reader)"/>
      <method name="setCharacterStream(java.lang.String,java.io.Reader,int)"/>
      <method name="setClob(int,java.sql.Clob)"/>
      <method name="setClob(int,java.io.Reader)"/>
      <method name="setClob(int,java.io.Reader,long)"/>
      <method name="setClob(java.lang.String,java.io.Reader)"/>
      <method name="setClob(java.lang.String,java.io.Reader,long)"/>
      <method name="setClob(java.lang.String,java.sql.Clob)"/>
      <method name="setCommand(java.lang.String)"/>
      <method name="setConcurrency(int)"/>
      <method name="setDataSourceName(java.lang.String)"/>
      <method name="setDate(int,java.sql.Date)"/>
      <method name="setDate(int,java.sql.Date,java.util.Calendar)"/>
      <method name="setDate(java.lang.String,java.sql.Date)"/>
      <method name="setDate(java.lang.String,java.sql.Date,java.util.Calendar)"/>
      <method name="setDouble(int,double)"/>
      <method name="setDouble(java.lang.String,double)"/>
      <method name="setFetchDirection(int)"/>
      <method name="setFetchSize(int)"/>
      <method name="setFloat(int,float)"/>
      <method name="setFloat(java.lang.String,float)"/>
      <method name="setInt(int,int)"/>
      <method name="setInt(java.lang.String,int)"/>
      <method name="setLong(int,long)"/>
      <method name="setLong(java.lang.String,long)"/>
      <method name="setMatchColumn(int)"/>
      <method name="setMatchColumn(int[])"/>
      <method name="setMatchColumn(java.lang.String)"/>
      <method name="setMatchColumn(java.lang.String[])"/>
      <method name="setMaxFieldSize(int)"/>
      <method name="setMaxRows(int)"/>
      <method name="setNCharacterStream(int,java.io.Reader)"/>
      <method name="setNCharacterStream(int,java.io.Reader,long)"/>
      <method name="setNCharacterStream(java.lang.String,java.io.Reader)"/>
      <method name="setNCharacterStream(java.lang.String,java.io.Reader,long)"/>
      <method name="setNClob(int,java.io.Reader)"/>
      <method name="setNClob(int,java.io.Reader,long)"/>
      <method name="setNClob(int,java.sql.NClob)"/>
      <method name="setNClob(java.lang.String,java.io.Reader)"/>
      <method name="setNClob(java.lang.String,java.io.Reader,long)"/>
      <method name="setNClob(java.lang.String,java.sql.NClob)"/>
      <method name="setNString(int,java.lang.String)"/>
      <method name="setNString(java.lang.String,java.lang.String)"/>
      <method name="setNull(int,int)"/>
      <method name="setNull(int,int,java.lang.String)"/>
      <method name="setNull(java.lang.String,int)"/>
      <method name="setNull(java.lang.String,int,java.lang.String)"/>
      <method name="setObject(int,java.lang.Object)"/>
      <method name="setObject(int,java.lang.Object,int)"/>
      <method name="setObject(int,java.lang.Object,int,int)"/>
      <method name="setObject(java.lang.String,java.lang.Object)"/>
      <method name="setObject(java.lang.String,java.lang.Object,int)"/>
      <method name="setObject(java.lang.String,java.lang.Object,int,int)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setQueryTimeout(int)"/>
      <method name="setReadOnly(boolean)"/>
      <method name="setRef(int,java.sql.Ref)"/>
      <method name="setRowId(int,java.sql.RowId)"/>
      <method name="setRowId(java.lang.String,java.sql.RowId)"/>
      <method name="setSQLXML(int,java.sql.SQLXML)"/>
      <method name="setSQLXML(java.lang.String,java.sql.SQLXML)"/>
      <method name="setShort(int,short)"/>
      <method name="setShort(java.lang.String,short)"/>
      <method name="setShowDeleted(boolean)"/>
      <method name="setString(int,java.lang.String)"/>
      <method name="setString(java.lang.String,java.lang.String)"/>
      <method name="setTime(int,java.sql.Time)"/>
      <method name="setTime(int,java.sql.Time,java.util.Calendar)"/>
      <method name="setTime(java.lang.String,java.sql.Time)"/>
      <method name="setTime(java.lang.String,java.sql.Time,java.util.Calendar)"/>
      <method name="setTimestamp(int,java.sql.Timestamp)"/>
      <method name="setTimestamp(int,java.sql.Timestamp,java.util.Calendar)"/>
      <method name="setTimestamp(java.lang.String,java.sql.Timestamp)"/>
      <method name="setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)"/>
      <method name="setTransactionIsolation(int)"/>
      <method name="setType(int)"/>
      <method name="setTypeMap(java.util.Map)"/>
      <method name="setURL(int,java.net.URL)"/>
      <method name="setUrl(java.lang.String)"/>
      <method name="setUsername(java.lang.String)"/>
      <method name="unsetMatchColumn(int)"/>
      <method name="unsetMatchColumn(int[])"/>
      <method name="unsetMatchColumn(java.lang.String)"/>
      <method name="unsetMatchColumn(java.lang.String[])"/>
      <method name="updateArray(int,java.sql.Array)"/>
      <method name="updateArray(java.lang.String,java.sql.Array)"/>
      <method name="updateAsciiStream(int,java.io.InputStream)"/>
      <method name="updateAsciiStream(int,java.io.InputStream,int)"/>
      <method name="updateAsciiStream(int,java.io.InputStream,long)"/>
      <method name="updateAsciiStream(java.lang.String,java.io.InputStream)"/>
      <method name="updateAsciiStream(java.lang.String,java.io.InputStream,int)"/>
      <method name="updateAsciiStream(java.lang.String,java.io.InputStream,long)"/>
      <method name="updateBigDecimal(int,java.math.BigDecimal)"/>
      <method name="updateBigDecimal(java.lang.String,java.math.BigDecimal)"/>
      <method name="updateBinaryStream(int,java.io.InputStream)"/>
      <method name="updateBinaryStream(int,java.io.InputStream,int)"/>
      <method name="updateBinaryStream(int,java.io.InputStream,long)"/>
      <method name="updateBinaryStream(java.lang.String,java.io.InputStream)"/>
      <method name="updateBinaryStream(java.lang.String,java.io.InputStream,int)"/>
      <method name="updateBinaryStream(java.lang.String,java.io.InputStream,long)"/>
      <method name="updateBlob(int,java.io.InputStream)"/>
      <method name="updateBlob(int,java.io.InputStream,long)"/>
      <method name="updateBlob(int,java.sql.Blob)"/>
      <method name="updateBlob(java.lang.String,java.io.InputStream)"/>
      <method name="updateBlob(java.lang.String,java.io.InputStream,long)"/>
      <method name="updateBlob(java.lang.String,java.sql.Blob)"/>
      <method name="updateBoolean(int,boolean)"/>
      <method name="updateBoolean(java.lang.String,boolean)"/>
      <method name="updateByte(int,byte)"/>
      <method name="updateByte(java.lang.String,byte)"/>
      <method name="updateBytes(int,byte[])"/>
      <method name="updateBytes(java.lang.String,byte[])"/>
      <method name="updateCharacterStream(int,java.io.Reader)"/>
      <method name="updateCharacterStream(int,java.io.Reader,int)"/>
      <method name="updateCharacterStream(int,java.io.Reader,long)"/>
      <method name="updateCharacterStream(java.lang.String,java.io.Reader)"/>
      <method name="updateCharacterStream(java.lang.String,java.io.Reader,int)"/>
      <method name="updateCharacterStream(java.lang.String,java.io.Reader,long)"/>
      <method name="updateClob(int,java.io.Reader)"/>
      <method name="updateClob(int,java.io.Reader,long)"/>
      <method name="updateClob(int,java.sql.Clob)"/>
      <method name="updateClob(java.lang.String,java.io.Reader)"/>
      <method name="updateClob(java.lang.String,java.io.Reader,long)"/>
      <method name="updateClob(java.lang.String,java.sql.Clob)"/>
      <method name="updateDate(int,java.sql.Date)"/>
      <method name="updateDate(java.lang.String,java.sql.Date)"/>
      <method name="updateDouble(int,double)"/>
      <method name="updateDouble(java.lang.String,double)"/>
      <method name="updateFloat(int,float)"/>
      <method name="updateFloat(java.lang.String,float)"/>
      <method name="updateInt(int,int)"/>
      <method name="updateInt(java.lang.String,int)"/>
      <method name="updateLong(int,long)"/>
      <method name="updateLong(java.lang.String,long)"/>
      <method name="updateNCharacterStream(int,java.io.Reader)"/>
      <method name="updateNCharacterStream(int,java.io.Reader,long)"/>
      <method name="updateNCharacterStream(java.lang.String,java.io.Reader)"/>
      <method name="updateNCharacterStream(java.lang.String,java.io.Reader,long)"/>
      <method name="updateNClob(int,java.io.Reader)"/>
      <method name="updateNClob(int,java.io.Reader,long)"/>
      <method name="updateNClob(int,java.sql.NClob)"/>
      <method name="updateNClob(java.lang.String,java.io.Reader)"/>
      <method name="updateNClob(java.lang.String,java.io.Reader,long)"/>
      <method name="updateNClob(java.lang.String,java.sql.NClob)"/>
      <method name="updateNString(int,java.lang.String)"/>
      <method name="updateNString(java.lang.String,java.lang.String)"/>
      <method name="updateNull(int)"/>
      <method name="updateNull(java.lang.String)"/>
      <method name="updateObject(int,java.lang.Object)"/>
      <method name="updateObject(int,java.lang.Object,int)"/>
      <method name="updateObject(java.lang.String,java.lang.Object)"/>
      <method name="updateObject(java.lang.String,java.lang.Object,int)"/>
      <method name="updateRef(int,java.sql.Ref)"/>
      <method name="updateRef(java.lang.String,java.sql.Ref)"/>
      <method name="updateRowId(int,java.sql.RowId)"/>
      <method name="updateRowId(java.lang.String,java.sql.RowId)"/>
      <method name="updateSQLXML(int,java.sql.SQLXML)"/>
      <method name="updateSQLXML(java.lang.String,java.sql.SQLXML)"/>
      <method name="updateShort(int,short)"/>
      <method name="updateShort(java.lang.String,short)"/>
      <method name="updateString(int,java.lang.String)"/>
      <method name="updateString(java.lang.String,java.lang.String)"/>
      <method name="updateTime(int,java.sql.Time)"/>
      <method name="updateTime(java.lang.String,java.sql.Time)"/>
      <method name="updateTimestamp(int,java.sql.Timestamp)"/>
      <method name="updateTimestamp(java.lang.String,java.sql.Timestamp)"/>
    </class>
    <class name="JoinRowSetImpl">
      <method name="getObject(int,java.lang.Class)"/>
      <method name="getObject(java.lang.String,java.lang.Class)"/>
      <method name="supportsCrossJoin()"/>
      <method name="supportsFullJoin()"/>
      <method name="supportsInnerJoin()"/>
      <method name="supportsLeftOuterJoin()"/>
      <method name="supportsRightOuterJoin()"/>
      <method name="getJoinType()"/>
      <method name="getWhereClause()"/>
      <method name="getRowSetNames()"/>
      <method name="getRowSets()"/>
      <method name="toCachedRowSet()"/>
      <method name="addRowSet(javax.sql.RowSet,int)"/>
      <method name="addRowSet(javax.sql.RowSet,java.lang.String)"/>
      <method name="addRowSet(javax.sql.RowSet[],int[])"/>
      <method name="addRowSet(javax.sql.RowSet[],java.lang.String[])"/>
      <method name="addRowSet(javax.sql.rowset.Joinable)"/>
      <method name="setJoinType(int)"/>
    </class>
    <class name="NullUpdateException" members="concealed"/>
    <class name="OptimisticConflictException" members="concealed"/>
    <class name="RowNotFoundException" members="concealed"/>
    <class name="RowSetFactory">
      <method name="getDataSourceName()"/>
      <method name="getPassword()"/>
      <method name="getUrl()"/>
      <method name="getUsername()"/>
      <method name="getDataSource()"/>
      <method name="newFilteredRowSet()"/>
      <method name="newJdbcRowSet()"/>
      <method name="newJoinRowSet()"/>
      <method name="newWebRowSet()"/>
      <method name="newInstance()"/>
      <method name="setDataSource(javax.sql.DataSource)"/>
      <method name="setDataSourceName(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setUrl(java.lang.String)"/>
      <method name="setUsername(java.lang.String)"/>
      <method name="newCachedRowSet()"/>
    </class>
    <class name="SQLComparator" members="concealed"/>
    <class name="SQLPredicate" members="concealed"/>
    <class name="SortedRowSet">
      <method name="getSorter()"/>
      <method name="setSorter(java.util.Comparator)"/>
    </class>
    <class name="WLCachedRowSet">
      <method name="executeAndGuessTableNameAndPrimaryKeys()"/>
      <method name="isComplete()"/>
      <method name="executeAndGuessTableName()"/>
      <method name="getCurrentRow()"/>
      <method name="getRow(int)"/>
      <method name="getRows()"/>
      <method name="getRows(int,int)"/>
      <method name="getDataSource()"/>
      <field name="ALL_ROWS"/>
      <field name="CHANGED_ALL"/>
      <field name="CHANGED_CURRENT"/>
      <field name="CHANGED_ORIGINAL"/>
      <field name="CURRENT_ALL"/>
      <field name="UNCHANGED_CURRENT"/>
      <method name="loadXML(weblogic.xml.stream.XMLInputStream)"/>
      <method name="moveToUpdateRow()"/>
      <method name="populate(java.sql.ResultSetMetaData)"/>
      <method name="setDataSource(javax.sql.DataSource)"/>
      <method name="setRowSetSynced()"/>
      <method name="setRowSynced()"/>
      <method name="writeXML(weblogic.xml.stream.XMLOutputStream)"/>
      <method name="writeXML(weblogic.xml.stream.XMLOutputStream,int)"/>
    </class>
    <class name="WLRowSetInternal">
      <method name="setCachedRows(java.util.ArrayList)"/>
    </class>
    <class name="WLRowSetMetaData">
      <method name="getBatchDeletes()"/>
      <method name="getBatchInserts()"/>
      <method name="getBatchUpdates()"/>
      <method name="getGroupDeletes()"/>
      <method name="getVerboseSQL()"/>
      <method name="haveSetPKColumns()"/>
      <method name="isAutoVersionColumn(int)"/>
      <method name="isAutoVersionColumn(java.lang.String)"/>
      <method name="isPrimaryKeyColumn(int)"/>
      <method name="isPrimaryKeyColumn(java.lang.String)"/>
      <method name="isReadOnly()"/>
      <method name="isReadOnly(java.lang.String)"/>
      <method name="isSelectedColumn(int)"/>
      <method name="isSelectedColumn(java.lang.String)"/>
      <method name="isVersionColumn(int)"/>
      <method name="isVersionColumn(java.lang.String)"/>
      <method name="findColumn(java.lang.String)"/>
      <method name="getBatchVerifySize()"/>
      <method name="getGroupDeleteSize()"/>
      <method name="getOptimisticPolicy()"/>
      <method name="getDefaultNamespace()"/>
      <method name="getOptimisticPolicyAsString()"/>
      <method name="getQualifiedTableName(int)"/>
      <method name="getQualifiedTableName(java.lang.String)"/>
      <method name="getRowName()"/>
      <method name="getRowSetName()"/>
      <method name="getWriteColumnName(int)"/>
      <method name="getWriteColumnName(java.lang.String)"/>
      <method name="getWriteTableName()"/>
      <method name="getXMLSchemaLocation()"/>
      <field name="VERIFY_AUTO_VERSION_COLUMNS"/>
      <field name="VERIFY_MODIFIED_COLUMNS"/>
      <field name="VERIFY_NONE"/>
      <field name="VERIFY_READ_COLUMNS"/>
      <field name="VERIFY_SELECTED_COLUMNS"/>
      <field name="VERIFY_VERSION_COLUMNS"/>
      <method name="loadXMLSchema(weblogic.xml.stream.XMLInputStream)"/>
      <method name="markUpdateProperties(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="setAutoVersionColumn(int,boolean)"/>
      <method name="setAutoVersionColumn(java.lang.String,boolean)"/>
      <method name="setBatchDeletes(boolean)"/>
      <method name="setBatchInserts(boolean)"/>
      <method name="setBatchUpdates(boolean)"/>
      <method name="setBatchVerifySize(int)"/>
      <method name="setDefaultNamespace(java.lang.String)"/>
      <method name="setGroupDeleteSize(int)"/>
      <method name="setGroupDeletes(boolean)"/>
      <method name="setOptimisticPolicy(int)"/>
      <method name="setOptimisticPolicyAsString(java.lang.String)"/>
      <method name="setPrimaryKeyColumn(int,boolean)"/>
      <method name="setPrimaryKeyColumn(java.lang.String,boolean)"/>
      <method name="setReadOnly(boolean)"/>
      <method name="setReadOnly(int,boolean)"/>
      <method name="setReadOnly(java.lang.String,boolean)"/>
      <method name="setRowName(java.lang.String)"/>
      <method name="setRowSetName(java.lang.String)"/>
      <method name="setTableName(java.lang.String,java.lang.String)"/>
      <method name="setTableName(java.lang.String)"/>
      <method name="setVerboseSQL(boolean)"/>
      <method name="setVerifySelectedColumn(int,boolean)"/>
      <method name="setVerifySelectedColumn(java.lang.String,boolean)"/>
      <method name="setVersionColumn(int,boolean)"/>
      <method name="setVersionColumn(java.lang.String,boolean)"/>
      <method name="setWriteColumnName(int,java.lang.String)"/>
      <method name="setWriteColumnName(java.lang.String,java.lang.String)"/>
      <method name="setWriteTableName(java.lang.String)"/>
      <method name="setXMLSchemaLocation(java.lang.String)"/>
      <method name="writeXMLSchema(weblogic.xml.stream.XMLOutputStream)"/>
    </class>
    <class name="WebRowSetImpl">
      <method name="getObject(int,java.lang.Class)"/>
      <method name="getObject(java.lang.String,java.lang.Class)"/>
    </class>
  </package>
  <package name="weblogic.jms">
    <class name="ServerSessionPoolFactory">
      <method name="createServerSessionPool(javax.jms.Connection,int,int,boolean,java.lang.String,java.io.Serializable)"/>
      <method name="getServerSessionPool(javax.jms.QueueConnection,int,boolean,int,java.lang.String)"/>
      <method name="getServerSessionPool(javax.jms.TopicConnection,int,boolean,int,java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.jms.common">
    <class name="ConfigurationException" members="concealed"/>
    <class name="JMSConstants">
      <field name="ACKNOWLEDGE_ALL"/>
      <field name="ACKNOWLEDGE_PREVIOUS"/>
      <field name="RECONNECT_POLICY_ALL"/>
      <field name="RECONNECT_POLICY_NONE"/>
      <field name="RECONNECT_POLICY_PRODUCER"/>
    </class>
    <class name="JMSException">
      <method name="getLinkedException()"/>
      <method name="setLinkedException(java.lang.Exception)"/>
    </class>
    <class name="LostServerException">
      <constructor name="LostServerException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="LostServerException(java.lang.String)"/>
      <constructor name="LostServerException(java.lang.Throwable)"/>
      <constructor name="LostServerException(weblogic.logging.Loggable)"/>
      <constructor name="LostServerException(weblogic.logging.Loggable,java.lang.Throwable)"/>
      <method name="isReplayLastException()"/>
      <field name="replayLastException"/>
      <field name="serialVersionUID"/>
      <method name="setReplayLastException(boolean)"/>
    </class>
  </package>
  <package name="weblogic.jms.extensions">
    <class name="ClientSAF">
      <method name="isOpen()"/>
      <method name="getContext()"/>
      <method name="close()"/>
      <method name="open(char[])"/>
    </class>
    <class name="ClientSAFDuplicateException">
      <method name="getDuplicate()"/>
    </class>
    <class name="ClientSAFEncrypt">
      <method name="main(java.lang.String[])"/>
    </class>
    <class name="ClientSAFFactory">
      <method name="getClientSAF()"/>
      <method name="getClientSAF(java.io.File,java.io.InputStream)"/>
      <method name="getClientSAF(java.io.InputStream)"/>
    </class>
    <class name="ClientSAFGenerate" members="concealed"/>
    <class name="ClientSAFParser">
      <method name="createClientSAFDescriptor(java.lang.String)"/>
    </class>
    <class name="ConsumerClosedException">
      <method name="getConsumer()"/>
      <method name="setConsumer(javax.jms.MessageConsumer)"/>
    </class>
    <class name="ConsumerInfo">
      <method name="getCompositeDataMap()"/>
      <method name="getCompositeType()"/>
      <method name="readCompositeData(javax.management.openmbean.CompositeData)"/>
      <method name="isDurable()"/>
      <method name="isNoLocal()"/>
      <method name="getClientID()"/>
      <method name="getConnectionAddress()"/>
      <method name="getName()"/>
      <method name="getSelector()"/>
      <method name="toCompositeData()"/>
      <method name="setClientID(java.lang.String)"/>
      <method name="setConnectionAddress(java.lang.String)"/>
      <method name="setDurable(boolean)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setNoLocal(boolean)"/>
      <method name="setSelector(java.lang.String)"/>
    </class>
    <class name="DataOverrunException">
      <method name="getJMSCorrelationId()"/>
      <method name="getJMSMessageId()"/>
      <method name="getJMSDestination()"/>
    </class>
    <class name="DestinationAvailabilityListener">
      <method name="onDestinationsAvailable(java.lang.String,java.util.List)"/>
      <method name="onDestinationsUnavailable(java.lang.String,java.util.List)"/>
      <method name="onFailure(java.lang.String,java.lang.Exception)"/>
    </class>
    <class name="DestinationDetail">
      <method name="isAdvancedTopicSupported()"/>
      <method name="isLocalCluster()"/>
      <method name="isLocalWLSServer()"/>
      <method name="getMemberType()"/>
      <method name="getType()"/>
      <method name="getCreateDestinationArgument()"/>
      <method name="getJMSServerConfigName()"/>
      <method name="getJMSServerName()"/>
      <method name="getJNDIName()"/>
      <method name="getMemberTypeAsString()"/>
      <method name="getPartitionName()"/>
      <method name="getTypeAsString()"/>
      <method name="toString()"/>
      <method name="getDestination()"/>
      <field name="DESTINATION_TYPE_DD_QUEUE"/>
      <field name="DESTINATION_TYPE_FOREIGN_QUEUE"/>
      <field name="DESTINATION_TYPE_FOREIGN_TOPIC"/>
      <field name="DESTINATION_TYPE_PARTITIONED_DT"/>
      <field name="DESTINATION_TYPE_PHYSICAL_QUEUE"/>
      <field name="DESTINATION_TYPE_PHYSICAL_TOPIC"/>
      <field name="DESTINATION_TYPE_REPLICATED_DT"/>
    </class>
    <class name="DestinationInfo">
      <method name="getCompositeDataMap()"/>
      <method name="getCompositeType()"/>
      <method name="readCompositeData(javax.management.openmbean.CompositeData)"/>
      <method name="isQueue()"/>
      <method name="isTopic()"/>
      <method name="getApplicationName()"/>
      <method name="getModuleName()"/>
      <method name="getName()"/>
      <method name="getServerName()"/>
      <method name="toCompositeData()"/>
      <method name="setApplicationName(java.lang.String)"/>
      <method name="setDestination(weblogic.jms.extensions.WLDestination)"/>
      <method name="setModuleName(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setQueue(boolean)"/>
      <method name="setServerName(java.lang.String)"/>
      <method name="setTopic(boolean)"/>
      <method name="getDestination()"/>
    </class>
    <class name="IJMSModuleHelper">
      <method name="isTargetInDeploymentScope(weblogic.management.configuration.ConfigurationMBean,weblogic.management.WebLogicMBean)"/>
      <method name="uddMemberJNDIName(java.lang.String,java.lang.String)"/>
      <method name="uddMemberName(java.lang.String,java.lang.String)"/>
      <method name="createConnectionFactory(java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDestinationKey(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignConnectionFactory(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignDestination(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignServer(java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createJMSServer(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createJMSSystemResource(java.lang.String,java.lang.String)"/>
      <method name="createPersistentStore(weblogic.jms.extensions.IJMSModuleHelper.StoreType,java.lang.String,java.lang.String,weblogic.jms.extensions.PersistentStoreModifier)"/>
      <method name="createQueue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createQuota(java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFAgent(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createSAFErrorHandling(java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFImportedDestinations(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFQueue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFRemoteContext(java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFTopic(java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createTemplate(java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createTopic(java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createUniformDistributedQueue(java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createUniformDistributedTopic(java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="deleteConnectionFactory(java.lang.String,java.lang.String)"/>
      <method name="deleteDestinationKey(java.lang.String,java.lang.String)"/>
      <method name="deleteForeignConnectionFactory(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteForeignDestination(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteForeignServer(java.lang.String,java.lang.String)"/>
      <method name="deleteJMSServer(java.lang.String)"/>
      <method name="deleteJMSSystemResource(java.lang.String)"/>
      <method name="deletePersistentStore(java.lang.String)"/>
      <method name="deleteQueue(java.lang.String,java.lang.String)"/>
      <method name="deleteQuota(java.lang.String,java.lang.String)"/>
      <method name="deleteSAFAgent(java.lang.String)"/>
      <method name="deleteSAFErrorHandling(java.lang.String,java.lang.String)"/>
      <method name="deleteSAFImportedDestinations(java.lang.String,java.lang.String)"/>
      <method name="deleteSAFQueue(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFRemoteContext(java.lang.String,java.lang.String)"/>
      <method name="deleteSAFTopic(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteTemplate(java.lang.String,java.lang.String)"/>
      <method name="deleteTopic(java.lang.String,java.lang.String)"/>
      <method name="deleteUniformDistributedQueue(java.lang.String,java.lang.String)"/>
      <method name="deleteUniformDistributedTopic(java.lang.String,java.lang.String)"/>
      <method name="deployJMSServer(java.lang.String,java.lang.String)"/>
      <method name="deploySAFAgent(java.lang.String,java.lang.String)"/>
      <method name="findAndModifyEntity(java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="undeployJMSServer(java.lang.String)"/>
      <method name="undeploySAFAgent(java.lang.String)"/>
      <method name="findDestinationBean(java.lang.String,weblogic.j2ee.descriptor.wl.JMSBean)"/>
      <method name="findAllInheritedDestinations(java.lang.String,weblogic.j2ee.descriptor.wl.JMSBean)"/>
      <method name="findAllInheritedQueueBeans(java.lang.String,weblogic.j2ee.descriptor.wl.JMSBean)"/>
      <method name="findAllInheritedTopicBeans(java.lang.String,weblogic.j2ee.descriptor.wl.JMSBean)"/>
      <method name="findJMSSystemResource(java.lang.String)"/>
    </class>
    <class name="JMSDestinationAvailabilityHelper">
      <method name="getInstance()"/>
      <method name="register(java.util.Hashtable,java.lang.String,weblogic.jms.extensions.DestinationAvailabilityListener)"/>
    </class>
    <class name="JMSHelper">
      <method name="createDistributedQueueAsync(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String[])"/>
      <method name="createDistributedTopicAsync(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String[])"/>
      <method name="createPermanentQueueAsync(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createPermanentTopicAsync(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteDistributedQueue(javax.naming.Context,java.lang.String)"/>
      <method name="deleteDistributedTopic(javax.naming.Context,java.lang.String)"/>
      <method name="deletePermanentQueue(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deletePermanentTopic(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="getJMSQueueConfigMBean(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="getJMSQueueConfigMBean(javax.naming.Context,javax.jms.Queue)"/>
      <method name="getJMSServerConfigMBean(javax.naming.Context,java.lang.String)"/>
      <method name="getJMSTemplateConfigMBean(javax.naming.Context,java.lang.String)"/>
      <method name="getJMSTopicConfigMBean(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="getJMSTopicConfigMBean(javax.naming.Context,javax.jms.Topic)"/>
    </class>
    <class name="JMSMessageFactoryImpl">
      <method name="createBytesMessage()"/>
      <method name="createMapMessage()"/>
      <method name="createMessage()"/>
      <method name="createMessage(org.w3c.dom.Document)"/>
      <method name="createObjectMessage()"/>
      <method name="createObjectMessage(java.io.Serializable)"/>
      <method name="createStreamMessage()"/>
      <method name="createTextMessage()"/>
      <method name="createTextMessage(java.lang.String)"/>
      <method name="createTextMessage(java.lang.StringBuffer)"/>
      <method name="getFactory()"/>
      <method name="createXMLMessage()"/>
      <method name="createXMLMessage(java.lang.String)"/>
      <method name="createXMLMessage(org.w3c.dom.Document)"/>
    </class>
    <class name="JMSMessageInfo">
      <method name="getCompositeDataMap()"/>
      <method name="initOpenInfo()"/>
      <method name="readCompositeData(javax.management.openmbean.CompositeData)"/>
      <method name="isBodyIncluded()"/>
      <method name="getDestinationName()"/>
      <method name="getMessageSize()"/>
      <method name="setBodyIncluded(boolean)"/>
      <method name="setDestinationName(java.lang.String)"/>
      <method name="setMessage(weblogic.jms.extensions.WLMessage)"/>
      <method name="setMessageSize(long)"/>
      <method name="getMessage()"/>
    </class>
    <class name="JMSModuleHelper">
      <method name="uddMemberJNDIName(java.lang.String,java.lang.String)"/>
      <method name="uddMemberName(java.lang.String,java.lang.String)"/>
      <method name="getDistributedQueueMemberJndiNames(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="getDistributedQueueMemberJndiNames(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="getDistributedQueueMemberNames(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="getDistributedQueueMemberNames(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="getDistributedTopicMemberJndiNames(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="getDistributedTopicMemberJndiNames(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="getDistributedTopicMemberNames(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="getDistributedTopicMemberNames(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="createConnectionFactory(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createConnectionFactory(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createConnectionFactory(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createConnectionFactory(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDestinationKey(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createDestinationKey(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDestinationKey(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createDestinationKey(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDistributedQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createDistributedQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDistributedQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createDistributedQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDistributedQueueMember(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,int)"/>
      <method name="createDistributedQueueMember(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,int,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDistributedQueueMember(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,int)"/>
      <method name="createDistributedQueueMember(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,int,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDistributedTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createDistributedTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDistributedTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createDistributedTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDistributedTopicMember(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,int)"/>
      <method name="createDistributedTopicMember(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,int,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createDistributedTopicMember(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,int)"/>
      <method name="createDistributedTopicMember(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,int,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignConnectionFactory(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createForeignConnectionFactory(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignConnectionFactory(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createForeignConnectionFactory(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignDestination(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createForeignDestination(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignDestination(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createForeignDestination(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignServer(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createForeignServer(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createForeignServer(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createForeignServer(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createJMSServer(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="createJMSServer(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="createJMSSystemResource(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="createJMSSystemResource(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="createQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createQuota(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createQuota(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createQuota(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createQuota(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFAgent(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="createSAFAgent(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="createSAFErrorHandling(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="createSAFErrorHandling(javax.naming.Context,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFErrorHandling(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="createSAFErrorHandling(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFImportedDestinations(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createSAFImportedDestinations(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFImportedDestinations(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createSAFImportedDestinations(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createSAFQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createSAFQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFRemoteContext(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="createSAFRemoteContext(javax.naming.Context,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFRemoteContext(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="createSAFRemoteContext(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createSAFTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createSAFTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createSAFTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createTemplate(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="createTemplate(javax.naming.Context,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createTemplate(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="createTemplate(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createUniformDistributedQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createUniformDistributedQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createUniformDistributedQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createUniformDistributedQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createUniformDistributedTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createUniformDistributedTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="createUniformDistributedTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createUniformDistributedTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="deleteConnectionFactory(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteConnectionFactory(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteDestinationKey(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteDestinationKey(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteDistributedQueue(javax.naming.Context,java.lang.String,java.lang.String,boolean)"/>
      <method name="deleteDistributedQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,boolean)"/>
      <method name="deleteDistributedQueueMember(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteDistributedQueueMember(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteDistributedTopic(javax.naming.Context,java.lang.String,java.lang.String,boolean)"/>
      <method name="deleteDistributedTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,boolean)"/>
      <method name="deleteDistributedTopicMember(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteDistributedTopicMember(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteForeignConnectionFactory(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteForeignConnectionFactory(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteForeignDestination(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteForeignDestination(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteForeignServer(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteForeignServer(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteJMSServer(javax.naming.Context,java.lang.String)"/>
      <method name="deleteJMSServer(weblogic.management.configuration.DomainMBean,java.lang.String)"/>
      <method name="deleteJMSSystemResource(javax.naming.Context,java.lang.String)"/>
      <method name="deleteJMSSystemResource(weblogic.management.configuration.DomainMBean,java.lang.String)"/>
      <method name="deleteQueue(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteQuota(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteQuota(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFAgent(javax.naming.Context,java.lang.String)"/>
      <method name="deleteSAFAgent(weblogic.management.configuration.DomainMBean,java.lang.String)"/>
      <method name="deleteSAFErrorHandling(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFErrorHandling(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFImportedDestinations(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFImportedDestinations(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFQueue(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFRemoteContext(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFRemoteContext(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFTopic(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteSAFTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deleteTemplate(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteTemplate(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteTopic(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteUniformDistributedQueue(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteUniformDistributedQueue(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deleteUniformDistributedTopic(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deleteUniformDistributedTopic(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deployJMSServer(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deployJMSServer(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="deploySAFAgent(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="deploySAFAgent(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String)"/>
      <method name="findAndModifyEntity(javax.naming.Context,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="findAndModifyEntity(weblogic.management.configuration.DomainMBean,java.lang.String,java.lang.String,java.lang.String,weblogic.jms.extensions.JMSNamedEntityModifier)"/>
      <method name="undeployJMSServer(javax.naming.Context,java.lang.String)"/>
      <method name="undeployJMSServer(weblogic.management.configuration.DomainMBean,java.lang.String)"/>
      <method name="undeploySAFAgent(javax.naming.Context,java.lang.String)"/>
      <method name="undeploySAFAgent(weblogic.management.configuration.DomainMBean,java.lang.String)"/>
      <method name="findDestinationBean(java.lang.String,weblogic.j2ee.descriptor.wl.JMSBean)"/>
      <method name="findAllInheritedDestinations(java.lang.String,weblogic.j2ee.descriptor.wl.JMSBean)"/>
      <method name="findAllInheritedQueueBeans(java.lang.String,weblogic.j2ee.descriptor.wl.JMSBean)"/>
      <method name="findAllInheritedTopicBeans(java.lang.String,weblogic.j2ee.descriptor.wl.JMSBean)"/>
      <method name="findJMSSystemResource(javax.naming.Context,java.lang.String)"/>
    </class>
    <class name="JMSModuleHelperFactory">
      <method name="getHelper(javax.naming.Context,weblogic.jms.extensions.IJMSModuleHelper.ScopeType,java.lang.String)"/>
      <method name="getHelper(weblogic.management.configuration.DomainMBean,java.lang.String,weblogic.jms.extensions.IJMSModuleHelper.ScopeType,java.lang.String)"/>
    </class>
    <class name="JMSNamedEntityModifier">
      <method name="modify(weblogic.j2ee.descriptor.wl.NamedEntityBean)"/>
    </class>
    <class name="JMSOrderException">
      <method name="getMember()"/>
      <method name="setMember(java.io.Serializable)"/>
    </class>
    <class name="JMSRuntimeHelper">
      <method name="newJMSMessageIDToOld(java.lang.String)"/>
      <method name="oldJMSMessageIDToNew(java.lang.String,long)"/>
      <method name="getJMSConnectionRuntimeMBean(javax.naming.Context,javax.jms.Connection)"/>
      <method name="getJMSMessageConsumerRuntimeMBean(javax.naming.Context,javax.jms.MessageConsumer)"/>
      <method name="getJMSDestinationRuntimeMBean(javax.naming.Context,java.lang.String,java.lang.String)"/>
      <method name="getJMSDestinationRuntimeMBean(javax.naming.Context,javax.jms.Destination)"/>
      <method name="getJMSMessageProducerRuntimeMBean(javax.naming.Context,javax.jms.MessageProducer)"/>
      <method name="getJMSServerRuntimeMBean(javax.naming.Context,java.lang.String)"/>
      <method name="getJMSServerRuntimeMBean(javax.naming.Context,javax.jms.Destination)"/>
      <method name="getJMSSessionRuntimeMBean(javax.naming.Context,javax.jms.Session)"/>
    </class>
    <class name="MDBTransaction">
      <method name="associateTransaction(javax.jms.Message)"/>
    </class>
    <class name="PersistentStoreModifier" members="concealed"/>
    <class name="RegistrationHandle">
      <method name="unregister()"/>
    </class>
    <class name="Schedule">
      <method name="nextScheduledTime(java.lang.String)"/>
      <method name="nextScheduledTime(java.lang.String,java.util.Calendar)"/>
      <method name="nextScheduledTimeInMillis(java.lang.String)"/>
      <method name="nextScheduledTimeInMillis(java.lang.String,long)"/>
      <method name="nextScheduledTimeInMillisRelative(java.lang.String)"/>
      <method name="nextScheduledTimeInMillisRelative(java.lang.String,long)"/>
      <method name="main(java.lang.String[])"/>
      <method name="parseSchedule(java.lang.String)"/>
    </class>
    <class name="SequenceGapException">
      <method name="getMissingCount()"/>
      <method name="getJMSDestination()"/>
    </class>
    <class name="ServerSessionPoolFactory" members="concealed"/>
    <class name="ServerSessionPoolListener">
      <method name="initialize(java.io.Serializable)"/>
    </class>
    <class name="WLAcknowledgeInfo" members="concealed"/>
    <class name="WLConnection">
      <method name="getClientIDPolicy()"/>
      <method name="getReconnectPolicy()"/>
      <method name="getSubscriptionSharingPolicy()"/>
      <method name="getReconnectBlockingMillis()"/>
      <method name="getTotalReconnectPeriodMillis()"/>
      <field name="CLIENT_ID_POLICY_RESTRICTED"/>
      <field name="CLIENT_ID_POLICY_UNRESTRICTED"/>
      <field name="RECONNECT_POLICY_ALL"/>
      <field name="RECONNECT_POLICY_NONE"/>
      <field name="RECONNECT_POLICY_PRODUCER"/>
      <field name="SUBSCRIPTION_EXCLUSIVE"/>
      <field name="SUBSCRIPTION_SHARABLE"/>
      <method name="setClientID(java.lang.String,java.lang.String)"/>
      <method name="setReconnectBlockingMillis(long)"/>
      <method name="setReconnectPolicy(java.lang.String)"/>
      <method name="setSubscriptionSharingPolicy(java.lang.String)"/>
      <method name="setTotalReconnectPeriodMillis(long)"/>
    </class>
    <class name="WLDestination">
      <method name="isQueue()"/>
      <method name="isTopic()"/>
      <method name="getCreateDestinationArgument()"/>
    </class>
    <class name="WLJMSContext">
      <method name="getMessagesMaximum()"/>
      <method name="getOverrunPolicy()"/>
      <method name="getClientIDPolicy()"/>
      <method name="getReconnectPolicy()"/>
      <method name="getSubscriptionSharingPolicy()"/>
      <method name="getReconnectBlockingMillis()"/>
      <method name="getRedeliveryDelay()"/>
      <method name="getTotalReconnectPeriodMillis()"/>
      <field name="KEEP_NEW"/>
      <field name="KEEP_OLD"/>
      <field name="MULTICAST_NO_ACKNOWLEDGE"/>
      <field name="NO_ACKNOWLEDGE"/>
      <field name="CLIENT_ID_POLICY_RESTRICTED"/>
      <field name="CLIENT_ID_POLICY_UNRESTRICTED"/>
      <field name="RECONNECT_POLICY_ALL"/>
      <field name="RECONNECT_POLICY_NONE"/>
      <field name="RECONNECT_POLICY_PRODUCER"/>
      <field name="SUBSCRIPTION_EXCLUSIVE"/>
      <field name="SUBSCRIPTION_SHARABLE"/>
      <method name="acknowledge(javax.jms.Message)"/>
      <method name="setClientID(java.lang.String,java.lang.String)"/>
      <method name="setMessagesMaximum(int)"/>
      <method name="setOverrunPolicy(int)"/>
      <method name="setReconnectBlockingMillis(long)"/>
      <method name="setReconnectPolicy(java.lang.String)"/>
      <method name="setRedeliveryDelay(long)"/>
      <method name="setSessionExceptionListener(javax.jms.ExceptionListener)"/>
      <method name="setSubscriptionSharingPolicy(java.lang.String)"/>
      <method name="setTotalReconnectPeriodMillis(long)"/>
      <method name="unsubscribe(javax.jms.Topic,java.lang.String)"/>
      <method name="createXMLMessage()"/>
      <method name="createXMLMessage(java.lang.String)"/>
      <method name="createXMLMessage(org.w3c.dom.Document)"/>
    </class>
    <class name="WLJMSOBSContext" members="concealed"/>
    <class name="WLJMSProducer">
      <method name="getCompressionThreshold()"/>
      <method name="getRedeliveryLimit()"/>
      <method name="getUnitOfOrder()"/>
      <method name="getSendTimeout()"/>
      <method name="forward(javax.jms.Destination,javax.jms.Message)"/>
      <method name="setCompressionThreshold(int)"/>
      <method name="setRedeliveryLimit(int)"/>
      <method name="setSendTimeout(long)"/>
      <method name="setUnitOfOrder()"/>
      <method name="setUnitOfOrder(java.lang.String)"/>
    </class>
    <class name="WLMessage">
      <method name="getDDForwarded()"/>
      <method name="getJMSRedeliveryLimit()"/>
      <method name="getUnitOfOrder()"/>
      <method name="getJMSDeliveryTime()"/>
      <method name="getJMSMessageDocument()"/>
      <method name="setJMSDeliveryTime(long)"/>
      <method name="setJMSRedeliveryLimit(int)"/>
    </class>
    <class name="WLMessageFactory">
      <method name="createBytesMessage()"/>
      <method name="createMapMessage()"/>
      <method name="createMessage()"/>
      <method name="createMessage(org.w3c.dom.Document)"/>
      <method name="createObjectMessage()"/>
      <method name="createObjectMessage(java.io.Serializable)"/>
      <method name="createStreamMessage()"/>
      <method name="createTextMessage()"/>
      <method name="createTextMessage(java.lang.String)"/>
      <method name="createTextMessage(java.lang.StringBuffer)"/>
      <method name="createXMLMessage()"/>
      <method name="createXMLMessage(java.lang.String)"/>
      <method name="createXMLMessage(org.w3c.dom.Document)"/>
    </class>
    <class name="WLMessageProducer">
      <method name="getCompressionThreshold()"/>
      <method name="getRedeliveryLimit()"/>
      <method name="getUnitOfOrder()"/>
      <method name="getSendTimeout()"/>
      <method name="getTimeToDeliver()"/>
      <method name="forward(javax.jms.Destination,javax.jms.Message)"/>
      <method name="forward(javax.jms.Destination,javax.jms.Message,int,int,long)"/>
      <method name="forward(javax.jms.Message)"/>
      <method name="forward(javax.jms.Message,int,int,long)"/>
      <method name="setCompressionThreshold(int)"/>
      <method name="setRedeliveryLimit(int)"/>
      <method name="setSendTimeout(long)"/>
      <method name="setTimeToDeliver(long)"/>
      <method name="setUnitOfOrder()"/>
      <method name="setUnitOfOrder(java.lang.String)"/>
    </class>
    <class name="WLQueueSession" members="concealed"/>
    <class name="WLSession">
      <method name="getMessagesMaximum()"/>
      <method name="getOverrunPolicy()"/>
      <method name="getRedeliveryDelay()"/>
      <field name="KEEP_NEW"/>
      <field name="KEEP_OLD"/>
      <field name="MULTICAST_NO_ACKNOWLEDGE"/>
      <field name="NO_ACKNOWLEDGE"/>
      <method name="acknowledge()"/>
      <method name="acknowledge(javax.jms.Message)"/>
      <method name="setExceptionListener(javax.jms.ExceptionListener)"/>
      <method name="setMessagesMaximum(int)"/>
      <method name="setOverrunPolicy(int)"/>
      <method name="setRedeliveryDelay(long)"/>
      <method name="unsubscribe(javax.jms.Topic,java.lang.String)"/>
      <method name="createXMLMessage()"/>
      <method name="createXMLMessage(java.lang.String)"/>
      <method name="createXMLMessage(org.w3c.dom.Document)"/>
    </class>
    <class name="WLTopicSession" members="concealed"/>
    <class name="XMLMessage">
      <method name="getDocument()"/>
      <method name="setDocument(org.w3c.dom.Document)"/>
    </class>
  </package>
  <package name="weblogic.jndi">
    <class name="ClientEnvironment">
      <method name="getProperties()"/>
      <method name="getContext()"/>
      <method name="setEnableServerAffinity(boolean)"/>
      <method name="setProviderURL(java.lang.String)"/>
      <method name="setSecurityCredentials(java.lang.Object)"/>
      <method name="setSecurityPrincipal(java.lang.String)"/>
    </class>
    <class name="ClientEnvironmentFactory">
      <method name="getNewEnvironment()"/>
    </class>
    <class name="Environment">
      <constructor name="Environment()"/>
      <constructor name="Environment(java.util.Hashtable)"/>
      <method name="getBoolean(java.lang.String,boolean)"/>
      <method name="getCreateIntermediateContexts()"/>
      <method name="getEnableDefaultUser()"/>
      <method name="getEnableServerAffinity()"/>
      <method name="getForceResolveDNSName()"/>
      <method name="getPinToPrimaryServer()"/>
      <method name="getReplicateBindings()"/>
      <method name="getSSLRootCAFingerprints()"/>
      <method name="getProperty(java.lang.String)"/>
      <method name="getPropertyFromEnv(java.lang.String)"/>
      <method name="getSSLClientCertificate()"/>
      <method name="getSSLClientKeyPassword()"/>
      <method name="getSecurityCredentials()"/>
      <method name="removeProperty(java.lang.String)"/>
      <method name="setProperty(java.lang.String,java.lang.Object)"/>
      <method name="getClusterProviderUrl()"/>
      <method name="getInitialContextFactory()"/>
      <method name="getProviderUrl()"/>
      <method name="getSSLServerName()"/>
      <method name="getSecurityIdentityDomain()"/>
      <method name="getSecurityPrincipal()"/>
      <method name="getString(java.lang.String)"/>
      <method name="getDelegateEnvironment()"/>
      <method name="getProperties()"/>
      <method name="getContext()"/>
      <method name="getContext(java.lang.String)"/>
      <method name="getInitialContext()"/>
      <method name="getConnectionTimeout()"/>
      <method name="getRMIClientTimeout()"/>
      <method name="getRequestTimeout()"/>
      <method name="getResponseReadTimeout()"/>
      <field name="DEFAULT_INITIAL_CONTEXT_FACTORY"/>
      <field name="LOCAL_URL_PROTOCOL"/>
      <method name="loadLocalIdentity(java.security.cert.Certificate[],java.security.PrivateKey)"/>
      <method name="readExternal(java.io.ObjectInput)"/>
      <method name="setBoolean(java.lang.String,boolean)"/>
      <method name="setConnectionTimeout(long)"/>
      <method name="setCreateIntermediateContexts(boolean)"/>
      <method name="setDelegateEnvironment(java.util.Hashtable)"/>
      <method name="setEnableDefaultUser(boolean)"/>
      <method name="setEnableServerAffinity(boolean)"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
      <method name="setPinToPrimaryServer(boolean)"/>
      <method name="setProviderURL(java.lang.String)"/>
      <method name="setProviderUrl(java.lang.String)"/>
      <method name="setRMIClientTimeout(long)"/>
      <method name="setReplicateBindings(boolean)"/>
      <method name="setRequestTimeout(long)"/>
      <method name="setResponseReadTimeout(long)"/>
      <method name="setSSLClientCertificate(java.io.InputStream[])"/>
      <method name="setSSLClientKeyPassword(java.lang.String)"/>
      <method name="setSSLClientTrustManager(weblogic.security.SSL.TrustManager)"/>
      <method name="setSSLContext(javax.net.ssl.SSLContext)"/>
      <method name="setSSLRootCAFingerprints(byte[][])"/>
      <method name="setSSLRootCAFingerprints(java.lang.String)"/>
      <method name="setSSLServerName(java.lang.String)"/>
      <method name="setSecurityCredentials(java.lang.Object)"/>
      <method name="setSecurityIdentityDomain(java.lang.String)"/>
      <method name="setSecurityPrincipal(java.lang.String)"/>
      <method name="writeExternal(java.io.ObjectOutput)"/>
      <method name="getSSLClientTrustManager()"/>
    </class>
    <class name="InitialContextFactoryWrapper">
      <method name="getInitialContext(java.util.Hashtable)"/>
      <field name="DEFAULT_INITIAL_CONTEXT_FACTORY"/>
    </class>
    <class name="SimpleContext">
      <method name="createNewSubcontext(javax.naming.Context,javax.naming.Name)"/>
      <method name="resolve(javax.naming.Name)"/>
      <method name="resolve(javax.naming.Name,boolean)"/>
      <method name="addToEnvironment(java.lang.String,java.lang.Object)"/>
      <method name="lookup(java.lang.String)"/>
      <method name="lookup(javax.naming.Name)"/>
      <method name="lookupLink(java.lang.String)"/>
      <method name="lookupLink(javax.naming.Name)"/>
      <method name="removeFromEnvironment(java.lang.String)"/>
      <method name="composeName(java.lang.String,java.lang.String)"/>
      <method name="getNameInNamespace()"/>
      <method name="getEnvironment()"/>
      <field name="map"/>
      <method name="createSubcontext(java.lang.String)"/>
      <method name="createSubcontext(javax.naming.Name)"/>
      <method name="composeName(javax.naming.Name,javax.naming.Name)"/>
      <method name="getNameParser(java.lang.String)"/>
      <method name="getNameParser(javax.naming.Name)"/>
      <method name="list(java.lang.String)"/>
      <method name="list(javax.naming.Name)"/>
      <method name="listBindings(java.lang.String)"/>
      <method name="listBindings(javax.naming.Name)"/>
      <field name="parser"/>
      <method name="bind(java.lang.String,java.lang.Object)"/>
      <method name="bind(javax.naming.Name,java.lang.Object)"/>
      <method name="close()"/>
      <method name="destroySubcontext(java.lang.String)"/>
      <method name="destroySubcontext(javax.naming.Name)"/>
      <method name="rebind(java.lang.String,java.lang.Object)"/>
      <method name="rebind(javax.naming.Name,java.lang.Object)"/>
      <method name="rename(java.lang.String,java.lang.String)"/>
      <method name="rename(javax.naming.Name,javax.naming.Name)"/>
      <method name="unbind(java.lang.String)"/>
      <method name="unbind(javax.naming.Name)"/>
    </class>
    <class name="T3InitialContextFactory" members="concealed"/>
    <class name="TengahContext" members="concealed"/>
    <class name="TengahInitialContextFactory" members="concealed"/>
    <class name="ThreadLocalMap">
      <method name="get()"/>
      <method name="pop()"/>
      <method name="push(java.util.Hashtable)"/>
    </class>
    <class name="TransportableObjectFactory" members="concealed"/>
    <class name="WLContext">
      <method name="getNameInNamespace(java.lang.String)"/>
      <field name="ALLOW_EXTERNAL_APP_LOOKUP"/>
      <field name="ALLOW_GLOBAL_RESOURCE_LOOKUP"/>
      <field name="CREATE_INTERMEDIATE_CONTEXTS"/>
      <field name="DELEGATE_ENVIRONMENT"/>
      <field name="ENABLE_DEFAULT_USER"/>
      <field name="ENABLE_SERVER_AFFINITY"/>
      <field name="IDENTITY_DOMAIN"/>
      <field name="PIN_TO_PRIMARY_SERVER"/>
      <field name="PROVIDER_RJVM"/>
      <field name="RELAX_VERSION_LOOKUP"/>
      <field name="REPLICATE_BINDINGS"/>
      <field name="SSL_CLIENT_CERTIFICATE"/>
      <field name="SSL_CLIENT_KEY_PASSWORD"/>
      <field name="SSL_ROOT_CA_FINGERPRINTS"/>
      <field name="SSL_SERVER_NAME"/>
      <method name="unbind(java.lang.String,java.lang.Object)"/>
      <method name="unbind(javax.naming.Name,java.lang.Object)"/>
    </class>
    <class name="WLInitialContextFactory">
      <method name="getInitialContext(java.util.Hashtable)"/>
    </class>
    <class name="WLInitialContextFactoryDelegate">
      <method name="getInitialReference(weblogic.jndi.Environment,java.lang.Class)"/>
      <method name="getInitialContext(java.util.Hashtable)"/>
      <method name="getInitialContext(weblogic.jndi.Environment,java.lang.String,weblogic.rmi.spi.HostID)"/>
      <method name="getInitialContext(weblogic.jndi.Environment,java.lang.String)"/>
      <method name="theOne()"/>
    </class>
  </package>
  <package name="weblogic.jndi.annotation">
    <class name="CrossPartitionAware" members="concealed"/>
  </package>
  <package name="weblogic.jndi.api">
    <class name="ServerEnvironment">
      <method name="getEnableDefaultUser()"/>
      <method name="setProperty(java.lang.String,java.lang.Object)"/>
      <method name="getProviderUrl()"/>
      <method name="getInitialContext()"/>
      <method name="setCreateIntermediateContexts(boolean)"/>
      <method name="setEnableDefaultUser(boolean)"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
      <method name="setProviderUrl(java.lang.String)"/>
      <method name="setReplicateBindings(boolean)"/>
    </class>
  </package>
  <package name="weblogic.jndi.factories.java">
    <class name="javaURLContextFactory">
      <method name="getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)"/>
      <constructor name="javaURLContextFactory()"/>
      <method name="popContext()"/>
      <method name="pushContext(javax.naming.Context)"/>
    </class>
  </package>
  <package name="weblogic.logging">
    <class name="Loggable" members="concealed"/>
    <class name="LoggerNotAvailableException" members="concealed"/>
    <class name="LoggingHelper">
      <method name="getClientLogger()"/>
      <method name="getDomainLogger()"/>
      <method name="getServerLogger()"/>
      <method name="setDomainLogger(java.util.logging.Logger)"/>
    </class>
    <class name="NonCatalogLogger">
      <constructor name="NonCatalogLogger(java.lang.String)"/>
    </class>
    <class name="Severities" members="concealed"/>
    <class name="WLLevel">
      <field name="ALERT"/>
      <field name="CRITICAL"/>
      <field name="DEBUG"/>
      <field name="EMERGENCY"/>
      <field name="ERROR"/>
      <field name="INFO"/>
      <field name="NOTICE"/>
      <field name="OFF"/>
      <field name="TRACE"/>
      <field name="WARNING"/>
    </class>
    <class name="WLLogRecord" members="concealed"/>
  </package>
  <package name="weblogic.management">
    <class name="CompatibilityException" members="concealed"/>
    <class name="DeferredDeploymentException" members="concealed"/>
    <class name="DeploymentException" members="concealed"/>
    <class name="DeploymentNotification">
      <method name="isAppNotification()"/>
      <method name="isBeginTransition()"/>
      <method name="isEndTransition()"/>
      <method name="isFailedTransition()"/>
      <method name="isModuleNotification()"/>
      <method name="getAppName()"/>
      <method name="getCurrentState()"/>
      <method name="getModuleName()"/>
      <method name="getPhase()"/>
      <method name="getServerName()"/>
      <method name="getTargetState()"/>
      <method name="getTransition()"/>
      <method name="toString()"/>
      <field name="ACTIVATED"/>
      <field name="ACTIVATING"/>
      <field name="DEACTIVATED"/>
      <field name="DEACTIVATING"/>
      <field name="DISTRIBUTED"/>
      <field name="DISTRIBUTING"/>
      <field name="FAILED"/>
      <field name="PREPARED"/>
      <field name="PREPARING"/>
      <field name="STATE_ACTIVE"/>
      <field name="STATE_PREPARED"/>
      <field name="STATE_START"/>
      <field name="STATE_UNPREPARED"/>
      <field name="TRANSITION_BEGIN"/>
      <field name="TRANSITION_END"/>
      <field name="TRANSITION_FAILED"/>
      <field name="TYPE_APPLICATION"/>
      <field name="TYPE_MODULE"/>
      <field name="UNPREPARED"/>
      <field name="UNPREPARING"/>
      <method name="getChangeNotificationCount()"/>
    </class>
    <class name="DeploymentNotificationFilter">
      <method name="isNotificationEnabled(javax.management.Notification)"/>
    </class>
    <class name="DistributedAttributeUpdateException">
      <method name="getAttribute()"/>
      <method name="printExceptionInfo(java.io.PrintWriter)"/>
    </class>
    <class name="DistributedManagementException">
      <method name="getMessage()"/>
      <method name="getExceptions()"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="DistributedOperationUpdateException">
      <method name="getParams()"/>
      <method name="getActionName()"/>
      <method name="getSignature()"/>
      <method name="printExceptionInfo(java.io.PrintWriter)"/>
    </class>
    <class name="DistributedUpdateException">
      <method name="getRemoteMBeanServer()"/>
      <method name="getRemoteName()"/>
      <method name="printExceptionInfo(java.io.PrintWriter)"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="EncryptionHelper">
      <method name="clear(byte[])"/>
      <method name="encrypt(byte[])"/>
    </class>
    <class name="Helper">
      <method name="getAdminMBeanHome(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getMBeanHome(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="MBeanCreationException" members="concealed"/>
    <class name="MBeanHome">
      <method name="getDomainName()"/>
      <method name="getAllMBeans()"/>
      <method name="getAllMBeans(java.lang.String)"/>
      <method name="getMBeansByType(java.lang.String)"/>
      <field name="ADMIN_JNDI_NAME"/>
      <field name="JNDI_NAME"/>
      <field name="LOCAL_JNDI_NAME"/>
      <method name="addManagedHome(weblogic.management.MBeanHome,java.lang.String,java.lang.String)"/>
      <method name="deleteMBean(javax.management.ObjectName)"/>
      <method name="deleteMBean(weblogic.management.WebLogicMBean)"/>
      <method name="getMBeanServer()"/>
      <method name="createAdminMBean(java.lang.String,java.lang.String)"/>
      <method name="createAdminMBean(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createAdminMBean(java.lang.String,java.lang.String,java.lang.String,weblogic.management.configuration.ConfigurationMBean)"/>
      <method name="getMBean(java.lang.String,java.lang.Class)"/>
      <method name="getMBean(java.lang.String,java.lang.String)"/>
      <method name="getMBean(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getMBean(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getMBean(javax.management.ObjectName)"/>
      <method name="getAdminMBean(java.lang.String,java.lang.String)"/>
      <method name="getAdminMBean(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getConfigurationMBean(java.lang.String,java.lang.String)"/>
      <method name="getActiveDomain()"/>
      <method name="getRuntimeMBean(java.lang.String,java.lang.String)"/>
    </class>
    <class name="ManagementException">
      <method name="unWrapExceptions(java.lang.Throwable)"/>
    </class>
    <class name="ManagementRuntimeException" members="concealed"/>
    <class name="NoAccessRuntimeException">
      <method name="getMessage()"/>
    </class>
    <class name="NodeManagerRuntimeService" members="concealed"/>
    <class name="PartitionLifeCycleException" members="concealed"/>
    <class name="PartitionRuntimeStateManagerContract" members="concealed"/>
    <class name="RemoteMBeanServer">
      <field name="JNDI_NAME"/>
      <method name="getMBeanHome()"/>
    </class>
    <class name="RemoteNotificationListener">
      <method name="handleNotification(javax.management.Notification,java.lang.Object)"/>
    </class>
    <class name="ResourceGroupLifecycleException" members="concealed"/>
    <class name="TargetAvailabilityStatus">
      <method name="getAvailabilityStatus()"/>
      <method name="getDeploymentStatus()"/>
      <method name="getTargetType()"/>
      <method name="getTargetName()"/>
      <method name="getClustersAvailabilityStatus()"/>
      <method name="getServersAvailabilityStatus()"/>
      <field name="AVAILABILITY_STATUS_AVAILABLE"/>
      <field name="AVAILABILITY_STATUS_DISTRIBUTED"/>
      <field name="AVAILABILITY_STATUS_NOTAVAILABLE"/>
      <field name="AVAILABILITY_STATUS_NOTDISTRIBUTED"/>
      <field name="DEPLOYMENT_STATUS_AVAILABLE"/>
      <field name="DEPLOYMENT_STATUS_NOTAVAILABLE"/>
      <field name="DEPLOYMENT_STATUS_PARTIALLYAVAILABLE"/>
      <field name="TARGET_TYPE_CLUSTER"/>
      <field name="TARGET_TYPE_SERVER"/>
      <field name="TARGET_TYPE_VIRTUALHOST"/>
      <field name="TARGET_TYPE_VIRTUALTARGET"/>
    </class>
    <class name="UndeploymentException" members="concealed"/>
    <class name="WebLogicMBean">
      <method name="isCachingDisabled()"/>
      <method name="isRegistered()"/>
      <method name="getName()"/>
      <method name="getType()"/>
      <method name="getMBeanInfo()"/>
      <method name="setName(java.lang.String)"/>
      <method name="setParent(weblogic.management.WebLogicMBean)"/>
      <method name="getParent()"/>
      <method name="getObjectName()"/>
    </class>
    <class name="WebLogicObjectName">
      <method name="isAdmin()"/>
      <method name="isConfig()"/>
      <method name="isRuntime()"/>
      <method name="hashCode()"/>
      <method name="getLocation()"/>
      <method name="getName()"/>
      <method name="getType()"/>
      <method name="isAdmin(javax.management.ObjectName)"/>
      <method name="isConfig(javax.management.ObjectName)"/>
      <method name="isRuntime(javax.management.ObjectName)"/>
      <field name="LOCATION"/>
      <field name="NAME"/>
      <field name="TYPE"/>
      <field name="WEBLOGIC"/>
      <method name="extractDomain(java.lang.String)"/>
      <method name="addTypeAndParents(java.lang.String,java.lang.String[])"/>
    </class>
  </package>
  <package name="weblogic.management.commo">
    <class name="StandardInterface">
      <method name="getName()"/>
    </class>
    <class name="WebLogicMBeanMaker">
      <method name="mBeanName()"/>
      <method name="checkCompilerClass()"/>
      <field name="EXTENSIONS_XML_NAMESPACE"/>
      <field name="QNAME_COMPATIBILITY_PROP"/>
      <method name="main(java.lang.String[])"/>
    </class>
  </package>
  <package name="weblogic.management.configuration">
    <class name="AdminConsoleMBean">
      <method name="isProtectedCookieEnabled()"/>
      <method name="getMinThreads()"/>
      <method name="getSessionTimeout()"/>
      <method name="getCookieName()"/>
      <method name="getSSOLogoutURL()"/>
      <method name="setCookieName(java.lang.String)"/>
      <method name="setMinThreads(int)"/>
      <method name="setProtectedCookieEnabled(boolean)"/>
      <method name="setSSOLogoutURL(java.lang.String)"/>
      <method name="setSessionTimeout(int)"/>
    </class>
    <class name="AdminServerMBean">
      <method name="getName()"/>
      <method name="setName(java.lang.String)"/>
      <method name="getActiveDomain()"/>
      <method name="getServer()"/>
    </class>
    <class name="AppDeploymentMBean">
      <method name="isCacheInAppDirectory()"/>
      <method name="isValidateDDSecurityData()"/>
      <method name="getDeploymentPlan()"/>
      <method name="getDeploymentPlanExternalDescriptors()"/>
      <method name="createPlan()"/>
      <method name="createPlan(java.lang.String)"/>
      <method name="getAbsoluteAltDescriptorDir()"/>
      <method name="getAbsoluteAltDescriptorPath()"/>
      <method name="getAbsoluteInstallDir()"/>
      <method name="getAbsolutePlanDir()"/>
      <method name="getAbsolutePlanPath()"/>
      <method name="getAbsoluteSourcePath()"/>
      <method name="getAltDescriptorDir()"/>
      <method name="getApplicationIdentifier()"/>
      <method name="getApplicationName()"/>
      <method name="getInstallDir()"/>
      <method name="getName()"/>
      <method name="getPlanDir()"/>
      <method name="getPlanPath()"/>
      <method name="getPlanStagingMode()"/>
      <method name="getSecurityDDModel()"/>
      <method name="getSourcePath()"/>
      <method name="getStagingMode()"/>
      <method name="getVersionIdentifier()"/>
      <field name="DEFAULT_STAGE"/>
      <field name="EXTERNAL_STAGE"/>
      <field name="NO_STAGE"/>
      <field name="STAGE"/>
      <method name="setValidateDDSecurityData(boolean)"/>
    </class>
    <class name="ApplicationMBean">
      <method name="isTwoPhase()"/>
      <method name="staged(java.lang.String)"/>
      <method name="stagingEnabled(java.lang.String)"/>
      <method name="useStagingDirectory(java.lang.String)"/>
      <method name="getDeploymentTimeout()"/>
      <method name="getLoadOrder()"/>
      <method name="getAltDescriptorPath()"/>
      <method name="getAltWLSDescriptorPath()"/>
      <method name="getDeploymentType()"/>
      <method name="getFullPath()"/>
      <method name="getPath()"/>
      <method name="getStagingMode()"/>
      <method name="getStagingPath()"/>
      <method name="getStagedTargets()"/>
      <field name="TWOPHASE_DEFAULT"/>
      <field name="DEPLOYMENT_TIMEOUT"/>
      <field name="DEFAULT_STAGE"/>
      <field name="EXTERNAL_STAGE"/>
      <field name="NO_STAGE"/>
      <field name="STAGE"/>
      <field name="TYPE_COMPONENT"/>
      <field name="TYPE_EAR"/>
      <field name="TYPE_EXPLODED_COMPONENT"/>
      <field name="TYPE_EXPLODED_EAR"/>
      <field name="TYPE_UNKNOWN"/>
      <method name="addHandler(java.lang.Object)"/>
      <method name="destroyConnectorComponent(weblogic.management.configuration.ConnectorComponentMBean)"/>
      <method name="destroyEJBComponent(weblogic.management.configuration.EJBComponentMBean)"/>
      <method name="destroyWebServiceComponent(weblogic.management.configuration.WebServiceComponentMBean)"/>
      <method name="setAltDescriptorPath(java.lang.String)"/>
      <method name="setAltWLSDescriptorPath(java.lang.String)"/>
      <method name="setDeploymentTimeout(int)"/>
      <method name="setDeploymentType(java.lang.String)"/>
      <method name="setInternalApp(boolean)"/>
      <method name="setLoadOrder(int)"/>
      <method name="setPath(java.lang.String)"/>
      <method name="setStagingMode(java.lang.String)"/>
      <method name="setTwoPhase(boolean)"/>
      <method name="getComponents()"/>
      <method name="lookupConnectorComponent(java.lang.String)"/>
      <method name="getConnectorComponents()"/>
      <method name="lookupEJBComponent(java.lang.String)"/>
      <method name="getEJBComponents()"/>
      <method name="createWebAppComponent(java.lang.String)"/>
      <method name="lookupWebServiceComponent(java.lang.String)"/>
      <method name="getWebServiceComponents()"/>
    </class>
    <class name="AuthConfigProviderMBean" members="concealed"/>
    <class name="AuthModuleMBean">
      <method name="getClassName()"/>
      <method name="getModuleType()"/>
      <method name="getProperties()"/>
      <method name="setClassName(java.lang.String)"/>
      <method name="setModuleType(java.lang.String)"/>
      <method name="setProperties(java.util.Properties)"/>
    </class>
    <class name="BaseExecutorServiceMBean">
      <method name="getLongRunningPriority()"/>
      <method name="getMaxConcurrentLongRunningRequests()"/>
      <method name="getDispatchPolicy()"/>
    </class>
    <class name="BaseThreadFactoryMBean">
      <method name="getMaxConcurrentNewThreads()"/>
      <method name="getPriority()"/>
    </class>
    <class name="BasicDeploymentMBean">
      <method name="getDeploymentOrder()"/>
      <method name="getDeploymentPrincipalName()"/>
      <method name="getSourcePath()"/>
      <method name="destroySubDeployment(weblogic.management.configuration.SubDeploymentMBean)"/>
      <method name="setDeploymentOrder(int)"/>
      <method name="setDeploymentPrincipalName(java.lang.String)"/>
      <method name="setSourcePath(java.lang.String)"/>
      <method name="createSubDeployment(java.lang.String)"/>
      <method name="lookupSubDeployment(java.lang.String)"/>
      <method name="getSubDeployments()"/>
    </class>
    <class name="BatchConfigMBean">
      <method name="getSchemaName()"/>
      <method name="setSchemaName(java.lang.String)"/>
    </class>
    <class name="BridgeDestinationCommonMBean">
      <method name="getUserPasswordEncrypted()"/>
      <method name="getAdapterJNDIName()"/>
      <method name="getClasspath()"/>
      <method name="getUserName()"/>
      <method name="getUserPassword()"/>
      <field name="JMS_XA_ADAPTER_JNDI"/>
      <method name="setAdapterJNDIName(java.lang.String)"/>
      <method name="setClasspath(java.lang.String)"/>
      <method name="setUserName(java.lang.String)"/>
      <method name="setUserPassword(java.lang.String)"/>
      <method name="setUserPasswordEncrypted(byte[])"/>
    </class>
    <class name="BridgeDestinationMBean">
      <method name="getProperties()"/>
      <method name="setProperties(java.util.Properties)"/>
    </class>
    <class name="COMMBean">
      <method name="isApartmentThreaded()"/>
      <method name="isMemoryLoggingEnabled()"/>
      <method name="isNativeModeEnabled()"/>
      <method name="isPrefetchEnums()"/>
      <method name="isVerboseLoggingEnabled()"/>
      <method name="getNTAuthHost()"/>
      <method name="setApartmentThreaded(boolean)"/>
      <method name="setMemoryLoggingEnabled(boolean)"/>
      <method name="setNTAuthHost(java.lang.String)"/>
      <method name="setNativeModeEnabled(boolean)"/>
      <method name="setPrefetchEnums(boolean)"/>
      <method name="setVerboseLoggingEnabled(boolean)"/>
    </class>
    <class name="CacheAsyncListenersMBean">
      <method name="getEnabled()"/>
      <method name="isWorkManagerSet()"/>
      <method name="getWorkManager()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setWorkManager(java.lang.String)"/>
    </class>
    <class name="CacheExpirationMBean">
      <method name="isIdleTimeSet()"/>
      <method name="isTTLSet()"/>
      <method name="getIdleTime()"/>
      <method name="getTTL()"/>
      <method name="setIdleTime(long)"/>
      <method name="setTTL(long)"/>
    </class>
    <class name="CacheLoaderMBean">
      <method name="isCustomLoaderSet()"/>
      <method name="getCustomLoader()"/>
      <method name="setCustomLoader(java.lang.String)"/>
    </class>
    <class name="CacheMBean">
      <method name="isEvictionPolicySet()"/>
      <method name="isMaxCacheUnitsSet()"/>
      <method name="isWorkManagerSet()"/>
      <method name="getMaxCacheUnits()"/>
      <method name="getEvictionPolicy()"/>
      <method name="getJNDIName()"/>
      <method name="getWorkManager()"/>
      <field name="EVICTION_FIFO"/>
      <field name="EVICTION_LFU"/>
      <field name="EVICTION_LRU"/>
      <field name="EVICTION_NRU"/>
      <method name="setEvictionPolicy(java.lang.String)"/>
      <method name="setJNDIName(java.lang.String)"/>
      <method name="setMaxCacheUnits(int)"/>
      <method name="setWorkManager(java.lang.String)"/>
      <method name="getAsyncListeners()"/>
      <method name="getExpiration()"/>
      <method name="getLoader()"/>
      <method name="getStore()"/>
      <method name="getTransactional()"/>
    </class>
    <class name="CacheStoreMBean">
      <method name="isBufferMaxSizeSet()"/>
      <method name="isBufferWriteAttemptsSet()"/>
      <method name="isBufferWriteTimeoutSet()"/>
      <method name="isCustomStoreSet()"/>
      <method name="isStoreBatchSizeSet()"/>
      <method name="isWorkManagerSet()"/>
      <method name="isWritePolicySet()"/>
      <method name="getBufferMaxSize()"/>
      <method name="getBufferWriteAttempts()"/>
      <method name="getStoreBatchSize()"/>
      <method name="getCustomStore()"/>
      <method name="getWorkManager()"/>
      <method name="getWritePolicy()"/>
      <method name="getBufferWriteTimeout()"/>
      <field name="NONE"/>
      <field name="WRITE_BEHIND"/>
      <field name="WRITE_THROUGH"/>
      <method name="setBufferMaxSize(int)"/>
      <method name="setBufferWriteAttempts(int)"/>
      <method name="setBufferWriteTimeout(long)"/>
      <method name="setCustomStore(java.lang.String)"/>
      <method name="setStoreBatchSize(int)"/>
      <method name="setWorkManager(java.lang.String)"/>
      <method name="setWritePolicy(java.lang.String)"/>
    </class>
    <class name="CacheTransactionMBean">
      <method name="isConcurrencySet()"/>
      <method name="isIsolationLevelSet()"/>
      <method name="getConcurrency()"/>
      <method name="getIsolationLevel()"/>
      <field name="NONE"/>
      <field name="OPTIMISTIC"/>
      <field name="PESSIMISTIC"/>
      <field name="READ_COMMITTED"/>
      <field name="READ_UNCOMMITTED"/>
      <field name="REPEATABLE_READ"/>
      <method name="setConcurrency(java.lang.String)"/>
      <method name="setIsolationLevel(java.lang.String)"/>
    </class>
    <class name="CapacityMBean">
      <method name="getCount()"/>
      <method name="setCount(int)"/>
    </class>
    <class name="CdiContainerMBean">
      <method name="isImplicitBeanDiscoveryEnabled()"/>
      <method name="getPolicy()"/>
      <field name="POLICY_DISABLED"/>
      <field name="POLICY_ENABLED"/>
      <method name="setImplicitBeanDiscoveryEnabled(boolean)"/>
      <method name="setPolicy(java.lang.String)"/>
    </class>
    <class name="CertRevocCaMBean">
      <method name="isCheckingDisabled()"/>
      <method name="isCrlDpBackgroundDownloadEnabled()"/>
      <method name="isCrlDpEnabled()"/>
      <method name="isFailOnUnknownRevocStatus()"/>
      <method name="isOcspNonceEnabled()"/>
      <method name="isOcspResponseCacheEnabled()"/>
      <method name="getOcspTimeTolerance()"/>
      <method name="getCrlDpUrl()"/>
      <method name="getCrlDpUrlUsage()"/>
      <method name="getDistinguishedName()"/>
      <method name="getMethodOrder()"/>
      <method name="getOcspResponderCertIssuerName()"/>
      <method name="getOcspResponderCertSerialNumber()"/>
      <method name="getOcspResponderCertSubjectName()"/>
      <method name="getOcspResponderExplicitTrustMethod()"/>
      <method name="getOcspResponderUrl()"/>
      <method name="getOcspResponderUrlUsage()"/>
      <method name="getCrlDpDownloadTimeout()"/>
      <method name="getOcspResponseTimeout()"/>
      <method name="setCheckingDisabled(boolean)"/>
      <method name="setCrlDpBackgroundDownloadEnabled(boolean)"/>
      <method name="setCrlDpDownloadTimeout(long)"/>
      <method name="setCrlDpEnabled(boolean)"/>
      <method name="setCrlDpUrl(java.lang.String)"/>
      <method name="setCrlDpUrlUsage(java.lang.String)"/>
      <method name="setDistinguishedName(java.lang.String)"/>
      <method name="setFailOnUnknownRevocStatus(boolean)"/>
      <method name="setMethodOrder(java.lang.String)"/>
      <method name="setOcspNonceEnabled(boolean)"/>
      <method name="setOcspResponderCertIssuerName(java.lang.String)"/>
      <method name="setOcspResponderCertSerialNumber(java.lang.String)"/>
      <method name="setOcspResponderCertSubjectName(java.lang.String)"/>
      <method name="setOcspResponderExplicitTrustMethod(java.lang.String)"/>
      <method name="setOcspResponderUrl(java.lang.String)"/>
      <method name="setOcspResponderUrlUsage(java.lang.String)"/>
      <method name="setOcspResponseCacheEnabled(boolean)"/>
      <method name="setOcspResponseTimeout(long)"/>
      <method name="setOcspTimeTolerance(int)"/>
    </class>
    <class name="CertRevocMBean">
      <method name="isCheckingEnabled()"/>
      <method name="isCrlDpBackgroundDownloadEnabled()"/>
      <method name="isCrlDpEnabled()"/>
      <method name="isFailOnUnknownRevocStatus()"/>
      <method name="isOcspNonceEnabled()"/>
      <method name="isOcspResponseCacheEnabled()"/>
      <method name="getCrlCacheRefreshPeriodPercent()"/>
      <method name="getCrlCacheTypeLdapPort()"/>
      <method name="getCrlCacheTypeLdapSearchTimeout()"/>
      <method name="getOcspResponseCacheCapacity()"/>
      <method name="getOcspResponseCacheRefreshPeriodPercent()"/>
      <method name="getOcspTimeTolerance()"/>
      <method name="getCrlCacheType()"/>
      <method name="getCrlCacheTypeLdapHostname()"/>
      <method name="getMethodOrder()"/>
      <method name="getCrlDpDownloadTimeout()"/>
      <method name="getOcspResponseTimeout()"/>
      <method name="destroyCertRevocCa(weblogic.management.configuration.CertRevocCaMBean)"/>
      <method name="setCheckingEnabled(boolean)"/>
      <method name="setCrlCacheRefreshPeriodPercent(int)"/>
      <method name="setCrlCacheType(java.lang.String)"/>
      <method name="setCrlCacheTypeLdapHostname(java.lang.String)"/>
      <method name="setCrlCacheTypeLdapPort(int)"/>
      <method name="setCrlCacheTypeLdapSearchTimeout(int)"/>
      <method name="setCrlDpBackgroundDownloadEnabled(boolean)"/>
      <method name="setCrlDpDownloadTimeout(long)"/>
      <method name="setCrlDpEnabled(boolean)"/>
      <method name="setFailOnUnknownRevocStatus(boolean)"/>
      <method name="setMethodOrder(java.lang.String)"/>
      <method name="setOcspNonceEnabled(boolean)"/>
      <method name="setOcspResponseCacheCapacity(int)"/>
      <method name="setOcspResponseCacheEnabled(boolean)"/>
      <method name="setOcspResponseCacheRefreshPeriodPercent(int)"/>
      <method name="setOcspResponseTimeout(long)"/>
      <method name="setOcspTimeTolerance(int)"/>
      <method name="createCertRevocCa(java.lang.String)"/>
      <method name="lookupCertRevocCa(java.lang.String)"/>
      <method name="getCertRevocCas()"/>
    </class>
    <class name="ClassDeploymentMBean">
      <method name="getArguments()"/>
      <method name="getClassName()"/>
      <method name="setArguments(java.lang.String)"/>
      <method name="setClassName(java.lang.String)"/>
    </class>
    <class name="ClusterMBean">
      <method name="getMulticastDataEncryption()"/>
      <method name="getPersistSessionsOnShutdown()"/>
      <method name="getTxnAffinityEnabled()"/>
      <method name="isClientCertProxyEnabled()"/>
      <method name="isConcurrentSingletonActivationEnabled()"/>
      <method name="isHttpTraceSupportEnabled()"/>
      <method name="isMemberDeathDetectorEnabled()"/>
      <method name="isOneWayRmiForReplicationEnabled()"/>
      <method name="isReplicationTimeoutEnabled()"/>
      <method name="isSecureReplicationEnabled()"/>
      <method name="isSessionLazyDeserializationEnabled()"/>
      <method name="isSessionStateQueryProtocolEnabled()"/>
      <method name="isWeblogicPluginEnabled()"/>
      <method name="getAdditionalAutoMigrationAttempts()"/>
      <method name="getAsyncSessionQueueTimeout()"/>
      <method name="getDatabaseLeasingBasisConnectionRetryCount()"/>
      <method name="getFencingGracePeriodMillis()"/>
      <method name="getFrontendHTTPPort()"/>
      <method name="getFrontendHTTPSPort()"/>
      <method name="getGreedySessionFlushInterval()"/>
      <method name="getHealthCheckIntervalMillis()"/>
      <method name="getHealthCheckPeriodsUntilFencing()"/>
      <method name="getIdlePeriodsUntilTimeout()"/>
      <method name="getInterClusterCommLinkHealthCheckInterval()"/>
      <method name="getMemberWarmupTimeoutSeconds()"/>
      <method name="getMulticastBufferSize()"/>
      <method name="getMulticastPort()"/>
      <method name="getMulticastSendDelay()"/>
      <method name="getMulticastTTL()"/>
      <method name="getNumberOfServersInClusterAddress()"/>
      <method name="getServiceActivationRequestResponseTimeout()"/>
      <method name="getServiceAgeThresholdSeconds()"/>
      <method name="getSessionFlushInterval()"/>
      <method name="getSessionFlushThreshold()"/>
      <method name="getSessionStateQueryRequestTimeout()"/>
      <method name="getSingletonServiceRequestTimeout()"/>
      <method name="getAutoMigrationTableName()"/>
      <method name="getClusterAddress()"/>
      <method name="getClusterBroadcastChannel()"/>
      <method name="getClusterMessagingMode()"/>
      <method name="getClusterType()"/>
      <method name="getDefaultLoadAlgorithm()"/>
      <method name="getFrontendHost()"/>
      <method name="getJobSchedulerTableName()"/>
      <method name="getMigrationBasis()"/>
      <method name="getMulticastAddress()"/>
      <method name="getName()"/>
      <method name="getRemoteClusterAddress()"/>
      <method name="getReplicationChannel()"/>
      <method name="getSiteName()"/>
      <method name="getWANSessionPersistenceTableName()"/>
      <method name="getDatabaseLeasingBasisConnectionRetryDelay()"/>
      <method name="getMillisToSleepBetweenAutoMigrationAttempts()"/>
      <method name="setAdditionalAutoMigrationAttempts(int)"/>
      <method name="setAsyncSessionQueueTimeout(int)"/>
      <method name="setAutoMigrationTableName(java.lang.String)"/>
      <method name="setCandidateMachinesForMigratableServers(weblogic.management.configuration.MachineMBean[])"/>
      <method name="setClientCertProxyEnabled(boolean)"/>
      <method name="setClusterAddress(java.lang.String)"/>
      <method name="setClusterBroadcastChannel(java.lang.String)"/>
      <method name="setClusterMessagingMode(java.lang.String)"/>
      <method name="setClusterType(java.lang.String)"/>
      <method name="setCoherenceClusterSystemResource(weblogic.management.configuration.CoherenceClusterSystemResourceMBean)"/>
      <method name="setConcurrentSingletonActivationEnabled(boolean)"/>
      <method name="setDataSourceForAutomaticMigration(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="setDataSourceForJobScheduler(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="setDataSourceForSessionPersistence(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="setDatabaseLeasingBasisConnectionRetryCount(int)"/>
      <method name="setDatabaseLeasingBasisConnectionRetryDelay(long)"/>
      <method name="setDefaultLoadAlgorithm(java.lang.String)"/>
      <method name="setFencingGracePeriodMillis(int)"/>
      <method name="setFrontendHTTPPort(int)"/>
      <method name="setFrontendHTTPSPort(int)"/>
      <method name="setFrontendHost(java.lang.String)"/>
      <method name="setHealthCheckIntervalMillis(int)"/>
      <method name="setHealthCheckPeriodsUntilFencing(int)"/>
      <method name="setHttpTraceSupportEnabled(boolean)"/>
      <method name="setIdlePeriodsUntilTimeout(int)"/>
      <method name="setInterClusterCommLinkHealthCheckInterval(int)"/>
      <method name="setJobSchedulerTableName(java.lang.String)"/>
      <method name="setMemberWarmupTimeoutSeconds(int)"/>
      <method name="setMessageOrderingEnabled(boolean)"/>
      <method name="setMigrationBasis(java.lang.String)"/>
      <method name="setMillisToSleepBetweenAutoMigrationAttempts(long)"/>
      <method name="setMulticastAddress(java.lang.String)"/>
      <method name="setMulticastBufferSize(int)"/>
      <method name="setMulticastDataEncryption(boolean)"/>
      <method name="setMulticastPort(int)"/>
      <method name="setMulticastSendDelay(int)"/>
      <method name="setMulticastTTL(int)"/>
      <method name="setNumberOfServersInClusterAddress(int)"/>
      <method name="setOneWayRmiForReplicationEnabled(boolean)"/>
      <method name="setPersistSessionsOnShutdown(boolean)"/>
      <method name="setRemoteClusterAddress(java.lang.String)"/>
      <method name="setReplicationChannel(java.lang.String)"/>
      <method name="setReplicationTimeoutEnabled(boolean)"/>
      <method name="setSecureReplicationEnabled(boolean)"/>
      <method name="setServiceActivationRequestResponseTimeout(int)"/>
      <method name="setServiceAgeThresholdSeconds(int)"/>
      <method name="setSessionFlushInterval(int)"/>
      <method name="setSessionFlushThreshold(int)"/>
      <method name="setSessionStateQueryProtocolEnabled(boolean)"/>
      <method name="setSessionStateQueryRequestTimeout(int)"/>
      <method name="setSingletonServiceRequestTimeout(int)"/>
      <method name="setSiteName(java.lang.String)"/>
      <method name="setTxnAffinityEnabled(boolean)"/>
      <method name="setWANSessionPersistenceTableName(java.lang.String)"/>
      <method name="setWeblogicPluginEnabled(boolean)"/>
      <method name="getCoherenceClusterSystemResource()"/>
      <method name="getCoherenceTier()"/>
      <method name="getDatabaseLessLeasingBasis()"/>
      <method name="getDynamicServers()"/>
      <method name="getDataSourceForAutomaticMigration()"/>
      <method name="getDataSourceForJobScheduler()"/>
      <method name="getDataSourceForSessionPersistence()"/>
      <method name="getJTACluster()"/>
      <method name="getCandidateMachinesForMigratableServers()"/>
      <method name="getMigratableTargets()"/>
      <method name="getOverloadProtection()"/>
      <method name="getServers()"/>
    </class>
    <class name="CoherenceCacheConfigMBean">
      <method name="getCacheConfigurationFile()"/>
      <method name="getJNDIName()"/>
      <method name="getRuntimeCacheConfigurationUri()"/>
      <method name="importCacheConfigurationFile()"/>
      <method name="importCacheConfigurationFile(java.lang.String)"/>
      <method name="setCacheConfigurationFile(java.lang.String)"/>
      <method name="setJNDIName(java.lang.String)"/>
      <method name="setRuntimeCacheConfigurationUri(java.lang.String)"/>
    </class>
    <class name="CoherenceClusterSystemResourceMBean">
      <method name="isUsingCustomClusterConfigurationFile()"/>
      <method name="getFederationRemoteClusterListenPort()"/>
      <method name="getCustomClusterConfigurationFileName()"/>
      <method name="getDescriptorFileName()"/>
      <method name="getFederationRemoteClusterName()"/>
      <method name="getFederationTopology()"/>
      <method name="getName()"/>
      <method name="getPersistenceActiveDirectory()"/>
      <method name="getPersistenceDefaultMode()"/>
      <method name="getPersistenceSnapshotDirectory()"/>
      <method name="getPersistenceTrashDirectory()"/>
      <method name="getReportGroupFile()"/>
      <method name="getFederationRemoteParticipantHosts()"/>
      <method name="getCustomConfigFileLastUpdatedTime()"/>
      <method name="destroyCoherenceCacheConfig(weblogic.management.configuration.CoherenceCacheConfigMBean)"/>
      <method name="importCustomClusterConfigurationFile(java.lang.String)"/>
      <method name="setReportGroupFile(java.lang.String)"/>
      <method name="setUsingCustomClusterConfigurationFile(boolean)"/>
      <method name="getCoherenceClusterResource()"/>
      <method name="createCoherenceCacheConfig(java.lang.String)"/>
      <method name="lookupCoherenceCacheConfig(java.lang.String)"/>
      <method name="getCoherenceCacheConfigs()"/>
      <method name="getTargets()"/>
    </class>
    <class name="CoherenceManagementAddressProviderMBean">
      <method name="getPort()"/>
      <method name="getAddress()"/>
      <method name="setAddress(java.lang.String)"/>
      <method name="setPort(int)"/>
    </class>
    <class name="CoherenceManagementClusterMBean">
      <method name="getReportGroupFile()"/>
      <method name="destroyCoherenceManagementAddressProvider(weblogic.management.configuration.CoherenceManagementAddressProviderMBean)"/>
      <method name="setReportGroupFile(java.lang.String)"/>
    </class>
    <class name="CoherenceMemberConfigMBean">
      <method name="isCoherenceWebFederatedStorageEnabled()"/>
      <method name="isCoherenceWebLocalStorageEnabled()"/>
      <method name="isLocalStorageEnabled()"/>
      <method name="isUnicastPortAutoAdjust()"/>
      <method name="getUnicastListenPort()"/>
      <method name="getUnicastPortAutoAdjustAttempts()"/>
      <method name="getRackName()"/>
      <method name="getRoleName()"/>
      <method name="getSiteName()"/>
      <method name="getUnicastListenAddress()"/>
      <method name="setCoherenceWebFederatedStorageEnabled(boolean)"/>
      <method name="setCoherenceWebLocalStorageEnabled(boolean)"/>
      <method name="setLocalStorageEnabled(boolean)"/>
      <method name="setManagementProxy(boolean)"/>
      <method name="setRackName(java.lang.String)"/>
      <method name="setRoleName(java.lang.String)"/>
      <method name="setSiteName(java.lang.String)"/>
      <method name="setUnicastListenAddress(java.lang.String)"/>
      <method name="setUnicastListenPort(int)"/>
      <method name="setUnicastPortAutoAdjust(boolean)"/>
      <method name="setUnicastPortAutoAdjustAttempts(int)"/>
    </class>
    <class name="CoherencePartitionCacheConfigMBean">
      <method name="isShared()"/>
      <method name="getApplicationName()"/>
      <method name="getCacheName()"/>
      <method name="destroyCoherencePartitionCacheProperty(weblogic.management.configuration.CoherencePartitionCachePropertyMBean)"/>
      <method name="setApplicationName(java.lang.String)"/>
      <method name="setCacheName(java.lang.String)"/>
      <method name="setShared(boolean)"/>
      <method name="createCoherencePartitionCacheProperty(java.lang.String)"/>
      <method name="lookupCoherencePartitionCacheProperty(java.lang.String)"/>
      <method name="getCoherencePartitionCacheProperties()"/>
    </class>
    <class name="CoherencePartitionCachePropertyMBean">
      <method name="getValue()"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="CoherenceServerMBean">
      <method name="isUnicastPortAutoAdjust()"/>
      <method name="getUnicastListenPort()"/>
      <method name="getUnicastPortAutoAdjustAttempts()"/>
      <method name="getUnicastListenAddress()"/>
      <method name="setCoherenceClusterSystemResource(weblogic.management.configuration.CoherenceClusterSystemResourceMBean)"/>
      <method name="setUnicastListenAddress(java.lang.String)"/>
      <method name="setUnicastListenPort(int)"/>
      <method name="setUnicastPortAutoAdjust(boolean)"/>
      <method name="setUnicastPortAutoAdjustAttempts(int)"/>
      <method name="getCoherenceClusterSystemResource()"/>
      <method name="getCoherenceServerStart()"/>
    </class>
    <class name="CoherenceServerStartMBean" members="concealed"/>
    <class name="CoherenceTierMBean">
      <method name="isCoherenceWebFederatedStorageEnabled()"/>
      <method name="isCoherenceWebLocalStorageEnabled()"/>
      <method name="isLocalStorageEnabled()"/>
      <method name="setCoherenceWebFederatedStorageEnabled(boolean)"/>
      <method name="setCoherenceWebLocalStorageEnabled(boolean)"/>
      <method name="setLocalStorageEnabled(boolean)"/>
    </class>
    <class name="CommonLogMBean">
      <method name="isStdoutLogStack()"/>
      <method name="getLogFileSeverity()"/>
      <method name="getLoggerSeverity()"/>
      <method name="getStdoutFormat()"/>
      <method name="getStdoutSeverity()"/>
      <method name="getLoggerSeverityProperties()"/>
      <field name="STDOUT_NOID"/>
      <field name="STDOUT_STANDARD"/>
      <method name="setLogFileSeverity(java.lang.String)"/>
      <method name="setLoggerSeverity(java.lang.String)"/>
      <method name="setLoggerSeverityProperties(java.util.Properties)"/>
      <method name="setStdoutFormat(java.lang.String)"/>
      <method name="setStdoutLogStack(boolean)"/>
      <method name="setStdoutSeverity(java.lang.String)"/>
    </class>
    <class name="ComponentMBean">
      <method name="activated(weblogic.management.configuration.TargetMBean)"/>
      <method name="getURI()"/>
      <method name="setApplication(weblogic.management.configuration.ApplicationMBean)"/>
      <method name="setURI(java.lang.String)"/>
      <method name="getApplication()"/>
      <method name="getActivatedTargets()"/>
    </class>
    <class name="ConfigurationException" members="concealed"/>
    <class name="ConfigurationExtensionMBean">
      <method name="getDescriptorFileName()"/>
      <method name="setDescriptorFileName(java.lang.String)"/>
    </class>
    <class name="ConfigurationMBean">
      <method name="isDynamicallyCreated()"/>
      <method name="isInherited(java.lang.String)"/>
      <method name="isSet(java.lang.String)"/>
      <method name="getName()"/>
      <method name="getNotes()"/>
      <method name="getInheritedProperties(java.lang.String[])"/>
      <method name="getId()"/>
      <field name="DEFAULT_EMPTY_BYTE_ARRAY"/>
      <method name="freezeCurrentValue(java.lang.String)"/>
      <method name="restoreDefaultValue(java.lang.String)"/>
      <method name="setComments(java.lang.String)"/>
      <method name="setDefaultedMBean(boolean)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setNotes(java.lang.String)"/>
      <method name="setPersistenceEnabled(boolean)"/>
      <method name="unSet(java.lang.String)"/>
    </class>
    <class name="ConfigurationPropertiesMBean" members="concealed"/>
    <class name="ConfigurationPropertyMBean">
      <method name="isEncryptValueRequired()"/>
      <method name="getEncryptedValueEncrypted()"/>
      <method name="getEncryptedValue()"/>
      <method name="getValue()"/>
      <method name="setEncryptValueRequired(boolean)"/>
      <method name="setEncryptedValue(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="ConnectorComponentMBean" members="concealed"/>
    <class name="ContextCaseMBean">
      <method name="getGroupName()"/>
      <method name="getRequestClassName()"/>
      <method name="getUserName()"/>
      <method name="destroyFairShareRequestClass(weblogic.management.configuration.FairShareRequestClassMBean)"/>
      <method name="destroyResponseTimeRequestClass(weblogic.management.configuration.ResponseTimeRequestClassMBean)"/>
      <method name="setGroupName(java.lang.String)"/>
      <method name="setRequestClassName(java.lang.String)"/>
      <method name="setUserName(java.lang.String)"/>
      <method name="createFairShareRequestClass(java.lang.String)"/>
      <method name="getFairShareRequestClass()"/>
      <method name="createResponseTimeRequestClass(java.lang.String)"/>
      <method name="getResponseTimeRequestClass()"/>
    </class>
    <class name="ContextRequestClassMBean">
      <method name="destroyContextCase(weblogic.management.configuration.ContextCaseMBean)"/>
      <method name="createContextCase(java.lang.String)"/>
      <method name="getContextCases()"/>
    </class>
    <class name="CpuUtilizationMBean" members="concealed"/>
    <class name="CustomAuthConfigProviderMBean">
      <method name="getClassName()"/>
      <method name="getProperties()"/>
      <method name="setClassName(java.lang.String)"/>
      <method name="setProperties(java.util.Properties)"/>
    </class>
    <class name="CustomResourceMBean">
      <method name="getDescriptorBeanClass()"/>
      <method name="getResourceClass()"/>
      <method name="setDescriptorBeanClass(java.lang.String)"/>
      <method name="setResourceClass(java.lang.String)"/>
      <method name="getCustomResource()"/>
    </class>
    <class name="DataSourceLogFileMBean">
      <method name="getFileName()"/>
      <method name="setFileName(java.lang.String)"/>
    </class>
    <class name="DataSourceMBean">
      <method name="getDefaultDatasource()"/>
      <method name="getRmiJDBCSecurity()"/>
      <field name="RMIJDBC_COMPATIBILITY"/>
      <field name="RMIJDBC_SECURE"/>
      <method name="setDefaultDatasource(java.lang.String)"/>
      <method name="setRmiJDBCSecurity(java.lang.String)"/>
      <method name="getDataSourceLogFile()"/>
    </class>
    <class name="DataSourcePartitionMBean">
      <method name="getDefaultDatasource()"/>
      <method name="setDefaultDatasource(java.lang.String)"/>
    </class>
    <class name="DatabaseLessLeasingBasisMBean">
      <method name="getMemberDiscoveryTimeout()"/>
      <method name="setMemberDiscoveryTimeout(int)"/>
    </class>
    <class name="DatasourceInterceptorMBean">
      <method name="getConnectionQuota()"/>
      <method name="getConnectionUrlsPattern()"/>
      <method name="setConnectionQuota(int)"/>
      <method name="setConnectionUrlsPattern(java.lang.String)"/>
    </class>
    <class name="DebugMBean">
      <method name="destroyDebugScope(weblogic.management.configuration.DebugScopeMBean)"/>
      <method name="createDebugScope(java.lang.String)"/>
      <method name="lookupDebugScope(java.lang.String)"/>
      <method name="getDebugScopes()"/>
    </class>
    <class name="DebugPatchesMBean">
      <method name="getDebugPatchDirectory()"/>
      <field name="DEFAULT_DEBUG_PATCHES_DIRECTORY"/>
      <method name="setDebugPatchDirectory(java.lang.String)"/>
    </class>
    <class name="DebugScopeMBean">
      <method name="isEnabled()"/>
      <method name="getName()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="DefaultFileStoreMBean" members="concealed"/>
    <class name="DeploymentConfigurationMBean">
      <method name="isRestageOnlyOnRedeploy()"/>
      <method name="getDeploymentServiceMessageRetryCount()"/>
      <method name="getDeploymentServiceMessageRetryInterval()"/>
      <method name="getLongRunningRetireThreadDumpCount()"/>
      <method name="getMaxRetiredTasks()"/>
      <method name="getLongRunningRetireThreadDumpInterval()"/>
      <method name="getLongRunningRetireThreadDumpStartTime()"/>
      <method name="setDeploymentServiceMessageRetryCount(int)"/>
      <method name="setDeploymentServiceMessageRetryInterval(int)"/>
      <method name="setLongRunningRetireThreadDumpCount(int)"/>
      <method name="setLongRunningRetireThreadDumpInterval(long)"/>
      <method name="setLongRunningRetireThreadDumpStartTime(long)"/>
      <method name="setMaxRetiredTasks(int)"/>
      <method name="setRestageOnlyOnRedeploy(boolean)"/>
      <method name="getDeploymentValidationPlugin()"/>
    </class>
    <class name="DeploymentMBean">
      <method name="addTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="removeTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="getDeploymentOrder()"/>
      <field name="DEFAULT_ORDER"/>
      <field name="MAX_ORDER"/>
      <field name="MIN_ORDER"/>
      <method name="setDeploymentOrder(int)"/>
      <method name="setTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="getTargets()"/>
    </class>
    <class name="DeploymentValidationPluginMBean">
      <method name="getFactoryClassname()"/>
      <method name="destroyParameter(weblogic.management.configuration.ParameterMBean)"/>
      <method name="setFactoryClassname(java.lang.String)"/>
      <method name="createParameter(java.lang.String)"/>
      <method name="getParameters()"/>
    </class>
    <class name="DeterminerCandidateResourceInfoVBean">
      <method name="isDeterminer()"/>
      <method name="getDisplayName()"/>
      <method name="getInternalName()"/>
      <method name="getResourceType()"/>
    </class>
    <class name="DomainMBean">
      <method name="arePartitionsPresent()"/>
      <method name="discoverManagedServer(java.lang.String)"/>
      <method name="isAdministrationMBeanAuditingEnabled()"/>
      <method name="isAdministrationPortEnabled()"/>
      <method name="isAutoConfigurationSaveEnabled()"/>
      <method name="isClusterConstraintsEnabled()"/>
      <method name="isConfigBackupEnabled()"/>
      <method name="isConsoleEnabled()"/>
      <method name="isDBPassiveMode()"/>
      <method name="isEnableEECompliantClassloadingForEmbeddedAdapters()"/>
      <method name="isExalogicOptimizationsEnabled()"/>
      <method name="isInternalAppsDeployOnDemandEnabled()"/>
      <method name="isJavaServiceConsoleEnabled()"/>
      <method name="isJavaServiceEnabled()"/>
      <method name="isProductionModeEnabled()"/>
      <method name="getAdministrationPort()"/>
      <method name="getArchiveConfigurationCount()"/>
      <method name="getDBPassiveModeGracePeriodSeconds()"/>
      <method name="getMaxConcurrentLongRunningRequests()"/>
      <method name="getMaxConcurrentNewThreads()"/>
      <method name="getServerMigrationHistorySize()"/>
      <method name="getServiceMigrationHistorySize()"/>
      <method name="getDisconnectedManagedServers()"/>
      <method name="getAdminServerName()"/>
      <method name="getAdministrationProtocol()"/>
      <method name="getBatchJobsDataSourceJndiName()"/>
      <method name="getBatchJobsExecutorServiceName()"/>
      <method name="getConfigurationAuditType()"/>
      <method name="getConfigurationVersion()"/>
      <method name="getConsoleContextPath()"/>
      <method name="getConsoleExtensionDirectory()"/>
      <method name="getDomainVersion()"/>
      <method name="getName()"/>
      <method name="getPartitionUriSpace()"/>
      <method name="getRootDirectory()"/>
      <method name="getSiteName()"/>
      <method name="kill()"/>
      <method name="start()"/>
      <method name="getLastModificationTime()"/>
      <field name="CONFIG_CHANGE_AUDIT"/>
      <field name="CONFIG_CHANGE_LOG"/>
      <field name="CONFIG_CHANGE_LOG_AND_AUDIT"/>
      <field name="CONFIG_CHANGE_NONE"/>
      <field name="UPLOAD_DEFAULT"/>
      <method name="destroyApplication(weblogic.management.configuration.ApplicationMBean)"/>
      <method name="destroyBridgeDestination(weblogic.management.configuration.BridgeDestinationMBean)"/>
      <method name="destroyCluster(weblogic.management.configuration.ClusterMBean)"/>
      <method name="destroyCoherenceClusterSystemResource(weblogic.management.configuration.CoherenceClusterSystemResourceMBean)"/>
      <method name="destroyCoherenceManagementCluster(weblogic.management.configuration.CoherenceManagementClusterMBean)"/>
      <method name="destroyCoherenceServer(weblogic.management.configuration.CoherenceServerMBean)"/>
      <method name="destroyCustomResource(weblogic.management.configuration.CustomResourceMBean)"/>
      <method name="destroyFileStore(weblogic.management.configuration.FileStoreMBean)"/>
      <method name="destroyForeignJMSServer(weblogic.management.configuration.ForeignJMSServerMBean)"/>
      <method name="destroyForeignJNDIProvider(weblogic.management.configuration.ForeignJNDIProviderMBean)"/>
      <method name="destroyJDBCStore(weblogic.management.configuration.JDBCStoreMBean)"/>
      <method name="destroyJDBCSystemResource(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="destroyJMSBridgeDestination(weblogic.management.configuration.JMSBridgeDestinationMBean)"/>
      <method name="destroyJMSConnectionFactory(weblogic.management.configuration.JMSConnectionFactoryMBean)"/>
      <method name="destroyJMSDestinationKey(weblogic.management.configuration.JMSDestinationKeyMBean)"/>
      <method name="destroyJMSDistributedQueue(weblogic.management.configuration.JMSDistributedQueueMBean)"/>
      <method name="destroyJMSDistributedQueueMember(weblogic.management.configuration.JMSDistributedQueueMemberMBean)"/>
      <method name="destroyJMSDistributedTopic(weblogic.management.configuration.JMSDistributedTopicMBean)"/>
      <method name="destroyJMSDistributedTopicMember(weblogic.management.configuration.JMSDistributedTopicMemberMBean)"/>
      <method name="destroyJMSFileStore(weblogic.management.configuration.JMSFileStoreMBean)"/>
      <method name="destroyJMSInteropModule(weblogic.management.configuration.JMSInteropModuleMBean)"/>
      <method name="destroyJMSJDBCStore(weblogic.management.configuration.JMSJDBCStoreMBean)"/>
      <method name="destroyJMSQueue(weblogic.management.configuration.JMSQueueMBean)"/>
      <method name="destroyJMSServer(weblogic.management.configuration.JMSServerMBean)"/>
      <method name="destroyJMSSessionPool(weblogic.management.configuration.JMSSessionPoolMBean)"/>
      <method name="destroyJMSSystemResource(weblogic.management.configuration.JMSSystemResourceMBean)"/>
      <method name="destroyJMSTemplate(weblogic.management.configuration.JMSTemplateMBean)"/>
      <method name="destroyJMSTopic(weblogic.management.configuration.JMSTopicMBean)"/>
      <method name="destroyJoltConnectionPool(weblogic.management.configuration.JoltConnectionPoolMBean)"/>
      <method name="destroyLogFilter(weblogic.management.configuration.LogFilterMBean)"/>
      <method name="destroyMachine(weblogic.management.configuration.MachineMBean)"/>
      <method name="destroyMailSession(weblogic.management.configuration.MailSessionMBean)"/>
      <method name="destroyManagedExecutorServiceTemplate(weblogic.management.configuration.ManagedExecutorServiceTemplateMBean)"/>
      <method name="destroyManagedScheduledExecutorServiceTemplate(weblogic.management.configuration.ManagedScheduledExecutorServiceTemplateMBean)"/>
      <method name="destroyManagedThreadFactoryTemplate(weblogic.management.configuration.ManagedThreadFactoryTemplateMBean)"/>
      <method name="destroyMessagingBridge(weblogic.management.configuration.MessagingBridgeMBean)"/>
      <method name="destroyMigratableTarget(weblogic.management.configuration.MigratableTargetMBean)"/>
      <method name="destroyNetworkChannel(weblogic.management.configuration.NetworkChannelMBean)"/>
      <method name="destroyOsgiFramework(weblogic.management.configuration.OsgiFrameworkMBean)"/>
      <method name="destroyPartition(weblogic.management.configuration.PartitionMBean)"/>
      <method name="destroyPartitionWorkManager(weblogic.management.configuration.PartitionWorkManagerMBean)"/>
      <method name="destroyPathService(weblogic.management.configuration.PathServiceMBean)"/>
      <method name="destroyReplicatedStore(weblogic.management.configuration.ReplicatedStoreMBean)"/>
      <method name="destroyResourceGroup(weblogic.management.configuration.ResourceGroupMBean)"/>
      <method name="destroyResourceGroupTemplate(weblogic.management.configuration.ResourceGroupTemplateMBean)"/>
      <method name="destroySAFAgent(weblogic.management.configuration.SAFAgentMBean)"/>
      <method name="destroySNMPAgentDeployment(weblogic.management.configuration.SNMPAgentDeploymentMBean)"/>
      <method name="destroyServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="destroyServerTemplate(weblogic.management.configuration.ServerTemplateMBean)"/>
      <method name="destroyShutdownClass(weblogic.management.configuration.ShutdownClassMBean)"/>
      <method name="destroySingletonService(weblogic.management.configuration.SingletonServiceMBean)"/>
      <method name="destroyStartupClass(weblogic.management.configuration.StartupClassMBean)"/>
      <method name="destroySystemComponent(weblogic.management.configuration.SystemComponentMBean)"/>
      <method name="destroyVirtualHost(weblogic.management.configuration.VirtualHostMBean)"/>
      <method name="destroyVirtualTarget(weblogic.management.configuration.VirtualTargetMBean)"/>
      <method name="destroyWLDFSystemResource(weblogic.management.configuration.WLDFSystemResourceMBean)"/>
      <method name="destroyWSReliableDeliveryPolicy(weblogic.management.configuration.WSReliableDeliveryPolicyMBean)"/>
      <method name="destroyWTCServer(weblogic.management.configuration.WTCServerMBean)"/>
      <method name="destroyWebserviceSecurity(weblogic.management.configuration.WebserviceSecurityMBean)"/>
      <method name="destroyXMLEntityCache(weblogic.management.configuration.XMLEntityCacheMBean)"/>
      <method name="destroyXMLRegistry(weblogic.management.configuration.XMLRegistryMBean)"/>
      <method name="discoverManagedServers()"/>
      <method name="setAdminServerName(java.lang.String)"/>
      <method name="setAdministrationMBeanAuditingEnabled(boolean)"/>
      <method name="setAdministrationPort(int)"/>
      <method name="setAdministrationPortEnabled(boolean)"/>
      <method name="setAdministrationProtocol(java.lang.String)"/>
      <method name="setArchiveConfigurationCount(int)"/>
      <method name="setAutoConfigurationSaveEnabled(boolean)"/>
      <method name="setBatchJobsDataSourceJndiName(java.lang.String)"/>
      <method name="setBatchJobsExecutorServiceName(java.lang.String)"/>
      <method name="setClusterConstraintsEnabled(boolean)"/>
      <method name="setConfigBackupEnabled(boolean)"/>
      <method name="setConfigurationAuditType(java.lang.String)"/>
      <method name="setConfigurationVersion(java.lang.String)"/>
      <method name="setConsoleContextPath(java.lang.String)"/>
      <method name="setConsoleEnabled(boolean)"/>
      <method name="setConsoleExtensionDirectory(java.lang.String)"/>
      <method name="setDBPassiveMode(boolean)"/>
      <method name="setDBPassiveModeGracePeriodSeconds(int)"/>
      <method name="setDomainVersion(java.lang.String)"/>
      <method name="setEnableEECompliantClassloadingForEmbeddedAdapters(boolean)"/>
      <method name="setExalogicOptimizationsEnabled(boolean)"/>
      <method name="setInternalAppsDeployOnDemandEnabled(boolean)"/>
      <method name="setJavaServiceConsoleEnabled(boolean)"/>
      <method name="setJavaServiceEnabled(boolean)"/>
      <method name="setMaxConcurrentLongRunningRequests(int)"/>
      <method name="setMaxConcurrentNewThreads(int)"/>
      <method name="setMsgIdPrefixCompatibilityEnabled(boolean)"/>
      <method name="setPartitionUriSpace(java.lang.String)"/>
      <method name="setProductionModeEnabled(boolean)"/>
      <method name="setServerMigrationHistorySize(int)"/>
      <method name="setServiceMigrationHistorySize(int)"/>
      <method name="setSiteName(java.lang.String)"/>
      <method name="getAdminConsole()"/>
      <method name="lookupAppDeployment(java.lang.String)"/>
      <method name="lookupInternalAppDeployment(java.lang.String)"/>
      <method name="getAppDeployments()"/>
      <method name="getInternalAppDeployments()"/>
      <method name="createApplication(java.lang.String)"/>
      <method name="lookupApplication(java.lang.String)"/>
      <method name="getApplications()"/>
      <method name="getBatchConfig()"/>
      <method name="createBridgeDestination(java.lang.String)"/>
      <method name="lookupBridgeDestination(java.lang.String)"/>
      <method name="getBridgeDestinations()"/>
      <method name="getCdiContainer()"/>
      <method name="createCluster(java.lang.String)"/>
      <method name="lookupCluster(java.lang.String)"/>
      <method name="getClusters()"/>
      <method name="createCoherenceClusterSystemResource(java.lang.String)"/>
      <method name="lookupCoherenceClusterSystemResource(java.lang.String)"/>
      <method name="getCoherenceClusterSystemResources()"/>
      <method name="createCoherenceManagementCluster(java.lang.String)"/>
      <method name="lookupCoherenceManagementCluster(java.lang.String)"/>
      <method name="getCoherenceManagementClusters()"/>
      <method name="createCoherenceServer(java.lang.String)"/>
      <method name="lookupCoherenceServer(java.lang.String)"/>
      <method name="getCoherenceServers()"/>
      <method name="findConfigBeansWithTags(java.lang.String,boolean,java.lang.String[])"/>
      <method name="findConfigBeansWithTags(java.lang.String,java.lang.String[])"/>
      <method name="createCustomResource(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createCustomResource(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="lookupCustomResource(java.lang.String)"/>
      <method name="getCustomResources()"/>
      <method name="getDeploymentConfiguration()"/>
      <method name="getDeployments()"/>
      <method name="getEmbeddedLDAP()"/>
      <method name="createFileStore(java.lang.String)"/>
      <method name="lookupFileStore(java.lang.String)"/>
      <method name="getFileStores()"/>
      <method name="createForeignJMSServer(java.lang.String)"/>
      <method name="createForeignJNDIProvider(java.lang.String)"/>
      <method name="lookupForeignJNDIProvider(java.lang.String)"/>
      <method name="getForeignJNDIProviders()"/>
      <method name="createJDBCStore(java.lang.String)"/>
      <method name="lookupJDBCStore(java.lang.String)"/>
      <method name="getJDBCStores()"/>
      <method name="createJDBCSystemResource(java.lang.String)"/>
      <method name="createJDBCSystemResource(java.lang.String,java.lang.String)"/>
      <method name="lookupJDBCSystemResource(java.lang.String)"/>
      <method name="getJDBCSystemResources()"/>
      <method name="createJMSBridgeDestination(java.lang.String)"/>
      <method name="lookupJMSBridgeDestination(java.lang.String)"/>
      <method name="getJMSBridgeDestinations()"/>
      <method name="createJMSConnectionFactory(java.lang.String)"/>
      <method name="lookupJMSConnectionFactory(java.lang.String)"/>
      <method name="getJMSConnectionFactories()"/>
      <method name="createJMSDestinationKey(java.lang.String)"/>
      <method name="lookupJMSDestinationKey(java.lang.String)"/>
      <method name="getJMSDestinationKeys()"/>
      <method name="lookupJMSDestination(java.lang.String)"/>
      <method name="getJMSDestinations()"/>
      <method name="createJMSDistributedQueue(java.lang.String)"/>
      <method name="lookupJMSDistributedQueue(java.lang.String)"/>
      <method name="getJMSDistributedQueues()"/>
      <method name="createJMSDistributedQueueMember(java.lang.String)"/>
      <method name="createJMSDistributedQueueMember(java.lang.String,weblogic.management.configuration.JMSDistributedQueueMemberMBean)"/>
      <method name="lookupJMSDistributedQueueMember(java.lang.String)"/>
      <method name="getJMSDistributedQueueMembers()"/>
      <method name="createJMSDistributedTopic(java.lang.String)"/>
      <method name="lookupJMSDistributedTopic(java.lang.String)"/>
      <method name="getJMSDistributedTopics()"/>
      <method name="createJMSDistributedTopicMember(java.lang.String)"/>
      <method name="createJMSDistributedTopicMember(java.lang.String,weblogic.management.configuration.JMSDistributedTopicMemberMBean)"/>
      <method name="lookupJMSDistributedTopicMember(java.lang.String)"/>
      <method name="getJMSDistributedTopicMembers()"/>
      <method name="createJMSFileStore(java.lang.String)"/>
      <method name="lookupJMSFileStore(java.lang.String)"/>
      <method name="getJMSFileStores()"/>
      <method name="createJMSInteropModule(java.lang.String)"/>
      <method name="lookupJMSInteropModule(java.lang.String)"/>
      <method name="getJMSInteropModules()"/>
      <method name="createJMSJDBCStore(java.lang.String)"/>
      <method name="lookupJMSJDBCStore(java.lang.String)"/>
      <method name="getJMSJDBCStores()"/>
      <method name="createJMSQueue(java.lang.String)"/>
      <method name="createJMSQueue(java.lang.String,weblogic.management.configuration.JMSQueueMBean)"/>
      <method name="lookupJMSQueue(java.lang.String)"/>
      <method name="getJMSQueues()"/>
      <method name="createJMSServer(java.lang.String)"/>
      <method name="lookupJMSServer(java.lang.String)"/>
      <method name="getJMSServers()"/>
      <method name="createJMSSessionPool(java.lang.String)"/>
      <method name="createJMSSessionPool(java.lang.String,weblogic.management.configuration.JMSSessionPoolMBean)"/>
      <method name="lookupJMSSessionPool(java.lang.String)"/>
      <method name="getJMSSessionPools()"/>
      <method name="lookupJMSStore(java.lang.String)"/>
      <method name="getJMSStores()"/>
      <method name="createJMSSystemResource(java.lang.String)"/>
      <method name="createJMSSystemResource(java.lang.String,java.lang.String)"/>
      <method name="lookupJMSSystemResource(java.lang.String)"/>
      <method name="getJMSSystemResources()"/>
      <method name="createJMSTemplate(java.lang.String)"/>
      <method name="lookupJMSTemplate(java.lang.String)"/>
      <method name="getJMSTemplates()"/>
      <method name="createJMSTopic(java.lang.String)"/>
      <method name="createJMSTopic(java.lang.String,weblogic.management.configuration.JMSTopicMBean)"/>
      <method name="lookupJMSTopic(java.lang.String)"/>
      <method name="getJMSTopics()"/>
      <method name="getJMX()"/>
      <method name="getJPA()"/>
      <method name="getJTA()"/>
      <method name="createJoltConnectionPool(java.lang.String)"/>
      <method name="lookupJoltConnectionPool(java.lang.String)"/>
      <method name="getJoltConnectionPools()"/>
      <method name="lookupInternalLibrary(java.lang.String)"/>
      <method name="lookupLibrary(java.lang.String)"/>
      <method name="getInternalLibraries()"/>
      <method name="getLibraries()"/>
      <method name="getLifecycleManagerConfig()"/>
      <method name="createLogFilter(java.lang.String)"/>
      <method name="lookupLogFilter(java.lang.String)"/>
      <method name="getLogFilters()"/>
      <method name="getLog()"/>
      <method name="createMachine(java.lang.String)"/>
      <method name="lookupMachine(java.lang.String)"/>
      <method name="getMachines()"/>
      <method name="createMailSession(java.lang.String)"/>
      <method name="lookupMailSession(java.lang.String)"/>
      <method name="getMailSessions()"/>
      <method name="createManagedExecutorServiceTemplate(java.lang.String)"/>
      <method name="lookupManagedExecutorServiceTemplate(java.lang.String)"/>
      <method name="getManagedExecutorServiceTemplates()"/>
      <method name="createManagedScheduledExecutorServiceTemplate(java.lang.String)"/>
      <method name="lookupManagedScheduledExecutorServiceTemplate(java.lang.String)"/>
      <method name="getManagedScheduledExecutorServiceTemplates()"/>
      <method name="createManagedThreadFactoryTemplate(java.lang.String)"/>
      <method name="lookupManagedThreadFactoryTemplate(java.lang.String)"/>
      <method name="getManagedThreadFactoryTemplates()"/>
      <method name="createMessagingBridge(java.lang.String)"/>
      <method name="lookupMessagingBridge(java.lang.String)"/>
      <method name="getMessagingBridges()"/>
      <method name="createMigratableTarget(java.lang.String)"/>
      <method name="lookupMigratableTarget(java.lang.String)"/>
      <method name="getMigratableTargets()"/>
      <method name="createNetworkChannel(java.lang.String)"/>
      <method name="lookupNetworkChannel(java.lang.String)"/>
      <method name="getNetworkChannels()"/>
      <method name="getOptionalFeatureDeployment()"/>
      <method name="createOsgiFramework(java.lang.String)"/>
      <method name="lookupOsgiFramework(java.lang.String)"/>
      <method name="getOsgiFrameworks()"/>
      <method name="createPartition(java.lang.String)"/>
      <method name="findPartitionByID(java.lang.String)"/>
      <method name="lookupPartition(java.lang.String)"/>
      <method name="getPartitions()"/>
      <method name="createPartitionWorkManager(java.lang.String)"/>
      <method name="lookupPartitionWorkManager(java.lang.String)"/>
      <method name="getPartitionWorkManagers()"/>
      <method name="createPathService(java.lang.String)"/>
      <method name="lookupPathService(java.lang.String)"/>
      <method name="getPathServices()"/>
      <method name="createReplicatedStore(java.lang.String)"/>
      <method name="lookupReplicatedStore(java.lang.String)"/>
      <method name="getReplicatedStores()"/>
      <method name="createResourceGroup(java.lang.String)"/>
      <method name="lookupResourceGroup(java.lang.String)"/>
      <method name="getResourceGroups()"/>
      <method name="createResourceGroupTemplate(java.lang.String)"/>
      <method name="lookupResourceGroupTemplate(java.lang.String)"/>
      <method name="getResourceGroupTemplates()"/>
      <method name="getResourceManagement()"/>
      <method name="getRestfulManagementServices()"/>
      <method name="createSAFAgent(java.lang.String)"/>
      <method name="lookupSAFAgent(java.lang.String)"/>
      <method name="getSAFAgents()"/>
      <method name="createSNMPAgentDeployment(java.lang.String)"/>
      <method name="lookupSNMPAgentDeployment(java.lang.String)"/>
      <method name="getSNMPAgentDeployments()"/>
      <method name="getSNMPAgent()"/>
      <method name="getSecurityConfiguration()"/>
      <method name="getSelfTuning()"/>
      <method name="createServer(java.lang.String)"/>
      <method name="lookupServer(java.lang.String)"/>
      <method name="getServers()"/>
      <method name="createServerTemplate(java.lang.String)"/>
      <method name="lookupServerTemplate(java.lang.String)"/>
      <method name="getServerTemplates()"/>
      <method name="createShutdownClass(java.lang.String)"/>
      <method name="lookupShutdownClass(java.lang.String)"/>
      <method name="getShutdownClasses()"/>
      <method name="createSingletonService(java.lang.String)"/>
      <method name="lookupSingletonService(java.lang.String)"/>
      <method name="getSingletonServices()"/>
      <method name="createStartupClass(java.lang.String)"/>
      <method name="lookupStartupClass(java.lang.String)"/>
      <method name="getStartupClasses()"/>
      <method name="createSystemComponent(java.lang.String,java.lang.String)"/>
      <method name="lookupSystemComponent(java.lang.String)"/>
      <method name="getSystemComponents()"/>
      <method name="lookupSystemResource(java.lang.String)"/>
      <method name="getSystemResources()"/>
      <method name="lookupTarget(java.lang.String)"/>
      <method name="findAllTargets()"/>
      <method name="getTargets()"/>
      <method name="createUnixMachine(java.lang.String)"/>
      <method name="createVirtualHost(java.lang.String)"/>
      <method name="lookupVirtualHost(java.lang.String)"/>
      <method name="getVirtualHosts()"/>
      <method name="createVirtualTarget(java.lang.String)"/>
      <method name="lookupVirtualTarget(java.lang.String)"/>
      <method name="getVirtualTargets()"/>
      <method name="createWLDFSystemResource(java.lang.String)"/>
      <method name="createWLDFSystemResource(java.lang.String,java.lang.String)"/>
      <method name="createWLDFSystemResourceFromBuiltin(java.lang.String,java.lang.String)"/>
      <method name="lookupWLDFSystemResource(java.lang.String)"/>
      <method name="getWLDFSystemResources()"/>
      <method name="createWSReliableDeliveryPolicy(java.lang.String)"/>
      <method name="lookupWSReliableDeliveryPolicy(java.lang.String)"/>
      <method name="getWSReliableDeliveryPolicies()"/>
      <method name="createWTCServer(java.lang.String)"/>
      <method name="lookupWTCServer(java.lang.String)"/>
      <method name="getWTCServers()"/>
      <method name="getWebAppContainer()"/>
      <method name="createWebserviceSecurity(java.lang.String)"/>
      <method name="lookupWebserviceSecurity(java.lang.String)"/>
      <method name="getWebserviceSecurities()"/>
      <method name="getWebserviceTestpage()"/>
      <method name="createXMLEntityCache(java.lang.String)"/>
      <method name="lookupXMLEntityCache(java.lang.String)"/>
      <method name="getXMLEntityCaches()"/>
      <method name="createXMLRegistry(java.lang.String)"/>
      <method name="lookupXMLRegistry(java.lang.String)"/>
      <method name="getXMLRegistries()"/>
    </class>
    <class name="DomainMBeanValidator" members="concealed"/>
    <class name="DomainTargetedMBean" members="concealed"/>
    <class name="DynamicDeploymentMBean">
      <method name="getRestartInPlace()"/>
      <method name="getFailOverLimit()"/>
      <method name="getNumberOfRestartAttempts()"/>
      <method name="getSecondsBetweenRestarts()"/>
      <method name="getDistributionPolicy()"/>
      <method name="getMigrationPolicy()"/>
      <method name="getFailbackDelaySeconds()"/>
      <method name="getInitialBootDelaySeconds()"/>
      <method name="getPartialClusterStabilityDelaySeconds()"/>
      <method name="setDistributionPolicy(java.lang.String)"/>
      <method name="setFailOverLimit(int)"/>
      <method name="setFailbackDelaySeconds(long)"/>
      <method name="setInitialBootDelaySeconds(long)"/>
      <method name="setMigrationPolicy(java.lang.String)"/>
      <method name="setNumberOfRestartAttempts(int)"/>
      <method name="setPartialClusterStabilityDelaySeconds(long)"/>
      <method name="setRestartInPlace(boolean)"/>
      <method name="setSecondsBetweenRestarts(int)"/>
    </class>
    <class name="DynamicServersConstants">
      <field name="MACHINE_MATCH_TYPE_NAME"/>
      <field name="MACHINE_MATCH_TYPE_TAG"/>
    </class>
    <class name="DynamicServersMBean">
      <method name="isCalculatedListenPorts()"/>
      <method name="isCalculatedMachineNames()"/>
      <method name="isIgnoreSessionsDuringShutdown()"/>
      <method name="isWaitForAllSessionsDuringShutdown()"/>
      <method name="getDynamicClusterCooloffPeriodSeconds()"/>
      <method name="getDynamicClusterShutdownTimeoutSeconds()"/>
      <method name="getDynamicClusterSize()"/>
      <method name="getMaxDynamicClusterSize()"/>
      <method name="getMaximumDynamicServerCount()"/>
      <method name="getMinDynamicClusterSize()"/>
      <method name="getMachineMatchExpression()"/>
      <method name="getMachineMatchType()"/>
      <method name="getMachineNameMatchExpression()"/>
      <method name="getServerNamePrefix()"/>
      <method name="getDynamicServerNames()"/>
      <field name="DEFAULT_ADMINISTRATION_PORT_RANGE_BASE"/>
      <field name="DEFAULT_LISTEN_PORT_RANGE_BASE"/>
      <field name="DEFAULT_NAP_LISTEN_PORT_RANGE_BASE"/>
      <field name="DEFAULT_SSL_LISTEN_PORT_RANGE_BASE"/>
      <method name="setCalculatedListenPorts(boolean)"/>
      <method name="setCalculatedMachineNames(boolean)"/>
      <method name="setDynamicClusterCooloffPeriodSeconds(int)"/>
      <method name="setDynamicClusterSize(int)"/>
      <method name="setIgnoreSessionsDuringShutdown(boolean)"/>
      <method name="setMachineMatchExpression(java.lang.String)"/>
      <method name="setMachineMatchType(java.lang.String)"/>
      <method name="setMachineNameMatchExpression(java.lang.String)"/>
      <method name="setMaxDynamicClusterSize(int)"/>
      <method name="setMaximumDynamicServerCount(int)"/>
      <method name="setMinDynamicClusterSize(int)"/>
      <method name="setServerNamePrefix(java.lang.String)"/>
      <method name="setServerTemplate(weblogic.management.configuration.ServerTemplateMBean)"/>
      <method name="setWaitForAllSessionsDuringShutdown(boolean)"/>
      <method name="getServerTemplate()"/>
    </class>
    <class name="EJBComponentMBean" members="concealed"/>
    <class name="EJBContainerMBean">
      <method name="getForceGeneration()"/>
      <method name="getKeepGenerated()"/>
      <method name="getExtraEjbcOptions()"/>
      <method name="getExtraRmicOptions()"/>
      <method name="getJavaCompiler()"/>
      <method name="getJavaCompilerPostClassPath()"/>
      <method name="getJavaCompilerPreClassPath()"/>
      <method name="getTmpPath()"/>
      <method name="getVerboseEJBDeploymentEnabled()"/>
      <method name="setExtraEjbcOptions(java.lang.String)"/>
      <method name="setExtraRmicOptions(java.lang.String)"/>
      <method name="setForceGeneration(boolean)"/>
      <method name="setJavaCompiler(java.lang.String)"/>
      <method name="setJavaCompilerPostClassPath(java.lang.String)"/>
      <method name="setJavaCompilerPreClassPath(java.lang.String)"/>
      <method name="setKeepGenerated(boolean)"/>
      <method name="setTmpPath(java.lang.String)"/>
      <method name="setVerboseEJBDeploymentEnabled(java.lang.String)"/>
    </class>
    <class name="EmbeddedLDAPMBean">
      <method name="isCacheEnabled()"/>
      <method name="isKeepAliveEnabled()"/>
      <method name="isMasterFirst()"/>
      <method name="isRefreshReplicaAtStartup()"/>
      <method name="getCredentialEncrypted()"/>
      <method name="getBackupCopies()"/>
      <method name="getBackupHour()"/>
      <method name="getBackupMinute()"/>
      <method name="getCacheSize()"/>
      <method name="getCacheTTL()"/>
      <method name="getTimeout()"/>
      <method name="getCredential()"/>
      <method name="setAnonymousBindAllowed(boolean)"/>
      <method name="setBackupCopies(int)"/>
      <method name="setBackupHour(int)"/>
      <method name="setBackupMinute(int)"/>
      <method name="setCacheEnabled(boolean)"/>
      <method name="setCacheSize(int)"/>
      <method name="setCacheTTL(int)"/>
      <method name="setCredential(java.lang.String)"/>
      <method name="setCredentialEncrypted(byte[])"/>
      <method name="setKeepAliveEnabled(boolean)"/>
      <method name="setMasterFirst(boolean)"/>
      <method name="setRefreshReplicaAtStartup(boolean)"/>
      <method name="setTimeout(int)"/>
    </class>
    <class name="ExecuteQueueMBean">
      <method name="getQueueLength()"/>
      <method name="getQueueLengthThresholdPercent()"/>
      <method name="getThreadCount()"/>
      <method name="getThreadsIncrease()"/>
      <method name="getThreadsMaximum()"/>
      <field name="DEFAULT_QUEUE_NAME"/>
      <method name="setQueueLength(int)"/>
      <method name="setQueueLengthThresholdPercent(int)"/>
      <method name="setThreadCount(int)"/>
      <method name="setThreadPriority(int)"/>
      <method name="setThreadsIncrease(int)"/>
      <method name="setThreadsMaximum(int)"/>
      <method name="setThreadsMinimum(int)"/>
    </class>
    <class name="ExportCustomizeableValues" members="concealed"/>
    <class name="FairShareConstraintMBean">
      <method name="getValue()"/>
      <method name="setValue(int)"/>
    </class>
    <class name="FairShareRequestClassMBean">
      <method name="getFairShare()"/>
      <method name="setFairShare(int)"/>
    </class>
    <class name="FederationServicesMBean">
      <method name="isACSRequiresSSL()"/>
      <method name="isARSRequiresSSL()"/>
      <method name="isARSRequiresTwoWaySSL()"/>
      <method name="isDestinationSiteEnabled()"/>
      <method name="isITSRequiresSSL()"/>
      <method name="isPOSTOneUseCheckEnabled()"/>
      <method name="isPOSTRecipientCheckEnabled()"/>
      <method name="isSourceSiteEnabled()"/>
      <method name="getSSLClientIdentityPassPhraseEncrypted()"/>
      <method name="getSigningKeyPassPhraseEncrypted()"/>
      <method name="getAssertionStoreClassName()"/>
      <method name="getSSLClientIdentityAlias()"/>
      <method name="getSSLClientIdentityPassPhrase()"/>
      <method name="getSigningKeyAlias()"/>
      <method name="getSigningKeyPassPhrase()"/>
      <method name="getSourceIdBase64()"/>
      <method name="getSourceIdHex()"/>
      <method name="getSourceSiteURL()"/>
      <method name="getUsedAssertionCacheClassName()"/>
      <method name="getAllowedTargetHosts()"/>
      <method name="getAssertionConsumerURIs()"/>
      <method name="getAssertionRetrievalURIs()"/>
      <method name="getIntersiteTransferURIs()"/>
      <method name="getAssertionStoreProperties()"/>
      <method name="getUsedAssertionCacheProperties()"/>
      <method name="setACSRequiresSSL(boolean)"/>
      <method name="setARSRequiresSSL(boolean)"/>
      <method name="setARSRequiresTwoWaySSL(boolean)"/>
      <method name="setAllowedTargetHosts(java.lang.String[])"/>
      <method name="setAssertionConsumerURIs(java.lang.String[])"/>
      <method name="setAssertionRetrievalURIs(java.lang.String[])"/>
      <method name="setAssertionStoreClassName(java.lang.String)"/>
      <method name="setAssertionStoreProperties(java.util.Properties)"/>
      <method name="setDestinationSiteEnabled(boolean)"/>
      <method name="setITSRequiresSSL(boolean)"/>
      <method name="setIntersiteTransferURIs(java.lang.String[])"/>
      <method name="setPOSTOneUseCheckEnabled(boolean)"/>
      <method name="setPOSTRecipientCheckEnabled(boolean)"/>
      <method name="setSSLClientIdentityAlias(java.lang.String)"/>
      <method name="setSSLClientIdentityPassPhrase(java.lang.String)"/>
      <method name="setSSLClientIdentityPassPhraseEncrypted(byte[])"/>
      <method name="setSigningKeyAlias(java.lang.String)"/>
      <method name="setSigningKeyPassPhrase(java.lang.String)"/>
      <method name="setSigningKeyPassPhraseEncrypted(byte[])"/>
      <method name="setSourceSiteEnabled(boolean)"/>
      <method name="setSourceSiteURL(java.lang.String)"/>
      <method name="setUsedAssertionCacheClassName(java.lang.String)"/>
      <method name="setUsedAssertionCacheProperties(java.util.Properties)"/>
    </class>
    <class name="FileOpenMBean" members="concealed"/>
    <class name="FileStoreMBean">
      <method name="getName()"/>
    </class>
    <class name="ForeignConnectionFactoryOverrideMBean">
      <method name="getPasswordEncrypted()"/>
      <method name="getPassword()"/>
      <method name="getUsername()"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setUsername(java.lang.String)"/>
    </class>
    <class name="ForeignDestinationOverrideMBean">
      <method name="getRemoteJNDIName()"/>
      <method name="setRemoteJNDIName(java.lang.String)"/>
    </class>
    <class name="ForeignJMSConnectionFactoryMBean">
      <method name="getPasswordEncrypted()"/>
      <method name="getConnectionHealthChecking()"/>
      <method name="getLocalJNDIName()"/>
      <method name="getPassword()"/>
      <method name="getRemoteJNDIName()"/>
      <method name="getUsername()"/>
      <method name="setConnectionHealthChecking(java.lang.String)"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setRemoteJNDIName(java.lang.String)"/>
      <method name="setUsername(java.lang.String)"/>
    </class>
    <class name="ForeignJMSDestinationMBean">
      <method name="getLocalJNDIName()"/>
      <method name="getRemoteJNDIName()"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setRemoteJNDIName(java.lang.String)"/>
    </class>
    <class name="ForeignJMSServerMBean">
      <method name="addConnectionFactory(weblogic.management.configuration.ForeignJMSConnectionFactoryMBean)"/>
      <method name="addDestination(weblogic.management.configuration.ForeignJMSDestinationMBean)"/>
      <method name="removeConnectionFactory(weblogic.management.configuration.ForeignJMSConnectionFactoryMBean)"/>
      <method name="removeDestination(weblogic.management.configuration.ForeignJMSDestinationMBean)"/>
      <method name="getJNDIPropertiesCredentialEncrypted()"/>
      <method name="getConnectionURL()"/>
      <method name="getInitialContextFactory()"/>
      <method name="getJNDIPropertiesCredential()"/>
      <method name="getJNDIProperties()"/>
      <field name="WLS_CONTEXT_FACTORY"/>
      <method name="setConnectionFactories(weblogic.management.configuration.ForeignJMSConnectionFactoryMBean[])"/>
      <method name="setConnectionURL(java.lang.String)"/>
      <method name="setDestinations(weblogic.management.configuration.ForeignJMSDestinationMBean[])"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
      <method name="setJNDIProperties(java.util.Properties)"/>
      <method name="setJNDIPropertiesCredential(java.lang.String)"/>
      <method name="setJNDIPropertiesCredentialEncrypted(byte[])"/>
      <method name="getConnectionFactories()"/>
      <method name="getForeignJMSConnectionFactories()"/>
      <method name="getDestinations()"/>
      <method name="getForeignJMSDestinations()"/>
    </class>
    <class name="ForeignJNDILinkMBean">
      <method name="getLocalJNDIName()"/>
      <method name="getRemoteJNDIName()"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setRemoteJNDIName(java.lang.String)"/>
    </class>
    <class name="ForeignJNDILinkOverrideMBean">
      <method name="getLocalJNDIName()"/>
      <method name="getRemoteJNDIName()"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setRemoteJNDIName(java.lang.String)"/>
    </class>
    <class name="ForeignJNDIObjectMBean">
      <method name="getLocalJNDIName()"/>
      <method name="getRemoteJNDIName()"/>
      <method name="setLocalJNDIName(java.lang.String)"/>
      <method name="setRemoteJNDIName(java.lang.String)"/>
    </class>
    <class name="ForeignJNDIProviderMBean">
      <method name="getPasswordEncrypted()"/>
      <method name="getInitialContextFactory()"/>
      <method name="getName()"/>
      <method name="getPassword()"/>
      <method name="getProviderURL()"/>
      <method name="getUser()"/>
      <method name="getProperties()"/>
      <method name="destroyForeignJNDILink(weblogic.management.configuration.ForeignJNDILinkMBean)"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setProperties(java.util.Properties)"/>
      <method name="setProviderURL(java.lang.String)"/>
      <method name="setUser(java.lang.String)"/>
      <method name="createForeignJNDILink(java.lang.String)"/>
      <method name="lookupForeignJNDILink(java.lang.String)"/>
      <method name="getForeignJNDILinks()"/>
    </class>
    <class name="ForeignJNDIProviderOverrideMBean">
      <method name="getPasswordEncrypted()"/>
      <method name="getInitialContextFactory()"/>
      <method name="getPassword()"/>
      <method name="getProviderURL()"/>
      <method name="getUser()"/>
      <method name="getProperties()"/>
      <method name="destroyForeignJNDILink(weblogic.management.configuration.ForeignJNDILinkOverrideMBean)"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setProperties(java.util.Properties)"/>
      <method name="setProviderURL(java.lang.String)"/>
      <method name="setUser(java.lang.String)"/>
      <method name="createForeignJNDILink(java.lang.String)"/>
      <method name="lookupForeignJNDILink(java.lang.String)"/>
      <method name="getForeignJNDILinks()"/>
    </class>
    <class name="ForeignServerOverrideMBean">
      <method name="getJNDIPropertiesCredentialEncrypted()"/>
      <method name="getConnectionURL()"/>
      <method name="getInitialContextFactory()"/>
      <method name="getJNDIPropertiesCredential()"/>
      <method name="destroyForeignConnectionFactory(weblogic.management.configuration.ForeignConnectionFactoryOverrideMBean)"/>
      <method name="destroyForeignDestination(weblogic.management.configuration.ForeignDestinationOverrideMBean)"/>
      <method name="destroyJNDIProperty(weblogic.management.configuration.PartitionPropertyMBean)"/>
      <method name="setConnectionURL(java.lang.String)"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
      <method name="setJNDIPropertiesCredential(java.lang.String)"/>
      <method name="setJNDIPropertiesCredentialEncrypted(byte[])"/>
      <method name="createForeignConnectionFactory(java.lang.String)"/>
      <method name="lookupForeignConnectionFactory(java.lang.String)"/>
      <method name="getForeignConnectionFactories()"/>
      <method name="createForeignDestination(java.lang.String)"/>
      <method name="lookupForeignDestination(java.lang.String)"/>
      <method name="getForeignDestinations()"/>
      <method name="createJNDIProperty(java.lang.String)"/>
      <method name="lookupJNDIProperty(java.lang.String)"/>
      <method name="getJNDIProperties()"/>
    </class>
    <class name="GenericFileStoreMBean">
      <method name="isFileLockingEnabled()"/>
      <method name="getBlockSize()"/>
      <method name="getIoBufferSize()"/>
      <method name="getMaxWindowBufferSize()"/>
      <method name="getMinWindowBufferSize()"/>
      <method name="getCacheDirectory()"/>
      <method name="getDirectory()"/>
      <method name="getSynchronousWritePolicy()"/>
      <method name="getInitialSize()"/>
      <method name="getMaxFileSize()"/>
      <field name="SYNCWRITE_CACHEFLUSH"/>
      <field name="SYNCWRITE_DIRECTWRITE"/>
      <field name="SYNCWRITE_DIRECTWRITEWITHCACHE"/>
      <field name="SYNCWRITE_DISABLED"/>
      <method name="setBlockSize(int)"/>
      <method name="setCacheDirectory(java.lang.String)"/>
      <method name="setDirectory(java.lang.String)"/>
      <method name="setFileLockingEnabled(boolean)"/>
      <method name="setInitialSize(long)"/>
      <method name="setIoBufferSize(int)"/>
      <method name="setMaxFileSize(long)"/>
      <method name="setMaxWindowBufferSize(int)"/>
      <method name="setMinWindowBufferSize(int)"/>
      <method name="setSynchronousWritePolicy(java.lang.String)"/>
    </class>
    <class name="GenericJDBCStoreMBean">
      <method name="getCreateTableDDLFile()"/>
      <method name="getPrefixName()"/>
      <method name="setCreateTableDDLFile(java.lang.String)"/>
      <method name="setPrefixName(java.lang.String)"/>
    </class>
    <class name="GzipCompressionMBean">
      <method name="isGzipCompressionEnabled()"/>
      <method name="getGzipCompressionContentType()"/>
      <method name="getGzipCompressionMinContentLength()"/>
      <method name="setGzipCompressionContentType(java.lang.String[])"/>
      <method name="setGzipCompressionEnabled(boolean)"/>
      <method name="setGzipCompressionMinContentLength(long)"/>
    </class>
    <class name="HTTPProxyMBean">
      <method name="getHealthCheckInterval()"/>
      <method name="getInitialConnections()"/>
      <method name="getMaxConnections()"/>
      <method name="getMaxHealthCheckInterval()"/>
      <method name="getMaxRetries()"/>
      <method name="getServerList()"/>
      <method name="setHealthCheckInterval(int)"/>
      <method name="setInitialConnections(int)"/>
      <method name="setMaxConnections(int)"/>
      <method name="setMaxHealthCheckInterval(int)"/>
      <method name="setMaxRetries(int)"/>
      <method name="setServerList(java.lang.String)"/>
    </class>
    <class name="HeapRetainedMBean" members="concealed"/>
    <class name="IIOPMBean">
      <method name="getEnableIORServlet()"/>
      <method name="getUseFullRepositoryIdList()"/>
      <method name="getUseJavaSerialization()"/>
      <method name="getUseSerialFormatVersion2()"/>
      <method name="getUseStatefulAuthentication()"/>
      <method name="getCompleteMessageTimeout()"/>
      <method name="getDefaultMinorVersion()"/>
      <method name="getIdleConnectionTimeout()"/>
      <method name="getMaxMessageSize()"/>
      <method name="getDefaultCharCodeset()"/>
      <method name="getDefaultWideCharCodeset()"/>
      <method name="getSystemSecurity()"/>
      <method name="getTxMechanism()"/>
      <method name="setCompleteMessageTimeout(int)"/>
      <method name="setDefaultCharCodeset(java.lang.String)"/>
      <method name="setDefaultMinorVersion(int)"/>
      <method name="setDefaultWideCharCodeset(java.lang.String)"/>
      <method name="setEnableIORServlet(boolean)"/>
      <method name="setIdleConnectionTimeout(int)"/>
      <method name="setMaxMessageSize(int)"/>
      <method name="setSystemSecurity(java.lang.String)"/>
      <method name="setTxMechanism(java.lang.String)"/>
      <method name="setUseFullRepositoryIdList(boolean)"/>
      <method name="setUseJavaSerialization(boolean)"/>
      <method name="setUseSerialFormatVersion2(boolean)"/>
      <method name="setUseStatefulAuthentication(boolean)"/>
    </class>
    <class name="InterceptorMBean" members="concealed"/>
    <class name="InterceptorsMBean">
      <method name="isWhiteListingEnabled()"/>
      <method name="destroyInterceptor(weblogic.management.configuration.InterceptorMBean)"/>
      <method name="setWhiteListingEnabled(boolean)"/>
      <method name="createDatasourceInterceptor(java.lang.String)"/>
      <method name="createInterceptor(java.lang.String)"/>
      <method name="lookupInterceptor(java.lang.String)"/>
      <method name="getInterceptors()"/>
      <method name="createScriptInterceptor(java.lang.String)"/>
    </class>
    <class name="JASPICMBean">
      <method name="isEnabled()"/>
      <method name="destroyAuthConfigProvider(weblogic.management.configuration.AuthConfigProviderMBean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="createAuthConfigProvider(java.lang.String)"/>
      <method name="lookupAuthConfigProvider(java.lang.String)"/>
      <method name="getAuthConfigProviders()"/>
      <method name="createCustomAuthConfigProvider(java.lang.String)"/>
      <method name="createWLSAuthConfigProvider(java.lang.String)"/>
    </class>
    <class name="JDBCPropertyOverrideMBean">
      <method name="getEncryptedValueEncrypted()"/>
      <method name="getEncryptedValue()"/>
      <method name="getSysPropValue()"/>
      <method name="getValue()"/>
      <method name="setEncryptedValue(java.lang.String)"/>
      <method name="setEncryptedValueEncrypted(byte[])"/>
      <method name="setSysPropValue(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="JDBCStoreMBean">
      <method name="isOraclePiggybackCommitEnabled()"/>
      <method name="getDeletesPerBatchMaximum()"/>
      <method name="getDeletesPerStatementMaximum()"/>
      <method name="getInsertsPerBatchMaximum()"/>
      <method name="getReconnectRetryIntervalMillis()"/>
      <method name="getReconnectRetryPeriodMillis()"/>
      <method name="getThreeStepThreshold()"/>
      <method name="getWorkerCount()"/>
      <method name="getWorkerPreferredBatchSize()"/>
      <method name="setDataSource(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="setDeletesPerBatchMaximum(int)"/>
      <method name="setDeletesPerStatementMaximum(int)"/>
      <method name="setInsertsPerBatchMaximum(int)"/>
      <method name="setOraclePiggybackCommitEnabled(boolean)"/>
      <method name="setReconnectRetryIntervalMillis(int)"/>
      <method name="setReconnectRetryPeriodMillis(int)"/>
      <method name="setThreeStepThreshold(int)"/>
      <method name="setWorkerCount(int)"/>
      <method name="setWorkerPreferredBatchSize(int)"/>
      <method name="getDataSource()"/>
    </class>
    <class name="JDBCSystemResourceMBean">
      <method name="getDescriptorFileName()"/>
      <method name="getName()"/>
      <method name="getJDBCResource()"/>
    </class>
    <class name="JDBCSystemResourceOverrideMBean">
      <method name="getPasswordEncrypted()"/>
      <method name="getInitialCapacity()"/>
      <method name="getMaxCapacity()"/>
      <method name="getMinCapacity()"/>
      <method name="getPassword()"/>
      <method name="getURL()"/>
      <method name="getUser()"/>
      <method name="destroyJDBCPropertyOverride(weblogic.management.configuration.JDBCPropertyOverrideMBean)"/>
      <method name="setInitialCapacity(int)"/>
      <method name="setMaxCapacity(int)"/>
      <method name="setMinCapacity(int)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setURL(java.lang.String)"/>
      <method name="setUser(java.lang.String)"/>
      <method name="createJDBCPropertyOverride(java.lang.String)"/>
      <method name="lookupJDBCPropertyOverride(java.lang.String)"/>
      <method name="getJDBCPropertyOverrides()"/>
    </class>
    <class name="JMSBridgeDestinationMBean">
      <method name="getConnectionFactoryJNDIName()"/>
      <method name="getConnectionURL()"/>
      <method name="getDestinationJNDIName()"/>
      <method name="getDestinationType()"/>
      <method name="getInitialContextFactory()"/>
      <method name="getName()"/>
      <field name="DEFAULT_INITIAL_CONTEXT_FACTORY"/>
      <method name="setConnectionFactoryJNDIName(java.lang.String)"/>
      <method name="setConnectionURL(java.lang.String)"/>
      <method name="setDestinationJNDIName(java.lang.String)"/>
      <method name="setDestinationType(java.lang.String)"/>
      <method name="setInitialContextFactory(java.lang.String)"/>
    </class>
    <class name="JMSConnectionConsumerMBean">
      <method name="getMessagesMaximum()"/>
      <method name="getDestination()"/>
      <method name="getSelector()"/>
      <method name="setDestination(java.lang.String)"/>
      <method name="setMessagesMaximum(int)"/>
      <method name="setSelector(java.lang.String)"/>
    </class>
    <class name="JMSConnectionFactoryMBean">
      <method name="getAllowCloseInOnMessage()"/>
      <method name="isFlowControlEnabled()"/>
      <method name="isLoadBalancingEnabled()"/>
      <method name="isServerAffinityEnabled()"/>
      <method name="isUserTransactionsEnabled()"/>
      <method name="isXAConnectionFactoryEnabled()"/>
      <method name="isXAServerEnabled()"/>
      <method name="getDefaultPriority()"/>
      <method name="getFlowInterval()"/>
      <method name="getFlowMaximum()"/>
      <method name="getFlowMinimum()"/>
      <method name="getFlowSteps()"/>
      <method name="getMessagesMaximum()"/>
      <method name="getAcknowledgePolicy()"/>
      <method name="getClientId()"/>
      <method name="getDefaultDeliveryMode()"/>
      <method name="getJNDIName()"/>
      <method name="getOverrunPolicy()"/>
      <method name="getProducerLoadBalancingPolicy()"/>
      <method name="getDefaultRedeliveryDelay()"/>
      <method name="getDefaultTimeToDeliver()"/>
      <method name="getDefaultTimeToLive()"/>
      <method name="getSendTimeout()"/>
      <method name="getTransactionTimeout()"/>
      <method name="setAcknowledgePolicy(java.lang.String)"/>
      <method name="setAllowCloseInOnMessage(boolean)"/>
      <method name="setClientId(java.lang.String)"/>
      <method name="setDefaultDeliveryMode(java.lang.String)"/>
      <method name="setDefaultPriority(int)"/>
      <method name="setDefaultRedeliveryDelay(long)"/>
      <method name="setDefaultTimeToDeliver(long)"/>
      <method name="setDefaultTimeToLive(long)"/>
      <method name="setFlowControlEnabled(boolean)"/>
      <method name="setFlowInterval(int)"/>
      <method name="setFlowMaximum(int)"/>
      <method name="setFlowMinimum(int)"/>
      <method name="setFlowSteps(int)"/>
      <method name="setJNDIName(java.lang.String)"/>
      <method name="setLoadBalancingEnabled(boolean)"/>
      <method name="setMessagesMaximum(int)"/>
      <method name="setOverrunPolicy(java.lang.String)"/>
      <method name="setProducerLoadBalancingPolicy(java.lang.String)"/>
      <method name="setSendTimeout(long)"/>
      <method name="setServerAffinityEnabled(boolean)"/>
      <method name="setTransactionTimeout(long)"/>
      <method name="setUserTransactionsEnabled(boolean)"/>
      <method name="setXAConnectionFactoryEnabled(boolean)"/>
      <method name="setXAServerEnabled(boolean)"/>
    </class>
    <class name="JMSConstants">
      <field name="PRIORITY_DEFAULT"/>
      <field name="PRIORITY_MAXIMUM"/>
      <field name="PRIORITY_MINIMUM"/>
      <field name="ACKNOWLEDGE_ALL"/>
      <field name="ACKNOWLEDGE_MODE_AUTO"/>
      <field name="ACKNOWLEDGE_MODE_CLIENT"/>
      <field name="ACKNOWLEDGE_MODE_DUPS_OK"/>
      <field name="ACKNOWLEDGE_MODE_NONE"/>
      <field name="ACKNOWLEDGE_ONE"/>
      <field name="ACKNOWLEDGE_PREVIOUS"/>
      <field name="ALWAYSFORWARD"/>
      <field name="AT_LEAST_ONCE"/>
      <field name="AT_MOST_ONCE"/>
      <field name="AUTH_PRINS"/>
      <field name="CLIENT_ID_POLICY_UNRESTRICTED"/>
      <field name="CONSUMPTION_ENABLED"/>
      <field name="CONSUMPTION_PAUSED"/>
      <field name="CONSUMPTION_PAUSING"/>
      <field name="DESTINATION_TYPE_QUEUE"/>
      <field name="DESTINATION_TYPE_SAFID"/>
      <field name="DESTINATION_TYPE_TOPIC"/>
      <field name="DESTINATION_TYPE_UDQUEUE"/>
      <field name="DESTINATION_TYPE_UDTOPIC"/>
      <field name="DISABLED"/>
      <field name="DISCARD"/>
      <field name="ENABLED_DEFAULT"/>
      <field name="ENABLED_FALSE"/>
      <field name="ENABLED_TRUE"/>
      <field name="ERRORDESTINATION"/>
      <field name="EXACTLY_ONCE"/>
      <field name="EXPORT_TO_ALL"/>
      <field name="EXPORT_TO_NONE"/>
      <field name="FIFO"/>
      <field name="FORWARDING_POLICY_PARTITIONED"/>
      <field name="FORWARDING_POLICY_REPLICATED"/>
      <field name="INITIALCONTEXTFACTORY"/>
      <field name="INSERTION_ENABLED"/>
      <field name="INSERTION_PAUSED"/>
      <field name="INSERTION_PAUSING"/>
      <field name="KEEP_NEW"/>
      <field name="KEEP_OLD"/>
      <field name="KEY_DIRECTION_ASCENDING"/>
      <field name="KEY_DIRECTION_DESCENDING"/>
      <field name="KEY_TYPE_BOOLEAN"/>
      <field name="KEY_TYPE_BYTE"/>
      <field name="KEY_TYPE_DOUBLE"/>
      <field name="KEY_TYPE_FLOAT"/>
      <field name="KEY_TYPE_INT"/>
      <field name="KEY_TYPE_LONG"/>
      <field name="KEY_TYPE_SHORT"/>
      <field name="KEY_TYPE_STRING"/>
      <field name="LOGGING"/>
      <field name="NEVER"/>
      <field name="NON_PERSISTENT"/>
      <field name="NON_XML"/>
      <field name="NO_DELIVERY"/>
      <field name="NO_OVERRIDE"/>
      <field name="PAUSED_AT_STARTUP_DEFAULT"/>
      <field name="PAUSED_AT_STARTUP_FALSE"/>
      <field name="PERSISTENT"/>
      <field name="PREEMPTIVE"/>
      <field name="PRODUCTION_ENABLED"/>
      <field name="PRODUCTION_PAUSED"/>
      <field name="PRODUCTION_PAUSING"/>
      <field name="QUEUE"/>
      <field name="RANDOM"/>
      <field name="ROUND_ROBIN"/>
      <field name="SINGLE_MESSAGE"/>
      <field name="STORE_ENABLED_DEFAULT"/>
      <field name="STORE_ENABLED_FALSE"/>
      <field name="STORE_ENABLED_TRUE"/>
      <field name="STORE_TYPE_FILE"/>
      <field name="STORE_TYPE_JDBC"/>
      <field name="SUBSCRIPTION_EXCLUSIVE"/>
      <field name="SUBSCRIPTION_SHARABLE"/>
      <field name="SUPPORTS"/>
      <field name="SYNCWRITE_CACHEFLUSH"/>
      <field name="SYNCWRITE_DIRECTWRITE"/>
      <field name="SYNCWRITE_DISABLED"/>
      <field name="TOPIC"/>
      <field name="TOPIC_SUBSCRIBER_ONLY"/>
      <field name="TRANSACTION_MODE_51"/>
      <field name="TRANSACTION_MODE_NONE"/>
      <field name="TRANSACTION_MODE_XA"/>
      <field name="UNITOFORDER_STANDARD"/>
      <field name="UNITOFORDER_SYSTEM"/>
      <field name="XML"/>
      <field name="XMLALL"/>
      <field name="DEFAULT_MESSAGE_BUFFER_SIZE"/>
      <field name="SEND_QUOTA_BLOCKING_TIMEOUT"/>
    </class>
    <class name="JMSDestCommonMBean">
      <method name="addDestinationKey(weblogic.management.configuration.JMSDestinationKeyMBean)"/>
      <method name="removeDestinationKey(weblogic.management.configuration.JMSDestinationKeyMBean)"/>
      <method name="getMaximumMessageSize()"/>
      <method name="getPriorityOverride()"/>
      <method name="getRedeliveryLimit()"/>
      <method name="getDeliveryModeOverride()"/>
      <method name="getExpirationLoggingPolicy()"/>
      <method name="getExpirationPolicy()"/>
      <method name="getTimeToDeliverOverride()"/>
      <method name="getBytesMaximum()"/>
      <method name="getBytesThresholdHigh()"/>
      <method name="getBytesThresholdLow()"/>
      <method name="getMessagesMaximum()"/>
      <method name="getMessagesThresholdHigh()"/>
      <method name="getMessagesThresholdLow()"/>
      <method name="getRedeliveryDelayOverride()"/>
      <method name="getTimeToLiveOverride()"/>
      <method name="setBytesMaximum(long)"/>
      <method name="setBytesThresholdHigh(long)"/>
      <method name="setBytesThresholdLow(long)"/>
      <method name="setCreationTime(long)"/>
      <method name="setDeliveryModeOverride(java.lang.String)"/>
      <method name="setDestinationKeys(weblogic.management.configuration.JMSDestinationKeyMBean[])"/>
      <method name="setErrorDestination(weblogic.management.configuration.JMSDestinationMBean)"/>
      <method name="setExpirationLoggingPolicy(java.lang.String)"/>
      <method name="setExpirationPolicy(java.lang.String)"/>
      <method name="setMaximumMessageSize(int)"/>
      <method name="setMessagesMaximum(long)"/>
      <method name="setMessagesThresholdHigh(long)"/>
      <method name="setMessagesThresholdLow(long)"/>
      <method name="setPriorityOverride(int)"/>
      <method name="setRedeliveryDelayOverride(long)"/>
      <method name="setRedeliveryLimit(int)"/>
      <method name="setTimeToDeliverOverride(java.lang.String)"/>
      <method name="setTimeToLiveOverride(long)"/>
      <method name="getDestinationKeys()"/>
      <method name="getErrorDestination()"/>
    </class>
    <class name="JMSDestinationKeyMBean">
      <method name="getDirection()"/>
      <method name="getKeyType()"/>
      <method name="getProperty()"/>
      <method name="setDirection(java.lang.String)"/>
      <method name="setKeyType(java.lang.String)"/>
      <method name="setProperty(java.lang.String)"/>
    </class>
    <class name="JMSDestinationMBean">
      <method name="isJNDINameReplicated()"/>
      <method name="getBytesPagingEnabled()"/>
      <method name="getJNDIName()"/>
      <method name="getMessagesPagingEnabled()"/>
      <method name="getStoreEnabled()"/>
      <method name="setBytesPagingEnabled(java.lang.String)"/>
      <method name="setJNDIName(java.lang.String)"/>
      <method name="setJNDINameReplicated(boolean)"/>
      <method name="setMessagesPagingEnabled(java.lang.String)"/>
      <method name="setStoreEnabled(java.lang.String)"/>
      <method name="setTemplate(weblogic.management.configuration.JMSTemplateMBean)"/>
      <method name="getTemplate()"/>
    </class>
    <class name="JMSDistributedDestinationMBean">
      <method name="getLoadBalancingPolicy()"/>
      <method name="setLoadBalancingPolicy(java.lang.String)"/>
      <method name="setTemplate(weblogic.management.configuration.JMSTemplateMBean)"/>
      <method name="getTemplate()"/>
    </class>
    <class name="JMSDistributedDestinationMemberMBean">
      <method name="getWeight()"/>
      <method name="setWeight(int)"/>
    </class>
    <class name="JMSDistributedQueueMBean">
      <method name="addMember(weblogic.management.configuration.JMSDistributedQueueMemberMBean)"/>
      <method name="getResetDeliveryCountOnForward()"/>
      <method name="removeMember(weblogic.management.configuration.JMSDistributedQueueMemberMBean)"/>
      <method name="getForwardDelay()"/>
      <method name="destroyJMSDistributedQueueMember(java.lang.String,weblogic.management.configuration.JMSDistributedQueueMemberMBean)"/>
      <method name="destroyJMSDistributedQueueMember(weblogic.management.configuration.JMSDistributedQueueMemberMBean)"/>
      <method name="setForwardDelay(int)"/>
      <method name="setMembers(weblogic.management.configuration.JMSDistributedQueueMemberMBean[])"/>
      <method name="setResetDeliveryCountOnForward(boolean)"/>
      <method name="createJMSDistributedQueueMember(java.lang.String)"/>
      <method name="createJMSDistributedQueueMember(java.lang.String,weblogic.management.configuration.JMSDistributedQueueMemberMBean)"/>
      <method name="getJMSDistributedQueueMembers()"/>
      <method name="getMembers()"/>
    </class>
    <class name="JMSDistributedQueueMemberMBean">
      <method name="setJMSQueue(weblogic.management.configuration.JMSQueueMBean)"/>
      <method name="getJMSQueue()"/>
    </class>
    <class name="JMSDistributedTopicMBean">
      <method name="addMember(weblogic.management.configuration.JMSDistributedTopicMemberMBean)"/>
      <method name="removeMember(weblogic.management.configuration.JMSDistributedTopicMemberMBean)"/>
      <method name="destroyJMSDistributedTopicMember(java.lang.String,weblogic.management.configuration.JMSDistributedTopicMemberMBean)"/>
      <method name="destroyJMSDistributedTopicMember(weblogic.management.configuration.JMSDistributedTopicMemberMBean)"/>
      <method name="setMembers(weblogic.management.configuration.JMSDistributedTopicMemberMBean[])"/>
      <method name="createJMSDistributedTopicMember(java.lang.String)"/>
      <method name="getJMSDistributedTopicMembers()"/>
      <method name="getMembers()"/>
    </class>
    <class name="JMSDistributedTopicMemberMBean">
      <method name="setJMSTopic(weblogic.management.configuration.JMSTopicMBean)"/>
      <method name="getJMSTopic()"/>
    </class>
    <class name="JMSFileStoreMBean">
      <method name="setDelegatedBean(weblogic.management.configuration.FileStoreMBean)"/>
      <method name="setDelegatedJMSServer(weblogic.management.configuration.JMSServerMBean)"/>
      <method name="getDelegatedBean()"/>
      <method name="getDelegatedJMSServer()"/>
    </class>
    <class name="JMSInteropModuleMBean">
      <method name="addTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="removeTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="setTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="getTargets()"/>
    </class>
    <class name="JMSJDBCStoreMBean">
      <method name="setDelegatedBean(weblogic.management.configuration.JDBCStoreMBean)"/>
      <method name="getDelegatedBean()"/>
    </class>
    <class name="JMSMessageLogFileMBean">
      <method name="getFileName()"/>
      <method name="setFileName(java.lang.String)"/>
    </class>
    <class name="JMSQueueMBean" members="concealed"/>
    <class name="JMSSAFMessageLogFileMBean">
      <method name="getFileName()"/>
      <method name="setFileName(java.lang.String)"/>
    </class>
    <class name="JMSServerMBean">
      <method name="addDestination(weblogic.management.configuration.JMSDestinationMBean)"/>
      <method name="addSessionPool(weblogic.management.configuration.JMSSessionPoolMBean)"/>
      <method name="addTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="getStoreEnabled()"/>
      <method name="isAllowsPersistentDowngrade()"/>
      <method name="isBytesPagingEnabled()"/>
      <method name="isHostingTemporaryDestinations()"/>
      <method name="isMessagesPagingEnabled()"/>
      <method name="isPagingFileLockingEnabled()"/>
      <method name="isPagingMessageCompressionEnabled()"/>
      <method name="isStoreMessageCompressionEnabled()"/>
      <method name="removeDestination(weblogic.management.configuration.JMSDestinationMBean)"/>
      <method name="removeSessionPool(weblogic.management.configuration.JMSSessionPoolMBean)"/>
      <method name="removeTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="getExpirationScanInterval()"/>
      <method name="getMaximumMessageSize()"/>
      <method name="getPagingBlockSize()"/>
      <method name="getPagingIoBufferSize()"/>
      <method name="getPagingMaxWindowBufferSize()"/>
      <method name="getPagingMinWindowBufferSize()"/>
      <method name="getBlockingSendPolicy()"/>
      <method name="getConsumptionPausedAtStartup()"/>
      <method name="getInsertionPausedAtStartup()"/>
      <method name="getMessageCompressionOptions()"/>
      <method name="getName()"/>
      <method name="getPagingDirectory()"/>
      <method name="getProductionPausedAtStartup()"/>
      <method name="getTemporaryTemplateName()"/>
      <method name="getTemporaryTemplateResource()"/>
      <method name="getBytesMaximum()"/>
      <method name="getBytesThresholdHigh()"/>
      <method name="getBytesThresholdLow()"/>
      <method name="getMessageBufferSize()"/>
      <method name="getMessagesMaximum()"/>
      <method name="getMessagesThresholdHigh()"/>
      <method name="getMessagesThresholdLow()"/>
      <method name="getPagingMaxFileSize()"/>
      <method name="destroyJMSQueue(weblogic.management.configuration.JMSQueueMBean)"/>
      <method name="destroyJMSSessionPool(weblogic.management.configuration.JMSSessionPoolMBean)"/>
      <method name="destroyJMSTopic(weblogic.management.configuration.JMSTopicMBean)"/>
      <method name="setAllowsPersistentDowngrade(boolean)"/>
      <method name="setBlockingSendPolicy(java.lang.String)"/>
      <method name="setBytesMaximum(long)"/>
      <method name="setBytesPagingEnabled(boolean)"/>
      <method name="setBytesThresholdHigh(long)"/>
      <method name="setBytesThresholdLow(long)"/>
      <method name="setConsumptionPausedAtStartup(java.lang.String)"/>
      <method name="setDestinations(weblogic.management.configuration.JMSDestinationMBean[])"/>
      <method name="setExpirationScanInterval(int)"/>
      <method name="setHostingTemporaryDestinations(boolean)"/>
      <method name="setInsertionPausedAtStartup(java.lang.String)"/>
      <method name="setMaximumMessageSize(int)"/>
      <method name="setMessageBufferSize(long)"/>
      <method name="setMessageCompressionOptions(java.lang.String)"/>
      <method name="setMessagesMaximum(long)"/>
      <method name="setMessagesPagingEnabled(boolean)"/>
      <method name="setMessagesThresholdHigh(long)"/>
      <method name="setMessagesThresholdLow(long)"/>
      <method name="setPagingBlockSize(int)"/>
      <method name="setPagingDirectory(java.lang.String)"/>
      <method name="setPagingFileLockingEnabled(boolean)"/>
      <method name="setPagingIoBufferSize(int)"/>
      <method name="setPagingMaxFileSize(long)"/>
      <method name="setPagingMaxWindowBufferSize(int)"/>
      <method name="setPagingMessageCompressionEnabled(boolean)"/>
      <method name="setPagingMinWindowBufferSize(int)"/>
      <method name="setPagingStore(weblogic.management.configuration.JMSStoreMBean)"/>
      <method name="setPersistentStore(weblogic.management.configuration.PersistentStoreMBean)"/>
      <method name="setProductionPausedAtStartup(java.lang.String)"/>
      <method name="setSessionPools(weblogic.management.configuration.JMSSessionPoolMBean[])"/>
      <method name="setStore(weblogic.management.configuration.JMSStoreMBean)"/>
      <method name="setStoreEnabled(boolean)"/>
      <method name="setStoreMessageCompressionEnabled(boolean)"/>
      <method name="setTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="setTemporaryTemplate(weblogic.management.configuration.JMSTemplateMBean)"/>
      <method name="setTemporaryTemplateName(java.lang.String)"/>
      <method name="setTemporaryTemplateResource(java.lang.String)"/>
      <method name="getDestinations()"/>
      <method name="getJMSMessageLogFile()"/>
      <method name="createJMSQueue(java.lang.String)"/>
      <method name="createJMSQueue(java.lang.String,weblogic.management.configuration.JMSQueueMBean)"/>
      <method name="lookupJMSQueue(java.lang.String)"/>
      <method name="getJMSQueues()"/>
      <method name="createJMSSessionPool(java.lang.String)"/>
      <method name="createJMSSessionPool(java.lang.String,weblogic.management.configuration.JMSSessionPoolMBean)"/>
      <method name="lookupJMSSessionPool(java.lang.String)"/>
      <method name="getJMSSessionPools()"/>
      <method name="getSessionPools()"/>
      <method name="getPagingStore()"/>
      <method name="getStore()"/>
      <method name="getTemporaryTemplate()"/>
      <method name="createJMSTopic(java.lang.String)"/>
      <method name="createJMSTopic(java.lang.String,weblogic.management.configuration.JMSTopicMBean)"/>
      <method name="lookupJMSTopic(java.lang.String)"/>
      <method name="getJMSTopics()"/>
      <method name="getPersistentStore()"/>
      <method name="getTargets()"/>
    </class>
    <class name="JMSSessionPoolMBean">
      <method name="addConnectionConsumer(weblogic.management.configuration.JMSConnectionConsumerMBean)"/>
      <method name="isTransacted()"/>
      <method name="removeConnectionConsumer(weblogic.management.configuration.JMSConnectionConsumerMBean)"/>
      <method name="getSessionsMaximum()"/>
      <method name="getAcknowledgeMode()"/>
      <method name="getConnectionFactory()"/>
      <method name="getListenerClass()"/>
      <method name="destroyJMSConnectionConsumer(weblogic.management.configuration.JMSConnectionConsumerMBean)"/>
      <method name="setAcknowledgeMode(java.lang.String)"/>
      <method name="setConnectionConsumers(weblogic.management.configuration.JMSConnectionConsumerMBean[])"/>
      <method name="setConnectionFactory(java.lang.String)"/>
      <method name="setListenerClass(java.lang.String)"/>
      <method name="setSessionsMaximum(int)"/>
      <method name="setTransacted(boolean)"/>
      <method name="createJMSConnectionConsumer(java.lang.String)"/>
      <method name="lookupJMSConnectionConsumer(java.lang.String)"/>
      <method name="getConnectionConsumers()"/>
      <method name="getJMSConnectionConsumers()"/>
    </class>
    <class name="JMSStoreMBean">
      <method name="getJMSServer()"/>
    </class>
    <class name="JMSSystemResourceMBean">
      <method name="getDescriptorFileName()"/>
      <method name="getName()"/>
      <method name="getJMSResource()"/>
    </class>
    <class name="JMSSystemResourceOverrideMBean">
      <method name="destroyForeignServer(weblogic.management.configuration.ForeignServerOverrideMBean)"/>
      <method name="createForeignServer(java.lang.String)"/>
      <method name="lookupForeignServer(java.lang.String)"/>
      <method name="getForeignServers()"/>
    </class>
    <class name="JMSTemplateMBean">
      <method name="addDestination(weblogic.management.configuration.JMSDestinationMBean)"/>
      <method name="isBytesPagingEnabled()"/>
      <method name="isMessagesPagingEnabled()"/>
      <method name="removeDestination(weblogic.management.configuration.JMSDestinationMBean)"/>
      <method name="setBytesPagingEnabled(boolean)"/>
      <method name="setMessagesPagingEnabled(boolean)"/>
      <method name="getDestinations()"/>
    </class>
    <class name="JMSTopicMBean">
      <method name="getMulticastPort()"/>
      <method name="getMulticastTTL()"/>
      <method name="getMulticastAddress()"/>
      <method name="setMulticastAddress(java.lang.String)"/>
      <method name="setMulticastPort(int)"/>
      <method name="setMulticastTTL(int)"/>
    </class>
    <class name="JMSVirtualDestinationMBean">
      <method name="getJNDIName()"/>
      <method name="setJNDIName(java.lang.String)"/>
    </class>
    <class name="JMXMBean">
      <method name="isCompatibilityMBeanServerEnabled()"/>
      <method name="isDomainMBeanServerEnabled()"/>
      <method name="isEditMBeanServerEnabled()"/>
      <method name="isManagedServerNotificationsEnabled()"/>
      <method name="isManagementAppletCreateEnabled()"/>
      <method name="isManagementEJBEnabled()"/>
      <method name="isPlatformMBeanServerEnabled()"/>
      <method name="isPlatformMBeanServerUsed()"/>
      <method name="isRuntimeMBeanServerEnabled()"/>
      <method name="getInvocationTimeoutSeconds()"/>
      <method name="setCompatibilityMBeanServerEnabled(boolean)"/>
      <method name="setDomainMBeanServerEnabled(boolean)"/>
      <method name="setEditMBeanServerEnabled(boolean)"/>
      <method name="setInvocationTimeoutSeconds(int)"/>
      <method name="setManagedServerNotificationsEnabled(boolean)"/>
      <method name="setManagementAppletCreateEnabled(boolean)"/>
      <method name="setManagementEJBEnabled(boolean)"/>
      <method name="setPlatformMBeanServerEnabled(boolean)"/>
      <method name="setPlatformMBeanServerUsed(boolean)"/>
      <method name="setRuntimeMBeanServerEnabled(boolean)"/>
    </class>
    <class name="JPAMBean">
      <method name="getDefaultJPAProvider()"/>
      <field name="PROVIDER_KODO"/>
      <field name="PROVIDER_TOPLINK"/>
      <method name="setDefaultJPAProvider(java.lang.String)"/>
    </class>
    <class name="JTAClusterMBean">
      <method name="getForgetHeuristics()"/>
      <method name="getParallelXAEnabled()"/>
      <method name="isClusterwideRecoveryEnabled()"/>
      <method name="isTLOGWriteWhenDeterminerExistsEnabled()"/>
      <method name="isTightlyCoupledTransactionsEnabled()"/>
      <method name="isTwoPhaseEnabled()"/>
      <method name="getAbandonTimeoutSeconds()"/>
      <method name="getBeforeCompletionIterationLimit()"/>
      <method name="getCheckpointIntervalSeconds()"/>
      <method name="getCompletionTimeoutSeconds()"/>
      <method name="getCrossDomainRecoveryRetryInterval()"/>
      <method name="getCrossSiteRecoveryLeaseExpiration()"/>
      <method name="getCrossSiteRecoveryLeaseUpdate()"/>
      <method name="getCrossSiteRecoveryRetryInterval()"/>
      <method name="getMaxResourceRequestsOnServer()"/>
      <method name="getMaxRetrySecondsBeforeDeterminerFail()"/>
      <method name="getMaxTransactions()"/>
      <method name="getMaxUniqueNameStatistics()"/>
      <method name="getMigrationCheckpointIntervalSeconds()"/>
      <method name="getPurgeResourceFromCheckpointIntervalSeconds()"/>
      <method name="getShutdownGracePeriod()"/>
      <method name="getTimeoutSeconds()"/>
      <method name="getUnregisterResourceGracePeriod()"/>
      <method name="getParallelXADispatchPolicy()"/>
      <method name="getRecoverySiteName()"/>
      <method name="getSecurityInteropMode()"/>
      <method name="getDeterminers()"/>
      <method name="getMaxResourceUnavailableMillis()"/>
      <method name="getMaxTransactionsHealthIntervalMillis()"/>
      <method name="getMaxXACallMillis()"/>
      <method name="getRecoveryThresholdMillis()"/>
      <method name="getSerializeEnlistmentsGCIntervalMillis()"/>
    </class>
    <class name="JTAMBean">
      <method name="getForgetHeuristics()"/>
      <method name="isClusterwideRecoveryEnabled()"/>
      <method name="isTLOGWriteWhenDeterminerExistsEnabled()"/>
      <method name="isTightlyCoupledTransactionsEnabled()"/>
      <method name="isTwoPhaseEnabled()"/>
      <method name="isWSATIssuedTokenEnabled()"/>
      <method name="getAbandonTimeoutSeconds()"/>
      <method name="getBeforeCompletionIterationLimit()"/>
      <method name="getCheckpointIntervalSeconds()"/>
      <method name="getCompletionTimeoutSeconds()"/>
      <method name="getCrossSiteRecoveryLeaseExpiration()"/>
      <method name="getCrossSiteRecoveryLeaseUpdate()"/>
      <method name="getCrossSiteRecoveryRetryInterval()"/>
      <method name="getMaxResourceRequestsOnServer()"/>
      <method name="getMaxRetrySecondsBeforeDeterminerFail()"/>
      <method name="getMaxTransactions()"/>
      <method name="getMaxUniqueNameStatistics()"/>
      <method name="getShutdownGracePeriod()"/>
      <method name="getTimeoutSeconds()"/>
      <method name="getUnregisterResourceGracePeriod()"/>
      <method name="getRecoverySiteName()"/>
      <method name="getSecurityInteropMode()"/>
      <method name="getWSATTransportSecurityMode()"/>
      <method name="getDeterminers()"/>
      <method name="getMaxResourceUnavailableMillis()"/>
      <method name="getMaxXACallMillis()"/>
      <method name="getSerializeEnlistmentsGCIntervalMillis()"/>
      <field name="CLIENTCERTREQUIRED"/>
      <field name="SSLNOTREQUIRED"/>
      <field name="SSLREQUIRED"/>
      <method name="setAbandonTimeoutSeconds(int)"/>
      <method name="setBeforeCompletionIterationLimit(int)"/>
      <method name="setCheckpointIntervalSeconds(int)"/>
      <method name="setClusterwideRecoveryEnabled(boolean)"/>
      <method name="setCompletionTimeoutSeconds(int)"/>
      <method name="setCrossSiteRecoveryLeaseExpiration(int)"/>
      <method name="setCrossSiteRecoveryLeaseUpdate(int)"/>
      <method name="setCrossSiteRecoveryRetryInterval(int)"/>
      <method name="setDeterminers(java.lang.String[])"/>
      <method name="setForgetHeuristics(boolean)"/>
      <method name="setMaxRetrySecondsBeforeDeterminerFail(int)"/>
      <method name="setMaxTransactions(int)"/>
      <method name="setMaxUniqueNameStatistics(int)"/>
      <method name="setParallelXAEnabled(boolean)"/>
      <method name="setRecoverySiteName(java.lang.String)"/>
      <method name="setSecurityInteropMode(java.lang.String)"/>
      <method name="setShutdownGracePeriod(int)"/>
      <method name="setTLOGWriteWhenDeterminerExistsEnabled(boolean)"/>
      <method name="setTightlyCoupledTransactionsEnabled(boolean)"/>
      <method name="setTimeoutSeconds(int)"/>
      <method name="setTwoPhaseEnabled(boolean)"/>
      <method name="setUnregisterResourceGracePeriod(int)"/>
      <method name="setWSATIssuedTokenEnabled(boolean)"/>
      <method name="setWSATTransportSecurityMode(java.lang.String)"/>
      <method name="getDeterminerCandidateResourceInfoList()"/>
    </class>
    <class name="JTAMigratableTargetMBean">
      <method name="isStrictOwnershipCheck()"/>
      <method name="getMigrationPolicy()"/>
      <method name="setMigrationPolicy(java.lang.String)"/>
      <method name="setStrictOwnershipCheck(boolean)"/>
      <method name="setUserPreferredServer(weblogic.management.configuration.ServerMBean)"/>
    </class>
    <class name="JTAPartitionMBean">
      <method name="getTimeoutSeconds()"/>
    </class>
    <class name="JoltConnectionPoolMBean">
      <method name="addFailoverAddress(java.lang.String)"/>
      <method name="addPrimaryAddress(java.lang.String)"/>
      <method name="isSecurityContextEnabled()"/>
      <method name="removeFailoverAddress(java.lang.String)"/>
      <method name="removePrimaryAddress(java.lang.String)"/>
      <method name="getApplicationPasswordEncrypted()"/>
      <method name="getKeyPassPhraseEncrypted()"/>
      <method name="getKeyStorePassPhraseEncrypted()"/>
      <method name="getTrustStorePassPhraseEncrypted()"/>
      <method name="getUserPasswordEncrypted()"/>
      <method name="getMaximumPoolSize()"/>
      <method name="getMinimumPoolSize()"/>
      <method name="getRecvTimeout()"/>
      <method name="getApplicationPassword()"/>
      <method name="getKeyPassPhrase()"/>
      <method name="getKeyStoreName()"/>
      <method name="getKeyStorePassPhrase()"/>
      <method name="getTrustStoreName()"/>
      <method name="getTrustStorePassPhrase()"/>
      <method name="getUserName()"/>
      <method name="getUserPassword()"/>
      <method name="getUserRole()"/>
      <method name="getFailoverAddresses()"/>
      <method name="getPrimaryAddresses()"/>
      <method name="setApplicationPassword(java.lang.String)"/>
      <method name="setApplicationPasswordEncrypted(byte[])"/>
      <method name="setFailoverAddresses(java.lang.String[])"/>
      <method name="setKeyPassPhrase(java.lang.String)"/>
      <method name="setKeyPassPhraseEncrypted(byte[])"/>
      <method name="setKeyStoreName(java.lang.String)"/>
      <method name="setKeyStorePassPhrase(java.lang.String)"/>
      <method name="setKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setMaximumPoolSize(int)"/>
      <method name="setMinimumPoolSize(int)"/>
      <method name="setPrimaryAddresses(java.lang.String[])"/>
      <method name="setRecvTimeout(int)"/>
      <method name="setSecurityContextEnabled(boolean)"/>
      <method name="setTrustStoreName(java.lang.String)"/>
      <method name="setTrustStorePassPhrase(java.lang.String)"/>
      <method name="setTrustStorePassPhraseEncrypted(byte[])"/>
      <method name="setUserName(java.lang.String)"/>
      <method name="setUserPassword(java.lang.String)"/>
      <method name="setUserPasswordEncrypted(byte[])"/>
      <method name="setUserRole(java.lang.String)"/>
    </class>
    <class name="KernelDebugMBean">
      <method name="getDebugAbbreviation()"/>
      <method name="getDebugConnection()"/>
      <method name="getDebugDGCEnrollment()"/>
      <method name="getDebugFailOver()"/>
      <method name="getDebugIIOP()"/>
      <method name="getDebugIIOPConnection()"/>
      <method name="getDebugIIOPMarshal()"/>
      <method name="getDebugIIOPOTS()"/>
      <method name="getDebugIIOPReplacer()"/>
      <method name="getDebugIIOPSecurity()"/>
      <method name="getDebugIIOPStartup()"/>
      <method name="getDebugIIOPTransport()"/>
      <method name="getDebugLoadBalancing()"/>
      <method name="getDebugLocalRemoteJVM()"/>
      <method name="getDebugMessaging()"/>
      <method name="getDebugMuxer()"/>
      <method name="getDebugMuxerConnection()"/>
      <method name="getDebugMuxerDetail()"/>
      <method name="getDebugMuxerException()"/>
      <method name="getDebugMuxerTimeout()"/>
      <method name="getDebugRC4()"/>
      <method name="getDebugRSA()"/>
      <method name="getDebugRouting()"/>
      <method name="getDebugSSL()"/>
      <method name="getDebugSelfTuning()"/>
      <method name="getDebugWorkContext()"/>
      <method name="getForceGCEachDGCPeriod()"/>
      <method name="getLogDGCStatistics()"/>
      <method name="getDebugParameters()"/>
      <method name="setDebugAbbreviation(boolean)"/>
      <method name="setDebugConnection(boolean)"/>
      <method name="setDebugDGCEnrollment(boolean)"/>
      <method name="setDebugFailOver(boolean)"/>
      <method name="setDebugIIOP(boolean)"/>
      <method name="setDebugIIOPConnection(boolean)"/>
      <method name="setDebugIIOPMarshal(boolean)"/>
      <method name="setDebugIIOPOTS(boolean)"/>
      <method name="setDebugIIOPReplacer(boolean)"/>
      <method name="setDebugIIOPSecurity(boolean)"/>
      <method name="setDebugIIOPStartup(boolean)"/>
      <method name="setDebugIIOPTransport(boolean)"/>
      <method name="setDebugLoadBalancing(boolean)"/>
      <method name="setDebugLocalRemoteJVM(boolean)"/>
      <method name="setDebugMessaging(boolean)"/>
      <method name="setDebugMuxer(boolean)"/>
      <method name="setDebugMuxerConnection(boolean)"/>
      <method name="setDebugMuxerDetail(boolean)"/>
      <method name="setDebugMuxerException(boolean)"/>
      <method name="setDebugMuxerTimeout(boolean)"/>
      <method name="setDebugParameters(java.util.Properties)"/>
      <method name="setDebugRC4(boolean)"/>
      <method name="setDebugRSA(boolean)"/>
      <method name="setDebugRouting(boolean)"/>
      <method name="setDebugSSL(boolean)"/>
      <method name="setDebugSelfTuning(boolean)"/>
      <method name="setDebugWorkContext(boolean)"/>
      <method name="setForceGCEachDGCPeriod(boolean)"/>
      <method name="setLogDGCStatistics(boolean)"/>
    </class>
    <class name="KernelMBean">
      <method name="getPrintStackTraceInProduction()"/>
      <method name="getUse81StyleExecuteQueues()"/>
      <method name="isAddWorkManagerThreadsByCpuCount()"/>
      <method name="isAllowShrinkingPriorityRequestQueue()"/>
      <method name="isEagerThreadLocalCleanup()"/>
      <method name="isGatheredWritesEnabled()"/>
      <method name="isInstrumentStackTraceEnabled()"/>
      <method name="isIsolatePartitionThreadLocals()"/>
      <method name="isLogRemoteExceptionsEnabled()"/>
      <method name="isNativeIOEnabled()"/>
      <method name="isOutboundEnabled()"/>
      <method name="isOutboundPrivateKeyEnabled()"/>
      <method name="isReverseDNSAllowed()"/>
      <method name="isScatteredReadsEnabled()"/>
      <method name="isSocketBufferSizeAsChunkSize()"/>
      <method name="isStdoutDebugEnabled()"/>
      <method name="isStdoutEnabled()"/>
      <method name="isStdoutLogStack()"/>
      <method name="isUseConcurrentQueueForRequestManager()"/>
      <method name="isUseDetailedThreadName()"/>
      <method name="isUseEnhancedIncrementAdvisor()"/>
      <method name="isUseEnhancedPriorityQueueForRequestManager()"/>
      <method name="getCompleteCOMMessageTimeout()"/>
      <method name="getCompleteHTTPMessageTimeout()"/>
      <method name="getCompleteIIOPMessageTimeout()"/>
      <method name="getCompleteMessageTimeout()"/>
      <method name="getCompleteT3MessageTimeout()"/>
      <method name="getCompleteWriteTimeout()"/>
      <method name="getConnectTimeout()"/>
      <method name="getDGCIdlePeriodsUntilTimeout()"/>
      <method name="getIdleConnectionTimeout()"/>
      <method name="getIdleIIOPConnectionTimeout()"/>
      <method name="getIdlePeriodsUntilTimeout()"/>
      <method name="getMTUSize()"/>
      <method name="getMaxCOMMessageSize()"/>
      <method name="getMaxHTTPMessageSize()"/>
      <method name="getMaxIIOPMessageSize()"/>
      <method name="getMaxMessageSize()"/>
      <method name="getMaxOpenSockCount()"/>
      <method name="getMaxT3MessageSize()"/>
      <method name="getMessagingBridgeThreadPoolSize()"/>
      <method name="getPeriodLength()"/>
      <method name="getSocketReaders()"/>
      <method name="getStdoutSeverityLevel()"/>
      <method name="getStuckThreadMaxTime()"/>
      <method name="getStuckThreadTimerInterval()"/>
      <method name="getThreadPoolPercentSocketReaders()"/>
      <method name="getAdministrationProtocol()"/>
      <method name="getDefaultProtocol()"/>
      <method name="getDefaultSecureProtocol()"/>
      <method name="getIIOPTxMechanism()"/>
      <method name="getMuxerClass()"/>
      <method name="getStdoutFormat()"/>
      <field name="STDOUT_NOID"/>
      <field name="STDOUT_STANDARD"/>
      <method name="setAddWorkManagerThreadsByCpuCount(boolean)"/>
      <method name="setAdministrationProtocol(java.lang.String)"/>
      <method name="setAllowShrinkingPriorityRequestQueue(boolean)"/>
      <method name="setCompleteCOMMessageTimeout(int)"/>
      <method name="setCompleteHTTPMessageTimeout(int)"/>
      <method name="setCompleteIIOPMessageTimeout(int)"/>
      <method name="setCompleteMessageTimeout(int)"/>
      <method name="setCompleteT3MessageTimeout(int)"/>
      <method name="setCompleteWriteTimeout(int)"/>
      <method name="setConnectTimeout(int)"/>
      <method name="setDGCIdlePeriodsUntilTimeout(int)"/>
      <method name="setDefaultProtocol(java.lang.String)"/>
      <method name="setDefaultSecureProtocol(java.lang.String)"/>
      <method name="setEagerThreadLocalCleanup(boolean)"/>
      <method name="setGatheredWritesEnabled(boolean)"/>
      <method name="setIIOPTxMechanism(java.lang.String)"/>
      <method name="setIdleConnectionTimeout(int)"/>
      <method name="setIdleIIOPConnectionTimeout(int)"/>
      <method name="setIdlePeriodsUntilTimeout(int)"/>
      <method name="setInstrumentStackTraceEnabled(boolean)"/>
      <method name="setIsolatePartitionThreadLocals(boolean)"/>
      <method name="setLogRemoteExceptionsEnabled(boolean)"/>
      <method name="setMTUSize(int)"/>
      <method name="setMaxCOMMessageSize(int)"/>
      <method name="setMaxHTTPMessageSize(int)"/>
      <method name="setMaxIIOPMessageSize(int)"/>
      <method name="setMaxMessageSize(int)"/>
      <method name="setMaxOpenSockCount(int)"/>
      <method name="setMaxT3MessageSize(int)"/>
      <method name="setMessagingBridgeThreadPoolSize(int)"/>
      <method name="setMuxerClass(java.lang.String)"/>
      <method name="setNativeIOEnabled(boolean)"/>
      <method name="setOutboundEnabled(boolean)"/>
      <method name="setOutboundPrivateKeyEnabled(boolean)"/>
      <method name="setPeriodLength(int)"/>
      <method name="setPrintStackTraceInProduction(boolean)"/>
      <method name="setReverseDNSAllowed(boolean)"/>
      <method name="setScatteredReadsEnabled(boolean)"/>
      <method name="setSocketBufferSizeAsChunkSize(boolean)"/>
      <method name="setSocketReaders(int)"/>
      <method name="setStdoutDebugEnabled(boolean)"/>
      <method name="setStdoutEnabled(boolean)"/>
      <method name="setStdoutFormat(java.lang.String)"/>
      <method name="setStdoutLogStack(boolean)"/>
      <method name="setStdoutSeverityLevel(int)"/>
      <method name="setStuckThreadMaxTime(int)"/>
      <method name="setStuckThreadTimerInterval(int)"/>
      <method name="setThreadPoolPercentSocketReaders(int)"/>
      <method name="setUse81StyleExecuteQueues(boolean)"/>
      <method name="setUseConcurrentQueueForRequestManager(boolean)"/>
      <method name="setUseDetailedThreadName(boolean)"/>
      <method name="setUseEnhancedIncrementAdvisor(boolean)"/>
      <method name="setUseEnhancedPriorityQueueForRequestManager(boolean)"/>
      <method name="lookupExecuteQueue(java.lang.String)"/>
      <method name="getExecuteQueues()"/>
      <method name="getIIOP()"/>
      <method name="getLog()"/>
      <method name="getSSL()"/>
    </class>
    <class name="LibraryMBean">
      <method name="getName()"/>
    </class>
    <class name="LifecycleManagerConfigMBean">
      <method name="isEnabled()"/>
      <method name="isOutOfBandEnabled()"/>
      <method name="getPeriodicSyncInterval()"/>
      <method name="getDataSourceName()"/>
      <method name="getDeploymentType()"/>
      <method name="getPersistenceType()"/>
      <method name="getConfigFileLockTimeout()"/>
      <method name="getPropagationActivateTimeout()"/>
      <method name="getServerReadyTimeout()"/>
      <method name="getServerRuntimeTimeout()"/>
      <field name="DEPLOYMENT_TYPE_ADMIN"/>
      <field name="DEPLOYMENT_TYPE_HA"/>
      <field name="DEPLOYMENT_TYPE_NONE"/>
      <field name="PERSISTENCE_TYPE_DB"/>
      <field name="PERSISTENCE_TYPE_XML"/>
      <method name="destroyConfiguredEndPoint(weblogic.management.configuration.LifecycleManagerEndPointMBean)"/>
      <method name="setConfigFileLockTimeout(long)"/>
      <method name="setDataSourceName(java.lang.String)"/>
      <method name="setDeploymentType(java.lang.String)"/>
      <method name="setOutOfBandEnabled(boolean)"/>
      <method name="setPeriodicSyncInterval(int)"/>
      <method name="setPersistenceType(java.lang.String)"/>
      <method name="setPropagationActivateTimeout(long)"/>
      <method name="setServerReadyTimeout(long)"/>
      <method name="setServerRuntimeTimeout(long)"/>
      <method name="setTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="createConfiguredEndPoint(java.lang.String)"/>
      <method name="lookupConfiguredEndPoint(java.lang.String)"/>
      <method name="getConfiguredEndPoints()"/>
      <method name="getEndPoints()"/>
      <method name="getTarget()"/>
    </class>
    <class name="LifecycleManagerEndPointMBean">
      <method name="isEnabled()"/>
      <method name="getPasswordEncrypted()"/>
      <method name="getRuntimeName()"/>
      <method name="getURL()"/>
      <method name="getUsername()"/>
      <method name="setEnabled(boolean)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setRuntimeName(java.lang.String)"/>
      <method name="setURL(java.lang.String)"/>
      <method name="setUsername(java.lang.String)"/>
    </class>
    <class name="LogFileMBean">
      <method name="getRotateLogOnStartup()"/>
      <method name="isNumberOfFilesLimited()"/>
      <method name="getBufferSizeKB()"/>
      <method name="getFileCount()"/>
      <method name="getFileMinSize()"/>
      <method name="getFileTimeSpan()"/>
      <method name="getDateFormatPattern()"/>
      <method name="getFileName()"/>
      <method name="getLogFileRotationDir()"/>
      <method name="getRotationTime()"/>
      <method name="getRotationType()"/>
      <field name="MAX_ROTATED_FILES"/>
      <field name="DEFAULT_FILE_NAME"/>
      <field name="NONE"/>
      <field name="SIZE"/>
      <field name="SIZE_OR_TIME"/>
      <field name="TIME"/>
      <field name="TIME_FORMAT"/>
      <method name="setBufferSizeKB(int)"/>
      <method name="setDateFormatPattern(java.lang.String)"/>
      <method name="setFileCount(int)"/>
      <method name="setFileMinSize(int)"/>
      <method name="setFileName(java.lang.String)"/>
      <method name="setFileTimeSpan(int)"/>
      <method name="setFileTimeSpanFactor(long)"/>
      <method name="setLogFileRotationDir(java.lang.String)"/>
      <method name="setNumberOfFilesLimited(boolean)"/>
      <method name="setRotateLogOnStartup(boolean)"/>
      <method name="setRotationTime(java.lang.String)"/>
      <method name="setRotationType(java.lang.String)"/>
    </class>
    <class name="LogFilterMBean">
      <method name="getFilterExpression()"/>
      <method name="setFilterExpression(java.lang.String)"/>
      <method name="setSeverityLevel(int)"/>
      <method name="setSubsystemNames(java.lang.String[])"/>
      <method name="setUserIds(java.lang.String[])"/>
    </class>
    <class name="LogMBean">
      <method name="isLog4jLoggingEnabled()"/>
      <method name="isLogMonitoringEnabled()"/>
      <method name="isRedirectStderrToServerLogEnabled()"/>
      <method name="isRedirectStdoutToServerLogEnabled()"/>
      <method name="isServerLoggingBridgeUseParentLoggersEnabled()"/>
      <method name="getDomainLogBroadcasterBufferSize()"/>
      <method name="getLogMonitoringIntervalSecs()"/>
      <method name="getLogMonitoringMaxThrottleMessageSignatureCount()"/>
      <method name="getLogMonitoringThrottleMessageLength()"/>
      <method name="getLogMonitoringThrottleThreshold()"/>
      <method name="getMemoryBufferSize()"/>
      <method name="getDomainLogBroadcastSeverity()"/>
      <method name="getMemoryBufferSeverity()"/>
      <method name="getPlatformLoggerLevels()"/>
      <method name="setDomainLogBroadcastFilter(weblogic.management.configuration.LogFilterMBean)"/>
      <method name="setDomainLogBroadcastSeverity(java.lang.String)"/>
      <method name="setDomainLogBroadcasterBufferSize(int)"/>
      <method name="setLog4jLoggingEnabled(boolean)"/>
      <method name="setLogFileFilter(weblogic.management.configuration.LogFilterMBean)"/>
      <method name="setMemoryBufferFilter(weblogic.management.configuration.LogFilterMBean)"/>
      <method name="setMemoryBufferSeverity(java.lang.String)"/>
      <method name="setMemoryBufferSize(int)"/>
      <method name="setPlatformLoggerLevels(java.util.Properties)"/>
      <method name="setRedirectStderrToServerLogEnabled(boolean)"/>
      <method name="setRedirectStdoutToServerLogEnabled(boolean)"/>
      <method name="setServerLoggingBridgeAtRootLoggerEnabled(boolean)"/>
      <method name="setServerLoggingBridgeUseParentLoggersEnabled(boolean)"/>
      <method name="setStdoutFilter(weblogic.management.configuration.LogFilterMBean)"/>
      <method name="getDomainLogBroadcastFilter()"/>
      <method name="getLogFileFilter()"/>
      <method name="getMemoryBufferFilter()"/>
      <method name="getStdoutFilter()"/>
    </class>
    <class name="MachineMBean">
      <method name="getAddresses()"/>
      <method name="setAddresses(java.lang.String[])"/>
      <method name="getNodeManager()"/>
    </class>
    <class name="MailSessionMBean">
      <method name="getSessionPasswordEncrypted()"/>
      <method name="getName()"/>
      <method name="getSessionPassword()"/>
      <method name="getSessionUsername()"/>
      <method name="getProperties()"/>
      <method name="setProperties(java.util.Properties)"/>
      <method name="setSessionPassword(java.lang.String)"/>
      <method name="setSessionPasswordEncrypted(byte[])"/>
      <method name="setSessionUsername(java.lang.String)"/>
    </class>
    <class name="MailSessionOverrideMBean">
      <method name="getSessionPasswordEncrypted()"/>
      <method name="getSessionPassword()"/>
      <method name="getSessionUsername()"/>
      <method name="getProperties()"/>
      <method name="setProperties(java.util.Properties)"/>
      <method name="setSessionPassword(java.lang.String)"/>
      <method name="setSessionPasswordEncrypted(byte[])"/>
      <method name="setSessionUsername(java.lang.String)"/>
    </class>
    <class name="ManagedExecutorServiceTemplateMBean" members="concealed"/>
    <class name="ManagedExternalServerMBean">
      <method name="getAutoRestart()"/>
      <method name="getNMSocketCreateTimeoutInMillis()"/>
      <method name="getRestartDelaySeconds()"/>
      <method name="getRestartIntervalSeconds()"/>
      <method name="getRestartMax()"/>
      <method name="getName()"/>
      <method name="setAutoRestart(boolean)"/>
      <method name="setMachine(weblogic.management.configuration.MachineMBean)"/>
      <method name="setNMSocketCreateTimeoutInMillis(int)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setRestartDelaySeconds(int)"/>
      <method name="setRestartIntervalSeconds(int)"/>
      <method name="setRestartMax(int)"/>
      <method name="getMachine()"/>
    </class>
    <class name="ManagedExternalServerStartMBean">
      <method name="getArguments()"/>
      <method name="getBeaHome()"/>
      <method name="getClassPath()"/>
      <method name="getJavaHome()"/>
      <method name="getJavaVendor()"/>
      <method name="getMWHome()"/>
      <method name="getRootDirectory()"/>
      <method name="setArguments(java.lang.String)"/>
      <method name="setBeaHome(java.lang.String)"/>
      <method name="setClassPath(java.lang.String)"/>
      <method name="setJavaHome(java.lang.String)"/>
      <method name="setJavaVendor(java.lang.String)"/>
      <method name="setMWHome(java.lang.String)"/>
      <method name="setRootDirectory(java.lang.String)"/>
    </class>
    <class name="ManagedScheduledExecutorServiceTemplateMBean" members="concealed"/>
    <class name="ManagedThreadFactoryTemplateMBean" members="concealed"/>
    <class name="MaxThreadsConstraintMBean">
      <method name="getCount()"/>
      <method name="getQueueSize()"/>
      <method name="getConnectionPoolName()"/>
      <method name="setConnectionPoolName(java.lang.String)"/>
      <method name="setCount(int)"/>
      <method name="setQueueSize(int)"/>
    </class>
    <class name="MessagingBridgeMBean">
      <method name="getPreserveMsgProperty()"/>
      <method name="isAsyncEnabled()"/>
      <method name="isDurabilityEnabled()"/>
      <method name="isQOSDegradationAllowed()"/>
      <method name="isStarted()"/>
      <method name="getBatchSize()"/>
      <method name="getIdleTimeMaximum()"/>
      <method name="getReconnectDelayIncrease()"/>
      <method name="getReconnectDelayMaximum()"/>
      <method name="getReconnectDelayMinimum()"/>
      <method name="getTransactionTimeout()"/>
      <method name="getName()"/>
      <method name="getQualityOfService()"/>
      <method name="getSelector()"/>
      <method name="getBatchInterval()"/>
      <field name="BRIDGE_POLICY_AUTO"/>
      <field name="BRIDGE_POLICY_MANUAL"/>
      <field name="BRIDGE_POLICY_SCHEDULED"/>
      <field name="BRIDGE_QOS_ATMOST_ONCE"/>
      <field name="BRIDGE_QOS_DUPLICATE_OKAY"/>
      <field name="BRIDGE_QOS_EXACTLY_ONCE"/>
      <method name="setAsyncEnabled(boolean)"/>
      <method name="setBatchInterval(long)"/>
      <method name="setBatchSize(int)"/>
      <method name="setDurabilityEnabled(boolean)"/>
      <method name="setIdleTimeMaximum(int)"/>
      <method name="setPreserveMsgProperty(boolean)"/>
      <method name="setQOSDegradationAllowed(boolean)"/>
      <method name="setQualityOfService(java.lang.String)"/>
      <method name="setReconnectDelayIncrease(int)"/>
      <method name="setReconnectDelayMaximum(int)"/>
      <method name="setReconnectDelayMinimum(int)"/>
      <method name="setSelector(java.lang.String)"/>
      <method name="setSourceDestination(weblogic.management.configuration.BridgeDestinationCommonMBean)"/>
      <method name="setStarted(boolean)"/>
      <method name="setTargetDestination(weblogic.management.configuration.BridgeDestinationCommonMBean)"/>
      <method name="setTransactionTimeout(int)"/>
      <method name="getSourceDestination()"/>
      <method name="getTargetDestination()"/>
    </class>
    <class name="MigratableTargetMBean">
      <method name="addConstrainedCandidateServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="getRestartOnFailure()"/>
      <method name="isNonLocalPostAllowed()"/>
      <method name="isPostScriptFailureFatal()"/>
      <method name="removeConstrainedCandidateServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="getNumberOfRestartAttempts()"/>
      <method name="getSecondsBetweenRestarts()"/>
      <method name="getMigrationPolicy()"/>
      <method name="getPostScript()"/>
      <method name="getPreScript()"/>
      <field name="DEFAULT_MIGRATABLETARGET_SUFFIX"/>
      <field name="EXACTLY_ONCE"/>
      <field name="FAILURE_RECOVERY"/>
      <field name="NONE"/>
      <field name="SHUTDOWN_RECOVERY"/>
      <method name="setAllCandidateServers(weblogic.management.configuration.ServerMBean[])"/>
      <method name="setCluster(weblogic.management.configuration.ClusterMBean)"/>
      <method name="setConstrainedCandidateServers(weblogic.management.configuration.ServerMBean[])"/>
      <method name="setMigrationPolicy(java.lang.String)"/>
      <method name="setNonLocalPostAllowed(boolean)"/>
      <method name="setNumberOfRestartAttempts(int)"/>
      <method name="setPostScript(java.lang.String)"/>
      <method name="setPostScriptFailureFatal(boolean)"/>
      <method name="setPreScript(java.lang.String)"/>
      <method name="setRestartOnFailure(boolean)"/>
      <method name="setSecondsBetweenRestarts(int)"/>
      <method name="setUserPreferredServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="getCluster()"/>
      <method name="getAllCandidateServers()"/>
      <method name="getConstrainedCandidateServers()"/>
    </class>
    <class name="MinThreadsConstraintMBean">
      <method name="getCount()"/>
      <method name="setCount(int)"/>
    </class>
    <class name="NMPasswordValidator">
      <method name="validatePassword(java.lang.String)"/>
    </class>
    <class name="NetworkAccessPointMBean">
      <method name="getResolveDNSName()"/>
      <method name="getTimeoutConnectionWithPendingResponses()"/>
      <method name="getUseFastSerialization()"/>
      <method name="isAllowUnencryptedNullCipher()"/>
      <method name="isChannelIdentityCustomized()"/>
      <method name="isClientCertificateEnforced()"/>
      <method name="isClientInitSecureRenegotiationAccepted()"/>
      <method name="isEnabled()"/>
      <method name="isHostnameVerificationIgnored()"/>
      <method name="isHttpEnabledForThisProtocol()"/>
      <method name="isOutboundEnabled()"/>
      <method name="isOutboundPrivateKeyEnabled()"/>
      <method name="isSDPEnabled()"/>
      <method name="isSSLv2HelloEnabled()"/>
      <method name="isTunnelingEnabled()"/>
      <method name="isTwoWaySSLEnabled()"/>
      <method name="getCustomIdentityKeyStorePassPhraseEncrypted()"/>
      <method name="getCustomPrivateKeyPassPhraseEncrypted()"/>
      <method name="getAcceptBacklog()"/>
      <method name="getChannelWeight()"/>
      <method name="getCompleteMessageTimeout()"/>
      <method name="getConnectTimeout()"/>
      <method name="getIdleConnectionTimeout()"/>
      <method name="getListenPort()"/>
      <method name="getLoginTimeoutMillis()"/>
      <method name="getMaxBackoffBetweenFailures()"/>
      <method name="getMaxConnectedClients()"/>
      <method name="getMaxMessageSize()"/>
      <method name="getProxyPort()"/>
      <method name="getPublicPort()"/>
      <method name="getTunnelingClientPingSecs()"/>
      <method name="getTunnelingClientTimeoutSecs()"/>
      <method name="getClusterAddress()"/>
      <method name="getCustomIdentityKeyStoreFileName()"/>
      <method name="getCustomIdentityKeyStorePassPhrase()"/>
      <method name="getCustomIdentityKeyStoreType()"/>
      <method name="getCustomPrivateKeyAlias()"/>
      <method name="getCustomPrivateKeyPassPhrase()"/>
      <method name="getHostnameVerifier()"/>
      <method name="getInboundCertificateValidation()"/>
      <method name="getListenAddress()"/>
      <method name="getMinimumTLSProtocolVersion()"/>
      <method name="getName()"/>
      <method name="getOutboundCertificateValidation()"/>
      <method name="getOutboundPrivateKeyAlias()"/>
      <method name="getOutboundPrivateKeyPassPhrase()"/>
      <method name="getPrivateKeyAlias()"/>
      <method name="getPrivateKeyPassPhrase()"/>
      <method name="getProtocol()"/>
      <method name="getProxyAddress()"/>
      <method name="getPublicAddress()"/>
      <method name="getCiphersuites()"/>
      <method name="setAcceptBacklog(int)"/>
      <method name="setAllowUnencryptedNullCipher(boolean)"/>
      <method name="setChannelIdentityCustomized(boolean)"/>
      <method name="setChannelWeight(int)"/>
      <method name="setCiphersuites(java.lang.String[])"/>
      <method name="setClientCertificateEnforced(boolean)"/>
      <method name="setClusterAddress(java.lang.String)"/>
      <method name="setCompleteCOMMessageTimeout(int)"/>
      <method name="setCompleteHTTPMessageTimeout(int)"/>
      <method name="setCompleteIIOPMessageTimeout(int)"/>
      <method name="setCompleteMessageTimeout(int)"/>
      <method name="setCompleteT3MessageTimeout(int)"/>
      <method name="setConnectTimeout(int)"/>
      <method name="setCustomIdentityKeyStoreFileName(java.lang.String)"/>
      <method name="setCustomIdentityKeyStorePassPhrase(java.lang.String)"/>
      <method name="setCustomIdentityKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setCustomIdentityKeyStoreType(java.lang.String)"/>
      <method name="setCustomPrivateKeyAlias(java.lang.String)"/>
      <method name="setCustomPrivateKeyPassPhrase(java.lang.String)"/>
      <method name="setCustomPrivateKeyPassPhraseEncrypted(byte[])"/>
      <method name="setEnabled(boolean)"/>
      <method name="setExternalDNSName(java.lang.String)"/>
      <method name="setHostnameVerificationIgnored(boolean)"/>
      <method name="setHostnameVerifier(java.lang.String)"/>
      <method name="setHttpEnabledForThisProtocol(boolean)"/>
      <method name="setIdleConnectionTimeout(int)"/>
      <method name="setIdleIIOPConnectionTimeout(int)"/>
      <method name="setInboundCertificateValidation(java.lang.String)"/>
      <method name="setListenAddress(java.lang.String)"/>
      <method name="setListenPort(int)"/>
      <method name="setLoginTimeoutMillis(int)"/>
      <method name="setLoginTimeoutMillisSSL(int)"/>
      <method name="setMaxBackoffBetweenFailures(int)"/>
      <method name="setMaxConnectedClients(int)"/>
      <method name="setMaxMessageSize(int)"/>
      <method name="setMinimumTLSProtocolVersion(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setOutboundCertificateValidation(java.lang.String)"/>
      <method name="setOutboundEnabled(boolean)"/>
      <method name="setOutboundPrivateKeyEnabled(boolean)"/>
      <method name="setProtocol(java.lang.String)"/>
      <method name="setProxyAddress(java.lang.String)"/>
      <method name="setProxyPort(int)"/>
      <method name="setPublicAddress(java.lang.String)"/>
      <method name="setPublicPort(int)"/>
      <method name="setResolveDNSName(boolean)"/>
      <method name="setSDPEnabled(boolean)"/>
      <method name="setSSLListenPort(int)"/>
      <method name="setTimeoutConnectionWithPendingResponses(boolean)"/>
      <method name="setTunnelingClientPingSecs(int)"/>
      <method name="setTunnelingClientTimeoutSecs(int)"/>
      <method name="setTunnelingEnabled(boolean)"/>
      <method name="setTwoWaySSLEnabled(boolean)"/>
      <method name="setUseFastSerialization(boolean)"/>
    </class>
    <class name="NetworkChannelMBean">
      <method name="isBoundOutgoingEnabled()"/>
      <method name="isCOMEnabled()"/>
      <method name="isHTTPEnabled()"/>
      <method name="isHTTPSEnabled()"/>
      <method name="isListenPortEnabled()"/>
      <method name="isOutgoingEnabled()"/>
      <method name="isSSLListenPortEnabled()"/>
      <method name="isT3Enabled()"/>
      <method name="isT3SEnabled()"/>
      <method name="isTunnelingEnabled()"/>
      <method name="getAcceptBacklog()"/>
      <method name="getChannelWeight()"/>
      <method name="getCompleteCOMMessageTimeout()"/>
      <method name="getCompleteHTTPMessageTimeout()"/>
      <method name="getCompleteT3MessageTimeout()"/>
      <method name="getListenPort()"/>
      <method name="getLoginTimeoutMillis()"/>
      <method name="getLoginTimeoutMillisSSL()"/>
      <method name="getMaxCOMMessageSize()"/>
      <method name="getMaxHTTPMessageSize()"/>
      <method name="getMaxT3MessageSize()"/>
      <method name="getSSLListenPort()"/>
      <method name="getTunnelingClientPingSecs()"/>
      <method name="getTunnelingClientTimeoutSecs()"/>
      <method name="getClusterAddress()"/>
      <method name="getDescription()"/>
      <method name="getName()"/>
      <method name="setAcceptBacklog(int)"/>
      <method name="setCOMEnabled(boolean)"/>
      <method name="setChannelWeight(int)"/>
      <method name="setClusterAddress(java.lang.String)"/>
      <method name="setCompleteCOMMessageTimeout(int)"/>
      <method name="setCompleteHTTPMessageTimeout(int)"/>
      <method name="setCompleteIIOPMessageTimeout(int)"/>
      <method name="setCompleteT3MessageTimeout(int)"/>
      <method name="setDefaultIIOPPassword(java.lang.String)"/>
      <method name="setDefaultIIOPPasswordEncrypted(byte[])"/>
      <method name="setDefaultIIOPUser(java.lang.String)"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setHTTPEnabled(boolean)"/>
      <method name="setHTTPSEnabled(boolean)"/>
      <method name="setIIOPEnabled(boolean)"/>
      <method name="setIIOPSEnabled(boolean)"/>
      <method name="setIdleIIOPConnectionTimeout(int)"/>
      <method name="setListenPort(int)"/>
      <method name="setListenPortEnabled(boolean)"/>
      <method name="setLoginTimeoutMillis(int)"/>
      <method name="setLoginTimeoutMillisSSL(int)"/>
      <method name="setMaxCOMMessageSize(int)"/>
      <method name="setMaxHTTPMessageSize(int)"/>
      <method name="setMaxIIOPMessageSize(int)"/>
      <method name="setMaxT3MessageSize(int)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setOutgoingEnabled(boolean)"/>
      <method name="setSSLListenPort(int)"/>
      <method name="setSSLListenPortEnabled(boolean)"/>
      <method name="setT3Enabled(boolean)"/>
      <method name="setT3SEnabled(boolean)"/>
      <method name="setTunnelingClientPingSecs(int)"/>
      <method name="setTunnelingClientTimeoutSecs(int)"/>
      <method name="setTunnelingEnabled(boolean)"/>
    </class>
    <class name="NodeManagerMBean">
      <method name="isDebugEnabled()"/>
      <method name="getPasswordEncrypted()"/>
      <method name="getListenPort()"/>
      <method name="getNMSocketCreateTimeoutInMillis()"/>
      <method name="getAdapter()"/>
      <method name="getAdapterName()"/>
      <method name="getAdapterVersion()"/>
      <method name="getListenAddress()"/>
      <method name="getNMType()"/>
      <method name="getNodeManagerHome()"/>
      <method name="getPassword()"/>
      <method name="getShellCommand()"/>
      <method name="getUserName()"/>
      <method name="getInstalledVMMAdapters()"/>
      <field name="ADAPTER_SEPARATOR"/>
      <method name="setAdapter(java.lang.String)"/>
      <method name="setAdapterName(java.lang.String)"/>
      <method name="setAdapterVersion(java.lang.String)"/>
      <method name="setDebugEnabled(boolean)"/>
      <method name="setListenAddress(java.lang.String)"/>
      <method name="setListenPort(int)"/>
      <method name="setNMSocketCreateTimeoutInMillis(int)"/>
      <method name="setNMType(java.lang.String)"/>
      <method name="setNodeManagerHome(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setShellCommand(java.lang.String)"/>
      <method name="setUserName(java.lang.String)"/>
    </class>
    <class name="OptionalFeatureDeploymentMBean">
      <method name="destroyOptionalFeature(weblogic.management.configuration.OptionalFeatureMBean)"/>
      <method name="lookupOptionalFeature(java.lang.String)"/>
      <method name="getOptionalFeatures()"/>
    </class>
    <class name="OptionalFeatureMBean">
      <method name="isEnabled()"/>
      <method name="setEnabled(boolean)"/>
    </class>
    <class name="OsgiFrameworkMBean">
      <method name="isRegisterGlobalDataSources()"/>
      <method name="isRegisterGlobalWorkManagers()"/>
      <method name="getDeployInstallationBundles()"/>
      <method name="getFactoryImplementationClass()"/>
      <method name="getName()"/>
      <method name="getOrgOsgiFrameworkBootdelegation()"/>
      <method name="getOrgOsgiFrameworkSystemPackagesExtra()"/>
      <method name="getOsgiImplementationLocation()"/>
      <method name="getInitProperties()"/>
      <method name="setDeployInstallationBundles(java.lang.String)"/>
      <method name="setFactoryImplementationClass(java.lang.String)"/>
      <method name="setInitProperties(java.util.Properties)"/>
      <method name="setOrgOsgiFrameworkBootdelegation(java.lang.String)"/>
      <method name="setOrgOsgiFrameworkSystemPackagesExtra(java.lang.String)"/>
      <method name="setOsgiImplementationLocation(java.lang.String)"/>
      <method name="setRegisterGlobalDataSources(boolean)"/>
      <method name="setRegisterGlobalWorkManagers(boolean)"/>
    </class>
    <class name="OutOfDateConfigurationException">
      <method name="getCurrentVersion()"/>
      <method name="getVersion()"/>
    </class>
    <class name="OverloadProtectionMBean">
      <method name="getFreeMemoryPercentHighThreshold()"/>
      <method name="getFreeMemoryPercentLowThreshold()"/>
      <method name="getSharedCapacityForWorkManagers()"/>
      <method name="getFailureAction()"/>
      <method name="getPanicAction()"/>
      <field name="ADMIN_STATE"/>
      <field name="FORCE_SHUTDOWN"/>
      <field name="NO_ACTION"/>
      <field name="SYSTEM_EXIT"/>
      <method name="destroyServerFailureTrigger()"/>
      <method name="setFailureAction(java.lang.String)"/>
      <method name="setFreeMemoryPercentHighThreshold(int)"/>
      <method name="setFreeMemoryPercentLowThreshold(int)"/>
      <method name="setPanicAction(java.lang.String)"/>
      <method name="setSharedCapacityForWorkManagers(int)"/>
      <method name="createServerFailureTrigger()"/>
      <method name="getServerFailureTrigger()"/>
    </class>
    <class name="ParameterMBean">
      <method name="getDescription()"/>
      <method name="getName()"/>
      <method name="getValue()"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="PartitionFileSystemMBean" members="concealed"/>
    <class name="PartitionLogMBean" members="concealed"/>
    <class name="PartitionMBean">
      <method name="isEagerTrackingOfResourceMetricsEnabled()"/>
      <method name="isIgnoreSessionsDuringShutdown()"/>
      <method name="isParallelDeployApplicationModules()"/>
      <method name="isParallelDeployApplications()"/>
      <method name="getResourceDeploymentPlan()"/>
      <method name="getResourceDeploymentPlanExternalDescriptors()"/>
      <method name="getGracefulShutdownTimeout()"/>
      <method name="getMaxConcurrentLongRunningRequests()"/>
      <method name="getMaxConcurrentNewThreads()"/>
      <method name="getPartitionLifeCycleTimeoutVal()"/>
      <method name="getRCMHistoricalDataBufferLimit()"/>
      <method name="getStartupTimeout()"/>
      <method name="getBatchJobsDataSourceJndiName()"/>
      <method name="getBatchJobsExecutorServiceName()"/>
      <method name="getJobSchedulerTableName()"/>
      <method name="getName()"/>
      <method name="getPartitionID()"/>
      <method name="getPrimaryIdentityDomain()"/>
      <method name="getResourceDeploymentPlanPath()"/>
      <method name="getUploadDirectoryName()"/>
      <method name="addAvailableTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="addDefaultTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="destroyCoherencePartitionCacheConfig(weblogic.management.configuration.CoherencePartitionCacheConfigMBean)"/>
      <method name="destroyForeignJNDIProviderOverride(weblogic.management.configuration.ForeignJNDIProviderOverrideMBean)"/>
      <method name="destroyJDBCSystemResourceOverride(weblogic.management.configuration.JDBCSystemResourceOverrideMBean)"/>
      <method name="destroyJMSSystemResourceOverride(weblogic.management.configuration.JMSSystemResourceOverrideMBean)"/>
      <method name="destroyMailSessionOverride(weblogic.management.configuration.MailSessionOverrideMBean)"/>
      <method name="destroyManagedExecutorServiceTemplate(weblogic.management.configuration.ManagedExecutorServiceTemplateMBean)"/>
      <method name="destroyManagedScheduledExecutorServiceTemplate(weblogic.management.configuration.ManagedScheduledExecutorServiceTemplateMBean)"/>
      <method name="destroyManagedThreadFactoryTemplate(weblogic.management.configuration.ManagedThreadFactoryTemplateMBean)"/>
      <method name="destroyPartitionWorkManager(weblogic.management.configuration.PartitionWorkManagerMBean)"/>
      <method name="destroyPartitionWorkManagerRef(weblogic.management.configuration.PartitionWorkManagerMBean)"/>
      <method name="destroyResourceGroup(weblogic.management.configuration.ResourceGroupMBean)"/>
      <method name="destroyResourceManager(weblogic.management.configuration.ResourceManagerMBean)"/>
      <method name="destroyResourceManagerRef(weblogic.management.configuration.ResourceManagerMBean)"/>
      <method name="removeAvailableTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="removeDefaultTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="setAvailableTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="setBatchJobsDataSourceJndiName(java.lang.String)"/>
      <method name="setBatchJobsExecutorServiceName(java.lang.String)"/>
      <method name="setDataSourceForJobScheduler(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="setDefaultTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="setEagerTrackingOfResourceMetricsEnabled(boolean)"/>
      <method name="setGracefulShutdownTimeout(int)"/>
      <method name="setIgnoreSessionsDuringShutdown(boolean)"/>
      <method name="setJobSchedulerTableName(java.lang.String)"/>
      <method name="setMaxConcurrentLongRunningRequests(int)"/>
      <method name="setMaxConcurrentNewThreads(int)"/>
      <method name="setParallelDeployApplicationModules(boolean)"/>
      <method name="setParallelDeployApplications(boolean)"/>
      <method name="setPartitionLifeCycleTimeoutVal(int)"/>
      <method name="setPartitionWorkManagerRef(weblogic.management.configuration.PartitionWorkManagerMBean)"/>
      <method name="setPrimaryIdentityDomain(java.lang.String)"/>
      <method name="setRCMHistoricalDataBufferLimit(int)"/>
      <method name="setRealm(weblogic.management.security.RealmMBean)"/>
      <method name="setResourceManagerRef(weblogic.management.configuration.ResourceManagerMBean)"/>
      <method name="setStartupTimeout(int)"/>
      <method name="setUploadDirectoryName(java.lang.String)"/>
      <method name="getAdminVirtualTarget()"/>
      <method name="lookupInternalAppDeployment(java.lang.String)"/>
      <method name="getInternalAppDeployments()"/>
      <method name="createCoherencePartitionCacheConfig(java.lang.String)"/>
      <method name="lookupCoherencePartitionCacheConfig(java.lang.String)"/>
      <method name="getCoherencePartitionCacheConfigs()"/>
      <method name="getDataSourcePartition()"/>
      <method name="createForeignJNDIProviderOverride(java.lang.String)"/>
      <method name="lookupForeignJNDIProviderOverride(java.lang.String)"/>
      <method name="getForeignJNDIProviderOverrides()"/>
      <method name="getDataSourceForJobScheduler()"/>
      <method name="createJDBCSystemResourceOverride(java.lang.String)"/>
      <method name="lookupJDBCSystemResourceOverride(java.lang.String)"/>
      <method name="getJDBCSystemResourceOverrides()"/>
      <method name="createJMSSystemResourceOverride(java.lang.String)"/>
      <method name="lookupJMSSystemResourceOverride(java.lang.String)"/>
      <method name="getJMSSystemResourceOverrides()"/>
      <method name="getJTAPartition()"/>
      <method name="lookupInternalLibrary(java.lang.String)"/>
      <method name="getInternalLibraries()"/>
      <method name="createMailSessionOverride(java.lang.String)"/>
      <method name="lookupMailSessionOverride(java.lang.String)"/>
      <method name="getMailSessionOverrides()"/>
      <method name="createManagedExecutorServiceTemplate(java.lang.String)"/>
      <method name="lookupManagedExecutorServiceTemplate(java.lang.String)"/>
      <method name="getManagedExecutorServiceTemplates()"/>
      <method name="createManagedScheduledExecutorServiceTemplate(java.lang.String)"/>
      <method name="lookupManagedScheduledExecutorServiceTemplate(java.lang.String)"/>
      <method name="getManagedScheduledExecutorServiceTemplates()"/>
      <method name="createManagedThreadFactoryTemplate(java.lang.String)"/>
      <method name="lookupManagedThreadFactoryTemplate(java.lang.String)"/>
      <method name="getManagedThreadFactoryTemplates()"/>
      <method name="getSystemFileSystem()"/>
      <method name="getPartitionLog()"/>
      <method name="getUserFileSystem()"/>
      <method name="createPartitionWorkManager(java.lang.String)"/>
      <method name="getPartitionWorkManager()"/>
      <method name="getPartitionWorkManagerRef()"/>
      <method name="createResourceGroup(java.lang.String)"/>
      <method name="lookupResourceGroup(java.lang.String)"/>
      <method name="getResourceGroups()"/>
      <method name="createResourceManager(java.lang.String)"/>
      <method name="getResourceManager()"/>
      <method name="getResourceManagerRef()"/>
      <method name="getSelfTuning()"/>
      <method name="lookupAvailableTarget(java.lang.String)"/>
      <method name="getAvailableTargets()"/>
      <method name="getDefaultTargets()"/>
      <method name="getWebService()"/>
      <method name="getRealm()"/>
    </class>
    <class name="PartitionPropertyMBean">
      <method name="getValue()"/>
      <method name="setValue(java.lang.String)"/>
    </class>
    <class name="PartitionUserFileSystemMBean" members="concealed"/>
    <class name="PartitionWorkManagerMBean">
      <method name="getFairShare()"/>
      <method name="getMaxThreadsConstraint()"/>
      <method name="getMaxThreadsConstraintQueueSize()"/>
      <method name="getMinThreadsConstraintCap()"/>
      <method name="getSharedCapacityPercent()"/>
      <method name="setFairShare(int)"/>
      <method name="setMaxThreadsConstraint(int)"/>
      <method name="setMaxThreadsConstraintQueueSize(int)"/>
      <method name="setMinThreadsConstraintCap(int)"/>
      <method name="setSharedCapacityPercent(int)"/>
    </class>
    <class name="PathServiceMBean">
      <method name="getName()"/>
      <method name="setPersistentStore(weblogic.management.configuration.PersistentStoreMBean)"/>
      <method name="getPersistentStore()"/>
    </class>
    <class name="PersistentStoreMBean">
      <method name="addTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="removeTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="getLogicalName()"/>
      <method name="getXAResourceName()"/>
      <method name="setLogicalName(java.lang.String)"/>
      <method name="setTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="setXAResourceName(java.lang.String)"/>
      <method name="getTargets()"/>
    </class>
    <class name="PostProcessorScriptMBean" members="concealed"/>
    <class name="PreProcessorScriptMBean" members="concealed"/>
    <class name="PropertyValueVBean">
      <method name="isOriginalValueAssigned()"/>
      <method name="isOverridingConfigBeanValueAssigned()"/>
      <method name="isResourceDeploymentPlanValueAssigned()"/>
      <method name="getDefaultValue()"/>
      <method name="getOriginalValue()"/>
      <method name="getOverridingConfigBeanValue()"/>
      <method name="getResourceDeploymentPlanValue()"/>
      <method name="getEffectiveValueName()"/>
      <field name="ORIGIN_DEFAULT"/>
      <field name="ORIGIN_ORIGINAL"/>
      <field name="ORIGIN_OVERRIDING_CONFIG_BEAN"/>
      <field name="ORIGIN_RESOURCE_DEPLOYMENT_PLAN"/>
    </class>
    <class name="RCMResourceFairShareMBean">
      <method name="destroyFairShareConstraint(weblogic.management.configuration.FairShareConstraintMBean)"/>
      <method name="createFairShareConstraint(java.lang.String)"/>
      <method name="createFairShareConstraint(java.lang.String,int)"/>
      <method name="getFairShareConstraint()"/>
    </class>
    <class name="RCMResourceMBean">
      <method name="destroyTrigger(weblogic.management.configuration.TriggerMBean)"/>
      <method name="createTrigger(java.lang.String)"/>
      <method name="createTrigger(java.lang.String,long,java.lang.String)"/>
      <method name="lookupTrigger(java.lang.String)"/>
      <method name="getTriggers()"/>
    </class>
    <class name="RMCFactoryMBean">
      <method name="getJNDIName()"/>
      <method name="setJNDIName(java.lang.String)"/>
    </class>
    <class name="ReplicatedStoreMBean">
      <method name="getIoBufferSize()"/>
      <method name="getLocalIndex()"/>
      <method name="getRegionSize()"/>
      <method name="getDirectory()"/>
      <method name="setDirectory(java.lang.String)"/>
      <method name="setIoBufferSize(int)"/>
      <method name="setLocalIndex(int)"/>
      <method name="setRegionSize(int)"/>
    </class>
    <class name="ResourceGroupMBean">
      <method name="isAdministrative()"/>
      <method name="isAutoTargetAdminServer()"/>
      <method name="isUseDefaultTarget()"/>
      <method name="addTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="removeTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="setAdministrative(boolean)"/>
      <method name="setAutoTargetAdminServer(boolean)"/>
      <method name="setResourceGroupTemplate(weblogic.management.configuration.ResourceGroupTemplateMBean)"/>
      <method name="setTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="setUseDefaultTarget(boolean)"/>
      <method name="getResourceGroupTemplate()"/>
      <method name="lookupTarget(java.lang.String)"/>
      <method name="findEffectiveTargets()"/>
      <method name="getTargets()"/>
    </class>
    <class name="ResourceGroupTemplateMBean">
      <method name="getName()"/>
      <method name="getUploadDirectoryName()"/>
      <method name="destroyCoherenceClusterSystemResource(weblogic.management.configuration.CoherenceClusterSystemResourceMBean)"/>
      <method name="destroyFileStore(weblogic.management.configuration.FileStoreMBean)"/>
      <method name="destroyForeignJNDIProvider(weblogic.management.configuration.ForeignJNDIProviderMBean)"/>
      <method name="destroyJDBCStore(weblogic.management.configuration.JDBCStoreMBean)"/>
      <method name="destroyJDBCSystemResource(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="destroyJMSBridgeDestination(weblogic.management.configuration.JMSBridgeDestinationMBean)"/>
      <method name="destroyJMSServer(weblogic.management.configuration.JMSServerMBean)"/>
      <method name="destroyJMSSystemResource(weblogic.management.configuration.JMSSystemResourceMBean)"/>
      <method name="destroyMailSession(weblogic.management.configuration.MailSessionMBean)"/>
      <method name="destroyMessagingBridge(weblogic.management.configuration.MessagingBridgeMBean)"/>
      <method name="destroyOsgiFramework(weblogic.management.configuration.OsgiFrameworkMBean)"/>
      <method name="destroyPathService(weblogic.management.configuration.PathServiceMBean)"/>
      <method name="destroySAFAgent(weblogic.management.configuration.SAFAgentMBean)"/>
      <method name="destroyWLDFSystemResource(weblogic.management.configuration.WLDFSystemResourceMBean)"/>
      <method name="setUploadDirectoryName(java.lang.String)"/>
      <method name="lookupAppDeployment(java.lang.String)"/>
      <method name="getAppDeployments()"/>
      <method name="createCoherenceClusterSystemResource(java.lang.String)"/>
      <method name="lookupCoherenceClusterSystemResource(java.lang.String)"/>
      <method name="getCoherenceClusterSystemResources()"/>
      <method name="createFileStore(java.lang.String)"/>
      <method name="lookupFileStore(java.lang.String)"/>
      <method name="getFileStores()"/>
      <method name="createForeignJNDIProvider(java.lang.String)"/>
      <method name="lookupForeignJNDIProvider(java.lang.String)"/>
      <method name="getForeignJNDIProviders()"/>
      <method name="createJDBCStore(java.lang.String)"/>
      <method name="lookupJDBCStore(java.lang.String)"/>
      <method name="getJDBCStores()"/>
      <method name="createJDBCSystemResource(java.lang.String)"/>
      <method name="createJDBCSystemResource(java.lang.String,java.lang.String)"/>
      <method name="lookupJDBCSystemResource(java.lang.String)"/>
      <method name="getJDBCSystemResources()"/>
      <method name="createJMSBridgeDestination(java.lang.String)"/>
      <method name="lookupJMSBridgeDestination(java.lang.String)"/>
      <method name="getJMSBridgeDestinations()"/>
      <method name="createJMSServer(java.lang.String)"/>
      <method name="lookupJMSServer(java.lang.String)"/>
      <method name="getJMSServers()"/>
      <method name="createJMSSystemResource(java.lang.String)"/>
      <method name="createJMSSystemResource(java.lang.String,java.lang.String)"/>
      <method name="lookupJMSSystemResource(java.lang.String)"/>
      <method name="getJMSSystemResources()"/>
      <method name="lookupLibrary(java.lang.String)"/>
      <method name="getLibraries()"/>
      <method name="lookupMailSession(java.lang.String)"/>
      <method name="getMailSessions()"/>
      <method name="createMessagingBridge(java.lang.String)"/>
      <method name="lookupMessagingBridge(java.lang.String)"/>
      <method name="getMessagingBridges()"/>
      <method name="createOsgiFramework(java.lang.String)"/>
      <method name="lookupOsgiFramework(java.lang.String)"/>
      <method name="getOsgiFrameworks()"/>
      <method name="createPathService(java.lang.String)"/>
      <method name="lookupPathService(java.lang.String)"/>
      <method name="getPathServices()"/>
      <method name="createSAFAgent(java.lang.String)"/>
      <method name="lookupSAFAgent(java.lang.String)"/>
      <method name="getSAFAgents()"/>
      <method name="createWLDFSystemResource(java.lang.String)"/>
      <method name="createWLDFSystemResource(java.lang.String,java.lang.String)"/>
      <method name="lookupWLDFSystemResource(java.lang.String)"/>
      <method name="getWLDFSystemResources()"/>
    </class>
    <class name="ResourceManagementMBean">
      <method name="destroyResourceManager(weblogic.management.configuration.ResourceManagerMBean)"/>
      <method name="createResourceManager(java.lang.String)"/>
      <method name="lookupResourceManager(java.lang.String)"/>
      <method name="getResourceManagers()"/>
    </class>
    <class name="ResourceManagerMBean">
      <method name="destroyCpuUtilization(weblogic.management.configuration.CpuUtilizationMBean)"/>
      <method name="destroyFileOpen(weblogic.management.configuration.FileOpenMBean)"/>
      <method name="destroyHeapRetained(weblogic.management.configuration.HeapRetainedMBean)"/>
      <method name="createCpuUtilization(java.lang.String)"/>
      <method name="getCpuUtilization()"/>
      <method name="createFileOpen(java.lang.String)"/>
      <method name="getFileOpen()"/>
      <method name="createHeapRetained(java.lang.String)"/>
      <method name="getHeapRetained()"/>
      <method name="getRestartLoopProtection()"/>
    </class>
    <class name="ResponseTimeRequestClassMBean">
      <method name="getGoalMs()"/>
      <method name="setGoalMs(int)"/>
    </class>
    <class name="RestartLoopProtectionMBean">
      <method name="isRestartLoopProtectionEnabled()"/>
      <method name="getMaxRestartAllowed()"/>
      <method name="getMaxRestartAllowedInterval()"/>
      <method name="getRestartDelay()"/>
      <method name="setMaxRestartAllowed(long)"/>
      <method name="setMaxRestartAllowedInterval(long)"/>
      <method name="setRestartDelay(long)"/>
      <method name="setRestartLoopProtectionEnabled(boolean)"/>
    </class>
    <class name="RestfulManagementServicesMBean">
      <method name="isEnabled()"/>
      <method name="isJavaServiceResourcesEnabled()"/>
      <method name="getDelegatedRequestConnectTimeoutMillis()"/>
      <method name="getDelegatedRequestMaxWaitMillis()"/>
      <method name="getDelegatedRequestMinThreads()"/>
      <method name="getDelegatedRequestReadTimeoutMillis()"/>
      <method name="getFannedOutRequestMaxWaitMillis()"/>
      <method name="setDelegatedRequestConnectTimeoutMillis(int)"/>
      <method name="setDelegatedRequestMaxWaitMillis(int)"/>
      <method name="setDelegatedRequestMinThreads(int)"/>
      <method name="setDelegatedRequestReadTimeoutMillis(int)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setFannedOutRequestMaxWaitMillis(int)"/>
      <method name="setJavaServiceResourcesEnabled(boolean)"/>
    </class>
    <class name="SAFAgentMBean">
      <method name="isForwardingPausedAtStartup()"/>
      <method name="isIncomingPausedAtStartup()"/>
      <method name="isLoggingEnabled()"/>
      <method name="isPagingMessageCompressionEnabled()"/>
      <method name="isReceivingPausedAtStartup()"/>
      <method name="isStoreMessageCompressionEnabled()"/>
      <method name="getDefaultRetryDelayMultiplier()"/>
      <method name="getMaximumMessageSize()"/>
      <method name="getWindowSize()"/>
      <method name="getMessageCompressionOptions()"/>
      <method name="getName()"/>
      <method name="getPagingDirectory()"/>
      <method name="getServiceType()"/>
      <method name="getAcknowledgeInterval()"/>
      <method name="getBytesMaximum()"/>
      <method name="getBytesThresholdHigh()"/>
      <method name="getBytesThresholdLow()"/>
      <method name="getConversationIdleTimeMaximum()"/>
      <method name="getDefaultRetryDelayBase()"/>
      <method name="getDefaultRetryDelayMaximum()"/>
      <method name="getDefaultTimeToLive()"/>
      <method name="getMessageBufferSize()"/>
      <method name="getMessagesMaximum()"/>
      <method name="getMessagesThresholdHigh()"/>
      <method name="getMessagesThresholdLow()"/>
      <method name="getWindowInterval()"/>
      <field name="BOTH"/>
      <field name="RECEIVING_ONLY"/>
      <field name="SENDING_ONLY"/>
      <method name="setAcknowledgeInterval(long)"/>
      <method name="setBytesMaximum(long)"/>
      <method name="setBytesThresholdHigh(long)"/>
      <method name="setBytesThresholdLow(long)"/>
      <method name="setConversationIdleTimeMaximum(long)"/>
      <method name="setDefaultRetryDelayBase(long)"/>
      <method name="setDefaultRetryDelayMaximum(long)"/>
      <method name="setDefaultRetryDelayMultiplier(double)"/>
      <method name="setDefaultTimeToLive(long)"/>
      <method name="setForwardingPausedAtStartup(boolean)"/>
      <method name="setIncomingPausedAtStartup(boolean)"/>
      <method name="setLoggingEnabled(boolean)"/>
      <method name="setMaximumMessageSize(int)"/>
      <method name="setMessageBufferSize(long)"/>
      <method name="setMessageCompressionOptions(java.lang.String)"/>
      <method name="setMessagesMaximum(long)"/>
      <method name="setMessagesThresholdHigh(long)"/>
      <method name="setMessagesThresholdLow(long)"/>
      <method name="setPagingDirectory(java.lang.String)"/>
      <method name="setPagingMessageCompressionEnabled(boolean)"/>
      <method name="setReceivingPausedAtStartup(boolean)"/>
      <method name="setServiceType(java.lang.String)"/>
      <method name="setStore(weblogic.management.configuration.PersistentStoreMBean)"/>
      <method name="setStoreMessageCompressionEnabled(boolean)"/>
      <method name="setTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="setWindowInterval(long)"/>
      <method name="setWindowSize(int)"/>
      <method name="getJMSSAFMessageLogFile()"/>
      <method name="getStore()"/>
      <method name="getTargets()"/>
    </class>
    <class name="SNMPAgentDeploymentMBean" members="concealed"/>
    <class name="SNMPAgentMBean">
      <method name="addSNMPAttributeChange(weblogic.management.configuration.SNMPAttributeChangeMBean)"/>
      <method name="addSNMPCounterMonitor(weblogic.management.configuration.SNMPCounterMonitorMBean)"/>
      <method name="addSNMPGaugeMonitor(weblogic.management.configuration.SNMPGaugeMonitorMBean)"/>
      <method name="addSNMPLogFilter(weblogic.management.configuration.SNMPLogFilterMBean)"/>
      <method name="addSNMPProxy(weblogic.management.configuration.SNMPProxyMBean)"/>
      <method name="addSNMPStringMonitor(weblogic.management.configuration.SNMPStringMonitorMBean)"/>
      <method name="addSNMPTrapDestination(weblogic.management.configuration.SNMPTrapDestinationMBean)"/>
      <method name="addTargetedTrapDestination(weblogic.management.configuration.SNMPTrapDestinationMBean)"/>
      <method name="isCommunityBasedAccessEnabled()"/>
      <method name="isEnabled()"/>
      <method name="isInformEnabled()"/>
      <method name="isSNMPAccessForUserMBeansEnabled()"/>
      <method name="isSendAutomaticTrapsEnabled()"/>
      <method name="removeSNMPAttributeChange(weblogic.management.configuration.SNMPAttributeChangeMBean)"/>
      <method name="removeSNMPCounterMonitor(weblogic.management.configuration.SNMPCounterMonitorMBean)"/>
      <method name="removeSNMPGaugeMonitor(weblogic.management.configuration.SNMPGaugeMonitorMBean)"/>
      <method name="removeSNMPLogFilter(weblogic.management.configuration.SNMPLogFilterMBean)"/>
      <method name="removeSNMPProxy(weblogic.management.configuration.SNMPProxyMBean)"/>
      <method name="removeSNMPStringMonitor(weblogic.management.configuration.SNMPStringMonitorMBean)"/>
      <method name="removeTargetedTrapDestination(weblogic.management.configuration.SNMPTrapDestinationMBean)"/>
      <method name="getDebugLevel()"/>
      <method name="getInformRetryInterval()"/>
      <method name="getMasterAgentXPort()"/>
      <method name="getMaxInformRetryCount()"/>
      <method name="getMibDataRefreshInterval()"/>
      <method name="getSNMPPort()"/>
      <method name="getSNMPTrapVersion()"/>
      <method name="getServerStatusCheckIntervalFactor()"/>
      <method name="getAuthenticationProtocol()"/>
      <method name="getCommunityPrefix()"/>
      <method name="getListenAddress()"/>
      <method name="getPrivacyProtocol()"/>
      <method name="getSNMPEngineId()"/>
      <method name="getLocalizedKeyCacheInvalidationInterval()"/>
      <field name="DEBUG_CRITICAL"/>
      <field name="DEBUG_FATAL"/>
      <field name="DEBUG_NONCRITICAL"/>
      <field name="DEBUG_NONE"/>
      <field name="SNMPV1"/>
      <field name="SNMPV2"/>
      <field name="SNMPV3"/>
      <field name="AES_128"/>
      <field name="DES"/>
      <field name="MD5"/>
      <field name="NO_AUTH"/>
      <field name="NO_PRIV"/>
      <field name="SHA"/>
      <method name="destroySNMPAttributeChange(weblogic.management.configuration.SNMPAttributeChangeMBean)"/>
      <method name="destroySNMPCounterMonitor(weblogic.management.configuration.SNMPCounterMonitorMBean)"/>
      <method name="destroySNMPGaugeMonitor(weblogic.management.configuration.SNMPGaugeMonitorMBean)"/>
      <method name="destroySNMPLogFilter(weblogic.management.configuration.SNMPLogFilterMBean)"/>
      <method name="destroySNMPProxy(weblogic.management.configuration.SNMPProxyMBean)"/>
      <method name="destroySNMPStringMonitor(weblogic.management.configuration.SNMPStringMonitorMBean)"/>
      <method name="destroySNMPTrapDestination(weblogic.management.configuration.SNMPTrapDestinationMBean)"/>
      <method name="setAuthenticationProtocol(java.lang.String)"/>
      <method name="setCommunityBasedAccessEnabled(boolean)"/>
      <method name="setCommunityPrefix(java.lang.String)"/>
      <method name="setDebugLevel(int)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setInformEnabled(boolean)"/>
      <method name="setInformRetryInterval(int)"/>
      <method name="setListenAddress(java.lang.String)"/>
      <method name="setLocalizedKeyCacheInvalidationInterval(long)"/>
      <method name="setMasterAgentXPort(int)"/>
      <method name="setMaxInformRetryCount(int)"/>
      <method name="setMibDataRefreshInterval(int)"/>
      <method name="setPrivacyProtocol(java.lang.String)"/>
      <method name="setSNMPAccessForUserMBeansEnabled(boolean)"/>
      <method name="setSNMPAttributeChanges(weblogic.management.configuration.SNMPAttributeChangeMBean[])"/>
      <method name="setSNMPCounterMonitors(weblogic.management.configuration.SNMPCounterMonitorMBean[])"/>
      <method name="setSNMPEngineId(java.lang.String)"/>
      <method name="setSNMPGaugeMonitors(weblogic.management.configuration.SNMPGaugeMonitorMBean[])"/>
      <method name="setSNMPLogFilters(weblogic.management.configuration.SNMPLogFilterMBean[])"/>
      <method name="setSNMPPort(int)"/>
      <method name="setSNMPProxies(weblogic.management.configuration.SNMPProxyMBean[])"/>
      <method name="setSNMPStringMonitors(weblogic.management.configuration.SNMPStringMonitorMBean[])"/>
      <method name="setSNMPTrapVersion(int)"/>
      <method name="setSendAutomaticTrapsEnabled(boolean)"/>
      <method name="setServerStatusCheckIntervalFactor(int)"/>
      <method name="setTargetedTrapDestinations(weblogic.management.configuration.SNMPTrapDestinationMBean[])"/>
      <method name="createSNMPAttributeChange(java.lang.String)"/>
      <method name="lookupSNMPAttributeChange(java.lang.String)"/>
      <method name="getSNMPAttributeChanges()"/>
      <method name="createSNMPCounterMonitor(java.lang.String)"/>
      <method name="lookupSNMPCounterMonitor(java.lang.String)"/>
      <method name="getSNMPCounterMonitors()"/>
      <method name="createSNMPGaugeMonitor(java.lang.String)"/>
      <method name="lookupSNMPGaugeMonitor(java.lang.String)"/>
      <method name="getSNMPGaugeMonitors()"/>
      <method name="createSNMPLogFilter(java.lang.String)"/>
      <method name="lookupSNMPLogFilter(java.lang.String)"/>
      <method name="getSNMPLogFilters()"/>
      <method name="createSNMPProxy(java.lang.String)"/>
      <method name="lookupSNMPProxy(java.lang.String)"/>
      <method name="getSNMPProxies()"/>
      <method name="createSNMPStringMonitor(java.lang.String)"/>
      <method name="lookupSNMPStringMonitor(java.lang.String)"/>
      <method name="getSNMPStringMonitors()"/>
      <method name="createSNMPTrapDestination(java.lang.String)"/>
      <method name="lookupSNMPTrapDestination(java.lang.String)"/>
      <method name="getSNMPTrapDestinations()"/>
      <method name="getTargetedTrapDestinations()"/>
    </class>
    <class name="SNMPAttributeChangeMBean">
      <method name="getAttributeMBeanName()"/>
      <method name="getAttributeMBeanType()"/>
      <method name="getAttributeName()"/>
      <method name="setAttributeMBeanName(java.lang.String)"/>
      <method name="setAttributeMBeanType(java.lang.String)"/>
      <method name="setAttributeName(java.lang.String)"/>
    </class>
    <class name="SNMPCounterMonitorMBean">
      <method name="getModulus()"/>
      <method name="getOffset()"/>
      <method name="getThreshold()"/>
      <method name="setModulus(long)"/>
      <method name="setOffset(long)"/>
      <method name="setThreshold(long)"/>
    </class>
    <class name="SNMPGaugeMonitorMBean">
      <method name="getThresholdHigh()"/>
      <method name="getThresholdLow()"/>
      <method name="setThresholdHigh(double)"/>
      <method name="setThresholdLow(double)"/>
    </class>
    <class name="SNMPJMXMonitorMBean">
      <method name="getPollingInterval()"/>
      <method name="getMonitoredAttributeName()"/>
      <method name="getMonitoredMBeanName()"/>
      <method name="getMonitoredMBeanType()"/>
      <method name="setMonitoredAttributeName(java.lang.String)"/>
      <method name="setMonitoredMBeanName(java.lang.String)"/>
      <method name="setMonitoredMBeanType(java.lang.String)"/>
      <method name="setPollingInterval(int)"/>
    </class>
    <class name="SNMPLogFilterMBean">
      <method name="addMessageId(java.lang.String)"/>
      <method name="addSubsystemName(java.lang.String)"/>
      <method name="addUserId(java.lang.String)"/>
      <method name="removeMessageId(java.lang.String)"/>
      <method name="removeSubsystemName(java.lang.String)"/>
      <method name="removeUserId(java.lang.String)"/>
      <method name="getMessageSubstring()"/>
      <method name="getSeverityLevel()"/>
      <method name="getMessageIds()"/>
      <method name="getSubsystemNames()"/>
      <method name="getUserIds()"/>
      <method name="setMessageIds(java.lang.String[])"/>
      <method name="setMessageSubstring(java.lang.String)"/>
      <method name="setSeverityLevel(java.lang.String)"/>
      <method name="setSubsystemNames(java.lang.String[])"/>
      <method name="setUserIds(java.lang.String[])"/>
    </class>
    <class name="SNMPProxyMBean">
      <method name="getPort()"/>
      <method name="getCommunity()"/>
      <method name="getListenAddress()"/>
      <method name="getOidRoot()"/>
      <method name="getSecurityLevel()"/>
      <method name="getSecurityName()"/>
      <method name="getTimeout()"/>
      <field name="AUTH_NOPRIV"/>
      <field name="AUTH_PRIV"/>
      <field name="NOAUTH_NOPRIV"/>
      <method name="setCommunity(java.lang.String)"/>
      <method name="setListenAddress(java.lang.String)"/>
      <method name="setOidRoot(java.lang.String)"/>
      <method name="setPort(int)"/>
      <method name="setSecurityLevel(java.lang.String)"/>
      <method name="setSecurityName(java.lang.String)"/>
      <method name="setTimeout(long)"/>
    </class>
    <class name="SNMPStringMonitorMBean">
      <method name="isNotifyDiffer()"/>
      <method name="isNotifyMatch()"/>
      <method name="getStringToCompare()"/>
      <method name="setNotifyDiffer(boolean)"/>
      <method name="setNotifyMatch(boolean)"/>
      <method name="setStringToCompare(java.lang.String)"/>
    </class>
    <class name="SNMPTrapDestinationMBean">
      <method name="getPort()"/>
      <method name="getCommunity()"/>
      <method name="getHost()"/>
      <method name="getSecurityLevel()"/>
      <method name="getSecurityName()"/>
      <field name="AUTH_NOPRIV"/>
      <field name="AUTH_PRIV"/>
      <field name="NOAUTH_NOPRIV"/>
      <method name="setCommunity(java.lang.String)"/>
      <method name="setHost(java.lang.String)"/>
      <method name="setPort(int)"/>
      <method name="setSecurityLevel(java.lang.String)"/>
      <method name="setSecurityName(java.lang.String)"/>
    </class>
    <class name="SNMPTrapSourceMBean">
      <method name="addEnabledServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="removeEnabledServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="setEnabledServers(weblogic.management.configuration.ServerMBean[])"/>
      <method name="getEnabledServers()"/>
    </class>
    <class name="SSLMBean">
      <method name="isAcceptKSSDemoCertsEnabled()"/>
      <method name="isAllowUnencryptedNullCipher()"/>
      <method name="isClientCertificateEnforced()"/>
      <method name="isClientInitSecureRenegotiationAccepted()"/>
      <method name="isEnabled()"/>
      <method name="isHostnameVerificationIgnored()"/>
      <method name="isJSSEEnabled()"/>
      <method name="isSSLRejectionLoggingEnabled()"/>
      <method name="isSSLv2HelloEnabled()"/>
      <method name="isTwoWaySSLEnabled()"/>
      <method name="isUseClientCertForOutbound()"/>
      <method name="isUseServerCerts()"/>
      <method name="getClientCertPrivateKeyPassPhraseEncrypted()"/>
      <method name="getOutboundPrivateKeyPassPhraseEncrypted()"/>
      <method name="getServerPrivateKeyPassPhraseEncrypted()"/>
      <method name="getExportKeyLifespan()"/>
      <method name="getListenPort()"/>
      <method name="getLoginTimeoutMillis()"/>
      <method name="getClientCertAlias()"/>
      <method name="getClientCertPrivateKeyPassPhrase()"/>
      <method name="getHostnameVerifier()"/>
      <method name="getIdentityAndTrustLocations()"/>
      <method name="getInboundCertificateValidation()"/>
      <method name="getMinimumTLSProtocolVersion()"/>
      <method name="getOutboundCertificateValidation()"/>
      <method name="getOutboundPrivateKeyAlias()"/>
      <method name="getOutboundPrivateKeyPassPhrase()"/>
      <method name="getServerCertificateChainFileName()"/>
      <method name="getServerCertificateFileName()"/>
      <method name="getServerKeyFileName()"/>
      <method name="getServerPrivateKeyAlias()"/>
      <method name="getServerPrivateKeyPassPhrase()"/>
      <method name="getTrustedCAFileName()"/>
      <method name="getCiphersuites()"/>
      <field name="BUILTIN_SSL_VALIDATION_AND_CERT_PATH_VALIDATORS"/>
      <field name="BUILTIN_SSL_VALIDATION_ONLY"/>
      <field name="IDENTITY_AND_TRUST_LOCATIONS_FILES_OR_KEYSTORE_PROVIDERS"/>
      <field name="IDENTITY_AND_TRUST_LOCATIONS_KEYSTORES"/>
      <method name="setAcceptKSSDemoCertsEnabled(boolean)"/>
      <method name="setAllowUnencryptedNullCipher(boolean)"/>
      <method name="setCertAuthenticator(java.lang.String)"/>
      <method name="setCiphersuites(java.lang.String[])"/>
      <method name="setClientCertAlias(java.lang.String)"/>
      <method name="setClientCertPrivateKeyPassPhrase(java.lang.String)"/>
      <method name="setClientCertPrivateKeyPassPhraseEncrypted(byte[])"/>
      <method name="setClientCertificateEnforced(boolean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setExportKeyLifespan(int)"/>
      <method name="setHostnameVerificationIgnored(boolean)"/>
      <method name="setHostnameVerifier(java.lang.String)"/>
      <method name="setIdentityAndTrustLocations(java.lang.String)"/>
      <method name="setInboundCertificateValidation(java.lang.String)"/>
      <method name="setJSSEEnabled(boolean)"/>
      <method name="setListenPort(int)"/>
      <method name="setLoginTimeoutMillis(int)"/>
      <method name="setMinimumTLSProtocolVersion(java.lang.String)"/>
      <method name="setOutboundCertificateValidation(java.lang.String)"/>
      <method name="setSSLRejectionLoggingEnabled(boolean)"/>
      <method name="setServerCertificateChainFileName(java.lang.String)"/>
      <method name="setServerCertificateFileName(java.lang.String)"/>
      <method name="setServerKeyFileName(java.lang.String)"/>
      <method name="setServerPrivateKeyAlias(java.lang.String)"/>
      <method name="setServerPrivateKeyPassPhrase(java.lang.String)"/>
      <method name="setServerPrivateKeyPassPhraseEncrypted(byte[])"/>
      <method name="setTrustedCAFileName(java.lang.String)"/>
      <method name="setTwoWaySSLEnabled(boolean)"/>
      <method name="setUseClientCertForOutbound(boolean)"/>
      <method name="setUseServerCerts(boolean)"/>
    </class>
    <class name="ScriptInterceptorMBean">
      <method name="getApplicableClusterNames()"/>
      <method name="setApplicableClusterNames(java.lang.String[])"/>
      <method name="getPostProcessor()"/>
      <method name="getPreProcessor()"/>
    </class>
    <class name="ScriptMBean">
      <method name="isIgnoreFailures()"/>
      <method name="getNumberOfRetriesAllowed()"/>
      <method name="getTimeoutInSeconds()"/>
      <method name="getPathToErrorHandlerScript()"/>
      <method name="getPathToScript()"/>
      <method name="getWorkingDirectory()"/>
      <method name="getArguments()"/>
      <method name="getEnvironment()"/>
      <method name="getRetryDelayInMillis()"/>
      <method name="setArguments(java.lang.String[])"/>
      <method name="setEnvironment(java.util.Properties)"/>
      <method name="setIgnoreFailures(boolean)"/>
      <method name="setNumberOfRetriesAllowed(int)"/>
      <method name="setPathToErrorHandlerScript(java.lang.String)"/>
      <method name="setPathToScript(java.lang.String)"/>
      <method name="setRetryDelayInMillis(long)"/>
      <method name="setTimeoutInSeconds(int)"/>
      <method name="setWorkingDirectory(java.lang.String)"/>
    </class>
    <class name="SecureModeMBean">
      <method name="isRestrictiveJMXPolicies()"/>
      <method name="isSecureModeEnabled()"/>
      <method name="isWarnOnAuditing()"/>
      <method name="isWarnOnInsecureApplications()"/>
      <method name="isWarnOnInsecureFileSystem()"/>
      <method name="isWarnOnInsecureSSL()"/>
      <method name="isWarnOnJavaSecurityManager()"/>
      <method name="setRestrictiveJMXPolicies(boolean)"/>
      <method name="setSecureModeEnabled(boolean)"/>
      <method name="setWarnOnAuditing(boolean)"/>
      <method name="setWarnOnInsecureApplications(boolean)"/>
      <method name="setWarnOnInsecureFileSystem(boolean)"/>
      <method name="setWarnOnInsecureSSL(boolean)"/>
      <method name="setWarnOnJavaSecurityManager(boolean)"/>
    </class>
    <class name="SecurityConfigurationMBean">
      <method name="getCompatibilityConnectionFiltersEnabled()"/>
      <method name="getConnectionLoggerEnabled()"/>
      <method name="getDowngradeUntrustedPrincipals()"/>
      <method name="getEnforceStrictURLPattern()"/>
      <method name="getEnforceValidBasicAuthCredentials()"/>
      <method name="isAnonymousAdminLookupEnabled()"/>
      <method name="isClearTextCredentialAccessEnabled()"/>
      <method name="isConsoleFullDelegationEnabled()"/>
      <method name="isCrossDomainSecurityEnabled()"/>
      <method name="isIdentityDomainAwareProvidersRequired()"/>
      <method name="isIdentityDomainDefaultEnabled()"/>
      <method name="isPrincipalEqualsCaseInsensitive()"/>
      <method name="isPrincipalEqualsCompareDnAndGuid()"/>
      <method name="isRemoteAnonymousJNDIEnabled()"/>
      <method name="isUseKSSForDemo()"/>
      <method name="generateCredential()"/>
      <method name="getNodeManagerPasswordEncrypted()"/>
      <method name="getBootAuthenticationRetryCount()"/>
      <method name="getNonceTimeoutSeconds()"/>
      <method name="getAdministrativeIdentityDomain()"/>
      <method name="getConnectionFilter()"/>
      <method name="getName()"/>
      <method name="getNodeManagerPassword()"/>
      <method name="getNodeManagerUsername()"/>
      <method name="getWebAppFilesCaseInsensitive()"/>
      <method name="getConnectionFilterRules()"/>
      <method name="getExcludedDomainNames()"/>
      <method name="getBootAuthenticationMaxRetryDelay()"/>
      <method name="destroyRealm(weblogic.management.security.RealmMBean)"/>
      <method name="setAdministrativeIdentityDomain(java.lang.String)"/>
      <method name="setAnonymousAdminLookupEnabled(boolean)"/>
      <method name="setBootAuthenticationMaxRetryDelay(long)"/>
      <method name="setBootAuthenticationRetryCount(int)"/>
      <method name="setClearTextCredentialAccessEnabled(boolean)"/>
      <method name="setCompatibilityConnectionFiltersEnabled(boolean)"/>
      <method name="setConnectionFilter(java.lang.String)"/>
      <method name="setConnectionFilterRules(java.lang.String[])"/>
      <method name="setConnectionLoggerEnabled(boolean)"/>
      <method name="setConsoleFullDelegationEnabled(boolean)"/>
      <method name="setCredential(java.lang.String)"/>
      <method name="setCredentialEncrypted(byte[])"/>
      <method name="setCrossDomainSecurityEnabled(boolean)"/>
      <method name="setDefaultRealm(weblogic.management.security.RealmMBean)"/>
      <method name="setDefaultRealmInternal(weblogic.management.security.RealmMBean)"/>
      <method name="setDowngradeUntrustedPrincipals(boolean)"/>
      <method name="setEnforceStrictURLPattern(boolean)"/>
      <method name="setEnforceValidBasicAuthCredentials(boolean)"/>
      <method name="setExcludedDomainNames(java.lang.String[])"/>
      <method name="setIdentityDomainAwareProvidersRequired(boolean)"/>
      <method name="setIdentityDomainDefaultEnabled(boolean)"/>
      <method name="setNodeManagerPassword(java.lang.String)"/>
      <method name="setNodeManagerPasswordEncrypted(byte[])"/>
      <method name="setNodeManagerUsername(java.lang.String)"/>
      <method name="setNonceTimeoutSeconds(int)"/>
      <method name="setPrincipalEqualsCaseInsensitive(boolean)"/>
      <method name="setPrincipalEqualsCompareDnAndGuid(boolean)"/>
      <method name="setRemoteAnonymousJNDIEnabled(boolean)"/>
      <method name="setUseKSSForDemo(boolean)"/>
      <method name="setWebAppFilesCaseInsensitive(java.lang.String)"/>
      <method name="getCertRevoc()"/>
      <method name="getJASPIC()"/>
      <method name="getSecureMode()"/>
      <method name="createRealm()"/>
      <method name="createRealm(java.lang.String)"/>
      <method name="findDefaultRealm()"/>
      <method name="findRealm(java.lang.String)"/>
      <method name="getDefaultRealm()"/>
      <method name="getDefaultRealmInternal()"/>
      <method name="lookupRealm(java.lang.String)"/>
      <method name="findRealms()"/>
      <method name="getRealms()"/>
    </class>
    <class name="SelfTuningMBean">
      <method name="getPartitionFairShare()"/>
      <method name="destroyCapacity(weblogic.management.configuration.CapacityMBean)"/>
      <method name="destroyContextRequestClass(weblogic.management.configuration.ContextRequestClassMBean)"/>
      <method name="destroyFairShareRequestClass(weblogic.management.configuration.FairShareRequestClassMBean)"/>
      <method name="destroyMaxThreadsConstraint(weblogic.management.configuration.MaxThreadsConstraintMBean)"/>
      <method name="destroyMinThreadsConstraint(weblogic.management.configuration.MinThreadsConstraintMBean)"/>
      <method name="destroyResponseTimeRequestClass(weblogic.management.configuration.ResponseTimeRequestClassMBean)"/>
      <method name="destroyWorkManager(weblogic.management.configuration.WorkManagerMBean)"/>
      <method name="setPartitionFairShare(int)"/>
      <method name="createCapacity(java.lang.String)"/>
      <method name="lookupCapacity(java.lang.String)"/>
      <method name="getCapacities()"/>
      <method name="createContextRequestClass(java.lang.String)"/>
      <method name="lookupContextRequestClass(java.lang.String)"/>
      <method name="getContextRequestClasses()"/>
      <method name="createFairShareRequestClass(java.lang.String)"/>
      <method name="lookupFairShareRequestClass(java.lang.String)"/>
      <method name="getFairShareRequestClasses()"/>
      <method name="createMaxThreadsConstraint(java.lang.String)"/>
      <method name="lookupMaxThreadsConstraint(java.lang.String)"/>
      <method name="getMaxThreadsConstraints()"/>
      <method name="createMinThreadsConstraint(java.lang.String)"/>
      <method name="lookupMinThreadsConstraint(java.lang.String)"/>
      <method name="getMinThreadsConstraints()"/>
      <method name="createResponseTimeRequestClass(java.lang.String)"/>
      <method name="lookupResponseTimeRequestClass(java.lang.String)"/>
      <method name="getResponseTimeRequestClasses()"/>
      <method name="createWorkManager(java.lang.String)"/>
      <method name="lookupWorkManager(java.lang.String)"/>
      <method name="getWorkManagers()"/>
    </class>
    <class name="ServerDebugMBean">
      <method name="getApplicationContainer()"/>
      <method name="getClassChangeNotifier()"/>
      <method name="getClassFinder()"/>
      <method name="getClassLoader()"/>
      <method name="getClassLoaderVerbose()"/>
      <method name="getClassloaderWebApp()"/>
      <method name="getClasspathServlet()"/>
      <method name="getDebugAppAnnotations()"/>
      <method name="getDebugAppContainer()"/>
      <method name="getDebugAsyncQueue()"/>
      <method name="getDebugBeanTreeHarvesterControl()"/>
      <method name="getDebugBeanTreeHarvesterDataCollection()"/>
      <method name="getDebugBeanTreeHarvesterResolution()"/>
      <method name="getDebugBeanTreeHarvesterThreading()"/>
      <method name="getDebugBootstrapServlet()"/>
      <method name="getDebugCertRevocCheck()"/>
      <method name="getDebugClassLoadingContextualTrace()"/>
      <method name="getDebugClassLoadingVerbose()"/>
      <method name="getDebugClassRedef()"/>
      <method name="getDebugClassSize()"/>
      <method name="getDebugCluster()"/>
      <method name="getDebugClusterAnnouncements()"/>
      <method name="getDebugClusterFragments()"/>
      <method name="getDebugClusterHeartbeats()"/>
      <method name="getDebugConcurrent()"/>
      <method name="getDebugConcurrentContext()"/>
      <method name="getDebugConcurrentMES()"/>
      <method name="getDebugConcurrentMSES()"/>
      <method name="getDebugConcurrentMTF()"/>
      <method name="getDebugConcurrentTransaction()"/>
      <method name="getDebugConfigurationEdit()"/>
      <method name="getDebugConfigurationRuntime()"/>
      <method name="getDebugConnectorService()"/>
      <method name="getDebugConsensusLeasing()"/>
      <method name="getDebugDRSCalls()"/>
      <method name="getDebugDRSHeartbeats()"/>
      <method name="getDebugDRSMessages()"/>
      <method name="getDebugDRSQueues()"/>
      <method name="getDebugDRSStateTransitions()"/>
      <method name="getDebugDRSUpdateStatus()"/>
      <method name="getDebugDeploy()"/>
      <method name="getDebugDeployment()"/>
      <method name="getDebugDeploymentConcise()"/>
      <method name="getDebugDeploymentPlan()"/>
      <method name="getDebugDeploymentService()"/>
      <method name="getDebugDeploymentServiceInternal()"/>
      <method name="getDebugDeploymentServiceStatusUpdates()"/>
      <method name="getDebugDeploymentServiceTransport()"/>
      <method name="getDebugDeploymentServiceTransportHttp()"/>
      <method name="getDebugDescriptor()"/>
      <method name="getDebugDiagnosticAccessor()"/>
      <method name="getDebugDiagnosticArchive()"/>
      <method name="getDebugDiagnosticArchiveRetirement()"/>
      <method name="getDebugDiagnosticCollections()"/>
      <method name="getDebugDiagnosticContext()"/>
      <method name="getDebugDiagnosticDataGathering()"/>
      <method name="getDebugDiagnosticFileArchive()"/>
      <method name="getDebugDiagnosticImage()"/>
      <method name="getDebugDiagnosticInstrumentation()"/>
      <method name="getDebugDiagnosticInstrumentationActions()"/>
      <method name="getDebugDiagnosticInstrumentationConfig()"/>
      <method name="getDebugDiagnosticInstrumentationEvents()"/>
      <method name="getDebugDiagnosticInstrumentationWeaving()"/>
      <method name="getDebugDiagnosticInstrumentationWeavingMatches()"/>
      <method name="getDebugDiagnosticJdbcArchive()"/>
      <method name="getDebugDiagnosticLifecycleHandlers()"/>
      <method name="getDebugDiagnosticQuery()"/>
      <method name="getDebugDiagnosticRuntimeControlDriver()"/>
      <method name="getDebugDiagnosticRuntimeControlService()"/>
      <method name="getDebugDiagnosticWatch()"/>
      <method name="getDebugDiagnosticWatchEvents()"/>
      <method name="getDebugDiagnosticWatchEventsDetails()"/>
      <method name="getDebugDiagnosticWlstoreArchive()"/>
      <method name="getDebugDiagnosticsBeanExtensionResolver()"/>
      <method name="getDebugDiagnosticsBeanInfoProviders()"/>
      <method name="getDebugDiagnosticsELContext()"/>
      <method name="getDebugDiagnosticsELResolver()"/>
      <method name="getDebugDiagnosticsExpressionEvaluators()"/>
      <method name="getDebugDiagnosticsExpressionFunctionMapper()"/>
      <method name="getDebugDiagnosticsExpressionFunctions()"/>
      <method name="getDebugDiagnosticsExpressionMetrics()"/>
      <method name="getDebugDiagnosticsExpressionPoller()"/>
      <method name="getDebugDiagnosticsExpressionPollerBuffer()"/>
      <method name="getDebugDiagnosticsHarvester()"/>
      <method name="getDebugDiagnosticsHarvesterData()"/>
      <method name="getDebugDiagnosticsHarvesterMBeanPlugin()"/>
      <method name="getDebugDiagnosticsHarvesterTreeBeanPlugin()"/>
      <method name="getDebugDiagnosticsMBeanELResolver()"/>
      <method name="getDebugDiagnosticsModule()"/>
      <method name="getDebugDiagnosticsScriptAction()"/>
      <method name="getDebugDiagnosticsUtils()"/>
      <method name="getDebugDiagnosticsValueTracingELResolver()"/>
      <method name="getDebugDomainLogHandler()"/>
      <method name="getDebugDynamicSingletonServices()"/>
      <method name="getDebugEjbCaching()"/>
      <method name="getDebugEjbCmpDeployment()"/>
      <method name="getDebugEjbCmpRuntime()"/>
      <method name="getDebugEjbCompilation()"/>
      <method name="getDebugEjbDeployment()"/>
      <method name="getDebugEjbInvoke()"/>
      <method name="getDebugEjbLocking()"/>
      <method name="getDebugEjbMdbConnection()"/>
      <method name="getDebugEjbMetadata()"/>
      <method name="getDebugEjbPooling()"/>
      <method name="getDebugEjbSecurity()"/>
      <method name="getDebugEjbSwapping()"/>
      <method name="getDebugEjbTimers()"/>
      <method name="getDebugElasticActions()"/>
      <method name="getDebugElasticServices()"/>
      <method name="getDebugEmbeddedLDAP()"/>
      <method name="getDebugEmbeddedLDAPLogToConsole()"/>
      <method name="getDebugEmbeddedLDAPWriteOverrideProps()"/>
      <method name="getDebugEventManager()"/>
      <method name="getDebugExpressionBeanLocalizer()"/>
      <method name="getDebugExpressionExtensionsManager()"/>
      <method name="getDebugFileDistributionServlet()"/>
      <method name="getDebugHttp()"/>
      <method name="getDebugHttpConcise()"/>
      <method name="getDebugHttpLogging()"/>
      <method name="getDebugHttpSessions()"/>
      <method name="getDebugIIOPNaming()"/>
      <method name="getDebugIIOPTunneling()"/>
      <method name="getDebugInterceptors()"/>
      <method name="getDebugJ2EEManagement()"/>
      <method name="getDebugJAXPIncludeClass()"/>
      <method name="getDebugJAXPIncludeLocation()"/>
      <method name="getDebugJAXPIncludeName()"/>
      <method name="getDebugJAXPIncludeTime()"/>
      <method name="getDebugJAXPUseShortClass()"/>
      <method name="getDebugJDBCConn()"/>
      <method name="getDebugJDBCDriverLogging()"/>
      <method name="getDebugJDBCInternal()"/>
      <method name="getDebugJDBCONS()"/>
      <method name="getDebugJDBCRAC()"/>
      <method name="getDebugJDBCRMI()"/>
      <method name="getDebugJDBCReplay()"/>
      <method name="getDebugJDBCSQL()"/>
      <method name="getDebugJDBCUCP()"/>
      <method name="getDebugJMSAME()"/>
      <method name="getDebugJMSBackEnd()"/>
      <method name="getDebugJMSBoot()"/>
      <method name="getDebugJMSCDS()"/>
      <method name="getDebugJMSCommon()"/>
      <method name="getDebugJMSConfig()"/>
      <method name="getDebugJMSDispatcher()"/>
      <method name="getDebugJMSDispatcherProxy()"/>
      <method name="getDebugJMSDistTopic()"/>
      <method name="getDebugJMSDurableSubscribers()"/>
      <method name="getDebugJMSFrontEnd()"/>
      <method name="getDebugJMSJDBCScavengeOnFlush()"/>
      <method name="getDebugJMSLocking()"/>
      <method name="getDebugJMSMessagePath()"/>
      <method name="getDebugJMSModule()"/>
      <method name="getDebugJMSPauseResume()"/>
      <method name="getDebugJMSSAF()"/>
      <method name="getDebugJMSStore()"/>
      <method name="getDebugJMST3Server()"/>
      <method name="getDebugJMSWrappers()"/>
      <method name="getDebugJMSXA()"/>
      <method name="getDebugJMX()"/>
      <method name="getDebugJMXCompatibility()"/>
      <method name="getDebugJMXCore()"/>
      <method name="getDebugJMXCoreConcise()"/>
      <method name="getDebugJMXDomain()"/>
      <method name="getDebugJMXEdit()"/>
      <method name="getDebugJMXRuntime()"/>
      <method name="getDebugJNDI()"/>
      <method name="getDebugJNDIFactories()"/>
      <method name="getDebugJNDIResolution()"/>
      <method name="getDebugJTA2PC()"/>
      <method name="getDebugJTA2PCStackTrace()"/>
      <method name="getDebugJTAAPI()"/>
      <method name="getDebugJTAGateway()"/>
      <method name="getDebugJTAGatewayStackTrace()"/>
      <method name="getDebugJTAHealth()"/>
      <method name="getDebugJTAJDBC()"/>
      <method name="getDebugJTALLR()"/>
      <method name="getDebugJTALifecycle()"/>
      <method name="getDebugJTAMigration()"/>
      <method name="getDebugJTANaming()"/>
      <method name="getDebugJTANamingStackTrace()"/>
      <method name="getDebugJTANonXA()"/>
      <method name="getDebugJTAPropagate()"/>
      <method name="getDebugJTARMI()"/>
      <method name="getDebugJTARecovery()"/>
      <method name="getDebugJTARecoveryStackTrace()"/>
      <method name="getDebugJTAResourceHealth()"/>
      <method name="getDebugJTATLOG()"/>
      <method name="getDebugJTAXA()"/>
      <method name="getDebugJTAXAStackTrace()"/>
      <method name="getDebugJpaDataCache()"/>
      <method name="getDebugJpaEnhance()"/>
      <method name="getDebugJpaJdbcJdbc()"/>
      <method name="getDebugJpaJdbcSchema()"/>
      <method name="getDebugJpaJdbcSql()"/>
      <method name="getDebugJpaManage()"/>
      <method name="getDebugJpaMetaData()"/>
      <method name="getDebugJpaProfile()"/>
      <method name="getDebugJpaQuery()"/>
      <method name="getDebugJpaRuntime()"/>
      <method name="getDebugJpaTool()"/>
      <method name="getDebugLeaderElection()"/>
      <method name="getDebugLibraries()"/>
      <method name="getDebugLifecycleManager()"/>
      <method name="getDebugLoggingConfiguration()"/>
      <method name="getDebugMBeanHarvesterControl()"/>
      <method name="getDebugMBeanHarvesterDataCollection()"/>
      <method name="getDebugMBeanHarvesterResolution()"/>
      <method name="getDebugMBeanHarvesterThreading()"/>
      <method name="getDebugMBeanTypeUtilQueue()"/>
      <method name="getDebugMBeanTypeUtilQueuePriority()"/>
      <method name="getDebugMBeanTypeUtilityListener()"/>
      <method name="getDebugMBeanTypingUtility()"/>
      <method name="getDebugManagementServicesResource()"/>
      <method name="getDebugMessagingBridgeRuntime()"/>
      <method name="getDebugMessagingBridgeRuntimeVerbose()"/>
      <method name="getDebugMessagingBridgeStartup()"/>
      <method name="getDebugMessagingKernel()"/>
      <method name="getDebugMessagingKernelBoot()"/>
      <method name="getDebugMessagingOwnableLock()"/>
      <method name="getDebugNodeManagerRuntime()"/>
      <method name="getDebugPartitionResourceMetricsRuntime()"/>
      <method name="getDebugPatchingRuntime()"/>
      <method name="getDebugPathSvc()"/>
      <method name="getDebugPathSvcVerbose()"/>
      <method name="getDebugRA()"/>
      <method name="getDebugRAClassloader()"/>
      <method name="getDebugRAConnEvents()"/>
      <method name="getDebugRAConnections()"/>
      <method name="getDebugRADeployment()"/>
      <method name="getDebugRALifecycle()"/>
      <method name="getDebugRALocalOut()"/>
      <method name="getDebugRAParsing()"/>
      <method name="getDebugRAPoolVerbose()"/>
      <method name="getDebugRAPooling()"/>
      <method name="getDebugRASecurityCtx()"/>
      <method name="getDebugRAWork()"/>
      <method name="getDebugRAWorkEvents()"/>
      <method name="getDebugRAXAin()"/>
      <method name="getDebugRAXAout()"/>
      <method name="getDebugRAXAwork()"/>
      <method name="getDebugRCM()"/>
      <method name="getDebugRESTNotifications()"/>
      <method name="getDebugReadyApp()"/>
      <method name="getDebugReplication()"/>
      <method name="getDebugReplicationDetails()"/>
      <method name="getDebugReplicationSize()"/>
      <method name="getDebugRestJersey1Integration()"/>
      <method name="getDebugRestJersey2Integration()"/>
      <method name="getDebugRestartInPlace()"/>
      <method name="getDebugSAFAdmin()"/>
      <method name="getDebugSAFLifeCycle()"/>
      <method name="getDebugSAFManager()"/>
      <method name="getDebugSAFMessagePath()"/>
      <method name="getDebugSAFReceivingAgent()"/>
      <method name="getDebugSAFSendingAgent()"/>
      <method name="getDebugSAFStore()"/>
      <method name="getDebugSAFTransport()"/>
      <method name="getDebugSAFVerbose()"/>
      <method name="getDebugSNMPAgent()"/>
      <method name="getDebugSNMPExtensionProvider()"/>
      <method name="getDebugSNMPProtocolTCP()"/>
      <method name="getDebugSNMPToolkit()"/>
      <method name="getDebugScaContainer()"/>
      <method name="getDebugSecurityAdjudicator()"/>
      <method name="getDebugSecurityAtn()"/>
      <method name="getDebugSecurityAtz()"/>
      <method name="getDebugSecurityAuditor()"/>
      <method name="getDebugSecurityCertPath()"/>
      <method name="getDebugSecurityCredMap()"/>
      <method name="getDebugSecurityEEngine()"/>
      <method name="getDebugSecurityEncryptionService()"/>
      <method name="getDebugSecurityJACC()"/>
      <method name="getDebugSecurityJACCNonPolicy()"/>
      <method name="getDebugSecurityJACCPolicy()"/>
      <method name="getDebugSecurityKeyStore()"/>
      <method name="getDebugSecurityPasswordPolicy()"/>
      <method name="getDebugSecurityPredicate()"/>
      <method name="getDebugSecurityRealm()"/>
      <method name="getDebugSecurityRoleMap()"/>
      <method name="getDebugSecuritySAML2Atn()"/>
      <method name="getDebugSecuritySAML2CredMap()"/>
      <method name="getDebugSecuritySAML2Lib()"/>
      <method name="getDebugSecuritySAML2Service()"/>
      <method name="getDebugSecuritySAMLAtn()"/>
      <method name="getDebugSecuritySAMLCredMap()"/>
      <method name="getDebugSecuritySAMLLib()"/>
      <method name="getDebugSecuritySAMLService()"/>
      <method name="getDebugSecuritySSL()"/>
      <method name="getDebugSecuritySSLEaten()"/>
      <method name="getDebugSecurityService()"/>
      <method name="getDebugSecurityUserLockout()"/>
      <method name="getDebugSelfTuning()"/>
      <method name="getDebugServerLifeCycle()"/>
      <method name="getDebugServerMigration()"/>
      <method name="getDebugServerStartStatistics()"/>
      <method name="getDebugSituationalConfig()"/>
      <method name="getDebugStoreAdmin()"/>
      <method name="getDebugStoreIOLogical()"/>
      <method name="getDebugStoreIOLogicalBoot()"/>
      <method name="getDebugStoreIOPhysical()"/>
      <method name="getDebugStoreIOPhysicalVerbose()"/>
      <method name="getDebugStoreXA()"/>
      <method name="getDebugStoreXAVerbose()"/>
      <method name="getDebugTunnelingConnection()"/>
      <method name="getDebugTunnelingConnectionTimeout()"/>
      <method name="getDebugURLResolution()"/>
      <method name="getDebugVerboseRCM()"/>
      <method name="getDebugWANReplicationDetails()"/>
      <method name="getDebugWTCConfig()"/>
      <method name="getDebugWTCCorbaEx()"/>
      <method name="getDebugWTCGwtEx()"/>
      <method name="getDebugWTCJatmiEx()"/>
      <method name="getDebugWTCTDomPdu()"/>
      <method name="getDebugWTCUData()"/>
      <method name="getDebugWTCtBridgeEx()"/>
      <method name="getDebugWebAppIdentityAssertion()"/>
      <method name="getDebugWebAppModule()"/>
      <method name="getDebugWebAppSecurity()"/>
      <method name="getDebugXMLEntityCacheIncludeClass()"/>
      <method name="getDebugXMLEntityCacheIncludeLocation()"/>
      <method name="getDebugXMLEntityCacheIncludeName()"/>
      <method name="getDebugXMLEntityCacheIncludeTime()"/>
      <method name="getDebugXMLEntityCacheUseShortClass()"/>
      <method name="getDebugXMLRegistryIncludeClass()"/>
      <method name="getDebugXMLRegistryIncludeLocation()"/>
      <method name="getDebugXMLRegistryIncludeName()"/>
      <method name="getDebugXMLRegistryIncludeTime()"/>
      <method name="getDebugXMLRegistryUseShortClass()"/>
      <method name="getDefaultStore()"/>
      <method name="getListenThreadDebug()"/>
      <method name="getMasterDeployer()"/>
      <method name="getRedefiningClassLoader()"/>
      <method name="getSlaveDeployer()"/>
      <method name="getWebModule()"/>
      <method name="getDebugEmbeddedLDAPLogLevel()"/>
      <method name="getDebugJAXPDebugLevel()"/>
      <method name="getDebugXMLEntityCacheDebugLevel()"/>
      <method name="getDebugXMLRegistryDebugLevel()"/>
      <method name="getDebugJAXPOutputStream()"/>
      <method name="getDebugXMLEntityCacheOutputStream()"/>
      <method name="getDebugXMLRegistryOutputStream()"/>
      <method name="getDebugJAXPDebugName()"/>
      <method name="getDebugJTAResourceName()"/>
      <method name="getDebugJTATransactionName()"/>
      <method name="getDebugXMLEntityCacheDebugName()"/>
      <method name="getDebugXMLRegistryDebugName()"/>
      <method name="getDiagnosticContextDebugMode()"/>
      <method name="getDebugMaskCriterias()"/>
      <field name="DIAG_CTX_DEBUG_MODE_AND"/>
      <field name="DIAG_CTX_DEBUG_MODE_OFF"/>
      <field name="DIAG_CTX_DEBUG_MODE_OR"/>
      <field name="MAGIC_THREAD_DUMP_FILE_NAME"/>
      <method name="setApplicationContainer(boolean)"/>
      <method name="setClassChangeNotifier(boolean)"/>
      <method name="setClassFinder(boolean)"/>
      <method name="setClassLoader(boolean)"/>
      <method name="setClassLoaderVerbose(boolean)"/>
      <method name="setClassloaderWebApp(boolean)"/>
      <method name="setClasspathServlet(boolean)"/>
      <method name="setDebugAppAnnotations(boolean)"/>
      <method name="setDebugAppContainer(boolean)"/>
      <method name="setDebugAsyncQueue(boolean)"/>
      <method name="setDebugBeanTreeHarvesterControl(boolean)"/>
      <method name="setDebugBeanTreeHarvesterDataCollection(boolean)"/>
      <method name="setDebugBeanTreeHarvesterResolution(boolean)"/>
      <method name="setDebugBeanTreeHarvesterThreading(boolean)"/>
      <method name="setDebugBootstrapServlet(boolean)"/>
      <method name="setDebugCertRevocCheck(boolean)"/>
      <method name="setDebugClassLoadingContextualTrace(boolean)"/>
      <method name="setDebugClassLoadingVerbose(boolean)"/>
      <method name="setDebugClassRedef(boolean)"/>
      <method name="setDebugClassSize(boolean)"/>
      <method name="setDebugCluster(boolean)"/>
      <method name="setDebugClusterAnnouncements(boolean)"/>
      <method name="setDebugClusterFragments(boolean)"/>
      <method name="setDebugClusterHeartbeats(boolean)"/>
      <method name="setDebugConcurrent(boolean)"/>
      <method name="setDebugConcurrentContext(boolean)"/>
      <method name="setDebugConcurrentMES(boolean)"/>
      <method name="setDebugConcurrentMSES(boolean)"/>
      <method name="setDebugConcurrentMTF(boolean)"/>
      <method name="setDebugConcurrentTransaction(boolean)"/>
      <method name="setDebugConfigurationEdit(boolean)"/>
      <method name="setDebugConfigurationRuntime(boolean)"/>
      <method name="setDebugConnectorService(boolean)"/>
      <method name="setDebugConsensusLeasing(boolean)"/>
      <method name="setDebugDRSCalls(boolean)"/>
      <method name="setDebugDRSHeartbeats(boolean)"/>
      <method name="setDebugDRSMessages(boolean)"/>
      <method name="setDebugDRSQueues(boolean)"/>
      <method name="setDebugDRSStateTransitions(boolean)"/>
      <method name="setDebugDRSUpdateStatus(boolean)"/>
      <method name="setDebugDeploy(boolean)"/>
      <method name="setDebugDeployment(boolean)"/>
      <method name="setDebugDeploymentConcise(boolean)"/>
      <method name="setDebugDeploymentPlan(boolean)"/>
      <method name="setDebugDeploymentService(boolean)"/>
      <method name="setDebugDeploymentServiceInternal(boolean)"/>
      <method name="setDebugDeploymentServiceStatusUpdates(boolean)"/>
      <method name="setDebugDeploymentServiceTransport(boolean)"/>
      <method name="setDebugDeploymentServiceTransportHttp(boolean)"/>
      <method name="setDebugDescriptor(boolean)"/>
      <method name="setDebugDiagnosticAccessor(boolean)"/>
      <method name="setDebugDiagnosticArchive(boolean)"/>
      <method name="setDebugDiagnosticArchiveRetirement(boolean)"/>
      <method name="setDebugDiagnosticCollections(boolean)"/>
      <method name="setDebugDiagnosticContext(boolean)"/>
      <method name="setDebugDiagnosticDataGathering(boolean)"/>
      <method name="setDebugDiagnosticFileArchive(boolean)"/>
      <method name="setDebugDiagnosticImage(boolean)"/>
      <method name="setDebugDiagnosticInstrumentation(boolean)"/>
      <method name="setDebugDiagnosticInstrumentationActions(boolean)"/>
      <method name="setDebugDiagnosticInstrumentationConfig(boolean)"/>
      <method name="setDebugDiagnosticInstrumentationEvents(boolean)"/>
      <method name="setDebugDiagnosticInstrumentationWeaving(boolean)"/>
      <method name="setDebugDiagnosticInstrumentationWeavingMatches(boolean)"/>
      <method name="setDebugDiagnosticJdbcArchive(boolean)"/>
      <method name="setDebugDiagnosticLifecycleHandlers(boolean)"/>
      <method name="setDebugDiagnosticQuery(boolean)"/>
      <method name="setDebugDiagnosticRuntimeControlDriver(boolean)"/>
      <method name="setDebugDiagnosticRuntimeControlService(boolean)"/>
      <method name="setDebugDiagnosticWatch(boolean)"/>
      <method name="setDebugDiagnosticWatchEvents(boolean)"/>
      <method name="setDebugDiagnosticWatchEventsDetails(boolean)"/>
      <method name="setDebugDiagnosticWlstoreArchive(boolean)"/>
      <method name="setDebugDiagnosticsBeanExtensionResolver(boolean)"/>
      <method name="setDebugDiagnosticsBeanInfoProviders(boolean)"/>
      <method name="setDebugDiagnosticsELContext(boolean)"/>
      <method name="setDebugDiagnosticsELResolver(boolean)"/>
      <method name="setDebugDiagnosticsExpressionEvaluators(boolean)"/>
      <method name="setDebugDiagnosticsExpressionFunctionMapper(boolean)"/>
      <method name="setDebugDiagnosticsExpressionFunctions(boolean)"/>
      <method name="setDebugDiagnosticsExpressionMetrics(boolean)"/>
      <method name="setDebugDiagnosticsExpressionPoller(boolean)"/>
      <method name="setDebugDiagnosticsExpressionPollerBuffer(boolean)"/>
      <method name="setDebugDiagnosticsHarvester(boolean)"/>
      <method name="setDebugDiagnosticsHarvesterData(boolean)"/>
      <method name="setDebugDiagnosticsHarvesterMBeanPlugin(boolean)"/>
      <method name="setDebugDiagnosticsHarvesterTreeBeanPlugin(boolean)"/>
      <method name="setDebugDiagnosticsMBeanELResolver(boolean)"/>
      <method name="setDebugDiagnosticsModule(boolean)"/>
      <method name="setDebugDiagnosticsScriptAction(boolean)"/>
      <method name="setDebugDiagnosticsUtils(boolean)"/>
      <method name="setDebugDiagnosticsValueTracingELResolver(boolean)"/>
      <method name="setDebugDomainLogHandler(boolean)"/>
      <method name="setDebugDynamicSingletonServices(boolean)"/>
      <method name="setDebugEjbCaching(boolean)"/>
      <method name="setDebugEjbCmpDeployment(boolean)"/>
      <method name="setDebugEjbCmpRuntime(boolean)"/>
      <method name="setDebugEjbCompilation(boolean)"/>
      <method name="setDebugEjbDeployment(boolean)"/>
      <method name="setDebugEjbInvoke(boolean)"/>
      <method name="setDebugEjbLocking(boolean)"/>
      <method name="setDebugEjbMdbConnection(boolean)"/>
      <method name="setDebugEjbMetadata(boolean)"/>
      <method name="setDebugEjbPooling(boolean)"/>
      <method name="setDebugEjbSecurity(boolean)"/>
      <method name="setDebugEjbSwapping(boolean)"/>
      <method name="setDebugEjbTimers(boolean)"/>
      <method name="setDebugElasticActions(boolean)"/>
      <method name="setDebugElasticServices(boolean)"/>
      <method name="setDebugEmbeddedLDAP(boolean)"/>
      <method name="setDebugEmbeddedLDAPLogLevel(int)"/>
      <method name="setDebugEmbeddedLDAPLogToConsole(boolean)"/>
      <method name="setDebugEmbeddedLDAPWriteOverrideProps(boolean)"/>
      <method name="setDebugEventManager(boolean)"/>
      <method name="setDebugExpressionBeanLocalizer(boolean)"/>
      <method name="setDebugExpressionExtensionsManager(boolean)"/>
      <method name="setDebugFileDistributionServlet(boolean)"/>
      <method name="setDebugHttp(boolean)"/>
      <method name="setDebugHttpConcise(boolean)"/>
      <method name="setDebugHttpLogging(boolean)"/>
      <method name="setDebugHttpSessions(boolean)"/>
      <method name="setDebugIIOPNaming(boolean)"/>
      <method name="setDebugIIOPTunneling(boolean)"/>
      <method name="setDebugInterceptors(boolean)"/>
      <method name="setDebugJ2EEManagement(boolean)"/>
      <method name="setDebugJAXPDebugLevel(int)"/>
      <method name="setDebugJAXPDebugName(java.lang.String)"/>
      <method name="setDebugJAXPIncludeClass(boolean)"/>
      <method name="setDebugJAXPIncludeLocation(boolean)"/>
      <method name="setDebugJAXPIncludeName(boolean)"/>
      <method name="setDebugJAXPIncludeTime(boolean)"/>
      <method name="setDebugJAXPOutputStream(java.io.OutputStream)"/>
      <method name="setDebugJAXPUseShortClass(boolean)"/>
      <method name="setDebugJDBCConn(boolean)"/>
      <method name="setDebugJDBCDriverLogging(boolean)"/>
      <method name="setDebugJDBCInternal(boolean)"/>
      <method name="setDebugJDBCONS(boolean)"/>
      <method name="setDebugJDBCRAC(boolean)"/>
      <method name="setDebugJDBCRMI(boolean)"/>
      <method name="setDebugJDBCReplay(boolean)"/>
      <method name="setDebugJDBCSQL(boolean)"/>
      <method name="setDebugJDBCUCP(boolean)"/>
      <method name="setDebugJMSAME(boolean)"/>
      <method name="setDebugJMSBackEnd(boolean)"/>
      <method name="setDebugJMSBoot(boolean)"/>
      <method name="setDebugJMSCDS(boolean)"/>
      <method name="setDebugJMSCommon(boolean)"/>
      <method name="setDebugJMSConfig(boolean)"/>
      <method name="setDebugJMSDispatcher(boolean)"/>
      <method name="setDebugJMSDispatcherProxy(boolean)"/>
      <method name="setDebugJMSDistTopic(boolean)"/>
      <method name="setDebugJMSDurableSubscribers(boolean)"/>
      <method name="setDebugJMSFrontEnd(boolean)"/>
      <method name="setDebugJMSJDBCScavengeOnFlush(boolean)"/>
      <method name="setDebugJMSLocking(boolean)"/>
      <method name="setDebugJMSMessagePath(boolean)"/>
      <method name="setDebugJMSModule(boolean)"/>
      <method name="setDebugJMSPauseResume(boolean)"/>
      <method name="setDebugJMSSAF(boolean)"/>
      <method name="setDebugJMSStore(boolean)"/>
      <method name="setDebugJMST3Server(boolean)"/>
      <method name="setDebugJMSWrappers(boolean)"/>
      <method name="setDebugJMSXA(boolean)"/>
      <method name="setDebugJMX(boolean)"/>
      <method name="setDebugJMXCompatibility(boolean)"/>
      <method name="setDebugJMXCore(boolean)"/>
      <method name="setDebugJMXCoreConcise(boolean)"/>
      <method name="setDebugJMXDomain(boolean)"/>
      <method name="setDebugJMXEdit(boolean)"/>
      <method name="setDebugJMXRuntime(boolean)"/>
      <method name="setDebugJNDI(boolean)"/>
      <method name="setDebugJNDIFactories(boolean)"/>
      <method name="setDebugJNDIResolution(boolean)"/>
      <method name="setDebugJTA2PC(boolean)"/>
      <method name="setDebugJTA2PCStackTrace(boolean)"/>
      <method name="setDebugJTAAPI(boolean)"/>
      <method name="setDebugJTAGateway(boolean)"/>
      <method name="setDebugJTAGatewayStackTrace(boolean)"/>
      <method name="setDebugJTAHealth(boolean)"/>
      <method name="setDebugJTAJDBC(boolean)"/>
      <method name="setDebugJTALLR(boolean)"/>
      <method name="setDebugJTALifecycle(boolean)"/>
      <method name="setDebugJTAMigration(boolean)"/>
      <method name="setDebugJTANaming(boolean)"/>
      <method name="setDebugJTANamingStackTrace(boolean)"/>
      <method name="setDebugJTANonXA(boolean)"/>
      <method name="setDebugJTAPropagate(boolean)"/>
      <method name="setDebugJTARMI(boolean)"/>
      <method name="setDebugJTARecovery(boolean)"/>
      <method name="setDebugJTARecoveryStackTrace(boolean)"/>
      <method name="setDebugJTAResourceHealth(boolean)"/>
      <method name="setDebugJTAResourceName(java.lang.String)"/>
      <method name="setDebugJTATLOG(boolean)"/>
      <method name="setDebugJTATransactionName(java.lang.String)"/>
      <method name="setDebugJTAXA(boolean)"/>
      <method name="setDebugJTAXAStackTrace(boolean)"/>
      <method name="setDebugJpaDataCache(boolean)"/>
      <method name="setDebugJpaEnhance(boolean)"/>
      <method name="setDebugJpaJdbcJdbc(boolean)"/>
      <method name="setDebugJpaJdbcSchema(boolean)"/>
      <method name="setDebugJpaJdbcSql(boolean)"/>
      <method name="setDebugJpaManage(boolean)"/>
      <method name="setDebugJpaMetaData(boolean)"/>
      <method name="setDebugJpaProfile(boolean)"/>
      <method name="setDebugJpaQuery(boolean)"/>
      <method name="setDebugJpaRuntime(boolean)"/>
      <method name="setDebugJpaTool(boolean)"/>
      <method name="setDebugLeaderElection(boolean)"/>
      <method name="setDebugLibraries(boolean)"/>
      <method name="setDebugLifecycleManager(boolean)"/>
      <method name="setDebugLoggingConfiguration(boolean)"/>
      <method name="setDebugMBeanHarvesterControl(boolean)"/>
      <method name="setDebugMBeanHarvesterDataCollection(boolean)"/>
      <method name="setDebugMBeanHarvesterResolution(boolean)"/>
      <method name="setDebugMBeanHarvesterThreading(boolean)"/>
      <method name="setDebugMBeanTypeUtilQueue(boolean)"/>
      <method name="setDebugMBeanTypeUtilQueuePriority(boolean)"/>
      <method name="setDebugMBeanTypeUtilityListener(boolean)"/>
      <method name="setDebugMBeanTypingUtility(boolean)"/>
      <method name="setDebugManagementServicesResource(boolean)"/>
      <method name="setDebugMaskCriterias(java.lang.String[])"/>
      <method name="setDebugMessagingBridgeRuntime(boolean)"/>
      <method name="setDebugMessagingBridgeRuntimeVerbose(boolean)"/>
      <method name="setDebugMessagingBridgeStartup(boolean)"/>
      <method name="setDebugMessagingKernel(boolean)"/>
      <method name="setDebugMessagingKernelBoot(boolean)"/>
      <method name="setDebugMessagingOwnableLock(boolean)"/>
      <method name="setDebugNodeManagerRuntime(boolean)"/>
      <method name="setDebugPartitionResourceMetricsRuntime(boolean)"/>
      <method name="setDebugPatchingRuntime(boolean)"/>
      <method name="setDebugPathSvc(boolean)"/>
      <method name="setDebugPathSvcVerbose(boolean)"/>
      <method name="setDebugRA(boolean)"/>
      <method name="setDebugRAClassloader(boolean)"/>
      <method name="setDebugRAConnEvents(boolean)"/>
      <method name="setDebugRAConnections(boolean)"/>
      <method name="setDebugRADeployment(boolean)"/>
      <method name="setDebugRALifecycle(boolean)"/>
      <method name="setDebugRALocalOut(boolean)"/>
      <method name="setDebugRAParsing(boolean)"/>
      <method name="setDebugRAPoolVerbose(boolean)"/>
      <method name="setDebugRAPooling(boolean)"/>
      <method name="setDebugRASecurityCtx(boolean)"/>
      <method name="setDebugRAWork(boolean)"/>
      <method name="setDebugRAWorkEvents(boolean)"/>
      <method name="setDebugRAXAin(boolean)"/>
      <method name="setDebugRAXAout(boolean)"/>
      <method name="setDebugRAXAwork(boolean)"/>
      <method name="setDebugRCM(boolean)"/>
      <method name="setDebugRESTNotifications(boolean)"/>
      <method name="setDebugReadyApp(boolean)"/>
      <method name="setDebugReplication(boolean)"/>
      <method name="setDebugReplicationDetails(boolean)"/>
      <method name="setDebugReplicationSize(boolean)"/>
      <method name="setDebugRestJersey1Integration(boolean)"/>
      <method name="setDebugRestJersey2Integration(boolean)"/>
      <method name="setDebugRestartInPlace(boolean)"/>
      <method name="setDebugSAFAdmin(boolean)"/>
      <method name="setDebugSAFLifeCycle(boolean)"/>
      <method name="setDebugSAFManager(boolean)"/>
      <method name="setDebugSAFMessagePath(boolean)"/>
      <method name="setDebugSAFReceivingAgent(boolean)"/>
      <method name="setDebugSAFSendingAgent(boolean)"/>
      <method name="setDebugSAFStore(boolean)"/>
      <method name="setDebugSAFTransport(boolean)"/>
      <method name="setDebugSAFVerbose(boolean)"/>
      <method name="setDebugSNMPAgent(boolean)"/>
      <method name="setDebugSNMPExtensionProvider(boolean)"/>
      <method name="setDebugSNMPProtocolTCP(boolean)"/>
      <method name="setDebugSNMPToolkit(boolean)"/>
      <method name="setDebugScaContainer(boolean)"/>
      <method name="setDebugSecurityAdjudicator(boolean)"/>
      <method name="setDebugSecurityAtn(boolean)"/>
      <method name="setDebugSecurityAtz(boolean)"/>
      <method name="setDebugSecurityAuditor(boolean)"/>
      <method name="setDebugSecurityCertPath(boolean)"/>
      <method name="setDebugSecurityCredMap(boolean)"/>
      <method name="setDebugSecurityEEngine(boolean)"/>
      <method name="setDebugSecurityEncryptionService(boolean)"/>
      <method name="setDebugSecurityJACC(boolean)"/>
      <method name="setDebugSecurityJACCNonPolicy(boolean)"/>
      <method name="setDebugSecurityJACCPolicy(boolean)"/>
      <method name="setDebugSecurityKeyStore(boolean)"/>
      <method name="setDebugSecurityPasswordPolicy(boolean)"/>
      <method name="setDebugSecurityPredicate(boolean)"/>
      <method name="setDebugSecurityProfiler(boolean)"/>
      <method name="setDebugSecurityRealm(boolean)"/>
      <method name="setDebugSecurityRoleMap(boolean)"/>
      <method name="setDebugSecuritySAML2Atn(boolean)"/>
      <method name="setDebugSecuritySAML2CredMap(boolean)"/>
      <method name="setDebugSecuritySAML2Lib(boolean)"/>
      <method name="setDebugSecuritySAML2Service(boolean)"/>
      <method name="setDebugSecuritySAMLAtn(boolean)"/>
      <method name="setDebugSecuritySAMLCredMap(boolean)"/>
      <method name="setDebugSecuritySAMLLib(boolean)"/>
      <method name="setDebugSecuritySAMLService(boolean)"/>
      <method name="setDebugSecuritySSL(boolean)"/>
      <method name="setDebugSecuritySSLEaten(boolean)"/>
      <method name="setDebugSecurityService(boolean)"/>
      <method name="setDebugSecurityUserLockout(boolean)"/>
      <method name="setDebugSelfTuning(boolean)"/>
      <method name="setDebugServerLifeCycle(boolean)"/>
      <method name="setDebugServerMigration(boolean)"/>
      <method name="setDebugServerStartStatistics(boolean)"/>
      <method name="setDebugSituationalConfig(boolean)"/>
      <method name="setDebugStoreAdmin(boolean)"/>
      <method name="setDebugStoreIOLogical(boolean)"/>
      <method name="setDebugStoreIOLogicalBoot(boolean)"/>
      <method name="setDebugStoreIOPhysical(boolean)"/>
      <method name="setDebugStoreIOPhysicalVerbose(boolean)"/>
      <method name="setDebugStoreXA(boolean)"/>
      <method name="setDebugStoreXAVerbose(boolean)"/>
      <method name="setDebugTunnelingConnection(boolean)"/>
      <method name="setDebugTunnelingConnectionTimeout(boolean)"/>
      <method name="setDebugURLResolution(boolean)"/>
      <method name="setDebugVerboseRCM(boolean)"/>
      <method name="setDebugWANReplicationDetails(boolean)"/>
      <method name="setDebugWTCConfig(boolean)"/>
      <method name="setDebugWTCCorbaEx(boolean)"/>
      <method name="setDebugWTCGwtEx(boolean)"/>
      <method name="setDebugWTCJatmiEx(boolean)"/>
      <method name="setDebugWTCTDomPdu(boolean)"/>
      <method name="setDebugWTCUData(boolean)"/>
      <method name="setDebugWTCtBridgeEx(boolean)"/>
      <method name="setDebugWebAppIdentityAssertion(boolean)"/>
      <method name="setDebugWebAppModule(boolean)"/>
      <method name="setDebugWebAppSecurity(boolean)"/>
      <method name="setDebugXMLEntityCacheDebugLevel(int)"/>
      <method name="setDebugXMLEntityCacheDebugName(java.lang.String)"/>
      <method name="setDebugXMLEntityCacheIncludeClass(boolean)"/>
      <method name="setDebugXMLEntityCacheIncludeLocation(boolean)"/>
      <method name="setDebugXMLEntityCacheIncludeName(boolean)"/>
      <method name="setDebugXMLEntityCacheIncludeTime(boolean)"/>
      <method name="setDebugXMLEntityCacheOutputStream(java.io.OutputStream)"/>
      <method name="setDebugXMLEntityCacheUseShortClass(boolean)"/>
      <method name="setDebugXMLRegistryDebugLevel(int)"/>
      <method name="setDebugXMLRegistryDebugName(java.lang.String)"/>
      <method name="setDebugXMLRegistryIncludeClass(boolean)"/>
      <method name="setDebugXMLRegistryIncludeLocation(boolean)"/>
      <method name="setDebugXMLRegistryIncludeName(boolean)"/>
      <method name="setDebugXMLRegistryIncludeTime(boolean)"/>
      <method name="setDebugXMLRegistryOutputStream(java.io.OutputStream)"/>
      <method name="setDebugXMLRegistryUseShortClass(boolean)"/>
      <method name="setDefaultStore(boolean)"/>
      <method name="setDiagnosticContextDebugMode(java.lang.String)"/>
      <method name="setListenThreadDebug(boolean)"/>
      <method name="setMasterDeployer(boolean)"/>
      <method name="setRedefiningClassLoader(boolean)"/>
      <method name="setServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="setSlaveDeployer(boolean)"/>
      <method name="setWebModule(boolean)"/>
      <method name="getServer()"/>
    </class>
    <class name="ServerFailureTriggerMBean">
      <method name="getMaxStuckThreadTime()"/>
      <method name="getStuckThreadCount()"/>
      <method name="setMaxStuckThreadTime(int)"/>
      <method name="setStuckThreadCount(int)"/>
    </class>
    <class name="ServerMBean">
      <method name="setServerTemplate(weblogic.management.configuration.ServerTemplateMBean)"/>
      <method name="getServerTemplate()"/>
    </class>
    <class name="ServerStartMBean">
      <method name="getPasswordEncrypted()"/>
      <method name="getArguments()"/>
      <method name="getBeaHome()"/>
      <method name="getClassPath()"/>
      <method name="getJavaHome()"/>
      <method name="getJavaVendor()"/>
      <method name="getMWHome()"/>
      <method name="getPassword()"/>
      <method name="getRootDirectory()"/>
      <method name="getSecurityPolicyFile()"/>
      <method name="getUsername()"/>
      <method name="setArguments(java.lang.String)"/>
      <method name="setBeaHome(java.lang.String)"/>
      <method name="setClassPath(java.lang.String)"/>
      <method name="setJavaHome(java.lang.String)"/>
      <method name="setJavaVendor(java.lang.String)"/>
      <method name="setMWHome(java.lang.String)"/>
      <method name="setOutputFile(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setRootDirectory(java.lang.String)"/>
      <method name="setSecurityPolicyFile(java.lang.String)"/>
      <method name="setUsername(java.lang.String)"/>
    </class>
    <class name="ServerTemplateMBean">
      <method name="addNetworkAccessPoint(weblogic.management.configuration.NetworkAccessPointMBean)"/>
      <method name="getAutoKillIfFailed()"/>
      <method name="getAutoRestart()"/>
      <method name="getHostsMigratableServices()"/>
      <method name="getListenersBindEarly()"/>
      <method name="getResolveDNSName()"/>
      <method name="isAutoMigrationEnabled()"/>
      <method name="isCOMEnabled()"/>
      <method name="isClasspathServletDisabled()"/>
      <method name="isClasspathServletSecureModeEnabled()"/>
      <method name="isCleanupOrphanedSessionsEnabled()"/>
      <method name="isClientCertProxyEnabled()"/>
      <method name="isDefaultInternalServletsDisabled()"/>
      <method name="isHttpTraceSupportEnabled()"/>
      <method name="isHttpdEnabled()"/>
      <method name="isIIOPEnabled()"/>
      <method name="isIgnoreSessionsDuringShutdown()"/>
      <method name="isJMSDefaultConnectionFactoriesEnabled()"/>
      <method name="isListenPortEnabled()"/>
      <method name="isMSIFileReplicationEnabled()"/>
      <method name="isManagedServerIndependenceEnabled()"/>
      <method name="isMessageIdPrefixEnabled()"/>
      <method name="isSessionReplicationOnShutdownEnabled()"/>
      <method name="isSitConfigRequired()"/>
      <method name="isTGIOPEnabled()"/>
      <method name="isTunnelingEnabled()"/>
      <method name="isUseFusionForLLR()"/>
      <method name="isWeblogicPluginEnabled()"/>
      <method name="removeNetworkAccessPoint(weblogic.management.configuration.NetworkAccessPointMBean)"/>
      <method name="getCustomIdentityKeyStorePassPhraseEncrypted()"/>
      <method name="getCustomTrustKeyStorePassPhraseEncrypted()"/>
      <method name="getDefaultIIOPPasswordEncrypted()"/>
      <method name="getDefaultTGIOPPasswordEncrypted()"/>
      <method name="getJavaStandardTrustKeyStorePassPhraseEncrypted()"/>
      <method name="getSystemPasswordEncrypted()"/>
      <method name="getAcceptBacklog()"/>
      <method name="getAdminReconnectIntervalSeconds()"/>
      <method name="getAdministrationPort()"/>
      <method name="getClusterWeight()"/>
      <method name="getGracefulShutdownTimeout()"/>
      <method name="getHealthCheckIntervalSeconds()"/>
      <method name="getHealthCheckTimeoutSeconds()"/>
      <method name="getJDBCLoginTimeoutSeconds()"/>
      <method name="getListenDelaySecs()"/>
      <method name="getListenPort()"/>
      <method name="getListenThreadStartDelaySecs()"/>
      <method name="getLoginTimeoutMillis()"/>
      <method name="getLowMemoryGCThreshold()"/>
      <method name="getLowMemoryGranularityLevel()"/>
      <method name="getLowMemorySampleSize()"/>
      <method name="getLowMemoryTimeInterval()"/>
      <method name="getMaxConcurrentLongRunningRequests()"/>
      <method name="getMaxConcurrentNewThreads()"/>
      <method name="getNMSocketCreateTimeoutInMillis()"/>
      <method name="getRestartDelaySeconds()"/>
      <method name="getRestartIntervalSeconds()"/>
      <method name="getRestartMax()"/>
      <method name="getServerLifeCycleTimeoutVal()"/>
      <method name="getSitConfigPollingInterval()"/>
      <method name="getStartupTimeout()"/>
      <method name="getTunnelingClientPingSecs()"/>
      <method name="getTunnelingClientTimeoutSecs()"/>
      <method name="getCustomIdentityKeyStoreFileName()"/>
      <method name="getCustomIdentityKeyStorePassPhrase()"/>
      <method name="getCustomIdentityKeyStoreType()"/>
      <method name="getCustomTrustKeyStoreFileName()"/>
      <method name="getCustomTrustKeyStorePassPhrase()"/>
      <method name="getCustomTrustKeyStoreType()"/>
      <method name="getDefaultIIOPPassword()"/>
      <method name="getDefaultIIOPUser()"/>
      <method name="getDefaultTGIOPPassword()"/>
      <method name="getDefaultTGIOPUser()"/>
      <method name="getExternalDNSName()"/>
      <method name="getExtraEjbcOptions()"/>
      <method name="getExtraRmicOptions()"/>
      <method name="getInterfaceAddress()"/>
      <method name="getJDBCLLRTableName()"/>
      <method name="getJavaCompiler()"/>
      <method name="getJavaCompilerPostClassPath()"/>
      <method name="getJavaCompilerPreClassPath()"/>
      <method name="getJavaStandardTrustKeyStorePassPhrase()"/>
      <method name="getKeyStores()"/>
      <method name="getListenAddress()"/>
      <method name="getName()"/>
      <method name="getPreferredSecondaryGroup()"/>
      <method name="getReplicationGroup()"/>
      <method name="getReplicationPorts()"/>
      <method name="getServerVersion()"/>
      <method name="getStagingDirectoryName()"/>
      <method name="getStagingMode()"/>
      <method name="getStartupMode()"/>
      <method name="getTransactionLogFilePrefix()"/>
      <method name="getTransactionLogFileWritePolicy()"/>
      <method name="getUploadDirectoryName()"/>
      <method name="getVerboseEJBDeploymentEnabled()"/>
      <method name="getVirtualMachineName()"/>
      <method name="synchronousKill()"/>
      <method name="synchronousStart()"/>
      <method name="getJNDITransportableObjectFactoryList()"/>
      <field name="CONNECTION_FACTORY_UNMAPPED_RESREF_FAILSAFE"/>
      <field name="CONNECTION_FACTORY_UNMAPPED_RESREF_RETURNDEFAULT"/>
      <field name="DEFAULT_STAGE"/>
      <field name="EXTERNAL_STAGE"/>
      <field name="LOGTYPE_WL_STDERR"/>
      <field name="LOGTYPE_WL_STDOUT"/>
      <field name="NO_STAGE"/>
      <field name="STAGE"/>
      <field name="STAGING_NAME"/>
      <field name="SYNCWRITE_CACHEFLUSH"/>
      <field name="SYNCWRITE_DIRECTWRITE"/>
      <field name="UPLOAD_DIR_NAME"/>
      <method name="destroyNetworkAccessPoint(weblogic.management.configuration.NetworkAccessPointMBean)"/>
      <method name="setAcceptBacklog(int)"/>
      <method name="setAdminReconnectIntervalSeconds(int)"/>
      <method name="setAdministrationPort(int)"/>
      <method name="setAutoKillIfFailed(boolean)"/>
      <method name="setAutoMigrationEnabled(boolean)"/>
      <method name="setAutoRestart(boolean)"/>
      <method name="setCOMEnabled(boolean)"/>
      <method name="setCandidateMachines(weblogic.management.configuration.MachineMBean[])"/>
      <method name="setClasspathServletDisabled(boolean)"/>
      <method name="setClasspathServletSecureModeEnabled(boolean)"/>
      <method name="setCleanupOrphanedSessionsEnabled(boolean)"/>
      <method name="setClientCertProxyEnabled(boolean)"/>
      <method name="setCluster(weblogic.management.configuration.ClusterMBean)"/>
      <method name="setClusterWeight(int)"/>
      <method name="setCoherenceClusterSystemResource(weblogic.management.configuration.CoherenceClusterSystemResourceMBean)"/>
      <method name="setCustomIdentityKeyStoreFileName(java.lang.String)"/>
      <method name="setCustomIdentityKeyStorePassPhrase(java.lang.String)"/>
      <method name="setCustomIdentityKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setCustomIdentityKeyStoreType(java.lang.String)"/>
      <method name="setCustomTrustKeyStoreFileName(java.lang.String)"/>
      <method name="setCustomTrustKeyStorePassPhrase(java.lang.String)"/>
      <method name="setCustomTrustKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setCustomTrustKeyStoreType(java.lang.String)"/>
      <method name="setDefaultIIOPPassword(java.lang.String)"/>
      <method name="setDefaultIIOPPasswordEncrypted(byte[])"/>
      <method name="setDefaultIIOPUser(java.lang.String)"/>
      <method name="setDefaultInternalServletsDisabled(boolean)"/>
      <method name="setDefaultTGIOPPassword(java.lang.String)"/>
      <method name="setDefaultTGIOPPasswordEncrypted(byte[])"/>
      <method name="setDefaultTGIOPUser(java.lang.String)"/>
      <method name="setExternalDNSName(java.lang.String)"/>
      <method name="setExtraEjbcOptions(java.lang.String)"/>
      <method name="setExtraRmicOptions(java.lang.String)"/>
      <method name="setGracefulShutdownTimeout(int)"/>
      <method name="setHealthCheckIntervalSeconds(int)"/>
      <method name="setHealthCheckStartDelaySeconds(int)"/>
      <method name="setHealthCheckTimeoutSeconds(int)"/>
      <method name="setHttpTraceSupportEnabled(boolean)"/>
      <method name="setHttpdEnabled(boolean)"/>
      <method name="setIIOPEnabled(boolean)"/>
      <method name="setIgnoreSessionsDuringShutdown(boolean)"/>
      <method name="setInterfaceAddress(java.lang.String)"/>
      <method name="setJ2EE12OnlyModeEnabled(boolean)"/>
      <method name="setJ2EE13WarningEnabled(boolean)"/>
      <method name="setJDBCLLRTableName(java.lang.String)"/>
      <method name="setJDBCLoginTimeoutSeconds(int)"/>
      <method name="setJMSConnectionFactoryUnmappedResRefMode(java.lang.String)"/>
      <method name="setJMSDefaultConnectionFactoriesEnabled(boolean)"/>
      <method name="setJNDITransportableObjectFactoryList(java.lang.String[])"/>
      <method name="setJRMPEnabled(boolean)"/>
      <method name="setJavaCompiler(java.lang.String)"/>
      <method name="setJavaCompilerPostClassPath(java.lang.String)"/>
      <method name="setJavaCompilerPreClassPath(java.lang.String)"/>
      <method name="setJavaStandardTrustKeyStorePassPhrase(java.lang.String)"/>
      <method name="setJavaStandardTrustKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setKeyStores(java.lang.String)"/>
      <method name="setListenAddress(java.lang.String)"/>
      <method name="setListenDelaySecs(int)"/>
      <method name="setListenPort(int)"/>
      <method name="setListenPortEnabled(boolean)"/>
      <method name="setListenThreadStartDelaySecs(int)"/>
      <method name="setListenersBindEarly(boolean)"/>
      <method name="setLoginTimeoutMillis(int)"/>
      <method name="setLowMemoryGCThreshold(int)"/>
      <method name="setLowMemoryGranularityLevel(int)"/>
      <method name="setLowMemorySampleSize(int)"/>
      <method name="setLowMemoryTimeInterval(int)"/>
      <method name="setMSIFileReplicationEnabled(boolean)"/>
      <method name="setMachine(weblogic.management.configuration.MachineMBean)"/>
      <method name="setManagedServerIndependenceEnabled(boolean)"/>
      <method name="setMaxConcurrentLongRunningRequests(int)"/>
      <method name="setMaxConcurrentNewThreads(int)"/>
      <method name="setMessageIdPrefixEnabled(boolean)"/>
      <method name="setNMSocketCreateTimeoutInMillis(int)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setNetworkAccessPoints(weblogic.management.configuration.NetworkAccessPointMBean[])"/>
      <method name="setParent(weblogic.management.WebLogicMBean)"/>
      <method name="setPreferredSecondaryGroup(java.lang.String)"/>
      <method name="setReliableDeliveryPolicy(weblogic.management.configuration.WSReliableDeliveryPolicyMBean)"/>
      <method name="setReplicationGroup(java.lang.String)"/>
      <method name="setReplicationPorts(java.lang.String)"/>
      <method name="setResolveDNSName(boolean)"/>
      <method name="setRestartDelaySeconds(int)"/>
      <method name="setRestartIntervalSeconds(int)"/>
      <method name="setRestartMax(int)"/>
      <method name="setServerLifeCycleTimeoutVal(int)"/>
      <method name="setServerVersion(java.lang.String)"/>
      <method name="setSessionReplicationOnShutdownEnabled(boolean)"/>
      <method name="setSitConfigPollingInterval(int)"/>
      <method name="setSitConfigRequired(boolean)"/>
      <method name="setStagingMode(java.lang.String)"/>
      <method name="setStartupMode(java.lang.String)"/>
      <method name="setStartupTimeout(int)"/>
      <method name="setSystemPassword(java.lang.String)"/>
      <method name="setSystemPasswordEncrypted(byte[])"/>
      <method name="setTGIOPEnabled(boolean)"/>
      <method name="setTransactionLogFilePrefix(java.lang.String)"/>
      <method name="setTransactionLogFileWritePolicy(java.lang.String)"/>
      <method name="setTunnelingClientPingSecs(int)"/>
      <method name="setTunnelingClientTimeoutSecs(int)"/>
      <method name="setTunnelingEnabled(boolean)"/>
      <method name="setUploadDirectoryName(java.lang.String)"/>
      <method name="setUseFusionForLLR(boolean)"/>
      <method name="setVerboseEJBDeploymentEnabled(java.lang.String)"/>
      <method name="setVirtualMachineName(java.lang.String)"/>
      <method name="setWeblogicPluginEnabled(boolean)"/>
      <method name="setXMLEntityCache(weblogic.management.configuration.XMLEntityCacheMBean)"/>
      <method name="setXMLRegistry(weblogic.management.configuration.XMLRegistryMBean)"/>
      <method name="getParent()"/>
      <method name="getCOM()"/>
      <method name="getCluster()"/>
      <method name="getCoherenceClusterSystemResource()"/>
      <method name="getCoherenceMemberConfig()"/>
      <method name="getDataSource()"/>
      <method name="getDefaultFileStore()"/>
      <method name="getFederationServices()"/>
      <method name="getJTAMigratableTarget()"/>
      <method name="getMachine()"/>
      <method name="getCandidateMachines()"/>
      <method name="createNetworkAccessPoint(java.lang.String)"/>
      <method name="lookupNetworkAccessPoint(java.lang.String)"/>
      <method name="getNetworkAccessPoints()"/>
      <method name="getOverloadProtection()"/>
      <method name="getServerDebug()"/>
      <method name="getServerStart()"/>
      <method name="getSingleSignOnServices()"/>
      <method name="getTransactionLogJDBCStore()"/>
      <method name="getServerDiagnosticConfig()"/>
      <method name="getReliableDeliveryPolicy()"/>
      <method name="getWebServer()"/>
      <method name="getWebService()"/>
      <method name="getXMLEntityCache()"/>
      <method name="getXMLRegistry()"/>
    </class>
    <class name="ShutdownClassMBean" members="concealed"/>
    <class name="SimplePropertyValueVBean">
      <method name="getEffectiveValue()"/>
      <method name="getPropertyName()"/>
    </class>
    <class name="SingleSignOnServicesMBean">
      <method name="isAssertionEncryptionEnabled()"/>
      <method name="isForceAuthn()"/>
      <method name="isIdentityProviderArtifactBindingEnabled()"/>
      <method name="isIdentityProviderEnabled()"/>
      <method name="isIdentityProviderPOSTBindingEnabled()"/>
      <method name="isIdentityProviderRedirectBindingEnabled()"/>
      <method name="isPOSTOneUseCheckEnabled()"/>
      <method name="isPassive()"/>
      <method name="isRecipientCheckEnabled()"/>
      <method name="isReplicatedCacheEnabled()"/>
      <method name="isServiceProviderArtifactBindingEnabled()"/>
      <method name="isServiceProviderEnabled()"/>
      <method name="isServiceProviderPOSTBindingEnabled()"/>
      <method name="isSignAuthnRequests()"/>
      <method name="isWantArtifactRequestsSigned()"/>
      <method name="isWantAssertionsSigned()"/>
      <method name="isWantAuthnRequestsSigned()"/>
      <method name="isWantBasicAuthClientAuthentication()"/>
      <method name="isWantTransportLayerSecurityClientAuthentication()"/>
      <method name="getAssertionEncryptionDecryptionKeyPassPhraseEncrypted()"/>
      <method name="getBasicAuthPasswordEncrypted()"/>
      <method name="getSSOSigningKeyPassPhraseEncrypted()"/>
      <method name="getTransportLayerSecurityKeyPassPhraseEncrypted()"/>
      <method name="getArtifactMaxCacheSize()"/>
      <method name="getArtifactTimeout()"/>
      <method name="getAuthnRequestMaxCacheSize()"/>
      <method name="getAuthnRequestTimeout()"/>
      <method name="getAssertionEncryptionDecryptionKeyAlias()"/>
      <method name="getAssertionEncryptionDecryptionKeyPassPhrase()"/>
      <method name="getBasicAuthPassword()"/>
      <method name="getBasicAuthUsername()"/>
      <method name="getContactPersonCompany()"/>
      <method name="getContactPersonEmailAddress()"/>
      <method name="getContactPersonGivenName()"/>
      <method name="getContactPersonSurName()"/>
      <method name="getContactPersonTelephoneNumber()"/>
      <method name="getContactPersonType()"/>
      <method name="getDataEncryptionAlgorithm()"/>
      <method name="getDefaultURL()"/>
      <method name="getEntityID()"/>
      <method name="getIdentityProviderPreferredBinding()"/>
      <method name="getKeyEncryptionAlgorithm()"/>
      <method name="getLoginReturnQueryParameter()"/>
      <method name="getLoginURL()"/>
      <method name="getOrganizationName()"/>
      <method name="getOrganizationURL()"/>
      <method name="getPublishedSiteURL()"/>
      <method name="getSSOSigningKeyAlias()"/>
      <method name="getSSOSigningKeyPassPhrase()"/>
      <method name="getServiceProviderPreferredBinding()"/>
      <method name="getTransportLayerSecurityKeyAlias()"/>
      <method name="getTransportLayerSecurityKeyPassPhrase()"/>
      <method name="getAllowedTargetHosts()"/>
      <method name="getMetadataEncryptionAlgorithms()"/>
      <field name="AES128_CBC"/>
      <field name="AES128_GCM"/>
      <field name="AES192_CBC"/>
      <field name="AES192_GCM"/>
      <field name="AES256_CBC"/>
      <field name="AES256_GCM"/>
      <field name="RSA15"/>
      <field name="RSAOAEP"/>
      <field name="RSAOAEP11"/>
      <field name="TRIPLEDES_CBC"/>
      <method name="setAllowedTargetHosts(java.lang.String[])"/>
      <method name="setArtifactMaxCacheSize(int)"/>
      <method name="setArtifactTimeout(int)"/>
      <method name="setAssertionEncryptionDecryptionKeyAlias(java.lang.String)"/>
      <method name="setAssertionEncryptionDecryptionKeyPassPhrase(java.lang.String)"/>
      <method name="setAssertionEncryptionDecryptionKeyPassPhraseEncrypted(byte[])"/>
      <method name="setAssertionEncryptionEnabled(boolean)"/>
      <method name="setAuthnRequestMaxCacheSize(int)"/>
      <method name="setAuthnRequestTimeout(int)"/>
      <method name="setBasicAuthPassword(java.lang.String)"/>
      <method name="setBasicAuthPasswordEncrypted(byte[])"/>
      <method name="setBasicAuthUsername(java.lang.String)"/>
      <method name="setContactPersonCompany(java.lang.String)"/>
      <method name="setContactPersonEmailAddress(java.lang.String)"/>
      <method name="setContactPersonGivenName(java.lang.String)"/>
      <method name="setContactPersonSurName(java.lang.String)"/>
      <method name="setContactPersonTelephoneNumber(java.lang.String)"/>
      <method name="setContactPersonType(java.lang.String)"/>
      <method name="setDefaultURL(java.lang.String)"/>
      <method name="setEntityID(java.lang.String)"/>
      <method name="setForceAuthn(boolean)"/>
      <method name="setIdentityProviderArtifactBindingEnabled(boolean)"/>
      <method name="setIdentityProviderEnabled(boolean)"/>
      <method name="setIdentityProviderPOSTBindingEnabled(boolean)"/>
      <method name="setIdentityProviderPreferredBinding(java.lang.String)"/>
      <method name="setIdentityProviderRedirectBindingEnabled(boolean)"/>
      <method name="setKeyEncryptionAlgorithm(java.lang.String)"/>
      <method name="setLoginReturnQueryParameter(java.lang.String)"/>
      <method name="setLoginURL(java.lang.String)"/>
      <method name="setMetadataEncryptionAlgorithms(java.lang.String[])"/>
      <method name="setOrganizationName(java.lang.String)"/>
      <method name="setOrganizationURL(java.lang.String)"/>
      <method name="setPOSTOneUseCheckEnabled(boolean)"/>
      <method name="setPassive(boolean)"/>
      <method name="setPublishedSiteURL(java.lang.String)"/>
      <method name="setRecipientCheckEnabled(boolean)"/>
      <method name="setReplicatedCacheEnabled(boolean)"/>
      <method name="setSSOSigningKeyAlias(java.lang.String)"/>
      <method name="setSSOSigningKeyPassPhrase(java.lang.String)"/>
      <method name="setSSOSigningKeyPassPhraseEncrypted(byte[])"/>
      <method name="setServiceProviderArtifactBindingEnabled(boolean)"/>
      <method name="setServiceProviderEnabled(boolean)"/>
      <method name="setServiceProviderPOSTBindingEnabled(boolean)"/>
      <method name="setServiceProviderPreferredBinding(java.lang.String)"/>
      <method name="setSignAuthnRequests(boolean)"/>
      <method name="setTransportLayerSecurityKeyAlias(java.lang.String)"/>
      <method name="setTransportLayerSecurityKeyPassPhrase(java.lang.String)"/>
      <method name="setTransportLayerSecurityKeyPassPhraseEncrypted(byte[])"/>
      <method name="setWantArtifactRequestsSigned(boolean)"/>
      <method name="setWantAssertionsSigned(boolean)"/>
      <method name="setWantAuthnRequestsSigned(boolean)"/>
      <method name="setWantBasicAuthClientAuthentication(boolean)"/>
      <method name="setWantTransportLayerSecurityClientAuthentication(boolean)"/>
    </class>
    <class name="SingleTargetOnly" members="concealed"/>
    <class name="SingletonServiceAppScopedMBean">
      <method name="getClassName()"/>
      <method name="setClassName(java.lang.String)"/>
    </class>
    <class name="SingletonServiceBaseMBean">
      <method name="getAdditionalMigrationAttempts()"/>
      <method name="getMillisToSleepBetweenAttempts()"/>
      <method name="setAdditionalMigrationAttempts(int)"/>
      <method name="setMillisToSleepBetweenAttempts(int)"/>
      <method name="setUserPreferredServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="getHostingServer()"/>
      <method name="getUserPreferredServer()"/>
    </class>
    <class name="SingletonServiceMBean">
      <method name="addConstrainedCandidateServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="removeConstrainedCandidateServer(weblogic.management.configuration.ServerMBean)"/>
      <method name="getClassName()"/>
      <method name="setAllCandidateServers(weblogic.management.configuration.ServerMBean[])"/>
      <method name="setClassName(java.lang.String)"/>
      <method name="setCluster(weblogic.management.configuration.ClusterMBean)"/>
      <method name="setConstrainedCandidateServers(weblogic.management.configuration.ServerMBean[])"/>
      <method name="getCluster()"/>
      <method name="getAllCandidateServers()"/>
      <method name="getConstrainedCandidateServers()"/>
    </class>
    <class name="StartupClassMBean">
      <method name="getFailureIsFatal()"/>
      <method name="getLoadAfterAppsRunning()"/>
      <method name="getLoadBeforeAppActivation()"/>
      <method name="getLoadBeforeAppDeployments()"/>
      <method name="setFailureIsFatal(boolean)"/>
      <method name="setLoadAfterAppsRunning(boolean)"/>
      <method name="setLoadBeforeAppActivation(boolean)"/>
      <method name="setLoadBeforeAppDeployments(boolean)"/>
    </class>
    <class name="SubDeploymentMBean">
      <method name="getName()"/>
      <method name="lookupSubDeployment(java.lang.String)"/>
      <method name="getSubDeployments()"/>
    </class>
    <class name="SystemComponentMBean">
      <method name="getComponentType()"/>
      <method name="setComponentType(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="getSystemComponentStart()"/>
    </class>
    <class name="SystemComponentStartMBean" members="concealed"/>
    <class name="SystemResourceMBean">
      <method name="getSourcePath()"/>
      <method name="setName(java.lang.String)"/>
      <method name="getResource()"/>
    </class>
    <class name="TLSMBean">
      <method name="isAllowUnencryptedNullCipher()"/>
      <method name="isClientCertificateEnforced()"/>
      <method name="isHostnameVerificationIgnored()"/>
      <method name="isSSLv2HelloEnabled()"/>
      <method name="isTwoWaySSLEnabled()"/>
      <method name="getIdentityKeyStorePassPhraseEncrypted()"/>
      <method name="getIdentityPrivateKeyPassPhraseEncrypted()"/>
      <method name="getTrustKeyStorePassPhraseEncrypted()"/>
      <method name="getHostnameVerifier()"/>
      <method name="getIdentityKeyStoreFileName()"/>
      <method name="getIdentityKeyStorePassPhrase()"/>
      <method name="getIdentityKeyStoreType()"/>
      <method name="getIdentityPrivateKeyAlias()"/>
      <method name="getIdentityPrivateKeyPassPhrase()"/>
      <method name="getInboundCertificateValidation()"/>
      <method name="getMinimumTLSProtocolVersion()"/>
      <method name="getName()"/>
      <method name="getOutboundCertificateValidation()"/>
      <method name="getTrustKeyStoreFileName()"/>
      <method name="getTrustKeyStorePassPhrase()"/>
      <method name="getTrustKeyStoreType()"/>
      <method name="getUsage()"/>
      <method name="getCiphersuites()"/>
      <method name="setAllowUnencryptedNullCipher(boolean)"/>
      <method name="setCiphersuites(java.lang.String[])"/>
      <method name="setClientCertificateEnforced(boolean)"/>
      <method name="setHostnameVerificationIgnored(boolean)"/>
      <method name="setHostnameVerifier(java.lang.String)"/>
      <method name="setIdentityKeyStoreFileName(java.lang.String)"/>
      <method name="setIdentityKeyStorePassPhrase(java.lang.String)"/>
      <method name="setIdentityKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setIdentityKeyStoreType(java.lang.String)"/>
      <method name="setIdentityPrivateKeyAlias(java.lang.String)"/>
      <method name="setIdentityPrivateKeyPassPhrase(java.lang.String)"/>
      <method name="setIdentityPrivateKeyPassPhraseEncrypted(byte[])"/>
      <method name="setInboundCertificateValidation(java.lang.String)"/>
      <method name="setMinimumTLSProtocolVersion(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setOutboundCertificateValidation(java.lang.String)"/>
      <method name="setTrustKeyStoreFileName(java.lang.String)"/>
      <method name="setTrustKeyStorePassPhrase(java.lang.String)"/>
      <method name="setTrustKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setTrustKeyStoreType(java.lang.String)"/>
      <method name="setTwoWaySSLEnabled(boolean)"/>
      <method name="setUsage(java.lang.String)"/>
    </class>
    <class name="TargetInfoMBean">
      <method name="getCompatibilityName()"/>
      <method name="getName()"/>
      <method name="addTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="removeTarget(weblogic.management.configuration.TargetMBean)"/>
      <method name="setCompatibilityName(java.lang.String)"/>
      <method name="setModuleType(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setTargets(weblogic.management.configuration.TargetMBean[])"/>
      <method name="getTargets()"/>
    </class>
    <class name="TargetMBean" members="concealed"/>
    <class name="TransactionLogJDBCStoreMBean">
      <method name="isEnabled()"/>
      <method name="getMaxRetrySecondsBeforeTLOGFail()"/>
      <method name="getMaxRetrySecondsBeforeTXException()"/>
      <method name="getRetryIntervalSeconds()"/>
      <method name="getPrefixName()"/>
      <method name="setDataSource(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setMaxRetrySecondsBeforeTLOGFail(int)"/>
      <method name="setMaxRetrySecondsBeforeTXException(int)"/>
      <method name="setPrefixName(java.lang.String)"/>
      <method name="setRetryIntervalSeconds(int)"/>
    </class>
    <class name="TriggerMBean">
      <method name="getAction()"/>
      <method name="getValue()"/>
      <method name="setAction(java.lang.String)"/>
      <method name="setValue(long)"/>
    </class>
    <class name="UnixMachineMBean">
      <method name="isPostBindGIDEnabled()"/>
      <method name="isPostBindUIDEnabled()"/>
      <method name="getPostBindGID()"/>
      <method name="getPostBindUID()"/>
      <method name="setPostBindGID(java.lang.String)"/>
      <method name="setPostBindGIDEnabled(boolean)"/>
      <method name="setPostBindUID(java.lang.String)"/>
      <method name="setPostBindUIDEnabled(boolean)"/>
    </class>
    <class name="VirtualDestinationMBean">
      <method name="getJNDIName()"/>
      <method name="setJNDIName(java.lang.String)"/>
    </class>
    <class name="VirtualHostMBean">
      <method name="getNetworkAccessPoint()"/>
      <method name="getVirtualHostNames()"/>
      <method name="setNetworkAccessPoint(java.lang.String)"/>
      <method name="setVirtualHostNames(java.lang.String[])"/>
    </class>
    <class name="VirtualTargetMBean">
      <method name="getExplicitPort()"/>
      <method name="getPortOffset()"/>
      <method name="getName()"/>
      <method name="getPartitionChannel()"/>
      <method name="getUriPrefix()"/>
      <method name="getHostNames()"/>
      <method name="setExplicitPort(int)"/>
      <method name="setHostNames(java.lang.String[])"/>
      <method name="setPartitionChannel(java.lang.String)"/>
      <method name="setPortOffset(int)"/>
      <method name="setUriPrefix(java.lang.String)"/>
      <method name="getTargets()"/>
      <method name="getWebServer()"/>
    </class>
    <class name="WLDFDataRetirementByAgeMBean">
      <method name="getRetirementAge()"/>
      <field name="DEFAULT_RETIREMENT_AGE"/>
      <method name="setRetirementAge(int)"/>
    </class>
    <class name="WLDFDataRetirementMBean">
      <method name="isEnabled()"/>
      <method name="getRetirementPeriod()"/>
      <method name="getRetirementTime()"/>
      <method name="getArchiveName()"/>
      <method name="setArchiveName(java.lang.String)"/>
      <method name="setEnabled(boolean)"/>
      <method name="setRetirementPeriod(int)"/>
      <method name="setRetirementTime(int)"/>
    </class>
    <class name="WLDFServerDiagnosticMBean">
      <method name="isDataRetirementEnabled()"/>
      <method name="isDiagnosticContextEnabled()"/>
      <method name="isDiagnosticStoreFileLockingEnabled()"/>
      <method name="isSynchronousEventPersistenceEnabled()"/>
      <method name="getDiagnosticStoreBlockSize()"/>
      <method name="getDiagnosticStoreIoBufferSize()"/>
      <method name="getDiagnosticStoreMaxWindowBufferSize()"/>
      <method name="getDiagnosticStoreMinWindowBufferSize()"/>
      <method name="getImageTimeout()"/>
      <method name="getMaxHeapDumpCount()"/>
      <method name="getMaxThreadDumpCount()"/>
      <method name="getPreferredStoreSizeLimit()"/>
      <method name="getStoreSizeCheckPeriod()"/>
      <method name="getDiagnosticDataArchiveType()"/>
      <method name="getDiagnosticDumpsDir()"/>
      <method name="getDiagnosticJDBCSchemaName()"/>
      <method name="getDiagnosticStoreDir()"/>
      <method name="getImageDir()"/>
      <method name="getWLDFBuiltinSystemResourceType()"/>
      <method name="getWLDFDiagnosticVolume()"/>
      <method name="getDiagnosticStoreMaxFileSize()"/>
      <method name="getEventPersistenceInterval()"/>
      <method name="getEventsImageCaptureInterval()"/>
      <field name="FILE_STORE_ARCHIVE_TYPE"/>
      <field name="HIGH_VOLUME"/>
      <field name="JDBC_ARCHIVE_TYPE"/>
      <field name="LOW_VOLUME"/>
      <field name="MEDIUM_VOLUME"/>
      <field name="OFF_VOLUME"/>
      <field name="DEFAULT_EVENTS_IMAGE_CAPTURE_INTERVAL"/>
      <method name="destroyWLDFDataRetirementByAge(weblogic.management.configuration.WLDFDataRetirementByAgeMBean)"/>
      <method name="setDataRetirementEnabled(boolean)"/>
      <method name="setDataRetirementTestModeEnabled(boolean)"/>
      <method name="setDiagnosticContextEnabled(boolean)"/>
      <method name="setDiagnosticDataArchiveType(java.lang.String)"/>
      <method name="setDiagnosticDumpsDir(java.lang.String)"/>
      <method name="setDiagnosticJDBCResource(weblogic.management.configuration.JDBCSystemResourceMBean)"/>
      <method name="setDiagnosticJDBCSchemaName(java.lang.String)"/>
      <method name="setDiagnosticStoreBlockSize(int)"/>
      <method name="setDiagnosticStoreDir(java.lang.String)"/>
      <method name="setDiagnosticStoreFileLockingEnabled(boolean)"/>
      <method name="setDiagnosticStoreIoBufferSize(int)"/>
      <method name="setDiagnosticStoreMaxFileSize(long)"/>
      <method name="setDiagnosticStoreMaxWindowBufferSize(int)"/>
      <method name="setDiagnosticStoreMinWindowBufferSize(int)"/>
      <method name="setEventPersistenceInterval(long)"/>
      <method name="setEventsImageCaptureInterval(long)"/>
      <method name="setImageDir(java.lang.String)"/>
      <method name="setImageTimeout(int)"/>
      <method name="setMaxHeapDumpCount(int)"/>
      <method name="setMaxThreadDumpCount(int)"/>
      <method name="setPreferredStoreSizeLimit(int)"/>
      <method name="setStoreSizeCheckPeriod(int)"/>
      <method name="setSynchronousEventPersistenceEnabled(boolean)"/>
      <method name="setWLDFBuiltinSystemResourceType(java.lang.String)"/>
      <method name="setWLDFDiagnosticVolume(java.lang.String)"/>
      <method name="getWLDFBuiltinSystemResourceDescriptorBean()"/>
      <method name="getDiagnosticJDBCResource()"/>
      <method name="createWLDFDataRetirementByAge(java.lang.String)"/>
      <method name="lookupWLDFDataRetirementByAge(java.lang.String)"/>
      <method name="getWLDFDataRetirementByAges()"/>
      <method name="lookupWLDFDataRetirement(java.lang.String)"/>
      <method name="getWLDFDataRetirements()"/>
    </class>
    <class name="WLDFSystemResourceMBean">
      <method name="getDescription()"/>
      <method name="getDescriptorFileName()"/>
      <method name="getName()"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="getWLDFResource()"/>
    </class>
    <class name="WLSAuthConfigProviderMBean">
      <method name="getAuthModule()"/>
    </class>
    <class name="WSReliableDeliveryPolicyMBean">
      <method name="getDefaultRetryCount()"/>
      <method name="getDefaultRetryInterval()"/>
      <method name="getDefaultTimeToLive()"/>
      <method name="setDefaultRetryCount(int)"/>
      <method name="setDefaultRetryInterval(int)"/>
      <method name="setDefaultTimeToLive(int)"/>
      <method name="setJMSServer(weblogic.management.configuration.JMSServerMBean)"/>
      <method name="setStore(weblogic.management.configuration.JMSStoreMBean)"/>
      <method name="getJMSServer()"/>
      <method name="getStore()"/>
    </class>
    <class name="WTCExportMBean">
      <method name="getEJBName()"/>
      <method name="getLocalAccessPoint()"/>
      <method name="getRemoteName()"/>
      <method name="getResourceName()"/>
      <method name="setEJBName(java.lang.String)"/>
      <method name="setLocalAccessPoint(java.lang.String)"/>
      <method name="setRemoteName(java.lang.String)"/>
      <method name="setResourceName(java.lang.String)"/>
    </class>
    <class name="WTCImportMBean">
      <method name="getLocalAccessPoint()"/>
      <method name="getRemoteAccessPointList()"/>
      <method name="getRemoteName()"/>
      <method name="getResourceName()"/>
      <method name="setLocalAccessPoint(java.lang.String)"/>
      <method name="setRemoteAccessPointList(java.lang.String)"/>
      <method name="setRemoteName(java.lang.String)"/>
      <method name="setResourceName(java.lang.String)"/>
    </class>
    <class name="WTCLocalTuxDomMBean">
      <method name="getIdentityKeyStorePassPhraseEncrypted()"/>
      <method name="getPrivateKeyPassPhraseEncrypted()"/>
      <method name="getTrustKeyStorePassPhraseEncrypted()"/>
      <method name="getCmpLimit()"/>
      <method name="getKeepAlive()"/>
      <method name="getKeepAliveWait()"/>
      <method name="getAccessPoint()"/>
      <method name="getAccessPointId()"/>
      <method name="getConnPrincipalName()"/>
      <method name="getConnectionPolicy()"/>
      <method name="getIdentityKeyStoreFileName()"/>
      <method name="getIdentityKeyStorePassPhrase()"/>
      <method name="getInteroperate()"/>
      <method name="getKeyStoresLocation()"/>
      <method name="getMaxEncryptBits()"/>
      <method name="getMinEncryptBits()"/>
      <method name="getNWAddr()"/>
      <method name="getPrivateKeyAlias()"/>
      <method name="getPrivateKeyPassPhrase()"/>
      <method name="getSSLProtocolVersion()"/>
      <method name="getSecurity()"/>
      <method name="getTrustKeyStoreFileName()"/>
      <method name="getTrustKeyStorePassPhrase()"/>
      <method name="getUseSSL()"/>
      <method name="getBlockTime()"/>
      <method name="getMaxRetries()"/>
      <method name="getRetryInterval()"/>
      <method name="setAccessPoint(java.lang.String)"/>
      <method name="setAccessPointId(java.lang.String)"/>
      <method name="setBlockTime(long)"/>
      <method name="setCmpLimit(int)"/>
      <method name="setConnPrincipalName(java.lang.String)"/>
      <method name="setConnectionPolicy(java.lang.String)"/>
      <method name="setIdentityKeyStoreFileName(java.lang.String)"/>
      <method name="setIdentityKeyStorePassPhrase(java.lang.String)"/>
      <method name="setIdentityKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setInteroperate(java.lang.String)"/>
      <method name="setKeepAlive(int)"/>
      <method name="setKeepAliveWait(int)"/>
      <method name="setKeyStoresLocation(java.lang.String)"/>
      <method name="setMaxEncryptBits(java.lang.String)"/>
      <method name="setMaxRetries(long)"/>
      <method name="setMinEncryptBits(java.lang.String)"/>
      <method name="setNWAddr(java.lang.String)"/>
      <method name="setPrivateKeyAlias(java.lang.String)"/>
      <method name="setPrivateKeyPassPhrase(java.lang.String)"/>
      <method name="setPrivateKeyPassPhraseEncrypted(byte[])"/>
      <method name="setRetryInterval(long)"/>
      <method name="setSSLProtocolVersion(java.lang.String)"/>
      <method name="setSecurity(java.lang.String)"/>
      <method name="setTrustKeyStoreFileName(java.lang.String)"/>
      <method name="setTrustKeyStorePassPhrase(java.lang.String)"/>
      <method name="setTrustKeyStorePassPhraseEncrypted(byte[])"/>
      <method name="setUseSSL(java.lang.String)"/>
    </class>
    <class name="WTCPasswordMBean">
      <method name="getLocalAccessPoint()"/>
      <method name="getLocalPassword()"/>
      <method name="getLocalPasswordIV()"/>
      <method name="getRemoteAccessPoint()"/>
      <method name="getRemotePassword()"/>
      <method name="getRemotePasswordIV()"/>
      <method name="setLocalAccessPoint(java.lang.String)"/>
      <method name="setLocalPassword(java.lang.String)"/>
      <method name="setLocalPasswordIV(java.lang.String)"/>
      <method name="setRemoteAccessPoint(java.lang.String)"/>
      <method name="setRemotePassword(java.lang.String)"/>
      <method name="setRemotePasswordIV(java.lang.String)"/>
    </class>
    <class name="WTCRemoteTuxDomMBean">
      <method name="getAllowAnonymous()"/>
      <method name="getCmpLimit()"/>
      <method name="getDefaultAppKey()"/>
      <method name="getKeepAlive()"/>
      <method name="getKeepAliveWait()"/>
      <method name="getAccessPoint()"/>
      <method name="getAccessPointId()"/>
      <method name="getAclPolicy()"/>
      <method name="getAppKey()"/>
      <method name="getConnPrincipalName()"/>
      <method name="getConnectionPolicy()"/>
      <method name="getCredentialPolicy()"/>
      <method name="getCustomAppKeyClass()"/>
      <method name="getCustomAppKeyClassParam()"/>
      <method name="getFederationName()"/>
      <method name="getFederationURL()"/>
      <method name="getLocalAccessPoint()"/>
      <method name="getMaxEncryptBits()"/>
      <method name="getMinEncryptBits()"/>
      <method name="getNWAddr()"/>
      <method name="getSSLProtocolVersion()"/>
      <method name="getTpUsrFile()"/>
      <method name="getTuxedoGidKw()"/>
      <method name="getTuxedoUidKw()"/>
      <method name="getMaxRetries()"/>
      <method name="getRetryInterval()"/>
      <method name="setAccessPoint(java.lang.String)"/>
      <method name="setAccessPointId(java.lang.String)"/>
      <method name="setAclPolicy(java.lang.String)"/>
      <method name="setAllowAnonymous(boolean)"/>
      <method name="setAppKey(java.lang.String)"/>
      <method name="setCmpLimit(int)"/>
      <method name="setConnPrincipalName(java.lang.String)"/>
      <method name="setConnectionPolicy(java.lang.String)"/>
      <method name="setCredentialPolicy(java.lang.String)"/>
      <method name="setCustomAppKeyClass(java.lang.String)"/>
      <method name="setCustomAppKeyClassParam(java.lang.String)"/>
      <method name="setDefaultAppKey(int)"/>
      <method name="setFederationName(java.lang.String)"/>
      <method name="setFederationURL(java.lang.String)"/>
      <method name="setKeepAlive(int)"/>
      <method name="setKeepAliveWait(int)"/>
      <method name="setLocalAccessPoint(java.lang.String)"/>
      <method name="setMaxEncryptBits(java.lang.String)"/>
      <method name="setMaxRetries(long)"/>
      <method name="setMinEncryptBits(java.lang.String)"/>
      <method name="setNWAddr(java.lang.String)"/>
      <method name="setRetryInterval(long)"/>
      <method name="setSSLProtocolVersion(java.lang.String)"/>
      <method name="setTpUsrFile(java.lang.String)"/>
      <method name="setTuxedoGidKw(java.lang.String)"/>
      <method name="setTuxedoUidKw(java.lang.String)"/>
    </class>
    <class name="WTCResourcesMBean">
      <method name="getAppPassword()"/>
      <method name="getAppPasswordIV()"/>
      <method name="getMBEncodingMapFile()"/>
      <method name="getRemoteMBEncoding()"/>
      <method name="getTpUsrFile()"/>
      <method name="getFldTbl16Classes()"/>
      <method name="getFldTbl32Classes()"/>
      <method name="getViewTbl16Classes()"/>
      <method name="getViewTbl32Classes()"/>
      <method name="setAppPassword(java.lang.String)"/>
      <method name="setAppPasswordIV(java.lang.String)"/>
      <method name="setFldTbl16Classes(java.lang.String[])"/>
      <method name="setFldTbl32Classes(java.lang.String[])"/>
      <method name="setMBEncodingMapFile(java.lang.String)"/>
      <method name="setRemoteMBEncoding(java.lang.String)"/>
      <method name="setTpUsrFile(java.lang.String)"/>
      <method name="setViewTbl16Classes(java.lang.String[])"/>
      <method name="setViewTbl32Classes(java.lang.String[])"/>
    </class>
    <class name="WTCServerMBean">
      <method name="destroyWTCExport(weblogic.management.configuration.WTCExportMBean)"/>
      <method name="destroyWTCImport(weblogic.management.configuration.WTCImportMBean)"/>
      <method name="destroyWTCLocalTuxDom(weblogic.management.configuration.WTCLocalTuxDomMBean)"/>
      <method name="destroyWTCPassword(weblogic.management.configuration.WTCPasswordMBean)"/>
      <method name="destroyWTCRemoteTuxDom(weblogic.management.configuration.WTCRemoteTuxDomMBean)"/>
      <method name="destroyWTCResources(weblogic.management.configuration.WTCResourcesMBean)"/>
      <method name="destroyWTCtBridgeGlobal()"/>
      <method name="destroyWTCtBridgeRedirect(weblogic.management.configuration.WTCtBridgeRedirectMBean)"/>
      <method name="setResource(weblogic.management.configuration.WTCResourcesMBean)"/>
      <method name="settBridgeGlobal(weblogic.management.configuration.WTCtBridgeGlobalMBean)"/>
      <method name="createWTCExport(java.lang.String)"/>
      <method name="lookupWTCExport(java.lang.String)"/>
      <method name="getExports()"/>
      <method name="getWTCExports()"/>
      <method name="createWTCImport(java.lang.String)"/>
      <method name="lookupWTCImport(java.lang.String)"/>
      <method name="getImports()"/>
      <method name="getWTCImports()"/>
      <method name="createWTCLocalTuxDom(java.lang.String)"/>
      <method name="lookupWTCLocalTuxDom(java.lang.String)"/>
      <method name="getLocalTuxDoms()"/>
      <method name="getWTCLocalTuxDoms()"/>
      <method name="createWTCPassword(java.lang.String)"/>
      <method name="lookupWTCPassword(java.lang.String)"/>
      <method name="getPasswords()"/>
      <method name="getWTCPasswords()"/>
      <method name="createWTCRemoteTuxDom(java.lang.String)"/>
      <method name="lookupWTCRemoteTuxDom(java.lang.String)"/>
      <method name="getRemoteTuxDoms()"/>
      <method name="getWTCRemoteTuxDoms()"/>
      <method name="createWTCResources(java.lang.String)"/>
      <method name="getResource()"/>
      <method name="getResources()"/>
      <method name="getWTCResources()"/>
      <method name="createWTCtBridgeGlobal()"/>
      <method name="getWTCtBridgeGlobal()"/>
      <method name="gettBridgeGlobal()"/>
      <method name="createWTCtBridgeRedirect(java.lang.String)"/>
      <method name="lookupWTCtBridgeRedirect(java.lang.String)"/>
      <method name="getWTCtBridgeRedirects()"/>
      <method name="gettBridgeRedirects()"/>
    </class>
    <class name="WTCtBridgeGlobalMBean">
      <method name="getRetries()"/>
      <method name="getRetryDelay()"/>
      <method name="getTimeout()"/>
      <method name="getAllowNonStandardTypes()"/>
      <method name="getDefaultReplyDeliveryMode()"/>
      <method name="getDeliveryModeOverride()"/>
      <method name="getJmsFactory()"/>
      <method name="getJmsToTuxPriorityMap()"/>
      <method name="getJndiFactory()"/>
      <method name="getTransactional()"/>
      <method name="getTuxErrorQueue()"/>
      <method name="getTuxFactory()"/>
      <method name="getTuxToJmsPriorityMap()"/>
      <method name="getUserId()"/>
      <method name="getWlsErrorDestination()"/>
      <method name="setAllowNonStandardTypes(java.lang.String)"/>
      <method name="setDefaultReplyDeliveryMode(java.lang.String)"/>
      <method name="setDeliveryModeOverride(java.lang.String)"/>
      <method name="setJmsFactory(java.lang.String)"/>
      <method name="setJmsToTuxPriorityMap(java.lang.String)"/>
      <method name="setJndiFactory(java.lang.String)"/>
      <method name="setRetries(int)"/>
      <method name="setRetryDelay(int)"/>
      <method name="setTimeout(int)"/>
      <method name="setTransactional(java.lang.String)"/>
      <method name="setTuxErrorQueue(java.lang.String)"/>
      <method name="setTuxFactory(java.lang.String)"/>
      <method name="setTuxToJmsPriorityMap(java.lang.String)"/>
      <method name="setUserId(java.lang.String)"/>
      <method name="setWlsErrorDestination(java.lang.String)"/>
    </class>
    <class name="WTCtBridgeRedirectMBean">
      <method name="getDirection()"/>
      <method name="getMetaDataFile()"/>
      <method name="getReplyQ()"/>
      <method name="getSourceAccessPoint()"/>
      <method name="getSourceName()"/>
      <method name="getSourceQspace()"/>
      <method name="getTargetAccessPoint()"/>
      <method name="getTargetName()"/>
      <method name="getTargetQspace()"/>
      <method name="getTranslateFML()"/>
      <method name="setDirection(java.lang.String)"/>
      <method name="setMetaDataFile(java.lang.String)"/>
      <method name="setReplyQ(java.lang.String)"/>
      <method name="setSourceAccessPoint(java.lang.String)"/>
      <method name="setSourceName(java.lang.String)"/>
      <method name="setSourceQspace(java.lang.String)"/>
      <method name="setTargetAccessPoint(java.lang.String)"/>
      <method name="setTargetName(java.lang.String)"/>
      <method name="setTargetQspace(java.lang.String)"/>
      <method name="setTranslateFML(java.lang.String)"/>
    </class>
    <class name="WebAppComponentMBean">
      <method name="isIndexDirectoryEnabled()"/>
      <method name="isPreferWebInfClasses()"/>
      <method name="isServletExtensionCaseSensitive()"/>
      <method name="isSessionMonitoringEnabled()"/>
      <method name="getServletReloadCheckSecs()"/>
      <method name="getSingleThreadedServletPoolSize()"/>
      <method name="isJaxRsMonitoringDefaultBehavior()"/>
      <method name="getAuthFilter()"/>
      <method name="getAuthRealmName()"/>
      <field name="INDEX_FILES"/>
      <method name="setAuthFilter(java.lang.String)"/>
      <method name="setAuthRealmName(java.lang.String)"/>
      <method name="setIndexDirectoryEnabled(boolean)"/>
      <method name="setJaxRsMonitoringDefaultBehavior(java.lang.Boolean)"/>
      <method name="setPreferWebInfClasses(boolean)"/>
      <method name="setServletExtensionCaseSensitive(boolean)"/>
      <method name="setServletReloadCheckSecs(int)"/>
      <method name="setSessionMonitoringEnabled(boolean)"/>
      <method name="setSingleThreadedServletPoolSize(int)"/>
    </class>
    <class name="WebAppContainerMBean">
      <method name="isAllowAllRoles()"/>
      <method name="isAuthCookieEnabled()"/>
      <method name="isChangeSessionIDOnAuthentication()"/>
      <method name="isClientCertProxyEnabled()"/>
      <method name="isFilterDispatchedRequestsEnabled()"/>
      <method name="isHttpTraceSupportEnabled()"/>
      <method name="isJSPCompilerBackwardsCompatible()"/>
      <method name="isJaxRsMonitoringDefaultBehavior()"/>
      <method name="isMaxRequestParameterCountSet()"/>
      <method name="isOptimisticSerialization()"/>
      <method name="isOverloadProtectionEnabled()"/>
      <method name="isReloginEnabled()"/>
      <method name="isRetainOriginalURL()"/>
      <method name="isRtexprvalueJspParamName()"/>
      <method name="isServletAuthenticationFormURL()"/>
      <method name="isServletReloadCheckSecsSet()"/>
      <method name="isShowArchivedRealPathEnabled()"/>
      <method name="isWAPEnabled()"/>
      <method name="isWeblogicPluginEnabled()"/>
      <method name="isWorkContextPropagationEnabled()"/>
      <method name="getMaxPostSize()"/>
      <method name="getMaxPostTimeSecs()"/>
      <method name="getMaxRequestParameterCount()"/>
      <method name="getPostTimeoutSecs()"/>
      <method name="getServletReloadCheckSecs()"/>
      <method name="getMimeMappingFile()"/>
      <method name="getP3PHeaderValue()"/>
      <method name="getXPoweredByHeaderLevel()"/>
      <method name="setAllowAllRoles(boolean)"/>
      <method name="setAuthCookieEnabled(boolean)"/>
      <method name="setChangeSessionIDOnAuthentication(boolean)"/>
      <method name="setClientCertProxyEnabled(boolean)"/>
      <method name="setFilterDispatchedRequestsEnabled(boolean)"/>
      <method name="setHttpTraceSupportEnabled(boolean)"/>
      <method name="setJSPCompilerBackwardsCompatible(boolean)"/>
      <method name="setJaxRsMonitoringDefaultBehavior(boolean)"/>
      <method name="setMaxPostSize(int)"/>
      <method name="setMaxPostTimeSecs(int)"/>
      <method name="setMaxRequestParameterCount(int)"/>
      <method name="setMimeMappingFile(java.lang.String)"/>
      <method name="setOptimisticSerialization(boolean)"/>
      <method name="setOverloadProtectionEnabled(boolean)"/>
      <method name="setP3PHeaderValue(java.lang.String)"/>
      <method name="setPostTimeoutSecs(int)"/>
      <method name="setReloginEnabled(boolean)"/>
      <method name="setRetainOriginalURL(boolean)"/>
      <method name="setRtexprvalueJspParamName(boolean)"/>
      <method name="setServletAuthenticationFormURL(boolean)"/>
      <method name="setServletReloadCheckSecs(int)"/>
      <method name="setShowArchivedRealPathEnabled(boolean)"/>
      <method name="setWAPEnabled(boolean)"/>
      <method name="setWeblogicPluginEnabled(boolean)"/>
      <method name="setWorkContextPropagationEnabled(boolean)"/>
      <method name="setXPoweredByHeaderLevel(java.lang.String)"/>
      <method name="getGzipCompression()"/>
    </class>
    <class name="WebDeploymentMBean">
      <method name="addVirtualHost(weblogic.management.configuration.VirtualHostMBean)"/>
      <method name="addWebServer(weblogic.management.configuration.WebServerMBean)"/>
      <method name="removeVirtualHost(weblogic.management.configuration.VirtualHostMBean)"/>
      <method name="removeWebServer(weblogic.management.configuration.WebServerMBean)"/>
      <method name="setDeployedVirtualHosts(weblogic.management.configuration.VirtualHostMBean[])"/>
      <method name="setVirtualHosts(weblogic.management.configuration.VirtualHostMBean[])"/>
      <method name="setWebServers(weblogic.management.configuration.WebServerMBean[])"/>
      <method name="getVirtualHosts()"/>
      <method name="getWebServers()"/>
    </class>
    <class name="WebServerLogMBean">
      <method name="isLogTimeInGMT()"/>
      <method name="isLoggingEnabled()"/>
      <method name="getELFFields()"/>
      <method name="getFileName()"/>
      <method name="getLogFileFormat()"/>
      <method name="setELFFields(java.lang.String)"/>
      <method name="setFileName(java.lang.String)"/>
      <method name="setLogFileFormat(java.lang.String)"/>
      <method name="setLogTimeInGMT(boolean)"/>
      <method name="setLoggingEnabled(boolean)"/>
    </class>
    <class name="WebServerMBean">
      <method name="getLogTimeInGMT()"/>
      <method name="isAcceptContextPathInGetRealPath()"/>
      <method name="isAuthCookieEnabled()"/>
      <method name="isChunkedTransferDisabled()"/>
      <method name="isDebugEnabled()"/>
      <method name="isKeepAliveEnabled()"/>
      <method name="isLogFileLimitEnabled()"/>
      <method name="isLoggingEnabled()"/>
      <method name="isMaxPostSizeSet()"/>
      <method name="isMaxPostTimeSecsSet()"/>
      <method name="isMaxRequestParameterCountSet()"/>
      <method name="isPostTimeoutSecsSet()"/>
      <method name="isSendServerHeaderEnabled()"/>
      <method name="isSingleSignonDisabled()"/>
      <method name="isUseHeaderEncoding()"/>
      <method name="isUseHighestCompatibleHTTPVersion()"/>
      <method name="isWAPEnabled()"/>
      <method name="getFrontendHTTPPort()"/>
      <method name="getFrontendHTTPSPort()"/>
      <method name="getHttpsKeepAliveSecs()"/>
      <method name="getKeepAliveSecs()"/>
      <method name="getLogFileBufferKBytes()"/>
      <method name="getLogFileCount()"/>
      <method name="getLogFileFlushSecs()"/>
      <method name="getLogRotationPeriodMins()"/>
      <method name="getMaxLogFileSizeKBytes()"/>
      <method name="getMaxPostSize()"/>
      <method name="getMaxPostTimeSecs()"/>
      <method name="getMaxRequestParameterCount()"/>
      <method name="getOverloadResponseCode()"/>
      <method name="getPostTimeoutSecs()"/>
      <method name="getWriteChunkBytes()"/>
      <method name="getClientIpHeader()"/>
      <method name="getDefaultWebAppContextRoot()"/>
      <method name="getFrontendHost()"/>
      <method name="getLogFileFormat()"/>
      <method name="getLogFileName()"/>
      <method name="getLogRotationTimeBegin()"/>
      <method name="getLogRotationType()"/>
      <method name="getCharsets()"/>
      <method name="getURLResource()"/>
      <method name="setAcceptContextPathInGetRealPath(boolean)"/>
      <method name="setAuthCookieEnabled(boolean)"/>
      <method name="setCharsets(java.util.Map)"/>
      <method name="setChunkedTransferDisabled(boolean)"/>
      <method name="setClientIpHeader(java.lang.String)"/>
      <method name="setDefaultWebApp(weblogic.management.configuration.WebAppComponentMBean)"/>
      <method name="setDefaultWebAppContextRoot(java.lang.String)"/>
      <method name="setFrontendHTTPPort(int)"/>
      <method name="setFrontendHTTPSPort(int)"/>
      <method name="setFrontendHost(java.lang.String)"/>
      <method name="setHttpsKeepAliveSecs(int)"/>
      <method name="setKeepAliveEnabled(boolean)"/>
      <method name="setKeepAliveSecs(int)"/>
      <method name="setLogFileBufferKBytes(int)"/>
      <method name="setLogFileCount(int)"/>
      <method name="setLogFileFlushSecs(int)"/>
      <method name="setLogFileFormat(java.lang.String)"/>
      <method name="setLogFileLimitEnabled(boolean)"/>
      <method name="setLogFileName(java.lang.String)"/>
      <method name="setLogRotationPeriodMins(int)"/>
      <method name="setLogRotationTimeBegin(java.lang.String)"/>
      <method name="setLogRotationType(java.lang.String)"/>
      <method name="setLogTimeInGMT(boolean)"/>
      <method name="setLoggingEnabled(boolean)"/>
      <method name="setMaxLogFileSizeKBytes(int)"/>
      <method name="setMaxPostSize(int)"/>
      <method name="setMaxPostTimeSecs(int)"/>
      <method name="setMaxRequestParameterCount(int)"/>
      <method name="setOverloadResponseCode(int)"/>
      <method name="setPostTimeoutSecs(int)"/>
      <method name="setSendServerHeaderEnabled(boolean)"/>
      <method name="setSingleSignonDisabled(boolean)"/>
      <method name="setURLResource(java.util.Map)"/>
      <method name="setUseHeaderEncoding(boolean)"/>
      <method name="setUseHighestCompatibleHTTPVersion(boolean)"/>
      <method name="setWAPEnabled(boolean)"/>
      <method name="getDefaultWebApp()"/>
      <method name="getWebServerLog()"/>
    </class>
    <class name="WebServiceBufferingMBean">
      <method name="getRetryCount()"/>
      <method name="getRetryDelay()"/>
      <method name="setRetryCount(int)"/>
      <method name="setRetryDelay(java.lang.String)"/>
      <method name="getWebServiceRequestBufferingQueue()"/>
      <method name="getWebServiceResponseBufferingQueue()"/>
    </class>
    <class name="WebServiceBufferingQueueMBean">
      <method name="isEnabled()"/>
      <method name="isTransactionEnabled()"/>
      <method name="getConnectionFactoryJndiName()"/>
      <method name="getName()"/>
      <method name="setConnectionFactoryJndiName(java.lang.String)"/>
      <method name="setEnabled(java.lang.Boolean)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setTransactionEnabled(java.lang.Boolean)"/>
    </class>
    <class name="WebServiceComponentMBean" members="concealed"/>
    <class name="WebServiceLogicalStoreMBean">
      <method name="getCleanerInterval()"/>
      <method name="getDefaultMaximumObjectLifetime()"/>
      <method name="getName()"/>
      <method name="getPersistenceStrategy()"/>
      <method name="getPhysicalStoreName()"/>
      <method name="getRequestBufferingQueueJndiName()"/>
      <method name="getResponseBufferingQueueJndiName()"/>
      <field name="IN_MEMORY"/>
      <field name="LOCAL_ACCESS_ONLY"/>
      <method name="setCleanerInterval(java.lang.String)"/>
      <method name="setDefaultMaximumObjectLifetime(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setPersistenceStrategy(java.lang.String)"/>
      <method name="setPhysicalStoreName(java.lang.String)"/>
      <method name="setRequestBufferingQueueJndiName(java.lang.String)"/>
      <method name="setResponseBufferingQueueJndiName(java.lang.String)"/>
    </class>
    <class name="WebServiceMBean">
      <method name="getCallbackQueue()"/>
      <method name="getCallbackQueueMDBRunAsPrincipalName()"/>
      <method name="getJmsConnectionFactory()"/>
      <method name="getMessagingQueue()"/>
      <method name="getMessagingQueueMDBRunAsPrincipalName()"/>
      <method name="setCallbackQueue(java.lang.String)"/>
      <method name="setCallbackQueueMDBRunAsPrincipalName(java.lang.String)"/>
      <method name="setJmsConnectionFactory(java.lang.String)"/>
      <method name="setMessagingQueue(java.lang.String)"/>
      <method name="setMessagingQueueMDBRunAsPrincipalName(java.lang.String)"/>
      <method name="getWebServiceBuffering()"/>
      <method name="getWebServicePersistence()"/>
      <method name="getWebServiceReliability()"/>
      <method name="getWebServiceResiliency()"/>
    </class>
    <class name="WebServicePersistenceMBean">
      <method name="getDefaultLogicalStoreName()"/>
      <method name="destroyWebServiceLogicalStore(weblogic.management.configuration.WebServiceLogicalStoreMBean)"/>
      <method name="destroyWebServicePhysicalStore(weblogic.management.configuration.WebServicePhysicalStoreMBean)"/>
      <method name="setDefaultLogicalStoreName(java.lang.String)"/>
      <method name="createWebServiceLogicalStore(java.lang.String)"/>
      <method name="lookupWebServiceLogicalStore(java.lang.String)"/>
      <method name="getWebServiceLogicalStores()"/>
      <method name="createWebServicePhysicalStore(java.lang.String)"/>
      <method name="lookupWebServicePhysicalStore(java.lang.String)"/>
      <method name="getWebServicePhysicalStores()"/>
    </class>
    <class name="WebServicePhysicalStoreMBean">
      <method name="getLocation()"/>
      <method name="getName()"/>
      <method name="getStoreType()"/>
      <method name="getSynchronousWritePolicy()"/>
      <field name="CACHE_FLUSH"/>
      <field name="DIRECT_WRITE"/>
      <field name="DISABLED"/>
      <field name="FILE"/>
      <field name="JDBC"/>
      <field name="STANDALONE_CLIENT_STORE_DIR_PROP"/>
      <method name="setLocation(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setStoreType(java.lang.String)"/>
      <method name="setSynchronousWritePolicy(java.lang.String)"/>
    </class>
    <class name="WebServiceReliabilityMBean">
      <method name="isNonBufferedDestination()"/>
      <method name="isNonBufferedSource()"/>
      <method name="isRetransmissionExponentialBackoff()"/>
      <method name="getAcknowledgementInterval()"/>
      <method name="getBaseRetransmissionInterval()"/>
      <method name="getInactivityTimeout()"/>
      <method name="getSequenceExpiration()"/>
      <method name="setAcknowledgementInterval(java.lang.String)"/>
      <method name="setBaseRetransmissionInterval(java.lang.String)"/>
      <method name="setInactivityTimeout(java.lang.String)"/>
      <method name="setNonBufferedDestination(java.lang.Boolean)"/>
      <method name="setNonBufferedSource(java.lang.Boolean)"/>
      <method name="setRetransmissionExponentialBackoff(java.lang.Boolean)"/>
      <method name="setSequenceExpiration(java.lang.String)"/>
    </class>
    <class name="WebServiceRequestBufferingQueueMBean">
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="WebServiceResiliencyMBean">
      <method name="getRetryCount()"/>
      <method name="getRetryDelay()"/>
      <method name="setRetryCount(int)"/>
      <method name="setRetryDelay(java.lang.String)"/>
    </class>
    <class name="WebServiceResponseBufferingQueueMBean">
      <method name="setName(java.lang.String)"/>
    </class>
    <class name="WebserviceCredentialProviderMBean" members="concealed"/>
    <class name="WebserviceSecurityConfigurationMBean">
      <method name="getClassName()"/>
      <method name="getTokenType()"/>
      <method name="destroyConfigurationProperty(weblogic.management.configuration.ConfigurationPropertyMBean)"/>
      <method name="setClassName(java.lang.String)"/>
      <method name="setTokenType(java.lang.String)"/>
      <method name="createConfigurationProperty(java.lang.String)"/>
      <method name="lookupConfigurationProperty(java.lang.String)"/>
      <method name="getConfigurationProperties()"/>
    </class>
    <class name="WebserviceSecurityMBean">
      <method name="getCompatibilityOrderingPreference()"/>
      <method name="getCompatibilityPreference()"/>
      <method name="getDefaultCredentialProviderSTSURI()"/>
      <method name="getPolicySelectionPreference()"/>
      <method name="destroyWebserviceCredentialProvider(weblogic.management.configuration.WebserviceCredentialProviderMBean)"/>
      <method name="destroyWebserviceSecurityToken(weblogic.management.configuration.WebserviceSecurityTokenMBean)"/>
      <method name="destroyWebserviceTokenHandler(weblogic.management.configuration.WebserviceTokenHandlerMBean)"/>
      <method name="setCompatibilityOrderingPreference(java.lang.String)"/>
      <method name="setCompatibilityPreference(java.lang.String)"/>
      <method name="setDefaultCredentialProviderSTSURI(java.lang.String)"/>
      <method name="setPolicySelectionPreference(java.lang.String)"/>
      <method name="createWebserviceCredentialProvider(java.lang.String)"/>
      <method name="lookupWebserviceCredentialProvider(java.lang.String)"/>
      <method name="getWebserviceCredentialProviders()"/>
      <method name="createWebserviceSecurityToken(java.lang.String)"/>
      <method name="lookupWebserviceSecurityToken(java.lang.String)"/>
      <method name="getWebserviceSecurityTokens()"/>
      <method name="getWebserviceTimestamp()"/>
      <method name="createWebserviceTokenHandler(java.lang.String)"/>
      <method name="lookupWebserviceTokenHandler(java.lang.String)"/>
      <method name="getWebserviceTokenHandlers()"/>
    </class>
    <class name="WebserviceSecurityTokenMBean" members="concealed"/>
    <class name="WebserviceTestpageMBean">
      <method name="isBasicAuthEnabled()"/>
      <method name="isEnabled()"/>
      <method name="setBasicAuthEnabled(boolean)"/>
      <method name="setEnabled(boolean)"/>
    </class>
    <class name="WebserviceTimestampMBean">
      <method name="isClockSynchronized()"/>
      <method name="getValidityPeriod()"/>
      <method name="getClockSkew()"/>
      <method name="getMaxProcessingDelay()"/>
      <method name="setClockSkew(long)"/>
      <method name="setClockSynchronized(boolean)"/>
      <method name="setMaxProcessingDelay(long)"/>
      <method name="setValidityPeriod(int)"/>
    </class>
    <class name="WebserviceTokenHandlerMBean">
      <method name="getHandlingOrder()"/>
      <method name="setHandlingOrder(int)"/>
    </class>
    <class name="WorkManagerMBean">
      <method name="getIgnoreStuckThreads()"/>
      <method name="isApplicationScope()"/>
      <method name="destroyWorkManagerShutdownTrigger()"/>
      <method name="setApplicationScope(boolean)"/>
      <method name="setCapacity(weblogic.management.configuration.CapacityMBean)"/>
      <method name="setContextRequestClass(weblogic.management.configuration.ContextRequestClassMBean)"/>
      <method name="setFairShareRequestClass(weblogic.management.configuration.FairShareRequestClassMBean)"/>
      <method name="setIgnoreStuckThreads(boolean)"/>
      <method name="setMaxThreadsConstraint(weblogic.management.configuration.MaxThreadsConstraintMBean)"/>
      <method name="setMinThreadsConstraint(weblogic.management.configuration.MinThreadsConstraintMBean)"/>
      <method name="setResponseTimeRequestClass(weblogic.management.configuration.ResponseTimeRequestClassMBean)"/>
      <method name="getCapacity()"/>
      <method name="getContextRequestClass()"/>
      <method name="getFairShareRequestClass()"/>
      <method name="getMaxThreadsConstraint()"/>
      <method name="getMinThreadsConstraint()"/>
      <method name="getResponseTimeRequestClass()"/>
      <method name="createWorkManagerShutdownTrigger()"/>
      <method name="getWorkManagerShutdownTrigger()"/>
    </class>
    <class name="WorkManagerShutdownTriggerMBean">
      <method name="isResumeWhenUnstuck()"/>
      <method name="getMaxStuckThreadTime()"/>
      <method name="getStuckThreadCount()"/>
      <method name="setMaxStuckThreadTime(int)"/>
      <method name="setResumeWhenUnstuck(boolean)"/>
      <method name="setStuckThreadCount(int)"/>
    </class>
    <class name="XMLEntityCacheMBean">
      <method name="getCacheDiskSize()"/>
      <method name="getCacheMemorySize()"/>
      <method name="getCacheTimeoutInterval()"/>
      <method name="getMaxSize()"/>
      <method name="getCacheLocation()"/>
      <method name="setCacheDiskSize(int)"/>
      <method name="setCacheLocation(java.lang.String)"/>
      <method name="setCacheMemorySize(int)"/>
      <method name="setCacheTimeoutInterval(int)"/>
      <method name="setMaxSize(int)"/>
    </class>
    <class name="XMLEntitySpecRegistryEntryMBean">
      <method name="getCacheTimeoutInterval()"/>
      <method name="getEntityURI()"/>
      <method name="getHandleEntityInvalidation()"/>
      <method name="getPublicId()"/>
      <method name="getSystemId()"/>
      <method name="getWhenToCache()"/>
      <method name="setCacheTimeoutInterval(int)"/>
      <method name="setEntityURI(java.lang.String)"/>
      <method name="setHandleEntityInvalidation(java.lang.String)"/>
      <method name="setPublicId(java.lang.String)"/>
      <method name="setSystemId(java.lang.String)"/>
      <method name="setWhenToCache(java.lang.String)"/>
    </class>
    <class name="XMLParserSelectRegistryEntryMBean">
      <method name="getDocumentBuilderFactory()"/>
      <method name="getParserClassName()"/>
      <method name="getPublicId()"/>
      <method name="getRootElementTag()"/>
      <method name="getSAXParserFactory()"/>
      <method name="getSystemId()"/>
      <method name="getTransformerFactory()"/>
      <method name="setDocumentBuilderFactory(java.lang.String)"/>
      <method name="setParserClassName(java.lang.String)"/>
      <method name="setPublicId(java.lang.String)"/>
      <method name="setRootElementTag(java.lang.String)"/>
      <method name="setSAXParserFactory(java.lang.String)"/>
      <method name="setSystemId(java.lang.String)"/>
      <method name="setTransformerFactory(java.lang.String)"/>
    </class>
    <class name="XMLRegistryEntryMBean">
      <method name="getDocumentBuilderFactory()"/>
      <method name="getEntityPath()"/>
      <method name="getParserClassName()"/>
      <method name="getPublicId()"/>
      <method name="getRootElementTag()"/>
      <method name="getSAXParserFactory()"/>
      <method name="getSystemId()"/>
      <method name="setDocumentBuilderFactory(java.lang.String)"/>
      <method name="setEntityPath(java.lang.String)"/>
      <method name="setParserClassName(java.lang.String)"/>
      <method name="setPublicId(java.lang.String)"/>
      <method name="setRootElementTag(java.lang.String)"/>
      <method name="setSAXParserFactory(java.lang.String)"/>
      <method name="setSystemId(java.lang.String)"/>
    </class>
    <class name="XMLRegistryMBean">
      <method name="isHandleEntityInvalidation()"/>
      <method name="getDocumentBuilderFactory()"/>
      <method name="getSAXParserFactory()"/>
      <method name="getSchemaFactory()"/>
      <method name="getTransformerFactory()"/>
      <method name="getWhenToCache()"/>
      <method name="getXMLEventFactory()"/>
      <method name="getXMLInputFactory()"/>
      <method name="getXMLOutputFactory()"/>
      <method name="getXpathFactory()"/>
      <method name="destroyXMLEntitySpecRegistryEntry(weblogic.management.configuration.XMLEntitySpecRegistryEntryMBean)"/>
      <method name="destroyXMLParserSelectRegistryEntry(weblogic.management.configuration.XMLParserSelectRegistryEntryMBean)"/>
      <method name="setDocumentBuilderFactory(java.lang.String)"/>
      <method name="setEntitySpecRegistryEntries(weblogic.management.configuration.XMLEntitySpecRegistryEntryMBean[])"/>
      <method name="setHandleEntityInvalidation(boolean)"/>
      <method name="setParserSelectRegistryEntries(weblogic.management.configuration.XMLParserSelectRegistryEntryMBean[])"/>
      <method name="setRegistryEntries(weblogic.management.configuration.XMLRegistryEntryMBean[])"/>
      <method name="setSAXParserFactory(java.lang.String)"/>
      <method name="setSchemaFactory(java.lang.String)"/>
      <method name="setTransformerFactory(java.lang.String)"/>
      <method name="setWhenToCache(java.lang.String)"/>
      <method name="setXMLEventFactory(java.lang.String)"/>
      <method name="setXMLInputFactory(java.lang.String)"/>
      <method name="setXMLOutputFactory(java.lang.String)"/>
      <method name="setXpathFactory(java.lang.String)"/>
      <method name="createXMLEntitySpecRegistryEntry(java.lang.String)"/>
      <method name="getEntitySpecRegistryEntries()"/>
      <method name="getXMLEntitySpecRegistryEntries()"/>
      <method name="createXMLParserSelectRegistryEntry(java.lang.String)"/>
      <method name="getParserSelectRegistryEntries()"/>
      <method name="getXMLParserSelectRegistryEntries()"/>
      <method name="getRegistryEntries()"/>
    </class>
  </package>
  <package name="weblogic.management.configuration.util">
    <class name="PartitionManagerInterceptorAdapter" members="concealed"/>
    <class name="PartitionManagerPartitionAPI" members="concealed"/>
    <class name="PartitionManagerResourceGroupAPI" members="concealed"/>
    <class name="ResourceGroupManagerInterceptorAdapter" members="concealed"/>
    <class name="ServerServiceInterceptor" members="concealed"/>
    <class name="Setup" members="concealed"/>
    <class name="Teardown" members="concealed"/>
  </package>
  <package name="weblogic.management.deploy">
    <class name="DeployerRuntime">
      <method name="getDeployerRuntime()"/>
      <method name="getDeployerRuntime(java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="DeploymentData">
      <method name="getClusterConstraints()"/>
      <method name="getDelete()"/>
      <method name="hasFiles()"/>
      <method name="hasGlobalTarget(java.lang.String)"/>
      <method name="hasModuleTargets()"/>
      <method name="hasSubModuleTargets()"/>
      <method name="hasTargets()"/>
      <method name="isLibrary()"/>
      <method name="isSecurityValidationEnabled()"/>
      <method name="isStandaloneModule()"/>
      <method name="removeSubModuleTarget(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getTargetType(java.lang.String)"/>
      <method name="getTimeOut()"/>
      <method name="getAltDescriptorPath()"/>
      <method name="getAltWLSDescriptorPath()"/>
      <method name="getConfigDirectory()"/>
      <method name="getDeploymentPlan()"/>
      <method name="getDeploymentPrincipalName()"/>
      <method name="getRootDirectory()"/>
      <method name="getSecurityModel()"/>
      <method name="toString()"/>
      <method name="getFiles()"/>
      <method name="getGlobalTargets()"/>
      <method name="getModuleTargets(java.lang.String)"/>
      <method name="getModules()"/>
      <method name="getModulesForTarget(java.lang.String)"/>
      <method name="getTargets()"/>
      <method name="getAllModuleTargets()"/>
      <method name="getAllSubModuleTargets()"/>
      <method name="getSubModuleTargets(java.lang.String)"/>
      <method name="getTargetsForModule(java.lang.String)"/>
      <field name="CLUSTER"/>
      <field name="JMSSERVER"/>
      <field name="SAFAGENT"/>
      <field name="SERVER"/>
      <field name="UNKNOWN"/>
      <field name="VIRTUALHOST"/>
      <field name="VIRTUALTARGET"/>
      <field name="STANDALONE_MODULE"/>
      <method name="addGlobalTarget(java.lang.String)"/>
      <method name="addModuleTarget(java.lang.String,java.lang.String)"/>
      <method name="addModuleTargets(java.lang.String,java.lang.String[])"/>
      <method name="addModuleToTarget(java.lang.String,java.lang.String)"/>
      <method name="addOrUpdateSubModuleTargets(java.util.Map)"/>
      <method name="addOrUpdateSubModuleTargetsFor(java.lang.String,java.util.Map)"/>
      <method name="addSubModuleTarget(java.lang.String,java.lang.String,java.lang.String[])"/>
      <method name="addTarget(java.lang.String,java.lang.String[])"/>
      <method name="addTargetsForComponent(weblogic.management.configuration.ApplicationMBean,java.lang.String)"/>
      <method name="addTargetsFromConfig(weblogic.management.configuration.BasicDeploymentMBean)"/>
      <method name="setAltDescriptorPath(java.lang.String)"/>
      <method name="setAltWLSDescriptorPath(java.lang.String)"/>
      <method name="setClusterConstraints(boolean)"/>
      <method name="setConfigDirectory(java.lang.String)"/>
      <method name="setDelete(boolean)"/>
      <method name="setDeploymentOptions(weblogic.deploy.api.spi.DeploymentOptions)"/>
      <method name="setDeploymentPlan(java.lang.String)"/>
      <method name="setDeploymentPrincipalName(java.lang.String)"/>
      <method name="setFile(java.lang.String[])"/>
      <method name="setGlobalTargets(java.lang.String[])"/>
      <method name="setLibrary(boolean)"/>
      <method name="setPlanUpdate(boolean)"/>
      <method name="setRootDirectory(java.lang.String)"/>
      <method name="setSecurityModel(java.lang.String)"/>
      <method name="setSecurityValidationEnabled(boolean)"/>
      <method name="setTargetType(java.lang.String,int)"/>
      <method name="setTimeOut(int)"/>
      <method name="getDeploymentOptions()"/>
    </class>
    <class name="TargetStatus">
      <method name="isTargetListEmpty()"/>
      <method name="setTargetListEmpty(boolean)"/>
      <method name="getState()"/>
      <method name="getTargetType()"/>
      <method name="getMessages()"/>
      <method name="getTarget()"/>
      <method name="toString()"/>
      <field name="STATE_FAILED"/>
      <field name="STATE_INIT"/>
      <field name="STATE_IN_PROGRESS"/>
      <field name="STATE_SUCCESS"/>
      <field name="STATE_UNAVAILABLE"/>
      <field name="TYPE_CLUSTER"/>
      <field name="TYPE_JMS_SERVER"/>
      <field name="TYPE_SAF_AGENT"/>
      <field name="TYPE_SERVER"/>
      <field name="TYPE_UNKNOWN"/>
      <field name="TYPE_VIRTUAL_HOST"/>
      <field name="TYPE_VIRTUAL_TARGET"/>
    </class>
  </package>
  <package name="weblogic.management.deploy.internal">
    <class name="ConfiguredDeploymentsAccessImpl" members="concealed"/>
    <class name="OverridePartitionDepPlanService" members="concealed"/>
  </package>
  <package name="weblogic.management.jmx">
    <class name="MBeanServerInvocationHandler">
      <method name="newProxyInstance(javax.management.MBeanServerConnection,javax.management.ObjectName)"/>
      <method name="newProxyInstance(javax.management.remote.JMXConnector,javax.management.ObjectName)"/>
    </class>
  </package>
  <package name="weblogic.management.logging">
    <class name="WebLogicLogNotification">
      <method name="getMessageId()"/>
      <method name="getSeverity()"/>
      <method name="getVersion()"/>
      <method name="getDiagnosticContextId()"/>
      <method name="getId()"/>
      <method name="getMachineName()"/>
      <method name="getMessageIdString()"/>
      <method name="getServername()"/>
      <method name="getStackTrace()"/>
      <method name="getSubsystem()"/>
      <method name="getThreadId()"/>
      <method name="getTransactionId()"/>
      <method name="getType()"/>
      <method name="getUserId()"/>
      <method name="getThrowable()"/>
    </class>
  </package>
  <package name="weblogic.management.mbeans.custom">
    <class name="SimplePropertyValueVBeanImpl" members="concealed"/>
  </package>
  <package name="weblogic.management.mbeanservers">
    <class name="JMXContextUtil">
      <method name="getLocale()"/>
    </class>
    <class name="MBeanTypeService">
      <method name="getSubtypes(java.lang.String)"/>
      <method name="validateAttributes(java.lang.String,javax.management.AttributeList)"/>
      <method name="validateAttributes(javax.management.ObjectName,javax.management.AttributeList)"/>
      <method name="getMBeanInfo(java.lang.String)"/>
      <field name="OBJECT_NAME"/>
      <method name="validateAttribute(java.lang.String,javax.management.Attribute)"/>
      <method name="validateAttribute(javax.management.ObjectName,javax.management.Attribute)"/>
    </class>
    <class name="Service">
      <method name="getName()"/>
      <method name="getParentAttribute()"/>
      <method name="getPath()"/>
      <method name="getType()"/>
      <method name="getParentService()"/>
    </class>
  </package>
  <package name="weblogic.management.mbeanservers.domainruntime">
    <class name="DomainRuntimeServiceMBean">
      <method name="getServerName()"/>
      <field name="MBEANSERVER_JNDI_NAME"/>
      <field name="OBJECT_NAME"/>
      <method name="findConfiguration(weblogic.management.runtime.RuntimeMBean)"/>
      <method name="findDomainConfiguration(java.lang.String)"/>
      <method name="getDomainConfiguration()"/>
      <method name="getDomainPending()"/>
      <method name="findServerConfiguration(java.lang.String)"/>
      <method name="findService(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getServices(java.lang.String)"/>
      <method name="getDomainRuntime()"/>
      <method name="findPartitionRuntime(java.lang.String,java.lang.String)"/>
      <method name="findPartitionRuntimes(java.lang.String)"/>
      <method name="findRuntime(weblogic.descriptor.DescriptorBean,java.lang.String)"/>
      <method name="findRuntimes(weblogic.descriptor.DescriptorBean)"/>
      <method name="lookupServerRuntime(java.lang.String)"/>
      <method name="getServerRuntimes()"/>
    </class>
    <class name="MBeanServerConnectionManagerMBean">
      <field name="OBJECT_NAME"/>
      <method name="notifyNewMBeanServer(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.management.mbeanservers.edit">
    <class name="ActivateConflictException">
      <method name="getConflicts()"/>
    </class>
    <class name="ActivationTaskMBean">
      <method name="getState()"/>
      <method name="getError()"/>
      <method name="getDetails()"/>
      <method name="getEditSessionName()"/>
      <method name="getPartitionName()"/>
      <method name="getUser()"/>
      <method name="getSystemComponentsToRestart()"/>
      <method name="getCompletionTime()"/>
      <method name="getStartTime()"/>
      <field name="STATE_CANCELING"/>
      <field name="STATE_COMMITTED"/>
      <field name="STATE_COMMIT_FAILING"/>
      <field name="STATE_DEFERRED"/>
      <field name="STATE_DISTRIBUTED"/>
      <field name="STATE_DISTRIBUTING"/>
      <field name="STATE_FAILED"/>
      <field name="STATE_NEW"/>
      <field name="STATE_PENDING"/>
      <method name="waitForTaskCompletion()"/>
      <method name="waitForTaskCompletion(long)"/>
      <method name="getChanges()"/>
      <method name="getStatusByServer()"/>
    </class>
    <class name="AutoResolveResult" members="concealed"/>
    <class name="Change">
      <method name="isRestartRequired()"/>
      <method name="getAffectedBean()"/>
      <method name="getBean()"/>
      <method name="getNewValue()"/>
      <method name="getOldValue()"/>
      <method name="getAttributeName()"/>
      <method name="getEntityToRestart()"/>
      <method name="getOperation()"/>
      <field name="ADD"/>
      <field name="CREATE"/>
      <field name="DESTROY"/>
      <field name="MODIFY"/>
      <field name="NONE"/>
      <field name="PARTITION"/>
      <field name="REMOVE"/>
      <field name="SERVER"/>
      <field name="UNSET"/>
    </class>
    <class name="ConfigurationManagerMBean">
      <method name="haveUnactivatedChanges()"/>
      <method name="isCurrentEditorExclusive()"/>
      <method name="isCurrentEditorExpired()"/>
      <method name="isEditor()"/>
      <method name="isMergeNeeded()"/>
      <method name="getCurrentEditor()"/>
      <method name="getEditSessionName()"/>
      <method name="getCompletedActivationTasksCount()"/>
      <method name="getCurrentEditorExpirationTime()"/>
      <method name="getCurrentEditorStartTime()"/>
      <field name="OBJECT_NAME"/>
      <method name="cancelEdit()"/>
      <method name="enableOverwriteComponentChanges()"/>
      <method name="purgeCompletedActivationTasks()"/>
      <method name="reload()"/>
      <method name="removeReferencesToBean(weblogic.descriptor.DescriptorBean)"/>
      <method name="save()"/>
      <method name="setCompletedActivationTasksCount(long)"/>
      <method name="stopEdit()"/>
      <method name="undo()"/>
      <method name="undoUnactivatedChanges()"/>
      <method name="validate()"/>
      <method name="startEdit(int,int)"/>
      <method name="startEdit(int,int,boolean)"/>
      <method name="getPropertyValues(weblogic.management.configuration.ConfigurationMBean,java.lang.String[])"/>
      <method name="getPropertyValues(weblogic.management.configuration.ConfigurationMBean,java.lang.String[],weblogic.descriptor.SettableBean[],java.lang.String[])"/>
      <method name="activate(long)"/>
      <method name="resolve(boolean,long)"/>
      <method name="getActivationTasks()"/>
      <method name="getActiveActivationTasks()"/>
      <method name="getCompletedActivationTasks()"/>
      <method name="getStartEditResolveResult()"/>
      <method name="getChanges()"/>
      <method name="getChangesToDestroyBean(weblogic.descriptor.DescriptorBean)"/>
      <method name="getUnactivatedChanges()"/>
      <method name="getFileChanges()"/>
    </class>
    <class name="EditException" members="concealed"/>
    <class name="EditServiceMBean">
      <field name="MBEANSERVER_JNDI_NAME"/>
      <field name="OBJECT_NAME"/>
      <method name="getDomainConfiguration()"/>
      <method name="getConfigurationManager()"/>
      <method name="getPortablePartitionManager()"/>
      <method name="getRecordingManager()"/>
    </class>
    <class name="EditSessionServiceMBean">
      <field name="MBEANSERVER_JNDI_NAME_PREFIX"/>
    </class>
    <class name="EditTimedOutException" members="concealed"/>
    <class name="FileChange">
      <method name="getOperation()"/>
      <method name="getPath()"/>
      <method name="getCurrentLastModifiedTime()"/>
      <method name="getProposedLastModifiedTime()"/>
      <field name="ADD"/>
      <field name="EDIT"/>
      <field name="REMOVE"/>
    </class>
    <class name="NotEditorException">
      <constructor name="NotEditorException(java.lang.String)"/>
      <constructor name="NotEditorException(java.lang.String,java.lang.Throwable)"/>
      <constructor name="NotEditorException(java.lang.Throwable)"/>
    </class>
    <class name="PortablePartitionManagerMBean">
      <field name="OBJECT_NAME"/>
      <method name="exportPartition(java.lang.String,java.lang.String)"/>
      <method name="exportPartition(java.lang.String,java.lang.String,java.lang.Boolean)"/>
      <method name="exportPartition(java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String)"/>
      <method name="exportPartition(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="importPartition(java.lang.String,java.lang.Boolean)"/>
      <method name="importPartition(java.lang.String,java.lang.Boolean,java.lang.String)"/>
      <method name="importPartition(java.lang.String,java.lang.String,java.lang.Boolean)"/>
      <method name="importPartition(java.lang.String,java.lang.String,java.lang.Boolean,java.lang.String)"/>
      <method name="migrateResourceGroup(weblogic.management.configuration.TargetMBean,weblogic.management.configuration.TargetMBean,weblogic.management.configuration.TargetMBean,long)"/>
    </class>
    <class name="RecordingException" members="concealed"/>
    <class name="RecordingManagerMBean">
      <method name="isRecording()"/>
      <method name="getRecordingFileName()"/>
      <field name="OBJECT_NAME"/>
      <method name="record(java.lang.String)"/>
      <method name="startRecording(java.lang.String,boolean)"/>
      <method name="stopRecording()"/>
    </class>
    <class name="ServerStatus">
      <method name="getServerState()"/>
      <method name="getServerException()"/>
      <method name="getServerName()"/>
    </class>
    <class name="ValidationException" members="concealed"/>
  </package>
  <package name="weblogic.management.mbeanservers.edit.internal">
    <class name="ImportExportPartitionTaskMBean">
      <method name="getState()"/>
      <method name="getError()"/>
      <field name="STATE_FAILED"/>
      <field name="STATE_FINISHED"/>
      <field name="STATE_NOT_STARTED"/>
      <field name="STATE_STARTED"/>
    </class>
    <class name="MigrationToPartitionManager" members="concealed"/>
    <class name="ResourceGroupMigrationTaskMBean">
      <method name="getState()"/>
      <method name="getError()"/>
      <field name="STATE_FAILED"/>
      <field name="STATE_FINISHED"/>
      <field name="STATE_NOT_STARTED"/>
      <field name="STATE_STARTED"/>
    </class>
  </package>
  <package name="weblogic.management.mbeanservers.runtime">
    <class name="RuntimeServiceMBean">
      <method name="getServerName()"/>
      <field name="MBEANSERVER_JNDI_NAME"/>
      <field name="MBEANSERVER_RUNTIME_CONTEXT"/>
      <field name="OBJECT_NAME"/>
      <method name="findConfiguration(weblogic.management.runtime.RuntimeMBean)"/>
      <method name="getDomainConfiguration()"/>
      <method name="getServerConfiguration()"/>
      <method name="findService(java.lang.String,java.lang.String)"/>
      <method name="getServices()"/>
      <method name="findRuntime(weblogic.descriptor.DescriptorBean)"/>
      <method name="getServerRuntime()"/>
    </class>
  </package>
  <package name="weblogic.management.partition.admin">
    <class name="DomainLevelResourceGroupStateHelperImpl" members="concealed"/>
    <class name="PartitionLifecycleDebugger" members="concealed"/>
    <class name="PartitionLifecycleDelegator" members="concealed"/>
    <class name="PartitionManagerService" members="concealed"/>
    <class name="PartitionMatchMapSingletonDescriptorUpdateListener" members="concealed"/>
    <class name="PartitionResourceGroupStateHelperImpl" members="concealed"/>
    <class name="ResourceGroupLifecycleOperations" members="concealed"/>
    <class name="ResourceGroupStateHelper" members="concealed"/>
    <class name="ResourceGroupStateHelperImpl" members="concealed"/>
  </package>
  <package name="weblogic.management.provider">
    <class name="Service" members="concealed"/>
  </package>
  <package name="weblogic.management.provider.internal">
    <class name="ConfiguredDeploymentsAccess" members="concealed"/>
    <class name="DiGraph" members="concealed"/>
    <class name="OrderedOrganizer" members="concealed"/>
    <class name="OverridePartitionDepPlan" members="concealed"/>
    <class name="PartitionServerServiceInterceptorArranger" members="concealed"/>
    <class name="ReorderableRoster" members="concealed"/>
    <class name="ServerServiceDependencyAnalyzer" members="concealed"/>
    <class name="ServerServiceInstanceRoster" members="concealed"/>
  </package>
  <package name="weblogic.management.runtime">
    <class name="AggregateProgressMBean" members="concealed"/>
    <class name="AppClientComponentRuntimeMBean" members="concealed"/>
    <class name="AppDeploymentRuntimeMBean">
      <method name="getApplicationName()"/>
      <method name="getApplicationVersion()"/>
      <method name="getPartitionName()"/>
      <method name="getState(java.lang.String)"/>
      <method name="getModules()"/>
      <method name="redeploy()"/>
      <method name="redeploy(java.lang.String[],java.lang.String,java.lang.String,java.util.Properties)"/>
      <method name="redeploy(java.lang.String[],java.lang.String,java.util.Properties)"/>
      <method name="start()"/>
      <method name="start(java.lang.String[],java.util.Properties)"/>
      <method name="stop()"/>
      <method name="stop(java.lang.String[],java.util.Properties)"/>
      <method name="undeploy()"/>
      <method name="undeploy(java.lang.String[],java.util.Properties)"/>
      <method name="update(java.lang.String[],java.lang.String,java.util.Properties)"/>
    </class>
    <class name="AppRuntimeStateRuntimeMBean">
      <method name="isActiveVersion(java.lang.String)"/>
      <method name="isAdminMode(java.lang.String,java.lang.String)"/>
      <method name="getRetireTimeoutSeconds(java.lang.String)"/>
      <method name="getCurrentState(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getCurrentState(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getCurrentState(java.lang.String,java.lang.String)"/>
      <method name="getIntendedState(java.lang.String)"/>
      <method name="getIntendedState(java.lang.String,java.lang.String)"/>
      <method name="getModuleType(java.lang.String,java.lang.String)"/>
      <method name="getApplicationIds()"/>
      <method name="getModuleIds(java.lang.String)"/>
      <method name="getModuleTargets(java.lang.String,java.lang.String)"/>
      <method name="getModuleTargets(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getSubmoduleIds(java.lang.String,java.lang.String)"/>
      <method name="getRetireTimeMillis(java.lang.String)"/>
      <field name="STATE_ACTIVE"/>
      <field name="STATE_ADMIN"/>
      <field name="STATE_FAILED"/>
      <field name="STATE_NEW"/>
      <field name="STATE_PREPARED"/>
      <field name="STATE_RETIRED"/>
      <field name="STATE_UPDATE_PENDING"/>
    </class>
    <class name="ApplicationRuntimeMBean">
      <method name="hasApplicationCache()"/>
      <method name="isInternal()"/>
      <method name="getClassRedefinitionRuntime()"/>
      <method name="getActiveVersionState()"/>
      <method name="getApplicationName()"/>
      <method name="getApplicationVersion()"/>
      <method name="getHealthStateJMX()"/>
      <method name="getOverallHealthStateJMX()"/>
      <field name="ACTIVATED"/>
      <field name="PREPARED"/>
      <field name="UNPREPARED"/>
      <method name="reInitializeApplicationCachesAndPools()"/>
      <method name="getHealthState()"/>
      <method name="getOverallHealthState()"/>
      <method name="getClassLoaderRuntime()"/>
      <method name="getCoherenceClusterRuntime()"/>
      <method name="getComponentRuntimes()"/>
      <method name="lookupComponents()"/>
      <method name="getKodoPersistenceUnitRuntime(java.lang.String)"/>
      <method name="getKodoPersistenceUnitRuntimes()"/>
      <method name="getLibraryRuntimes()"/>
      <method name="getOptionalPackageRuntimes()"/>
      <method name="lookupManagedExecutorServiceRuntime(java.lang.String,java.lang.String)"/>
      <method name="getManagedExecutorServiceRuntimes()"/>
      <method name="lookupManagedScheduledExecutorServiceRuntime(java.lang.String,java.lang.String)"/>
      <method name="getManagedScheduledExecutorServiceRuntimes()"/>
      <method name="lookupManagedThreadFactoryRuntime(java.lang.String,java.lang.String)"/>
      <method name="getManagedThreadFactoryRuntimes()"/>
      <method name="getMaxThreadsConstraintRuntimes()"/>
      <method name="getMinThreadsConstraintRuntimes()"/>
      <method name="getPersistenceUnitRuntime(java.lang.String)"/>
      <method name="getPersistenceUnitRuntimes()"/>
      <method name="lookupQueryCacheRuntime(java.lang.String)"/>
      <method name="getQueryCacheRuntimes()"/>
      <method name="getRequestClassRuntimes()"/>
      <method name="lookupWorkManagerRuntime(java.lang.String,java.lang.String)"/>
      <method name="getWorkManagerRuntimes()"/>
      <method name="getWseeRuntimes()"/>
      <method name="lookupWseeV2Runtime(java.lang.String)"/>
      <method name="getWseeV2Runtimes()"/>
    </class>
    <class name="AsyncReplicationRuntimeMBean">
      <method name="getSessionsWaitingForFlushCount()"/>
      <method name="getLastSessionsFlushTime()"/>
    </class>
    <class name="AuthenticatorRuntimeMBean" members="concealed"/>
    <class name="BatchJobRepositoryException" members="concealed"/>
    <class name="BatchJobRepositoryRuntimeMBean" members="concealed"/>
    <class name="CapacityRuntimeMBean">
      <method name="getCount()"/>
    </class>
    <class name="ChannelRuntimeMBean">
      <method name="getSubscriberCount()"/>
      <method name="getName()"/>
      <method name="getSubscribers()"/>
      <method name="getPublishedMessageCount()"/>
      <method name="getSubChannels()"/>
    </class>
    <class name="ClassLoaderRuntimeMBean">
      <method name="getAfterIndexingFindClassCount()"/>
      <method name="getAfterIndexingFindClassTime()"/>
      <method name="getAfterIndexingLoadClassCount()"/>
      <method name="getAfterIndexingLoadClassTime()"/>
      <method name="getAfterIndexingResourceCount()"/>
      <method name="getAfterIndexingResourceTime()"/>
      <method name="getBeforeIndexingFindClassCount()"/>
      <method name="getBeforeIndexingFindClassTime()"/>
      <method name="getBeforeIndexingLoadClassCount()"/>
      <method name="getBeforeIndexingLoadClassTime()"/>
      <method name="getBeforeIndexingResourceCount()"/>
      <method name="getBeforeIndexingResourceTime()"/>
      <method name="getDefineClassCount()"/>
      <method name="getDefineClassTime()"/>
      <method name="getDuringIndexingFindClassCount()"/>
      <method name="getDuringIndexingFindClassTime()"/>
      <method name="getDuringIndexingLoadClassCount()"/>
      <method name="getDuringIndexingLoadClassTime()"/>
      <method name="getDuringIndexingResourceCount()"/>
      <method name="getDuringIndexingResourceTime()"/>
      <method name="getFindClassCount()"/>
      <method name="getFindClassTime()"/>
      <method name="getIndexingTime()"/>
      <method name="getLoadClassCount()"/>
      <method name="getLoadClassTime()"/>
      <method name="getParentDelegationCount()"/>
      <method name="getParentDelegationTime()"/>
      <method name="getResourceCount()"/>
      <method name="getResourceTime()"/>
    </class>
    <class name="ClusterRuntimeMBean">
      <method name="getAliveServerCount()"/>
      <method name="getCurrentSecondaryServer()"/>
      <method name="getActiveSingletonServices()"/>
      <method name="getSecondaryDistributionNames()"/>
      <method name="getServerNames()"/>
      <method name="getForeignFragmentsDroppedCount()"/>
      <method name="getFragmentsReceivedCount()"/>
      <method name="getFragmentsSentCount()"/>
      <method name="getMulticastMessagesLostCount()"/>
      <method name="getResendRequestsCount()"/>
      <method name="getHealthState()"/>
      <method name="getCurrentMachine()"/>
      <method name="getJobSchedulerRuntime()"/>
      <method name="getServerMigrationRuntime()"/>
      <method name="getUnicastMessaging()"/>
    </class>
    <class name="CoherenceClusterMetricsRuntimeMBean">
      <method name="getReportGroupFile()"/>
      <method name="getInstances()"/>
      <method name="getNameServiceAddresses()"/>
      <method name="getMetrics(java.lang.String[],java.lang.String[],java.util.Properties)"/>
      <method name="getSchema(java.lang.String[],java.lang.String[],java.util.Properties)"/>
      <method name="getCoherenceClusterSystemResource()"/>
      <method name="getCoherenceManagementCluster()"/>
    </class>
    <class name="CoherenceClusterRuntimeMBean">
      <method name="getClusterSize()"/>
      <method name="getClusterName()"/>
      <method name="getLicenseMode()"/>
      <method name="getVersion()"/>
      <method name="getMembers()"/>
    </class>
    <class name="CoherenceServerLifeCycleRuntimeMBean">
      <method name="getNodeManagerRestartCount()"/>
      <method name="getState()"/>
      <method name="forceShutdown()"/>
      <method name="start()"/>
      <method name="getTasks()"/>
    </class>
    <class name="CoherenceServerLifeCycleTaskRuntimeMBean" members="concealed"/>
    <class name="ComponentConcurrentRuntimeMBean">
      <method name="getManagedExecutorServiceRuntimes()"/>
      <method name="getManagedScheduledExecutorServiceRuntimes()"/>
      <method name="getManagedThreadFactoryRuntimes()"/>
    </class>
    <class name="ComponentRuntimeMBean">
      <method name="getDeploymentState()"/>
      <method name="getModuleId()"/>
      <field name="ACTIVATED"/>
      <field name="NEW"/>
      <field name="PREPARED"/>
      <field name="UNPREPARED"/>
      <method name="getWorkManagerRuntimes()"/>
    </class>
    <class name="ConcurrentManagedObjectsRuntimeMBean">
      <method name="getRunningLongRunningRequests()"/>
      <method name="getRunningThreadsCount()"/>
      <method name="getRejectedLongRunningRequests()"/>
      <method name="getRejectedNewThreadRequests()"/>
    </class>
    <class name="ConnectorComponentRuntimeMBean">
      <method name="isActiveVersion()"/>
      <method name="isVersioned()"/>
      <method name="getConnectionPoolCount()"/>
      <method name="getInboundConnectionsCount()"/>
      <method name="getSuspendedState()"/>
      <method name="getActiveVersionId()"/>
      <method name="getComponentName()"/>
      <method name="getConfiguration()"/>
      <method name="getConfiguration(java.lang.String)"/>
      <method name="getConfigurationVersion()"/>
      <method name="getDescription()"/>
      <method name="getEISResourceId()"/>
      <method name="getEISType()"/>
      <method name="getJndiName()"/>
      <method name="getLinkref()"/>
      <method name="getSchema()"/>
      <method name="getSchema(java.lang.String)"/>
      <method name="getSpecVersion()"/>
      <method name="getState()"/>
      <method name="getVendorName()"/>
      <method name="getVersion()"/>
      <method name="getVersionId()"/>
      <method name="getDescriptions()"/>
      <method name="getConfiguredProperties()"/>
      <field name="ACTIVATED"/>
      <field name="INITIALIZED"/>
      <field name="NEW"/>
      <field name="PREPARED"/>
      <field name="SUSPENDED"/>
      <method name="resume(int)"/>
      <method name="resume(int,java.util.Properties)"/>
      <method name="resumeAll()"/>
      <method name="suspend(int)"/>
      <method name="suspend(int,java.util.Properties)"/>
      <method name="suspendAll()"/>
      <method name="getHealthState()"/>
      <method name="getAppDeploymentMBean()"/>
      <method name="getConnectorComponentMBean()"/>
      <method name="getConnectionPool(java.lang.String)"/>
      <method name="getConnectionPools()"/>
      <method name="getInboundConnection(java.lang.String)"/>
      <method name="getInboundConnections()"/>
      <method name="getConnectorServiceRuntime()"/>
      <method name="getConnectorWorkManagerRuntime()"/>
      <method name="getWorkManagerRuntime()"/>
    </class>
    <class name="ConnectorConnectionPoolRuntimeMBean">
      <method name="getConnectionProfilingEnabled()"/>
      <method name="isLoggingEnabled()"/>
      <method name="isProxyOn()"/>
      <method name="isShrinkingEnabled()"/>
      <method name="isTestable()"/>
      <method name="reset()"/>
      <method name="testPool()"/>
      <method name="getActiveConnectionsCurrentCount()"/>
      <method name="getActiveConnectionsHighCount()"/>
      <method name="getAverageActiveUsage()"/>
      <method name="getCapacityIncrement()"/>
      <method name="getConnectionIdleProfileCount()"/>
      <method name="getConnectionLeakProfileCount()"/>
      <method name="getConnectionsCreatedTotalCount()"/>
      <method name="getConnectionsDestroyedByErrorTotalCount()"/>
      <method name="getConnectionsDestroyedByShrinkingTotalCount()"/>
      <method name="getConnectionsDestroyedTotalCount()"/>
      <method name="getConnectionsMatchedTotalCount()"/>
      <method name="getConnectionsRejectedTotalCount()"/>
      <method name="getFreeConnectionsCurrentCount()"/>
      <method name="getFreeConnectionsHighCount()"/>
      <method name="getInitialCapacity()"/>
      <method name="getMaxCapacity()"/>
      <method name="getMaxIdleTime()"/>
      <method name="getNumUnavailableCurrentCount()"/>
      <method name="getNumUnavailableHighCount()"/>
      <method name="getNumWaitersCurrentCount()"/>
      <method name="getNumberDetectedIdle()"/>
      <method name="getNumberDetectedLeaks()"/>
      <method name="getRecycledTotal()"/>
      <method name="getShrinkCountDownTime()"/>
      <method name="getShrinkPeriodMinutes()"/>
      <method name="getConnectionFactoryClassName()"/>
      <method name="getConnectionFactoryName()"/>
      <method name="getConnectorEisType()"/>
      <method name="getEISResourceId()"/>
      <method name="getJNDIName()"/>
      <method name="getKey()"/>
      <method name="getLogFileName()"/>
      <method name="getMCFClassName()"/>
      <method name="getManagedConnectionFactoryClassName()"/>
      <method name="getPoolName()"/>
      <method name="getResourceAdapterLinkRefName()"/>
      <method name="getRuntimeTransactionSupport()"/>
      <method name="getState()"/>
      <method name="getTransactionSupport()"/>
      <method name="getCloseCount()"/>
      <method name="getCurrentCapacity()"/>
      <method name="getFreePoolSizeHighWaterMark()"/>
      <method name="getFreePoolSizeLowWaterMark()"/>
      <method name="getHighestNumWaiters()"/>
      <method name="getLastShrinkTime()"/>
      <method name="getNumWaiters()"/>
      <method name="getPoolSizeHighWaterMark()"/>
      <method name="getPoolSizeLowWaterMark()"/>
      <method name="forceReset()"/>
      <method name="getHealthState()"/>
      <method name="getConnections()"/>
      <method name="getLogRuntime()"/>
    </class>
    <class name="ConnectorConnectionRuntimeMBean">
      <method name="hasError()"/>
      <method name="isCurrentlyInUse()"/>
      <method name="isDeletable()"/>
      <method name="isIdle()"/>
      <method name="isInTransaction()"/>
      <method name="isShared()"/>
      <method name="testConnection()"/>
      <method name="getActiveHandlesCurrentCount()"/>
      <method name="getActiveHandlesHighCount()"/>
      <method name="getHandlesCreatedTotalCount()"/>
      <method name="getConnectionFactoryClassName()"/>
      <method name="getEISProductName()"/>
      <method name="getEISProductVersion()"/>
      <method name="getLastUsageString()"/>
      <method name="getManagedConnectionFactoryClassName()"/>
      <method name="getMaxConnections()"/>
      <method name="getStackTrace()"/>
      <method name="getTransactionId()"/>
      <method name="getUserName()"/>
      <method name="getCreationDurationTime()"/>
      <method name="getLastUsage()"/>
      <method name="getReserveDurationTime()"/>
      <method name="getReserveTime()"/>
      <method name="delete()"/>
    </class>
    <class name="ConnectorInboundRuntimeMBean">
      <method name="getActivationSpecClass()"/>
      <method name="getMsgListenerType()"/>
      <method name="getState()"/>
      <method name="getMDBRuntimes()"/>
    </class>
    <class name="ConnectorServiceRuntimeMBean">
      <method name="getActiveRACount()"/>
      <method name="getConnectionPoolCurrentCount()"/>
      <method name="getConnectionPoolsTotalCount()"/>
      <method name="getRACount()"/>
      <method name="resume(int)"/>
      <method name="resume(int,java.util.Properties)"/>
      <method name="resumeAll()"/>
      <method name="resumeAll(java.util.Properties)"/>
      <method name="suspend(int)"/>
      <method name="suspend(int,java.util.Properties)"/>
      <method name="suspendAll()"/>
      <method name="suspendAll(java.util.Properties)"/>
      <method name="getRA(java.lang.String)"/>
      <method name="getActiveRAs()"/>
      <method name="getInactiveRAs()"/>
      <method name="getRAs()"/>
      <method name="getConnectionPool(java.lang.String)"/>
      <method name="getConnectionPools()"/>
      <method name="getInboundConnections(java.lang.String)"/>
    </class>
    <class name="ConnectorWorkManagerRuntimeMBean">
      <method name="getActiveLongRunningRequests()"/>
      <method name="getCompletedLongRunningRequests()"/>
      <method name="getMaxConcurrentLongRunningRequests()"/>
    </class>
    <class name="ConsoleRuntimeMBean">
      <method name="isEnabled()"/>
      <method name="getDefaultPageURL(java.lang.String[],java.lang.String)"/>
      <method name="getHomePageURL()"/>
      <method name="getSpecificPageURL(java.lang.String,java.lang.String[])"/>
      <method name="getDefaultPageURLs(java.lang.String[][],java.lang.String)"/>
      <method name="getDefaultPageURLs(java.lang.String[][],java.lang.String[])"/>
      <method name="getObjectNameContext(java.lang.String)"/>
      <method name="getSpecificPageURLs(java.lang.String,java.lang.String[][])"/>
      <method name="getSpecificPageURLs(java.lang.String[],java.lang.String[][])"/>
    </class>
    <class name="CursorRuntimeMBean">
      <method name="getCursorEndPosition(java.lang.String)"/>
      <method name="getCursorSize(java.lang.String)"/>
      <method name="getCursorStartPosition(java.lang.String)"/>
      <method name="closeCursor(java.lang.String)"/>
      <method name="getItems(java.lang.String,java.lang.Long,java.lang.Integer)"/>
      <method name="getNext(java.lang.String,java.lang.Integer)"/>
      <method name="getPrevious(java.lang.String,java.lang.Integer)"/>
    </class>
    <class name="DeployerRuntimeMBean">
      <method name="getAvailabilityStatusForApplication(java.lang.String,boolean)"/>
      <method name="getAvailabilityStatusForComponent(weblogic.management.configuration.ComponentMBean,boolean)"/>
      <field name="DEPLOYER_NAME"/>
      <method name="activate(java.lang.String,java.lang.String,java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="activate(java.lang.String,java.lang.String,java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="appendToExtensionLoader(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="deactivate(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="deactivate(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="deploy(java.lang.String,java.lang.String,java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="deploy(java.lang.String,java.lang.String,java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="distribute(java.lang.String,java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="distribute(java.lang.String,java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="query(java.lang.String)"/>
      <method name="redeploy(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="redeploy(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="remove(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="remove(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="start(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="start(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="stop(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="stop(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="undeploy(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="undeploy(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="unprepare(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String)"/>
      <method name="unprepare(java.lang.String,weblogic.management.deploy.DeploymentData,java.lang.String,boolean)"/>
      <method name="getDeploymentTaskRuntimes()"/>
      <method name="list()"/>
    </class>
    <class name="DeploymentManagerMBean">
      <method name="getMaximumDeploymentProgressObjectsCount()"/>
      <method name="confirmApplicationName(java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="confirmApplicationName(java.lang.Boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Properties)"/>
      <field name="ADMIN_MODE"/>
      <field name="ALT_DD"/>
      <field name="ALT_WLS_DD"/>
      <field name="APPDEPLOYMENT_ACTIVE"/>
      <field name="APPDEPLOYMENT_ADMIN"/>
      <field name="APPDEPLOYMENT_CREATED"/>
      <field name="APPDEPLOYMENT_DELETED"/>
      <field name="APPDEPLOYMENT_FAILED"/>
      <field name="APPDEPLOYMENT_NEW"/>
      <field name="APPDEPLOYMENT_PREPARED"/>
      <field name="APPDEPLOYMENT_RETIRED"/>
      <field name="APPDEPLOYMENT_UNKNOWN"/>
      <field name="APPDEPLOYMENT_UPDATE_PENDING"/>
      <field name="APP_VERSION"/>
      <field name="CACHE_IN_APP_DIRECTORY"/>
      <field name="CLUSTER_DEPLOYMENT_TIMEOUT"/>
      <field name="CREATE_PLAN"/>
      <field name="DEFAULT_SUBMODULE_TARGETS"/>
      <field name="DEPLOYMENT_ORDER"/>
      <field name="DEPLOYMENT_PRINCIPAL_NAME"/>
      <field name="EDIT_SESSION"/>
      <field name="FORCE_UNDEPLOYMENT_TIMEOUT"/>
      <field name="GRACEFUL_IGNORE_SESSIONS"/>
      <field name="GRACEFUL_PRODUCTION_TO_ADMIN"/>
      <field name="LIBDEPLOYMENT_CREATED"/>
      <field name="LIBDEPLOYMENT_DELETED"/>
      <field name="LIBRARY"/>
      <field name="LIB_IMPL_VERSION"/>
      <field name="LIB_SPEC_VERSION"/>
      <field name="NO_VERSION"/>
      <field name="PARTITION"/>
      <field name="PLAN_VERSION"/>
      <field name="REMOVE_PLAN_OVERRIDE"/>
      <field name="RESOURCE_GROUP"/>
      <field name="RESOURCE_GROUP_TEMPLATE"/>
      <field name="RETIRE_GRACEFULLY"/>
      <field name="RETIRE_TIMEOUT"/>
      <field name="RMI_GRACE_PERIOD"/>
      <field name="SECURITY_MODEL"/>
      <field name="SECURITY_VALIDATION_ENABLED"/>
      <field name="SPECIFIED_TARGETS_ONLY"/>
      <field name="STAGE_MODE"/>
      <field name="START_TASK"/>
      <field name="STATIC_DEPLOYMENT"/>
      <field name="SUB_MODULE_TARGETS"/>
      <field name="TASK_ID"/>
      <field name="TIMEOUT"/>
      <field name="USE_NONEXCLUSIVE_LOCK"/>
      <field name="VERSION_IDENTIFIER"/>
      <method name="purgeCompletedDeploymentProgressObjects()"/>
      <method name="removeDeploymentProgressObject(java.lang.String)"/>
      <method name="setMaximumDeploymentProgressObjectsCount(int)"/>
      <method name="lookupAppDeploymentRuntime(java.lang.String)"/>
      <method name="lookupAppDeploymentRuntime(java.lang.String,java.util.Properties)"/>
      <method name="getAppDeploymentRuntimes()"/>
      <method name="appendToExtensionLoader(java.lang.String)"/>
      <method name="appendToExtensionLoader(java.lang.String,java.lang.String[],java.util.Properties)"/>
      <method name="deploy(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deploy(java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Properties)"/>
      <method name="distribute(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="distribute(java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.util.Properties)"/>
      <method name="redeploy(java.lang.String,java.lang.String,java.lang.String,java.util.Properties)"/>
      <method name="redeploy(java.lang.String,java.lang.String,java.util.Properties)"/>
      <method name="undeploy(java.lang.String,java.lang.String)"/>
      <method name="undeploy(java.lang.String,java.util.Properties)"/>
      <method name="update(java.lang.String,java.lang.String,java.util.Properties)"/>
      <method name="getDeploymentProgressObjects()"/>
      <method name="lookupLibDeploymentRuntime(java.lang.String)"/>
      <method name="getLibDeploymentRuntimes()"/>
    </class>
    <class name="DeploymentProgressObjectMBean">
      <method name="getOperationType()"/>
      <method name="getExceptions(java.lang.String)"/>
      <method name="getRootExceptions()"/>
      <method name="getApplicationName()"/>
      <method name="getId()"/>
      <method name="getState()"/>
      <method name="getFailedTargets()"/>
      <method name="getMessages()"/>
      <method name="getTargets()"/>
      <method name="getBeginTime()"/>
      <method name="getEndTime()"/>
      <field name="OPERATION_DEPLOY"/>
      <field name="OPERATION_REDEPLOY"/>
      <field name="OPERATION_START"/>
      <field name="OPERATION_STOP"/>
      <field name="OPERATION_UNDEPLOY"/>
      <field name="OPERATION_UNIMPLEMENTED"/>
      <field name="STATE_COMPLETED"/>
      <field name="STATE_DEFERRED"/>
      <field name="STATE_FAILED"/>
      <field name="STATE_INITIALIZED"/>
      <field name="STATE_RUNNING"/>
      <method name="addMessages(java.util.List)"/>
      <method name="cancel()"/>
      <method name="getAppDeploymentMBean()"/>
      <method name="getLibraryMBean()"/>
    </class>
    <class name="DeploymentTaskRuntimeMBean">
      <method name="isInUse()"/>
      <method name="isNewSource()"/>
      <method name="getNotificationLevel()"/>
      <method name="getState()"/>
      <method name="getTask()"/>
      <method name="getApplicationId()"/>
      <method name="getApplicationName()"/>
      <method name="getId()"/>
      <method name="getSource()"/>
      <method name="getTaskMessages()"/>
      <field name="APP_NOTIFICATION_LEVEL"/>
      <field name="DEFAULT_NOTIFICATION_LEVEL"/>
      <field name="DEPLOY_TASK_ACTIVATE"/>
      <field name="DEPLOY_TASK_DEACTIVATE"/>
      <field name="DEPLOY_TASK_DEPLOY"/>
      <field name="DEPLOY_TASK_DISTRIBUTE"/>
      <field name="DEPLOY_TASK_PREPARE"/>
      <field name="DEPLOY_TASK_REDEPLOY"/>
      <field name="DEPLOY_TASK_REMOVE"/>
      <field name="DEPLOY_TASK_START"/>
      <field name="DEPLOY_TASK_STOP"/>
      <field name="DEPLOY_TASK_UNDEPLOY"/>
      <field name="DEPLOY_TASK_UNPREPARE"/>
      <field name="DEPLOY_TASK_UPDATE"/>
      <field name="MODULE_NOTIFICATION_LEVEL"/>
      <field name="NONE_NOTIFICATION_LEVEL"/>
      <field name="STATE_COMPLETED"/>
      <field name="STATE_DEFERRED"/>
      <field name="STATE_FAILED"/>
      <field name="STATE_INITIALIZED"/>
      <field name="STATE_RUNNING"/>
      <method name="cancel()"/>
      <method name="setNotificationLevel(int)"/>
      <method name="start()"/>
      <method name="getDeploymentObject()"/>
      <method name="getDeploymentMBean()"/>
      <method name="getDeploymentData()"/>
      <method name="findTarget(java.lang.String)"/>
      <method name="getTargets()"/>
    </class>
    <class name="DomainPartitionRuntimeMBean">
      <method name="getPartitionID()"/>
      <method name="getAppRuntimeStateRuntime()"/>
      <method name="getDeploymentManager()"/>
      <method name="getEditSessionConfigurationManager()"/>
      <method name="getPartitionLifeCycleRuntime()"/>
      <method name="getPartitionUserFileSystemManager()"/>
    </class>
    <class name="DomainRuntimeMBean">
      <method name="getName()"/>
      <method name="getActivationTime()"/>
      <method name="restartSystemResource(weblogic.management.configuration.SystemResourceMBean)"/>
      <method name="getAppRuntimeStateRuntime()"/>
      <method name="getBatchJobRepositoryRuntime()"/>
      <method name="lookupCoherenceServerLifeCycleRuntime(java.lang.String)"/>
      <method name="getCoherenceServerLifeCycleRuntimes()"/>
      <method name="getConsoleRuntime()"/>
      <method name="getDeployerRuntime()"/>
      <method name="getDeploymentManager()"/>
      <method name="getCurrentDomainPartitionRuntime()"/>
      <method name="lookupDomainPartitionRuntime(java.lang.String)"/>
      <method name="getDomainPartitionRuntimes()"/>
      <method name="getEditSessionConfigurationManager()"/>
      <method name="getElasticServiceManagerRuntime()"/>
      <method name="getLogRuntime()"/>
      <method name="getMessageDrivenControlEJBRuntime()"/>
      <method name="getMigratableServiceCoordinatorRuntime()"/>
      <method name="getMigrationDataRuntimes()"/>
      <method name="forceShutdownPartitionWait(weblogic.management.configuration.PartitionMBean,int)"/>
      <method name="startPartitionWait(weblogic.management.configuration.PartitionMBean,java.lang.String,int)"/>
      <method name="lookupResourceGroupLifeCycleRuntime(java.lang.String)"/>
      <method name="getResourceGroupLifeCycleRuntimes()"/>
      <method name="getRolloutService()"/>
      <method name="getSNMPAgentRuntime()"/>
      <method name="lookupServerLifeCycleRuntime(java.lang.String)"/>
      <method name="getServerLifeCycleRuntimes()"/>
      <method name="getServiceMigrationDataRuntimes()"/>
      <method name="lookupSystemComponentLifeCycleRuntime(java.lang.String)"/>
      <method name="getSystemComponentLifeCycleRuntimes()"/>
      <method name="getPolicySubjectManagerRuntime()"/>
    </class>
    <class name="EJBCacheRuntimeMBean">
      <method name="getCachedBeansCurrentCount()"/>
      <method name="getActivationCount()"/>
      <method name="getCacheAccessCount()"/>
      <method name="getCacheHitCount()"/>
      <method name="getCacheMissCount()"/>
      <method name="getPassivationCount()"/>
      <method name="reInitializeCacheAndPools()"/>
    </class>
    <class name="EJBComponentRuntimeMBean">
      <method name="getEJBComponent()"/>
      <method name="getCoherenceClusterRuntime()"/>
      <method name="getEJBRuntime(java.lang.String)"/>
      <method name="getEJBRuntimes()"/>
      <method name="getKodoPersistenceUnitRuntime(java.lang.String)"/>
      <method name="getKodoPersistenceUnitRuntimes()"/>
      <method name="getSpringRuntimeMBean()"/>
      <method name="lookupWseeClientConfigurationRuntime(java.lang.String)"/>
      <method name="getWseeClientConfigurationRuntimes()"/>
      <method name="lookupWseeClientRuntime(java.lang.String)"/>
      <method name="getWseeClientRuntimes()"/>
      <method name="lookupWseeV2Runtime(java.lang.String)"/>
      <method name="getWseeV2Runtimes()"/>
    </class>
    <class name="EJBLockingRuntimeMBean">
      <method name="getLockEntriesCurrentCount()"/>
      <method name="getWaiterCurrentCount()"/>
      <method name="getLockManagerAccessCount()"/>
      <method name="getTimeoutTotalCount()"/>
      <method name="getWaiterTotalCount()"/>
    </class>
    <class name="EJBPoolRuntimeMBean">
      <method name="getBeansInUseCount()"/>
      <method name="getBeansInUseCurrentCount()"/>
      <method name="getIdleBeansCount()"/>
      <method name="getPooledBeansCurrentCount()"/>
      <method name="getWaiterCurrentCount()"/>
      <method name="getAccessTotalCount()"/>
      <method name="getDestroyedTotalCount()"/>
      <method name="getMissTotalCount()"/>
      <method name="getTimeoutTotalCount()"/>
      <method name="getWaiterTotalCount()"/>
      <method name="initializePool()"/>
    </class>
    <class name="EJBRuntimeMBean">
      <method name="getEJBName()"/>
      <method name="getTransactionRuntime()"/>
      <method name="getResources()"/>
    </class>
    <class name="EJBTimerRuntimeMBean">
      <method name="getActiveTimerCount()"/>
      <method name="getDisabledTimerCount()"/>
      <method name="getCancelledTimerCount()"/>
      <method name="getTimeoutCount()"/>
      <method name="activateDisabledTimers()"/>
    </class>
    <class name="EJBTransactionRuntimeMBean">
      <method name="getTransactionsCommittedTotalCount()"/>
      <method name="getTransactionsRolledBackTotalCount()"/>
      <method name="getTransactionsTimedOutTotalCount()"/>
    </class>
    <class name="EditSessionConfigurationManagerMBean">
      <method name="destroyEditSessionConfiguration(weblogic.management.runtime.EditSessionConfigurationRuntimeMBean)"/>
      <method name="forceDestroyEditSessionConfiguration(weblogic.management.runtime.EditSessionConfigurationRuntimeMBean)"/>
      <method name="createEditSessionConfiguration(java.lang.String,java.lang.String)"/>
      <method name="lookupEditSessionConfiguration(java.lang.String)"/>
      <method name="getEditSessionConfigurations()"/>
    </class>
    <class name="EditSessionConfigurationRuntimeMBean">
      <method name="containsUnactivatedChanges()"/>
      <method name="isMergeNeeded()"/>
      <method name="getCreator()"/>
      <method name="getCurrentEditor()"/>
      <method name="getDescription()"/>
      <method name="getEditSessionName()"/>
      <method name="getEditSessionServerJndi()"/>
      <method name="getPartitionName()"/>
    </class>
    <class name="ElasticServiceManagerRuntimeMBean" members="concealed"/>
    <class name="EntityCacheCumulativeRuntimeMBean">
      <method name="getAvgEntrySizeDiskPurged()"/>
      <method name="getAvgEntrySizeMemoryPurged()"/>
      <method name="getDiskPurgesPerHour()"/>
      <method name="getMemoryPurgesPerHour()"/>
      <method name="getPercentRejected()"/>
      <method name="getMostRecentDiskPurge()"/>
      <method name="getMostRecentMemoryPurge()"/>
      <method name="getTotalItemsDiskPurged()"/>
      <method name="getTotalItemsMemoryPurged()"/>
      <method name="getTotalNumberDiskPurges()"/>
      <method name="getTotalNumberMemoryPurges()"/>
      <method name="getTotalNumberOfRejections()"/>
      <method name="getTotalNumberOfRenewals()"/>
      <method name="getTotalSizeOfRejections()"/>
    </class>
    <class name="EntityCacheCurrentStateRuntimeMBean">
      <method name="getDiskUsage()"/>
      <method name="getMemoryUsage()"/>
    </class>
    <class name="EntityCacheRuntimeMBean">
      <method name="getAvgPerEntryDiskSize()"/>
      <method name="getAvgPerEntryMemorySize()"/>
      <method name="getAvgPercentPersistent()"/>
      <method name="getAvgPercentTransient()"/>
      <method name="getAvgTimeout()"/>
      <method name="getMaxEntryTimeout()"/>
      <method name="getMinEntryTimeout()"/>
      <method name="getMaxEntryMemorySize()"/>
      <method name="getMinEntryMemorySize()"/>
      <method name="getTotalCurrentEntries()"/>
      <method name="getTotalPersistentCurrentEntries()"/>
      <method name="getTotalTransientCurrentEntries()"/>
    </class>
    <class name="EntityEJBRuntimeMBean">
      <method name="getCacheRuntime()"/>
      <method name="getLockingRuntime()"/>
      <method name="getPoolRuntime()"/>
      <method name="getTimerRuntime()"/>
      <method name="getQueryCacheRuntime()"/>
    </class>
    <class name="ExecuteQueueRuntimeMBean">
      <method name="getExecuteThreadCurrentIdleCount()"/>
      <method name="getExecuteThreadTotalCount()"/>
      <method name="getPendingRequestCurrentCount()"/>
      <method name="getServicedRequestTotalCount()"/>
      <method name="getPendingRequestOldestTime()"/>
      <method name="getExecuteThreads()"/>
    </class>
    <class name="ExecuteThread">
      <method name="isHogger()"/>
      <method name="isIdle()"/>
      <method name="isStandby()"/>
      <method name="isStuck()"/>
      <method name="getServicedRequestTotalCount()"/>
      <method name="getApplicationName()"/>
      <method name="getApplicationVersion()"/>
      <method name="getCurrentRequest()"/>
      <method name="getLastRequest()"/>
      <method name="getModuleName()"/>
      <method name="getName()"/>
      <method name="getStuckThreadActionName()"/>
      <method name="getUser()"/>
      <method name="getWorkManagerName()"/>
      <method name="getExecuteThread()"/>
      <method name="getStuckThreadActionMaxStuckThreadTime()"/>
      <method name="getTransaction()"/>
    </class>
    <class name="FairShareConstraintRuntimeMBean">
      <method name="isActivated()"/>
      <method name="isInitiated()"/>
      <method name="getName()"/>
      <method name="getLastTimeExecuted()"/>
      <method name="getRecourseActionEventsHistory()"/>
    </class>
    <class name="InterceptionComponentRuntimeMBean" members="concealed"/>
    <class name="JDBCDataSourceRuntimeMBean">
      <method name="isEnabled()"/>
      <method name="poolExists(java.lang.String)"/>
      <method name="getActiveConnectionsAverageCount()"/>
      <method name="getActiveConnectionsCurrentCount()"/>
      <method name="getActiveConnectionsHighCount()"/>
      <method name="getConnectionDelayTime()"/>
      <method name="getConnectionsTotalCount()"/>
      <method name="getCurrCapacity()"/>
      <method name="getCurrCapacityHighCount()"/>
      <method name="getFailuresToReconnectCount()"/>
      <method name="getHighestNumAvailable()"/>
      <method name="getHighestNumUnavailable()"/>
      <method name="getLeakedConnectionCount()"/>
      <method name="getNumAvailable()"/>
      <method name="getNumUnavailable()"/>
      <method name="getPrepStmtCacheCurrentSize()"/>
      <method name="getPrepStmtCacheHitCount()"/>
      <method name="getPrepStmtCacheMissCount()"/>
      <method name="getWaitSecondsHighCount()"/>
      <method name="getWaitingForConnectionCurrentCount()"/>
      <method name="getWaitingForConnectionHighCount()"/>
      <method name="getDatabaseProductName()"/>
      <method name="getDatabaseProductVersion()"/>
      <method name="getDriverName()"/>
      <method name="getDriverVersion()"/>
      <method name="getState()"/>
      <method name="getVersionJDBCDriver()"/>
      <method name="testPool()"/>
      <method name="getProperties()"/>
      <method name="getCommitOutcomeRetryTotalCount()"/>
      <method name="getFailedRepurposeCount()"/>
      <method name="getFailedReserveRequestCount()"/>
      <method name="getPrepStmtCacheAccessCount()"/>
      <method name="getPrepStmtCacheAddCount()"/>
      <method name="getPrepStmtCacheDeleteCount()"/>
      <method name="getRepurposeCount()"/>
      <method name="getReserveRequestCount()"/>
      <method name="getResolvedAsCommittedTotalCount()"/>
      <method name="getResolvedAsNotCommittedTotalCount()"/>
      <method name="getUnresolvedTotalCount()"/>
      <method name="getWaitingForConnectionFailureTotal()"/>
      <method name="getWaitingForConnectionSuccessTotal()"/>
      <method name="getWaitingForConnectionTotal()"/>
      <method name="clearStatementCache()"/>
      <method name="dumpPool()"/>
      <method name="dumpPoolProfile()"/>
      <method name="forceShutdown()"/>
      <method name="forceSuspend()"/>
      <method name="reset()"/>
      <method name="resetStatistics()"/>
      <method name="resume()"/>
      <method name="shrink()"/>
      <method name="shutdown()"/>
      <method name="start()"/>
      <method name="suspend()"/>
      <method name="getLastTask()"/>
      <method name="shutdown(int)"/>
      <method name="suspend(int)"/>
      <method name="getTasks()"/>
      <method name="getJDBCDriverRuntime()"/>
      <method name="getJDBCReplayStatisticsRuntimeMBean()"/>
    </class>
    <class name="JDBCDataSourceTaskRuntimeMBean" members="concealed"/>
    <class name="JDBCDriverRuntimeMBean" members="concealed"/>
    <class name="JDBCMultiDataSourceRuntimeMBean">
      <method name="getMaxCapacity()"/>
    </class>
    <class name="JDBCOracleDataSourceInstanceRuntimeMBean">
      <method name="isAffEnabled()"/>
      <method name="isEnabled()"/>
      <method name="getActiveConnectionsCurrentCount()"/>
      <method name="getConnectionsTotalCount()"/>
      <method name="getCurrCapacity()"/>
      <method name="getCurrentWeight()"/>
      <method name="getNumAvailable()"/>
      <method name="getNumUnavailable()"/>
      <method name="getInstanceName()"/>
      <method name="getSignature()"/>
      <method name="getState()"/>
      <method name="getReserveRequestCount()"/>
    </class>
    <class name="JDBCOracleDataSourceRuntimeMBean">
      <method name="getServiceName()"/>
      <method name="getFailedAffinityBasedBorrowCount()"/>
      <method name="getFailedRCLBBasedBorrowCount()"/>
      <method name="getSuccessfulAffinityBasedBorrowCount()"/>
      <method name="getSuccessfulRCLBBasedBorrowCount()"/>
      <method name="getInstances()"/>
      <method name="getONSClientRuntime()"/>
    </class>
    <class name="JDBCPartitionRuntimeMBean">
      <method name="lookupJDBCDataSourceRuntimeMBean(java.lang.String)"/>
      <method name="lookupJDBCDataSourceRuntimeMBean(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getJDBCDataSourceRuntimeMBeans()"/>
      <method name="lookupJDBCMultiDataSourceRuntimeMBean(java.lang.String)"/>
      <method name="lookupJDBCMultiDataSourceRuntimeMBean(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getJDBCMultiDataSourceRuntimeMBeans()"/>
    </class>
    <class name="JDBCProxyDataSourceRuntimeMBean" members="concealed"/>
    <class name="JDBCReplayStatisticsRuntimeMBean">
      <method name="getFailedReplayCount()"/>
      <method name="getReplayDisablingCount()"/>
      <method name="getSuccessfulReplayCount()"/>
      <method name="getTotalCalls()"/>
      <method name="getTotalCallsAffectedByOutages()"/>
      <method name="getTotalCallsAffectedByOutagesDuringReplay()"/>
      <method name="getTotalCallsTriggeringReplay()"/>
      <method name="getTotalCompletedRequests()"/>
      <method name="getTotalProtectedCalls()"/>
      <method name="getTotalReplayAttempts()"/>
      <method name="getTotalRequests()"/>
      <method name="clearStatistics()"/>
      <method name="refreshStatistics()"/>
    </class>
    <class name="JDBCServiceRuntimeMBean">
      <method name="getHealthState()"/>
      <method name="lookupJDBCDataSourceRuntimeMBean(java.lang.String)"/>
      <method name="lookupJDBCDataSourceRuntimeMBean(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getJDBCDataSourceRuntimeMBeans()"/>
      <method name="lookupJDBCDriverRuntimeMBean(java.lang.String)"/>
      <method name="getJDBCDriverRuntimeMBeans()"/>
      <method name="lookupJDBCMultiDataSourceRuntimeMBean(java.lang.String)"/>
      <method name="lookupJDBCMultiDataSourceRuntimeMBean(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getJDBCMultiDataSourceRuntimeMBeans()"/>
    </class>
    <class name="JDBCUCPDataSourceRuntimeMBean" members="concealed"/>
    <class name="JMSComponentRuntimeMBean" members="concealed"/>
    <class name="JMSConnectionRuntimeMBean">
      <method name="getClientID()"/>
      <method name="getClientIDPolicy()"/>
      <method name="getHostAddress()"/>
      <method name="getSessionsCurrentCount()"/>
      <method name="getSessionsHighCount()"/>
      <method name="getSessionsTotalCount()"/>
      <method name="destroy()"/>
      <method name="getSessions()"/>
    </class>
    <class name="JMSConsumerRuntimeMBean">
      <method name="isActive()"/>
      <method name="isDurable()"/>
      <method name="getClientID()"/>
      <method name="getClientIDPolicy()"/>
      <method name="getDestinationName()"/>
      <method name="getMemberDestinationName()"/>
      <method name="getSelector()"/>
      <method name="getSubscriptionSharingPolicy()"/>
      <method name="getBytesPendingCount()"/>
      <method name="getBytesReceivedCount()"/>
      <method name="getMessagesPendingCount()"/>
      <method name="getMessagesReceivedCount()"/>
    </class>
    <class name="JMSDestinationRuntimeMBean">
      <method name="isConsumptionPaused()"/>
      <method name="isInsertionPaused()"/>
      <method name="isPaused()"/>
      <method name="isProductionPaused()"/>
      <method name="getConsumptionPausedState()"/>
      <method name="getDestinationType()"/>
      <method name="getInsertionPausedState()"/>
      <method name="getProductionPausedState()"/>
      <method name="getState()"/>
      <method name="getDestinationInfo()"/>
      <method name="getBytesCurrentCount()"/>
      <method name="getBytesHighCount()"/>
      <method name="getBytesPendingCount()"/>
      <method name="getBytesReceivedCount()"/>
      <method name="getBytesThresholdTime()"/>
      <method name="getConsumersCurrentCount()"/>
      <method name="getConsumersHighCount()"/>
      <method name="getConsumersTotalCount()"/>
      <method name="getMessagesCurrentCount()"/>
      <method name="getMessagesHighCount()"/>
      <method name="getMessagesPendingCount()"/>
      <method name="getMessagesReceivedCount()"/>
      <method name="getMessagesThresholdTime()"/>
      <method name="getSubscriptionMessagesLimit()"/>
      <method name="createDurableSubscriber(java.lang.String,java.lang.String,java.lang.String,boolean)"/>
      <method name="pause()"/>
      <method name="pauseConsumption()"/>
      <method name="pauseInsertion()"/>
      <method name="pauseProduction()"/>
      <method name="resume()"/>
      <method name="resumeConsumption()"/>
      <method name="resumeInsertion()"/>
      <method name="resumeProduction()"/>
      <method name="getDurableSubscribers()"/>
    </class>
    <class name="JMSDurableSubscriberRuntimeMBean">
      <method name="isActive()"/>
      <method name="isNoLocal()"/>
      <method name="getSubscribersCurrentCount()"/>
      <method name="getSubscribersHighCount()"/>
      <method name="getSubscribersTotalCount()"/>
      <method name="getClientID()"/>
      <method name="getClientIDPolicy()"/>
      <method name="getSelector()"/>
      <method name="getSubscriptionName()"/>
      <method name="getSubscriptionSharingPolicy()"/>
      <method name="getCurrentConsumerInfo()"/>
      <method name="getDestinationInfo()"/>
      <method name="getBytesCurrentCount()"/>
      <method name="getBytesPendingCount()"/>
      <method name="getLastMessagesReceivedTime()"/>
      <method name="getMessagesCurrentCount()"/>
      <method name="getMessagesHighCount()"/>
      <method name="getMessagesPendingCount()"/>
      <method name="getMessagesReceivedCount()"/>
      <method name="getSubscriptionLimitDeletedCount()"/>
      <method name="destroy()"/>
      <method name="purge()"/>
      <method name="getDestinationRuntime()"/>
    </class>
    <class name="JMSMessageCursorRuntimeMBean">
      <method name="sort(java.lang.String,java.lang.Long,java.lang.String[],java.lang.Boolean[])"/>
    </class>
    <class name="JMSMessageManagementRuntimeMBean">
      <method name="deleteMessages(java.lang.String)"/>
      <method name="moveMessages(java.lang.String,javax.management.openmbean.CompositeData)"/>
      <method name="moveMessages(java.lang.String,javax.management.openmbean.CompositeData,java.lang.Integer)"/>
      <method name="getMessagesDeletedCurrentCount()"/>
      <method name="getMessagesMovedCurrentCount()"/>
      <method name="getMessages(java.lang.String,java.lang.Integer)"/>
      <method name="getMessages(java.lang.String,java.lang.Integer,java.lang.Integer)"/>
      <method name="importMessages(javax.management.openmbean.CompositeData[],java.lang.Boolean)"/>
      <method name="importMessages(javax.management.openmbean.CompositeData[],java.lang.Boolean,java.lang.Boolean)"/>
      <method name="getMessage(java.lang.String)"/>
    </class>
    <class name="JMSPooledConnectionRuntimeMBean">
      <method name="getAverageReserved()"/>
      <method name="getCreationDelayTime()"/>
      <method name="getCurrCapacity()"/>
      <method name="getHighestNumAvailable()"/>
      <method name="getHighestNumReserved()"/>
      <method name="getHighestNumUnavailable()"/>
      <method name="getHighestNumWaiters()"/>
      <method name="getHighestWaitSeconds()"/>
      <method name="getMaxCapacity()"/>
      <method name="getNumAvailable()"/>
      <method name="getNumConnectionObjects()"/>
      <method name="getNumFailuresToRefresh()"/>
      <method name="getNumLeaked()"/>
      <method name="getNumReserved()"/>
      <method name="getNumUnavailable()"/>
      <method name="getNumWaiters()"/>
      <method name="getTotalNumAllocated()"/>
      <method name="getTotalNumDestroyed()"/>
    </class>
    <class name="JMSProducerRuntimeMBean">
      <method name="getBytesPendingCount()"/>
      <method name="getBytesSentCount()"/>
      <method name="getMessagesPendingCount()"/>
      <method name="getMessagesSentCount()"/>
    </class>
    <class name="JMSRemoteEndpointRuntimeMBean" members="concealed"/>
    <class name="JMSRuntimeMBean">
      <method name="getConnectionsCurrentCount()"/>
      <method name="getConnectionsHighCount()"/>
      <method name="getConnectionsTotalCount()"/>
      <method name="getJMSServersCurrentCount()"/>
      <method name="getJMSServersHighCount()"/>
      <method name="getJMSServersTotalCount()"/>
      <method name="getHealthState()"/>
      <method name="getConnections()"/>
      <method name="getJMSServers()"/>
    </class>
    <class name="JMSServerRuntimeMBean">
      <method name="isConsumptionPaused()"/>
      <method name="isInsertionPaused()"/>
      <method name="isProductionPaused()"/>
      <method name="getMessagesPageableCurrentCount()"/>
      <method name="getMessagesPagedInTotalCount()"/>
      <method name="getMessagesPagedOutTotalCount()"/>
      <method name="getTransactionStatus(java.lang.String)"/>
      <method name="getConsumptionPausedState()"/>
      <method name="getInsertionPausedState()"/>
      <method name="getMessages(java.lang.String,java.lang.Integer)"/>
      <method name="getProductionPausedState()"/>
      <method name="getPendingTransactions()"/>
      <method name="getTransactions()"/>
      <method name="forceCommit(java.lang.String)"/>
      <method name="forceRollback(java.lang.String)"/>
      <method name="getBytesCurrentCount()"/>
      <method name="getBytesHighCount()"/>
      <method name="getBytesPageableCurrentCount()"/>
      <method name="getBytesPagedInTotalCount()"/>
      <method name="getBytesPagedOutTotalCount()"/>
      <method name="getBytesPendingCount()"/>
      <method name="getBytesReceivedCount()"/>
      <method name="getBytesThresholdTime()"/>
      <method name="getDestinationsCurrentCount()"/>
      <method name="getDestinationsHighCount()"/>
      <method name="getDestinationsTotalCount()"/>
      <method name="getMessagesCurrentCount()"/>
      <method name="getMessagesHighCount()"/>
      <method name="getMessagesPendingCount()"/>
      <method name="getMessagesReceivedCount()"/>
      <method name="getMessagesThresholdTime()"/>
      <method name="getPagingAllocatedIoBufferBytes()"/>
      <method name="getPagingAllocatedWindowBufferBytes()"/>
      <method name="getPagingPhysicalWriteCount()"/>
      <method name="getSessionPoolsCurrentCount()"/>
      <method name="getSessionPoolsHighCount()"/>
      <method name="getSessionPoolsTotalCount()"/>
      <method name="pauseConsumption()"/>
      <method name="pauseInsertion()"/>
      <method name="pauseProduction()"/>
      <method name="resumeConsumption()"/>
      <method name="resumeInsertion()"/>
      <method name="resumeProduction()"/>
      <method name="getHealthState()"/>
      <method name="getDestinations()"/>
      <method name="getSessionPoolRuntimes()"/>
    </class>
    <class name="JMSSessionPoolRuntimeMBean">
      <method name="getConnectionConsumersCurrentCount()"/>
      <method name="getConnectionConsumersHighCount()"/>
      <method name="getConnectionConsumersTotalCount()"/>
      <method name="getConnectionConsumers()"/>
      <method name="getJMSServer()"/>
    </class>
    <class name="JMSSessionRuntimeMBean">
      <method name="isTransacted()"/>
      <method name="getAcknowledgeMode()"/>
      <method name="getBytesPendingCount()"/>
      <method name="getBytesReceivedCount()"/>
      <method name="getBytesSentCount()"/>
      <method name="getConsumersCurrentCount()"/>
      <method name="getConsumersHighCount()"/>
      <method name="getConsumersTotalCount()"/>
      <method name="getMessagesPendingCount()"/>
      <method name="getMessagesReceivedCount()"/>
      <method name="getMessagesSentCount()"/>
      <method name="getProducersCurrentCount()"/>
      <method name="getProducersHighCount()"/>
      <method name="getProducersTotalCount()"/>
      <method name="getConsumers()"/>
      <method name="getProducers()"/>
    </class>
    <class name="JRockitRuntimeMBean">
      <method name="isConcurrent()"/>
      <method name="isConstructorInvocationCountEnabled(java.lang.reflect.Constructor)"/>
      <method name="isConstructorTimingEnabled(java.lang.reflect.Constructor)"/>
      <method name="isExceptionCountEnabled(java.lang.Class)"/>
      <method name="isGCHandlesCompaction()"/>
      <method name="isGenerational()"/>
      <method name="isIncremental()"/>
      <method name="isMethodInvocationCountEnabled(java.lang.reflect.Method)"/>
      <method name="isMethodTimingEnabled(java.lang.reflect.Method)"/>
      <method name="isParallel()"/>
      <method name="getAllProcessorsAverageLoad()"/>
      <method name="getJvmProcessorLoad()"/>
      <method name="getNumberOfDaemonThreads()"/>
      <method name="getNumberOfProcessors()"/>
      <method name="getTotalNumberOfThreads()"/>
      <method name="getGcAlgorithm()"/>
      <method name="getJVMDescription()"/>
      <method name="getName()"/>
      <method name="getVendor()"/>
      <method name="getVersion()"/>
      <method name="getConstructorInvocationCount(java.lang.reflect.Constructor)"/>
      <method name="getConstructorTiming(java.lang.reflect.Constructor)"/>
      <method name="getExceptionCount(java.lang.Class)"/>
      <method name="getFreeHeap()"/>
      <method name="getFreePhysicalMemory()"/>
      <method name="getLastGCEnd()"/>
      <method name="getLastGCStart()"/>
      <method name="getMethodInvocationCount(java.lang.reflect.Method)"/>
      <method name="getMethodTiming(java.lang.reflect.Method)"/>
      <method name="getTotalGarbageCollectionCount()"/>
      <method name="getTotalGarbageCollectionTime()"/>
      <method name="getTotalHeap()"/>
      <method name="getTotalNurserySize()"/>
      <method name="getTotalPhysicalMemory()"/>
      <method name="getUsedHeap()"/>
      <method name="getUsedPhysicalMemory()"/>
    </class>
    <class name="JTAPartitionRuntimeMBean">
      <method name="getRegisteredNonXAResourceNames()"/>
      <method name="getRegisteredResourceNames()"/>
      <method name="getJTATransactions()"/>
      <method name="getTransactionsOlderThan(java.lang.Integer)"/>
      <method name="getNonXAResourceRuntimeMBeans()"/>
      <method name="getTransactionResourceRuntimeMBeans()"/>
    </class>
    <class name="JTARecoveryRuntimeMBean">
      <method name="isActive()"/>
      <method name="getInitialRecoveredTransactionTotalCount()"/>
      <method name="getInitialRecoveredUnloggedTransactionTotalCount()"/>
      <method name="getRecoveredTransactionCompletionPercent()"/>
      <method name="getRecoveredUnloggedTransactionCompletionPercent()"/>
    </class>
    <class name="JTARuntimeMBean">
      <method name="getActiveTransactionsTotalCount()"/>
      <method name="getRegisteredNonXAResourceNames()"/>
      <method name="getRegisteredResourceNames()"/>
      <method name="forceGlobalCommit(javax.transaction.xa.Xid)"/>
      <method name="forceGlobalRollback(javax.transaction.xa.Xid)"/>
      <method name="forceLocalCommit(javax.transaction.xa.Xid)"/>
      <method name="forceLocalRollback(javax.transaction.xa.Xid)"/>
      <method name="getHealthState()"/>
      <method name="getRecoveryRuntimeMBean(java.lang.String)"/>
      <method name="getRecoveryRuntimeMBeans()"/>
      <method name="getJTATransaction(java.lang.String)"/>
      <method name="getJTATransactions()"/>
      <method name="getTransactionsOlderThan(java.lang.Integer)"/>
      <method name="getNonXAResourceRuntimeMBeans()"/>
      <method name="getTransactionLogStoreRuntimeMBean()"/>
      <method name="getTransactionNameRuntimeMBeans()"/>
      <method name="getTransactionResourceRuntimeMBeans()"/>
    </class>
    <class name="JTAStatisticsRuntimeMBean">
      <method name="getTransactionCommittedTotalCount()"/>
      <method name="getTransactionHeuristicsTotalCount()"/>
      <method name="getTransactionRolledBackTotalCount()"/>
      <method name="getTransactionTotalCount()"/>
    </class>
    <class name="JTATransaction">
      <method name="isTransactionLogWritten()"/>
      <method name="getSecondsActiveCurrentCount()"/>
      <method name="getCoordinatorURL()"/>
      <method name="getName()"/>
      <method name="getStatus()"/>
      <method name="getServers()"/>
      <method name="getResourceNamesAndStatus()"/>
      <method name="getServersAndStatus()"/>
      <method name="getUserProperties()"/>
      <method name="getXid()"/>
    </class>
    <class name="JTATransactionStatisticsRuntimeMBean">
      <method name="getSecondsActiveTotalCount()"/>
      <method name="getTransactionAbandonedTotalCount()"/>
      <method name="getTransactionLLRCommittedTotalCount()"/>
      <method name="getTransactionNoResourcesCommittedTotalCount()"/>
      <method name="getTransactionOneResourceOnePhaseCommittedTotalCount()"/>
      <method name="getTransactionReadOnlyOnePhaseCommittedTotalCount()"/>
      <method name="getTransactionRolledBackAppTotalCount()"/>
      <method name="getTransactionRolledBackResourceTotalCount()"/>
      <method name="getTransactionRolledBackSystemTotalCount()"/>
      <method name="getTransactionRolledBackTimeoutTotalCount()"/>
      <method name="getTransactionTwoPhaseCommittedLoggedTotalCount()"/>
      <method name="getTransactionTwoPhaseCommittedNotLoggedTotalCount()"/>
      <method name="getTransactionTwoPhaseCommittedTotalCount()"/>
    </class>
    <class name="JVMRuntimeMBean">
      <method name="getHeapFreePercent()"/>
      <method name="getJavaVMVendor()"/>
      <method name="getJavaVendor()"/>
      <method name="getJavaVersion()"/>
      <method name="getOSName()"/>
      <method name="getOSVersion()"/>
      <method name="getThreadStackDump()"/>
      <method name="getHeapFreeCurrent()"/>
      <method name="getHeapSizeCurrent()"/>
      <method name="getHeapSizeMax()"/>
      <method name="getUptime()"/>
    </class>
    <class name="JaxRsApplicationRuntimeMBean">
      <method name="isWadlGenerationEnabled()"/>
      <method name="getLastResponseCode()"/>
      <method name="getApplicationClass()"/>
      <method name="getApplicationName()"/>
      <method name="getLastErrorMapper()"/>
      <method name="getLastHttpMethod()"/>
      <method name="getResourcePattern()"/>
      <method name="getRootPath()"/>
      <method name="getWadlUrl()"/>
      <method name="getLastErrorDetails()"/>
      <method name="getHttpMethodCounts()"/>
      <method name="getResponseCodeCounts()"/>
      <method name="getProperties()"/>
      <method name="getAllRegisteredClasses()"/>
      <method name="getRegisteredClasses()"/>
      <method name="getRegisteredInstances()"/>
      <method name="getErrorCount()"/>
      <method name="getLastErrorTime()"/>
      <method name="getStartTime()"/>
      <method name="setWadlGenerationEnabled(boolean)"/>
      <method name="getExceptionMapperStatistics()"/>
      <method name="getRequestStatistics()"/>
      <method name="getResourceConfig()"/>
      <method name="lookupRootResource(java.lang.String)"/>
      <method name="lookupRootResourcesByClass(java.lang.String)"/>
      <method name="getRootResources()"/>
      <method name="getRootResourcesByClass()"/>
      <method name="getResponseStatistics()"/>
      <method name="lookupRootResourcesByUri(java.lang.String)"/>
      <method name="getRootResourcesByUri()"/>
      <method name="getServlet()"/>
    </class>
    <class name="JaxRsExceptionMapperStatisticsRuntimeMBean">
      <method name="getExceptionMapperCount()"/>
      <method name="getSuccessfulMappings()"/>
      <method name="getTotalMappings()"/>
      <method name="getUnsuccessfulMappings()"/>
    </class>
    <class name="JaxRsExecutionStatisticsRuntimeMBean">
      <method name="getRequestRateLast15m()"/>
      <method name="getRequestRateLast15s()"/>
      <method name="getRequestRateLast1h()"/>
      <method name="getRequestRateLast1m()"/>
      <method name="getRequestRateLast1s()"/>
      <method name="getRequestRateTotal()"/>
      <method name="getAvgTimeLast15m()"/>
      <method name="getAvgTimeLast15s()"/>
      <method name="getAvgTimeLast1h()"/>
      <method name="getAvgTimeLast1m()"/>
      <method name="getAvgTimeLast1s()"/>
      <method name="getAvgTimeTotal()"/>
      <method name="getMaxTimeLast15m()"/>
      <method name="getMaxTimeLast15s()"/>
      <method name="getMaxTimeLast1h()"/>
      <method name="getMaxTimeLast1m()"/>
      <method name="getMaxTimeLast1s()"/>
      <method name="getMaxTimeTotal()"/>
      <method name="getMinTimeLast15m()"/>
      <method name="getMinTimeLast15s()"/>
      <method name="getMinTimeLast1h()"/>
      <method name="getMinTimeLast1m()"/>
      <method name="getMinTimeLast1s()"/>
      <method name="getMinTimeTotal()"/>
      <method name="getRequestCountLast15m()"/>
      <method name="getRequestCountLast15s()"/>
      <method name="getRequestCountLast1h()"/>
      <method name="getRequestCountLast1m()"/>
      <method name="getRequestCountLast1s()"/>
      <method name="getRequestCountTotal()"/>
    </class>
    <class name="JaxRsMonitoringInfoRuntimeMBean">
      <method name="getExecutionTimeAverage()"/>
      <method name="getExecutionTimeHigh()"/>
      <method name="getExecutionTimeLow()"/>
      <method name="getExecutionTimeTotal()"/>
      <method name="getInvocationCount()"/>
      <method name="getLastInvocationTime()"/>
      <method name="getStartTime()"/>
    </class>
    <class name="JaxRsResourceConfigTypeRuntimeMBean">
      <method name="getClassName()"/>
      <method name="getProperties()"/>
    </class>
    <class name="JaxRsResourceMethodBaseRuntimeMBean">
      <method name="isExtended()"/>
      <method name="getClassName()"/>
      <method name="getMethodName()"/>
      <method name="getPath()"/>
      <method name="getReturnType()"/>
      <method name="getParameterTypes()"/>
    </class>
    <class name="JaxRsResourceMethodRuntimeMBean">
      <method name="isSubResource()"/>
      <method name="isSubResourceMethod()"/>
      <method name="getHttpMethod()"/>
      <method name="getConsumingMediaTypes()"/>
      <method name="getProducingMediaTypes()"/>
    </class>
    <class name="JaxRsResourceRuntimeMBean">
      <method name="getClassName()"/>
      <method name="getResourceType()"/>
      <field name="TYPE_EJB"/>
      <field name="TYPE_POJO"/>
    </class>
    <class name="JaxRsResponseStatisticsRuntimeMBean">
      <method name="getLastResponseCode()"/>
      <method name="getResponseCodes()"/>
    </class>
    <class name="JaxRsSubResourceLocatorRuntimeMBean" members="concealed"/>
    <class name="JaxRsUriRuntimeMBean">
      <method name="isExtended()"/>
      <method name="getPath()"/>
      <method name="getMethodsStatistics()"/>
      <method name="getRequestStatistics()"/>
      <method name="lookupResourceMethods(java.lang.String)"/>
      <method name="getResourceMethods()"/>
      <method name="lookupSubResourceLocators(java.lang.String)"/>
      <method name="getSubResourceLocators()"/>
    </class>
    <class name="JobRuntimeMBean">
      <method name="getTimerListener()"/>
      <method name="getDescription()"/>
      <method name="getID()"/>
      <method name="getState()"/>
      <method name="getLastLocalExecutionTime()"/>
      <method name="getLocalExecutionCount()"/>
      <method name="getPeriod()"/>
      <method name="getTimeout()"/>
      <field name="CANCELLED"/>
      <field name="RUNNING"/>
      <method name="cancel()"/>
    </class>
    <class name="JobSchedulerRuntimeMBean">
      <method name="getJob(java.lang.String)"/>
      <method name="getExecutedJobs()"/>
    </class>
    <class name="JoltConnectionPoolRuntimeMBean">
      <method name="isSecurityContextPropagation()"/>
      <method name="getMaxCapacity()"/>
      <method name="resetConnectionPool()"/>
      <method name="getPoolName()"/>
      <method name="getPoolState()"/>
      <method name="getConnections()"/>
    </class>
    <class name="JoltConnectionRuntimeMBean">
      <method name="isAlive()"/>
      <method name="isInTransaction()"/>
      <method name="getErrorCount()"/>
      <method name="getPendingRequestCount()"/>
      <method name="getRequestCount()"/>
      <method name="getAddress()"/>
      <method name="getLastAccessTime()"/>
    </class>
    <class name="JoltConnectionServiceRuntimeMBean">
      <method name="getConnectionPoolCount()"/>
      <method name="getConnectionPools()"/>
    </class>
    <class name="KodoDataCacheRuntimeMBean">
      <method name="getCacheHitRatio()"/>
      <method name="getCacheHitCount()"/>
      <method name="getCacheMissCount()"/>
      <method name="getTotalCurrentEntries()"/>
      <method name="getStatistics()"/>
      <method name="clear()"/>
    </class>
    <class name="KodoPersistenceUnitRuntimeMBean">
      <method name="getDataCacheRuntimes()"/>
      <method name="getQueryCacheRuntimes()"/>
      <method name="getQueryCompilationCacheRuntime()"/>
    </class>
    <class name="KodoQueryCacheRuntimeMBean">
      <method name="getCacheHitRatio()"/>
      <method name="getCacheHitCount()"/>
      <method name="getCacheMissCount()"/>
      <method name="getTotalCurrentEntries()"/>
      <method name="getStatistics()"/>
      <method name="clear()"/>
    </class>
    <class name="KodoQueryCompilationCacheRuntimeMBean">
      <method name="getTotalCurrentEntries()"/>
      <method name="clear()"/>
    </class>
    <class name="LdapAuthenticatorRuntimeMBean">
      <method name="getGroupCacheStatStartTimeStamp()"/>
      <method name="getUserCacheStatStartTimeStamp()"/>
      <method name="getGroupCacheHits()"/>
      <method name="getGroupCacheQueries()"/>
      <method name="getGroupCacheSize()"/>
      <method name="getUserCacheHits()"/>
      <method name="getUserCacheQueries()"/>
      <method name="getUserCacheSize()"/>
    </class>
    <class name="LibDeploymentRuntimeMBean">
      <method name="getImplementationVersion()"/>
      <method name="getLibraryIdentifier()"/>
      <method name="getLibraryName()"/>
      <method name="getPartitionName()"/>
      <method name="getSpecificationVersion()"/>
      <method name="redeploy()"/>
      <method name="redeploy(java.lang.String[],java.util.Properties)"/>
      <method name="undeploy()"/>
      <method name="undeploy(java.lang.String[],java.util.Properties)"/>
    </class>
    <class name="LibraryRuntimeMBean">
      <method name="isReferenced()"/>
      <method name="getImplementationVersion()"/>
      <method name="getLibraryIdentifier()"/>
      <method name="getLibraryName()"/>
      <method name="getSpecificationVersion()"/>
      <method name="getReferencingRuntimes()"/>
    </class>
    <class name="LogBroadcasterRuntimeMBean">
      <method name="getMessagesLogged()"/>
      <field name="BROADCASTER_NAME"/>
    </class>
    <class name="LogRuntimeMBean">
      <method name="isLogFileStreamOpened()"/>
      <method name="ensureLogOpened()"/>
      <method name="flushLog()"/>
      <method name="forceLogRotation()"/>
    </class>
    <class name="MANAsyncReplicationRuntimeMBean" members="concealed"/>
    <class name="MANReplicationRuntimeMBean">
      <method name="getRemoteClusterReachable()"/>
      <method name="getSecondaryServerName()"/>
      <method name="getActiveServersInRemoteCluster()"/>
    </class>
    <class name="MailSessionRuntimeMBean" members="concealed"/>
    <class name="ManagedExecutorServiceRuntimeMBean">
      <method name="getApplicationName()"/>
      <method name="getModuleName()"/>
      <method name="getPartitionName()"/>
      <method name="getCompletedLongRunningRequests()"/>
      <method name="getCompletedShortRunningRequests()"/>
      <method name="getFailedRequests()"/>
      <method name="getRejectedLongRunningRequests()"/>
      <method name="getRejectedShortRunningRequests()"/>
      <method name="getRunningLongRunningRequests()"/>
      <method name="getSubmitedShortRunningRequests()"/>
      <method name="getSubmittedLongRunningRequests()"/>
      <method name="getWorkManager()"/>
    </class>
    <class name="ManagedScheduledExecutorServiceRuntimeMBean" members="concealed"/>
    <class name="ManagedThreadFactoryRuntimeMBean">
      <method name="getRunningThreadsCount()"/>
      <method name="getApplicationName()"/>
      <method name="getModuleName()"/>
      <method name="getPartitionName()"/>
      <method name="getCompletedThreadsCount()"/>
      <method name="getRejectedNewThreadRequests()"/>
    </class>
    <class name="MaxThreadsConstraintRuntimeMBean">
      <method name="getConfiguredCount()"/>
      <method name="getCount()"/>
      <method name="getDeferredRequests()"/>
      <method name="getExecutingRequests()"/>
    </class>
    <class name="MessageCursorRuntimeMBean">
      <method name="getMessage(java.lang.String,java.lang.Long)"/>
      <method name="getMessage(java.lang.String,java.lang.String)"/>
    </class>
    <class name="MessageDrivenControlEJBRuntimeMBean">
      <method name="printMDBStatus(java.lang.String,java.lang.String)"/>
      <method name="resumeMDBs(java.lang.String,java.lang.String)"/>
      <method name="suspendMDBs(java.lang.String,java.lang.String)"/>
    </class>
    <class name="MessageDrivenEJBRuntimeMBean">
      <method name="isJMSConnectionAlive()"/>
      <method name="resume()"/>
      <method name="suspend()"/>
      <method name="getSuspendCount()"/>
      <method name="getConnectionStatus()"/>
      <method name="getDestination()"/>
      <method name="getJmsClientID()"/>
      <method name="getLastExceptionAsString()"/>
      <method name="getMDBStatus()"/>
      <method name="getLastException()"/>
      <method name="getProcessedMessageCount()"/>
      <method name="scheduleResume()"/>
      <method name="scheduleSuspend()"/>
      <method name="getHealthState()"/>
      <method name="getPoolRuntime()"/>
      <method name="getTimerRuntime()"/>
    </class>
    <class name="MessagingBridgeRuntimeMBean">
      <method name="getDescription()"/>
      <method name="getState()"/>
    </class>
    <class name="MigratableServiceCoordinatorRuntimeMBean">
      <method name="migrate(weblogic.management.configuration.MigratableTargetMBean,weblogic.management.configuration.ServerMBean)"/>
      <method name="migrate(weblogic.management.configuration.MigratableTargetMBean,weblogic.management.configuration.ServerMBean,boolean,boolean)"/>
      <method name="migrateJTA(weblogic.management.configuration.MigratableTargetMBean,weblogic.management.configuration.ServerMBean,boolean,boolean)"/>
      <method name="migrateSingleton(weblogic.management.configuration.SingletonServiceMBean,weblogic.management.configuration.ServerMBean)"/>
    </class>
    <class name="MigrationDataRuntimeMBean">
      <method name="getStatus()"/>
      <method name="getClusterMasterName()"/>
      <method name="getClusterName()"/>
      <method name="getMachineMigratedFrom()"/>
      <method name="getMachineMigratedTo()"/>
      <method name="getServerName()"/>
      <method name="getMachinesAttempted()"/>
      <method name="getMigrationEndTime()"/>
      <method name="getMigrationStartTime()"/>
      <field name="FAILED"/>
      <field name="IN_PROGRESS"/>
      <field name="SUCCEEDED"/>
    </class>
    <class name="MigrationException" members="concealed"/>
    <class name="MinThreadsConstraintRuntimeMBean">
      <method name="isPartitionLimitReached()"/>
      <method name="getConfiguredCount()"/>
      <method name="getCount()"/>
      <method name="getExecutingRequests()"/>
      <method name="getMustRunCount()"/>
      <method name="getPendingRequests()"/>
      <method name="getCompletedRequests()"/>
      <method name="getCurrentWaitTime()"/>
      <method name="getMaxWaitTime()"/>
      <method name="getOutOfOrderExecutionCount()"/>
    </class>
    <class name="NodeManagerRuntimeMBean" members="concealed"/>
    <class name="NonXAResourceRuntimeMBean">
      <method name="getNonXAResourceName()"/>
    </class>
    <class name="ONSClientRuntimeMBean">
      <method name="getONSDaemonRuntimes()"/>
    </class>
    <class name="ONSDaemonRuntimeMBean">
      <method name="getPort()"/>
      <method name="getHost()"/>
      <method name="getStatus()"/>
      <method name="ping()"/>
    </class>
    <class name="OwsmSecurityPolicyRuntimeMBean" members="concealed"/>
    <class name="PSAssemblyRuntimeMBean">
      <method name="getMapEntries()"/>
      <method name="getMapEntries(int)"/>
    </class>
    <class name="PSEntryCursorRuntimeMBean">
      <method name="remove(java.lang.String,java.lang.Integer)"/>
      <method name="update(java.lang.String,java.lang.Integer,javax.management.openmbean.CompositeData)"/>
      <method name="getMember(java.lang.String,java.lang.Integer)"/>
    </class>
    <class name="PageFlowActionRuntimeMBean">
      <method name="getActionName()"/>
      <method name="getExceptionCount()"/>
      <method name="getHandledExceptionCount()"/>
      <method name="getHandledExceptionDispatchTimeAverage()"/>
      <method name="getHandledExceptionDispatchTimeHigh()"/>
      <method name="getHandledExceptionDispatchTimeLow()"/>
      <method name="getHandledExceptionDispatchTimeTotal()"/>
      <method name="getSuccessCount()"/>
      <method name="getSuccessDispatchTimeAverage()"/>
      <method name="getSuccessDispatchTimeHigh()"/>
      <method name="getSuccessDispatchTimeLow()"/>
      <method name="getSuccessDispatchTimeTotal()"/>
      <method name="getLastExceptions()"/>
    </class>
    <class name="PageFlowError">
      <method name="getMessage()"/>
      <method name="getStackTraceAsString()"/>
      <method name="getTimeStamp()"/>
    </class>
    <class name="PageFlowRuntimeMBean">
      <method name="getClassName()"/>
      <method name="getCreateCount()"/>
      <method name="getDestroyCount()"/>
      <method name="getLastResetTime()"/>
      <method name="reset()"/>
      <method name="setNumExceptionsToKeep(int)"/>
      <method name="getAction(java.lang.String)"/>
      <method name="getActions()"/>
    </class>
    <class name="PageFlowsRuntimeMBean">
      <method name="getAppName()"/>
      <method name="getContextPath()"/>
      <method name="getHttpServerName()"/>
      <method name="getServerName()"/>
      <method name="reset()"/>
      <method name="getPageFlow(java.lang.String)"/>
      <method name="getPageFlows()"/>
    </class>
    <class name="PartitionFairShareRuntimeMBean">
      <method name="getPartitionAdjuster()"/>
      <method name="getConfiguredFairShare()"/>
      <method name="getFairShare()"/>
      <method name="getThreadUse()"/>
    </class>
    <class name="PartitionLifeCycleModel" members="concealed"/>
    <class name="PartitionLifeCycleRuntimeMBean">
      <method name="getState()"/>
      <method name="getState(java.lang.String)"/>
      <method name="getState(weblogic.management.configuration.ServerMBean)"/>
      <method name="getSubState()"/>
      <method name="getSubState(java.lang.String)"/>
      <method name="getSubState(weblogic.management.configuration.ServerMBean)"/>
      <method name="purgeTasks()"/>
      <method name="boot()"/>
      <method name="boot(java.lang.String[])"/>
      <method name="boot(weblogic.management.configuration.TargetMBean[])"/>
      <method name="forceShutdown()"/>
      <method name="forceShutdown(java.lang.String[])"/>
      <method name="forceShutdown(weblogic.management.configuration.TargetMBean[])"/>
      <method name="forceSuspend()"/>
      <method name="forceSuspend(java.lang.String[])"/>
      <method name="forceSuspend(weblogic.management.configuration.TargetMBean[])"/>
      <method name="halt()"/>
      <method name="halt(java.lang.String[])"/>
      <method name="halt(weblogic.management.configuration.TargetMBean[])"/>
      <method name="lookupTask(java.lang.String)"/>
      <method name="resume()"/>
      <method name="resume(java.lang.String[])"/>
      <method name="resume(weblogic.management.configuration.TargetMBean[])"/>
      <method name="shutdown()"/>
      <method name="shutdown(int,boolean)"/>
      <method name="shutdown(int,boolean,boolean)"/>
      <method name="shutdown(int,boolean,boolean,java.lang.String[])"/>
      <method name="shutdown(int,boolean,boolean,weblogic.management.configuration.TargetMBean[])"/>
      <method name="shutdown(int,boolean,java.lang.String[])"/>
      <method name="shutdown(int,boolean,weblogic.management.configuration.TargetMBean[])"/>
      <method name="shutdown(java.lang.String[])"/>
      <method name="shutdown(weblogic.management.configuration.TargetMBean[])"/>
      <method name="start()"/>
      <method name="start(java.lang.String,int)"/>
      <method name="start(java.lang.String[])"/>
      <method name="start(weblogic.management.configuration.TargetMBean[])"/>
      <method name="startInAdmin()"/>
      <method name="startInAdmin(java.lang.String[])"/>
      <method name="startInAdmin(weblogic.management.configuration.TargetMBean[])"/>
      <method name="suspend()"/>
      <method name="suspend(int,boolean)"/>
      <method name="suspend(int,boolean,java.lang.String[])"/>
      <method name="suspend(int,boolean,weblogic.management.configuration.TargetMBean[])"/>
      <method name="suspend(java.lang.String[])"/>
      <method name="suspend(weblogic.management.configuration.TargetMBean[])"/>
      <method name="getTasks()"/>
      <method name="lookupResourceGroupLifeCycleRuntime(java.lang.String)"/>
      <method name="getResourceGroupLifeCycleRuntimes()"/>
    </class>
    <class name="PartitionLifeCycleTaskRuntimeMBean" members="concealed"/>
    <class name="PartitionMinThreadsConstraintCapRuntimeMBean">
      <method name="getExecutingRequests()"/>
      <method name="getSumMinThreadsConstraints()"/>
    </class>
    <class name="PartitionResourceGroupTaskState" members="concealed"/>
    <class name="PartitionResourceMetricsRuntimeMBean">
      <method name="isRCMMetricsDataAvailable()"/>
      <method name="getCpuUtilizationHistoricalData()"/>
      <method name="getRetainedHeapHistoricalData()"/>
      <method name="getAllocatedMemory()"/>
      <method name="getCpuTimeNanos()"/>
      <method name="getCurrentOpenFileCount()"/>
      <method name="getCurrentOpenFileDescriptorCount()"/>
      <method name="getCurrentOpenSocketCount()"/>
      <method name="getFileBytesRead()"/>
      <method name="getFileBytesWritten()"/>
      <method name="getNetworkBytesRead()"/>
      <method name="getNetworkBytesWritten()"/>
      <method name="getThreadCount()"/>
      <method name="getTotalOpenedFileCount()"/>
      <method name="getTotalOpenedFileDescriptorCount()"/>
      <method name="getTotalOpenedSocketCount()"/>
    </class>
    <class name="PartitionRuntimeMBean">
      <method name="isRestartRequired()"/>
      <method name="getName()"/>
      <method name="getPartitionID()"/>
      <method name="getRgState(java.lang.String)"/>
      <method name="getServerName()"/>
      <method name="getState()"/>
      <method name="getSubState()"/>
      <method name="getSystemFileSystemRoot()"/>
      <method name="getUserFileSystemRoot()"/>
      <method name="getOverallHealthStateJMX()"/>
      <method name="getSubsystemHealthStatesJMX()"/>
      <method name="forceShutdown()"/>
      <method name="forceShutdownResourceGroup(java.lang.String)"/>
      <method name="forceSuspend()"/>
      <method name="forceSuspendResourceGroup(java.lang.String)"/>
      <method name="halt()"/>
      <method name="resume()"/>
      <method name="resumeResourceGroup(java.lang.String)"/>
      <method name="shutdown()"/>
      <method name="shutdown(int,boolean)"/>
      <method name="shutdown(int,boolean,boolean)"/>
      <method name="shutdownResourceGroup(java.lang.String)"/>
      <method name="shutdownResourceGroup(java.lang.String,int,boolean)"/>
      <method name="shutdownResourceGroup(java.lang.String,int,boolean,boolean)"/>
      <method name="startResourceGroup(java.lang.String)"/>
      <method name="startResourceGroupInAdmin(java.lang.String)"/>
      <method name="suspend()"/>
      <method name="suspend(int,boolean)"/>
      <method name="suspendResourceGroup(java.lang.String)"/>
      <method name="suspendResourceGroup(java.lang.String,int,boolean)"/>
      <method name="getOverallHealthState()"/>
      <method name="getSubsystemHealthStates()"/>
      <method name="lookupApplicationRuntime(java.lang.String)"/>
      <method name="getApplicationRuntimes()"/>
      <method name="getBatchJobRepositoryRuntime()"/>
      <method name="getConcurrentManagedObjectsRuntime()"/>
      <method name="getConnectorServiceRuntime()"/>
      <method name="getJDBCPartitionRuntime()"/>
      <method name="getJMSRuntime()"/>
      <method name="getJTAPartitionRuntime()"/>
      <method name="lookupLibraryRuntime(java.lang.String)"/>
      <method name="getLibraryRuntimes()"/>
      <method name="getMailSessionRuntimes()"/>
      <method name="getMaxThreadsConstraintRuntimes()"/>
      <method name="lookupMessagingBridgeRuntime(java.lang.String)"/>
      <method name="getMessagingBridgeRuntimes()"/>
      <method name="getMinThreadsConstraintRuntimes()"/>
      <method name="getPartitionResourceMetricsRuntime()"/>
      <method name="getPartitionWorkManagerRuntime()"/>
      <method name="getPathServiceRuntimes()"/>
      <method name="lookupPersistentStoreRuntime(java.lang.String)"/>
      <method name="getPersistentStoreRuntimes()"/>
      <method name="getRequestClassRuntimes()"/>
      <method name="getResourceManagerRuntime()"/>
      <method name="getSAFRuntime()"/>
      <method name="getWLDFPartitionRuntime()"/>
      <method name="getWorkManagerRuntimes()"/>
      <method name="getWseeClusterFrontEndRuntime()"/>
    </class>
    <class name="PartitionUserFileSystemManagerMBean">
      <method name="deleteFile(java.lang.String)"/>
      <method name="exists(java.lang.String)"/>
      <method name="mkdir(java.lang.String)"/>
      <method name="rmdir(java.lang.String)"/>
      <method name="list(java.lang.String)"/>
    </class>
    <class name="PartitionWorkManagerRuntimeMBean">
      <method name="getOverloadRejectedRequestsCount()"/>
      <method name="getPendingUserRequestCount()"/>
      <method name="getSharedCapacityForWorkManagers()"/>
    </class>
    <class name="PathServiceRuntimeMBean">
      <method name="getAssemblies()"/>
    </class>
    <class name="PersistenceUnitRuntimeMBean">
      <method name="getPersistenceUnitName()"/>
    </class>
    <class name="PersistentStoreConnectionRuntimeMBean">
      <method name="getCreateCount()"/>
      <method name="getDeleteCount()"/>
      <method name="getObjectCount()"/>
      <method name="getReadCount()"/>
      <method name="getUpdateCount()"/>
    </class>
    <class name="PersistentStoreRuntimeMBean">
      <method name="getAllocatedIoBufferBytes()"/>
      <method name="getAllocatedWindowBufferBytes()"/>
      <method name="getCreateCount()"/>
      <method name="getDeleteCount()"/>
      <method name="getObjectCount()"/>
      <method name="getPhysicalWriteCount()"/>
      <method name="getReadCount()"/>
      <method name="getUpdateCount()"/>
      <method name="getHealthState()"/>
      <method name="getConnections()"/>
    </class>
    <class name="ProgressMBean" members="concealed"/>
    <class name="ProviderRuntimeMBean">
      <method name="getProviderName()"/>
    </class>
    <class name="QueryCacheRuntimeMBean">
      <method name="getTotalCachedQueriesCount()"/>
      <method name="getCacheAccessCount()"/>
      <method name="getCacheHitCount()"/>
      <method name="getCacheMissByBeanEvictionCount()"/>
      <method name="getCacheMissByDependentQueryMissCount()"/>
      <method name="getCacheMissByRelatedQueryMissCount()"/>
      <method name="getCacheMissByTimeoutCount()"/>
      <method name="getTotalCacheMissCount()"/>
    </class>
    <class name="RealmRuntimeMBean">
      <method name="getName()"/>
      <method name="lookupAuthenticatorRuntime(java.lang.String)"/>
      <method name="getAuthenticatorRuntimes()"/>
      <method name="getUserLockoutManagerRuntime()"/>
    </class>
    <class name="RecourseActionEventVBean">
      <method name="isActionSuccessful()"/>
      <method name="isActive()"/>
      <method name="isInitiated()"/>
      <method name="getAction()"/>
      <method name="getExecutionDate()"/>
      <method name="getUsage()"/>
    </class>
    <class name="ReplicationRuntimeMBean">
      <method name="getSecondaryServerDetails()"/>
      <method name="getDetailedSecondariesDistribution()"/>
      <method name="getPrimaryCount()"/>
      <method name="getSecondaryCount()"/>
    </class>
    <class name="RequestClassRuntimeMBean">
      <method name="getPendingRequestCount()"/>
      <method name="getRequestClassType()"/>
      <method name="getCompletedCount()"/>
      <method name="getTotalThreadUse()"/>
      <method name="getVirtualTimeIncrement()"/>
      <field name="CONTEXT"/>
      <field name="FAIR_SHARE"/>
      <field name="RESPONSE_TIME"/>
    </class>
    <class name="ResourceGroupLifeCycleRuntimeMBean">
      <method name="getState()"/>
      <method name="getState(java.lang.String)"/>
      <method name="purgeTasks()"/>
      <method name="forceShutdown()"/>
      <method name="forceShutdown(java.lang.String[])"/>
      <method name="forceShutdown(weblogic.management.configuration.TargetMBean[])"/>
      <method name="forceSuspend()"/>
      <method name="forceSuspend(java.lang.String[])"/>
      <method name="forceSuspend(weblogic.management.configuration.TargetMBean[])"/>
      <method name="lookupTask(java.lang.String)"/>
      <method name="resume()"/>
      <method name="resume(java.lang.String[])"/>
      <method name="resume(weblogic.management.configuration.TargetMBean[])"/>
      <method name="shutdown()"/>
      <method name="shutdown(int,boolean)"/>
      <method name="shutdown(int,boolean,boolean)"/>
      <method name="shutdown(int,boolean,boolean,java.lang.String[])"/>
      <method name="shutdown(int,boolean,boolean,weblogic.management.configuration.TargetMBean[])"/>
      <method name="shutdown(int,boolean,java.lang.String[])"/>
      <method name="shutdown(int,boolean,weblogic.management.configuration.TargetMBean[])"/>
      <method name="shutdown(java.lang.String[])"/>
      <method name="shutdown(weblogic.management.configuration.TargetMBean[])"/>
      <method name="start()"/>
      <method name="start(java.lang.String[])"/>
      <method name="start(weblogic.management.configuration.TargetMBean[])"/>
      <method name="startInAdmin()"/>
      <method name="startInAdmin(java.lang.String[])"/>
      <method name="startInAdmin(weblogic.management.configuration.TargetMBean[])"/>
      <method name="suspend()"/>
      <method name="suspend(int,boolean)"/>
      <method name="suspend(int,boolean,java.lang.String[])"/>
      <method name="suspend(int,boolean,weblogic.management.configuration.TargetMBean[])"/>
      <method name="suspend(java.lang.String[])"/>
      <method name="suspend(weblogic.management.configuration.TargetMBean[])"/>
      <method name="getTasks()"/>
    </class>
    <class name="ResourceGroupLifeCycleTaskRuntimeMBean" members="concealed"/>
    <class name="ResourceGroupLifeCycleTaskStatus">
      <field name="COMPLETED"/>
      <field name="FAILED"/>
      <field name="TASK_IN_PROGRESS"/>
    </class>
    <class name="ResourceManagerRuntimeMBean">
      <method name="addResourceRuntime(weblogic.management.runtime.ResourceRuntimeMBean)"/>
      <method name="removeResourceRuntime(weblogic.management.runtime.ResourceRuntimeMBean)"/>
      <method name="lookupResourceRuntime(java.lang.String)"/>
      <method name="lookupResourceRuntimeByResourceType(weblogic.management.runtime.ResourceRuntimeMBean.ResourceType)"/>
      <method name="getResourceRuntimes()"/>
    </class>
    <class name="ResourceRuntimeMBean">
      <method name="getName()"/>
      <method name="getResourceType()"/>
      <method name="getUsage()"/>
      <method name="getFairShareConstraintRuntime()"/>
      <method name="lookupTriggerRuntime(java.lang.String)"/>
      <method name="getTriggerRuntimes()"/>
    </class>
    <class name="RolloutServiceRuntimeMBean" members="concealed"/>
    <class name="RolloutTaskRuntimeMBean" members="concealed"/>
    <class name="RuntimeMBean">
      <method name="addPropertyChangeListener(java.beans.PropertyChangeListener)"/>
      <method name="removePropertyChangeListener(java.beans.PropertyChangeListener)"/>
    </class>
    <class name="SAFAgentRuntimeMBean">
      <method name="isPausedForForwarding()"/>
      <method name="isPausedForIncoming()"/>
      <method name="isPausedForReceiving()"/>
      <method name="getConversationsCurrentCount()"/>
      <method name="getConversationsHighCount()"/>
      <method name="getConversationsTotalCount()"/>
      <method name="getRemoteEndpointsCurrentCount()"/>
      <method name="getRemoteEndpointsHighCount()"/>
      <method name="getRemoteEndpointsTotalCount()"/>
      <method name="pauseForwarding()"/>
      <method name="pauseIncoming()"/>
      <method name="pauseReceiving()"/>
      <method name="resumeForwarding()"/>
      <method name="resumeIncoming()"/>
      <method name="resumeReceiving()"/>
      <method name="getHealthState()"/>
      <method name="getConversations()"/>
      <method name="getRemoteEndpoints()"/>
    </class>
    <class name="SAFConstants">
      <field name="JMS_ENDPOINT"/>
      <field name="QOS_ATLEAST_ONCE"/>
      <field name="QOS_ATMOST_ONCE"/>
      <field name="QOS_EXACTLY_ONCE"/>
      <field name="WS_ENDPOINT"/>
      <field name="WS_JAXWS_ENDPOINT"/>
    </class>
    <class name="SAFConversationRuntimeMBean">
      <method name="getConversationName()"/>
      <method name="getDestinationURL()"/>
      <method name="getQOS()"/>
      <method name="destroy()"/>
    </class>
    <class name="SAFMessageCursorRuntimeMBean">
      <method name="sort(java.lang.String,java.lang.Long,java.lang.String[],java.lang.Boolean[])"/>
    </class>
    <class name="SAFRemoteEndpointRuntimeMBean">
      <method name="isPausedForForwarding()"/>
      <method name="isPausedForIncoming()"/>
      <method name="getLastException()"/>
      <method name="getEndpointType()"/>
      <method name="getMessages(java.lang.String,java.lang.Integer)"/>
      <method name="getOperationState()"/>
      <method name="getURL()"/>
      <method name="getLastTimeConnected()"/>
      <method name="getLastTimeFailedToConnect()"/>
      <method name="getDowntimeHigh()"/>
      <method name="getDowntimeTotal()"/>
      <method name="getUptimeHigh()"/>
      <method name="getUptimeTotal()"/>
      <method name="expireAll()"/>
      <method name="pauseForwarding()"/>
      <method name="pauseIncoming()"/>
      <method name="purge()"/>
      <method name="resumeForwarding()"/>
      <method name="resumeIncoming()"/>
    </class>
    <class name="SAFRuntimeMBean">
      <method name="getHealthState()"/>
      <method name="getAgents()"/>
    </class>
    <class name="SAFStatisticsCommonMBean">
      <method name="getBytesCurrentCount()"/>
      <method name="getBytesHighCount()"/>
      <method name="getBytesPendingCount()"/>
      <method name="getBytesReceivedCount()"/>
      <method name="getBytesThresholdTime()"/>
      <method name="getFailedMessagesTotal()"/>
      <method name="getMessagesCurrentCount()"/>
      <method name="getMessagesHighCount()"/>
      <method name="getMessagesPendingCount()"/>
      <method name="getMessagesReceivedCount()"/>
      <method name="getMessagesThresholdTime()"/>
    </class>
    <class name="SNMPAgentRuntimeMBean">
      <method name="isRunning()"/>
      <method name="getFailedAuthenticationCount()"/>
      <method name="getFailedAuthorizationCount()"/>
      <method name="getFailedEncryptionCount()"/>
      <method name="getMasterAgentXPort()"/>
      <method name="getUDPListenPort()"/>
      <method name="getSNMPAgentName()"/>
      <method name="outputCustomMBeansMIBModule()"/>
      <method name="getAttributeChangeTrapCount()"/>
      <method name="getCounterMonitorTrapCount()"/>
      <method name="getGaugeMonitorTrapCount()"/>
      <method name="getLogMessageTrapCount()"/>
      <method name="getMonitorTrapCount()"/>
      <method name="getServerStartTrapCount()"/>
      <method name="getServerStopTrapCount()"/>
      <method name="getStringMonitorTrapCount()"/>
      <method name="invalidateLocalizedKeyCache(java.lang.String)"/>
    </class>
    <class name="ScalingTaskRuntimeMBean">
      <method name="isSuccess()"/>
      <method name="getClusterName()"/>
      <method name="getScalingType()"/>
      <method name="getScaledInstanceNames()"/>
      <method name="getSelectedInstanceNames()"/>
      <method name="getSelectedInstanceMetadata()"/>
    </class>
    <class name="ServerChannelRuntimeMBean">
      <method name="getAssociatedVirtualTargetName()"/>
      <method name="getChannelName()"/>
      <method name="getPublicURL()"/>
      <method name="getAcceptCount()"/>
      <method name="getBytesReceivedCount()"/>
      <method name="getBytesSentCount()"/>
      <method name="getConnectionsCount()"/>
      <method name="getMessagesReceivedCount()"/>
      <method name="getMessagesSentCount()"/>
      <method name="getServerConnectionRuntimes()"/>
    </class>
    <class name="ServerConnectionRuntime">
      <method name="getBytesReceivedCount()"/>
      <method name="getBytesSentCount()"/>
      <method name="getConnectTime()"/>
      <method name="getMessagesReceivedCount()"/>
      <method name="getMessagesSentCount()"/>
      <method name="getSocketRuntime()"/>
    </class>
    <class name="ServerLifeCycleRuntimeMBean">
      <method name="getNodeManagerRestartCount()"/>
      <method name="getIPv4URL(java.lang.String)"/>
      <method name="getIPv6URL(java.lang.String)"/>
      <method name="getMiddlewareHome()"/>
      <method name="getState()"/>
      <method name="getWeblogicHome()"/>
      <method name="forceShutdown()"/>
      <method name="forceSuspend()"/>
      <method name="lookupTask(java.lang.String)"/>
      <method name="resume()"/>
      <method name="shutdown()"/>
      <method name="shutdown(int,boolean)"/>
      <method name="shutdown(int,boolean,boolean)"/>
      <method name="start()"/>
      <method name="start(boolean)"/>
      <method name="suspend()"/>
      <method name="suspend(int,boolean)"/>
      <method name="getTasks()"/>
    </class>
    <class name="ServerLifeCycleTaskRuntimeMBean">
      <method name="getOperation()"/>
      <method name="getServerName()"/>
    </class>
    <class name="ServerLifeCycleTaskStatus">
      <field name="COMPLETED"/>
      <field name="FAILED"/>
      <field name="TASK_IN_PROGRESS"/>
    </class>
    <class name="ServerLogRuntimeMBean">
      <method name="getLoggedMessagesCountbySeverity()"/>
    </class>
    <class name="ServerMigrationRuntimeMBean">
      <method name="isClusterMaster()"/>
      <method name="getClusterMasterName()"/>
      <method name="getMigrationData()"/>
    </class>
    <class name="ServerRuntimeMBean">
      <method name="isAdminServer()"/>
      <method name="isAdminServerListenPortSecure()"/>
      <method name="isAdministrationPortEnabled()"/>
      <method name="isInSitConfigState()"/>
      <method name="isListenPortEnabled()"/>
      <method name="isRestartRequired()"/>
      <method name="isSSLListenPortEnabled()"/>
      <method name="getAdminServerListenPort()"/>
      <method name="getAdministrationPort()"/>
      <method name="getListenPort()"/>
      <method name="getOpenSocketsCurrentCount()"/>
      <method name="getRestartsTotalCount()"/>
      <method name="getSSLListenPort()"/>
      <method name="getStateVal()"/>
      <method name="getAdminServerHost()"/>
      <method name="getAdministrationURL()"/>
      <method name="getCurrentDirectory()"/>
      <method name="getCurrentMachine()"/>
      <method name="getDefaultURL()"/>
      <method name="getIPv4URL(java.lang.String)"/>
      <method name="getIPv6URL(java.lang.String)"/>
      <method name="getListenAddress()"/>
      <method name="getMiddlewareHome()"/>
      <method name="getName()"/>
      <method name="getOracleHome()"/>
      <method name="getSSLListenAddress()"/>
      <method name="getServerClasspath()"/>
      <method name="getState()"/>
      <method name="getURL(java.lang.String)"/>
      <method name="getWeblogicHome()"/>
      <method name="getWeblogicVersion()"/>
      <method name="getPatchList()"/>
      <method name="getServerChannel(java.lang.String)"/>
      <method name="getHealthStateJMX()"/>
      <method name="getOverallHealthStateJMX()"/>
      <method name="getActivationTime()"/>
      <method name="getSocketsOpenedTotalCount()"/>
      <method name="bootPartition(java.lang.String)"/>
      <method name="forceRestartPartition(java.lang.String)"/>
      <method name="forceRestartPartition(java.lang.String,long)"/>
      <method name="forceShutdown()"/>
      <method name="forceShutdownResourceGroup(java.lang.String)"/>
      <method name="forceSuspend()"/>
      <method name="forceSuspendResourceGroup(java.lang.String)"/>
      <method name="restartSSLChannels()"/>
      <method name="resume()"/>
      <method name="resumeResourceGroup(java.lang.String)"/>
      <method name="setCurrentMachine(java.lang.String)"/>
      <method name="shutdown()"/>
      <method name="shutdown(int,boolean)"/>
      <method name="shutdown(int,boolean,boolean)"/>
      <method name="shutdownResourceGroup(java.lang.String)"/>
      <method name="shutdownResourceGroup(java.lang.String,int,boolean)"/>
      <method name="shutdownResourceGroup(java.lang.String,int,boolean,boolean)"/>
      <method name="start()"/>
      <method name="startPartition(java.lang.String)"/>
      <method name="startPartitionInAdmin(java.lang.String)"/>
      <method name="startResourceGroup(java.lang.String)"/>
      <method name="startResourceGroupInAdmin(java.lang.String)"/>
      <method name="suspend()"/>
      <method name="suspend(int,boolean)"/>
      <method name="suspendResourceGroup(java.lang.String)"/>
      <method name="suspendResourceGroup(java.lang.String,int,boolean)"/>
      <method name="getHealthState()"/>
      <method name="getOverallHealthState()"/>
      <method name="lookupApplicationRuntime(java.lang.String)"/>
      <method name="getApplicationRuntimes()"/>
      <method name="getAsyncReplicationRuntime()"/>
      <method name="getBatchJobRepositoryRuntime()"/>
      <method name="getClassLoaderRuntime()"/>
      <method name="getClusterRuntime()"/>
      <method name="getConcurrentManagedObjectsRuntime()"/>
      <method name="getConnectorServiceRuntime()"/>
      <method name="getEntityCacheCumulativeRuntime()"/>
      <method name="getEntityCacheHistoricalRuntime()"/>
      <method name="getEntityCacheCurrentStateRuntime()"/>
      <method name="getDefaultExecuteQueueRuntime()"/>
      <method name="getExecuteQueueRuntimes()"/>
      <method name="getJDBCServiceRuntime()"/>
      <method name="getJMSRuntime()"/>
      <method name="getJTARuntime()"/>
      <method name="getJVMRuntime()"/>
      <method name="getJoltRuntime()"/>
      <method name="lookupLibraryRuntime(java.lang.String)"/>
      <method name="getLibraryRuntimes()"/>
      <method name="getLogBroadcasterRuntime()"/>
      <method name="getLogRuntime()"/>
      <method name="getMANAsyncReplicationRuntime()"/>
      <method name="getMANReplicationRuntime()"/>
      <method name="getMailSessionRuntimes()"/>
      <method name="getMaxThreadsConstraintRuntimes()"/>
      <method name="getMessagingBridgeRuntime()"/>
      <method name="lookupMessagingBridgeRuntime(java.lang.String)"/>
      <method name="getMessagingBridgeRuntimes()"/>
      <method name="getMinThreadsConstraintRuntimes()"/>
      <method name="getPartitionRuntimes()"/>
      <method name="getPathServiceRuntime()"/>
      <method name="lookupPersistentStoreRuntime(java.lang.String)"/>
      <method name="getPersistentStoreRuntimes()"/>
      <method name="getRequestClassRuntimes()"/>
      <method name="getSAFRuntime()"/>
      <method name="getSNMPAgentRuntime()"/>
      <method name="getServerChannelRuntimes()"/>
      <method name="getServerLogRuntime()"/>
      <method name="getServerSecurityRuntime()"/>
      <method name="getSingleSignOnServicesRuntime()"/>
      <method name="getThreadPoolRuntime()"/>
      <method name="getTimerRuntime()"/>
      <method name="getWANReplicationRuntime()"/>
      <method name="getWLDFRuntime()"/>
      <method name="getWTCRuntime()"/>
      <method name="getWebServerRuntimes()"/>
      <method name="getWorkManagerRuntimes()"/>
      <method name="getWseeClusterFrontEndRuntime()"/>
      <method name="getWseeWsrmRuntime()"/>
    </class>
    <class name="ServerSecurityRuntimeMBean">
      <method name="checkRole(java.lang.String)"/>
      <method name="checkRole(java.lang.String[])"/>
      <method name="isJACCEnabled()"/>
      <method name="getName()"/>
      <method name="resetDefaultPolicies()"/>
      <method name="getDefaultRealmRuntime()"/>
      <method name="lookupRealmRuntime(java.lang.String)"/>
      <method name="getRealmRuntimes()"/>
    </class>
    <class name="ServerStates" members="concealed"/>
    <class name="ServiceMigrationDataRuntimeMBean">
      <method name="getStatus()"/>
      <method name="getClusterName()"/>
      <method name="getCoordinatorName()"/>
      <method name="getMigratedFrom()"/>
      <method name="getMigratedTo()"/>
      <method name="getServerName()"/>
      <method name="getDestinationsAttempted()"/>
      <method name="getMigrationEndTime()"/>
      <method name="getMigrationStartTime()"/>
      <field name="FAILED"/>
      <field name="IN_PROGRESS"/>
      <field name="SUCCEEDED"/>
    </class>
    <class name="ServiceMigrationRuntimeMBean">
      <method name="isClusterMaster()"/>
      <method name="getClusterMasterName()"/>
      <method name="getMigrationData()"/>
    </class>
    <class name="ServletRuntimeMBean">
      <method name="getExecutionTimeAverage()"/>
      <method name="getExecutionTimeHigh()"/>
      <method name="getExecutionTimeLow()"/>
      <method name="getInvocationTotalCount()"/>
      <method name="getPoolMaxCapacity()"/>
      <method name="getReloadTotalCount()"/>
      <method name="invokeAnnotatedMethods(java.lang.Class,java.io.Serializable[])"/>
      <method name="getContextPath()"/>
      <method name="getServletClassName()"/>
      <method name="getServletName()"/>
      <method name="getServletPath()"/>
      <method name="getURL()"/>
      <method name="getURLPatterns()"/>
      <method name="getExecutionTimeTotal()"/>
    </class>
    <class name="ServletSessionRuntimeMBean">
      <method name="getMainAttribute()"/>
      <method name="getMaxInactiveInterval()"/>
      <method name="getTimeLastAccessed()"/>
      <method name="invalidate()"/>
    </class>
    <class name="SingleSignOnServicesRuntimeMBean">
      <method name="publish(java.lang.String)"/>
      <method name="publish(java.lang.String,boolean)"/>
    </class>
    <class name="SingletonEJBRuntimeMBean">
      <method name="getReadLockTimeoutTotalCount()"/>
      <method name="getWaiterCurrentCount()"/>
      <method name="getWriteLockTimeoutTotalCount()"/>
      <method name="getReadLockTotalCount()"/>
      <method name="getWriteLockTotalCount()"/>
      <method name="getTimerRuntime()"/>
    </class>
    <class name="SocketRuntime">
      <method name="getFileDescriptor()"/>
      <method name="getLocalPort()"/>
      <method name="getRemotePort()"/>
      <method name="getLocalAddress()"/>
      <method name="getRemoteAddress()"/>
    </class>
    <class name="SpringApplicationContextRuntimeMBean">
      <method name="getAverageCustomScopeBeanCreationTime(java.lang.String)"/>
      <method name="getAverageGetBeanNamesForTypeTime()"/>
      <method name="getAverageGetBeanTime()"/>
      <method name="getAverageGetBeansOfTypeTime()"/>
      <method name="getAveragePrototypeBeanCreationTime()"/>
      <method name="getAverageRefreshTime()"/>
      <method name="getAverageSingletonBeanCreationTime()"/>
      <method name="getDisplayName()"/>
      <method name="getParentContext()"/>
      <method name="getCustomScopeNames()"/>
      <method name="getCustomScopeBeansCreatedCount(java.lang.String)"/>
      <method name="getGetBeanCount()"/>
      <method name="getGetBeanNamesForTypeCount()"/>
      <method name="getGetBeansOfTypeCount()"/>
      <method name="getPrototypeBeansCreatedCount()"/>
      <method name="getRefreshCount()"/>
      <method name="getSingletonBeansCreatedCount()"/>
      <method name="getStartupDate()"/>
    </class>
    <class name="SpringBeanDefinitionRuntimeMBean">
      <method name="isAbstract()"/>
      <method name="isAutowireCandidate()"/>
      <method name="isLazyInit()"/>
      <method name="isSingleton()"/>
      <method name="getRole()"/>
      <method name="getApplicationContextDisplayName()"/>
      <method name="getBeanClassname()"/>
      <method name="getBeanId()"/>
      <method name="getParentId()"/>
      <method name="getResourceDescription()"/>
      <method name="getScope()"/>
      <method name="getAliases()"/>
      <method name="getDependencies()"/>
      <field name="ROLE_APPLICATION"/>
      <field name="ROLE_INFRASTRUCTURE"/>
      <field name="ROLE_SUPPORT"/>
      <method name="getDependencyValues()"/>
    </class>
    <class name="SpringBeanDependencyValue">
      <method name="getInjectionType()"/>
      <method name="getKey()"/>
      <method name="getStringValue()"/>
      <field name="INJECTION_TYPE_CONSTRUCTOR_ARG"/>
      <field name="INJECTION_TYPE_PROPERTY"/>
    </class>
    <class name="SpringRuntimeMBean">
      <method name="getSpringVersion()"/>
      <method name="getSpringApplicationContextRuntimeMBeans()"/>
      <method name="getSpringBeanDefinitionRuntimeMBeans()"/>
      <method name="getSpringTransactionManagerRuntimeMBeans()"/>
      <method name="getSpringTransactionTemplateRuntimeMBeans()"/>
      <method name="getSpringViewResolverRuntimeMBeans()"/>
      <method name="getSpringViewRuntimeMBeans()"/>
    </class>
    <class name="SpringTransactionManagerRuntimeMBean">
      <method name="getApplicationContextDisplayName()"/>
      <method name="getBeanId()"/>
      <method name="getCommitCount()"/>
      <method name="getResumeCount()"/>
      <method name="getRollbackCount()"/>
      <method name="getSuspendCount()"/>
    </class>
    <class name="SpringTransactionTemplateRuntimeMBean">
      <method name="getAverageExecuteTime()"/>
      <method name="getApplicationContextDisplayName()"/>
      <method name="getBeanId()"/>
      <method name="getExecuteCount()"/>
      <method name="getExecuteFailedCount()"/>
    </class>
    <class name="SpringViewResolverRuntimeMBean">
      <method name="getAverageResolveViewNameTime()"/>
      <method name="getApplicationContextDisplayName()"/>
      <method name="getBeanId()"/>
      <method name="getResolveViewNameCount()"/>
      <method name="getResolveViewNameFailedCount()"/>
    </class>
    <class name="SpringViewRuntimeMBean">
      <method name="getAverageRenderTime()"/>
      <method name="getApplicationContextDisplayName()"/>
      <method name="getBeanId()"/>
      <method name="getRenderCount()"/>
      <method name="getRenderFailedCount()"/>
    </class>
    <class name="StatefulEJBRuntimeMBean">
      <method name="getCacheRuntime()"/>
      <method name="getLockingRuntime()"/>
    </class>
    <class name="StatelessEJBRuntimeMBean">
      <method name="getPoolRuntime()"/>
      <method name="getTimerRuntime()"/>
    </class>
    <class name="SystemComponentLifeCycleRuntimeMBean">
      <method name="getNodeManagerRestartCount()"/>
      <method name="getState()"/>
      <method name="lookupTask(java.lang.String)"/>
      <method name="shutdown(java.util.Properties)"/>
      <method name="softRestart(java.util.Properties)"/>
      <method name="start(java.util.Properties)"/>
      <method name="getTasks()"/>
    </class>
    <class name="SystemComponentLifeCycleTaskRuntimeMBean" members="concealed"/>
    <class name="TaskRuntimeMBean">
      <method name="isRunning()"/>
      <method name="isSystemTask()"/>
      <method name="getError()"/>
      <method name="getDescription()"/>
      <method name="getProgress()"/>
      <method name="getStatus()"/>
      <method name="getBeginTime()"/>
      <method name="getEndTime()"/>
      <field name="PROGRESS_FAILED"/>
      <field name="PROGRESS_PENDING"/>
      <field name="PROGRESS_PROCESSING"/>
      <field name="PROGRESS_SUCCESS"/>
      <method name="cancel()"/>
      <method name="setSystemTask(boolean)"/>
      <method name="getParentTask()"/>
      <method name="getSubTasks()"/>
    </class>
    <class name="ThreadPoolRuntimeMBean">
      <method name="isSuspended()"/>
      <method name="getThroughput()"/>
      <method name="getExecuteThreadIdleCount()"/>
      <method name="getExecuteThreadTotalCount()"/>
      <method name="getHoggingThreadCount()"/>
      <method name="getMinThreadsConstraintsPending()"/>
      <method name="getOverloadRejectedRequestsCount()"/>
      <method name="getPendingUserRequestCount()"/>
      <method name="getQueueLength()"/>
      <method name="getSharedCapacityForWorkManagers()"/>
      <method name="getStandbyThreadCount()"/>
      <method name="getStuckThreadCount()"/>
      <method name="getCompletedRequestCount()"/>
      <method name="getMinThreadsConstraintsCompleted()"/>
      <method name="getHealthState()"/>
      <method name="getExecuteThread(java.lang.String)"/>
      <method name="getExecuteThreads()"/>
    </class>
    <class name="Timer">
      <method name="isCancelled()"/>
      <method name="isStopped()"/>
      <method name="getListenerClassName()"/>
      <method name="getTimerManagerName()"/>
      <method name="getExpirationCount()"/>
      <method name="getPeriod()"/>
      <method name="getTimeout()"/>
      <method name="getPastExpirationTimes()"/>
    </class>
    <class name="TimerRuntimeMBean">
      <method name="getTimers()"/>
    </class>
    <class name="TransactionNameRuntimeMBean">
      <method name="getTransactionName()"/>
    </class>
    <class name="TransactionResourceRuntimeMBean">
      <method name="getResourceName()"/>
      <method name="getTransactionHeuristicCommitTotalCount()"/>
      <method name="getTransactionHeuristicHazardTotalCount()"/>
      <method name="getTransactionHeuristicMixedTotalCount()"/>
      <method name="getTransactionHeuristicRollbackTotalCount()"/>
      <method name="getHealthState()"/>
    </class>
    <class name="TriggerRuntimeMBean">
      <method name="isActivated()"/>
      <method name="isInitiated()"/>
      <method name="getName()"/>
      <method name="getLastTimeExecuted()"/>
      <method name="getRecourseActionEventsHistory()"/>
    </class>
    <class name="UnicastMessagingRuntimeMBean">
      <method name="getRemoteGroupsDiscoveredCount()"/>
      <method name="getTotalGroupsCount()"/>
      <method name="getGroups()"/>
      <method name="getLocalGroupLeaderName()"/>
      <method name="getDiscoveredGroupLeaders()"/>
    </class>
    <class name="UserLockoutManagerRuntimeMBean">
      <method name="isLockedOut(java.lang.String)"/>
      <method name="isLockedOut(java.lang.String,java.lang.String)"/>
      <method name="getInvalidLoginAttemptsTotalCount()"/>
      <method name="getInvalidLoginUsersHighCount()"/>
      <method name="getLastLoginFailure(java.lang.String)"/>
      <method name="getLastLoginFailure(java.lang.String,java.lang.String)"/>
      <method name="getLockedUsersCurrentCount()"/>
      <method name="getLoginAttemptsWhileLockedTotalCount()"/>
      <method name="getLoginFailureCount(java.lang.String)"/>
      <method name="getLoginFailureCount(java.lang.String,java.lang.String)"/>
      <method name="getUnlockedUsersTotalCount()"/>
      <method name="getUserLockoutTotalCount()"/>
      <method name="clearLockout(java.lang.String)"/>
      <method name="clearLockout(java.lang.String,java.lang.String)"/>
    </class>
    <class name="WANReplicationRuntimeMBean">
      <method name="getRemoteClusterReachable()"/>
      <method name="getSecondaryServerName()"/>
      <method name="getNumberOfSessionsFlushedToTheDatabase()"/>
      <method name="getNumberOfSessionsRetrievedFromTheDatabase()"/>
      <method name="cleanupExpiredSessionsInTheDatabase()"/>
    </class>
    <class name="WLDFAccessRuntimeMBean">
      <method name="lookupWLDFDataAccessRuntime(java.lang.String)"/>
      <method name="getWLDFDataAccessRuntimes()"/>
    </class>
    <class name="WLDFArchiveRuntimeMBean" members="concealed"/>
    <class name="WLDFControlRuntimeMBean">
      <method name="destroySystemResourceControl(weblogic.management.runtime.WLDFSystemResourceControlRuntimeMBean)"/>
      <method name="createSystemResourceControl(java.lang.String,java.lang.String)"/>
      <method name="lookupSystemResourceControl(java.lang.String)"/>
      <method name="getSystemResourceControls()"/>
    </class>
    <class name="WLDFDataAccessRuntimeMBean" members="concealed"/>
    <class name="WLDFDataRetirementTaskRuntimeMBean" members="concealed"/>
    <class name="WLDFDbstoreArchiveRuntimeMBean">
      <method name="purgeDataRetirementTasks(long)"/>
    </class>
    <class name="WLDFDebugPatchTaskRuntimeMBean">
      <method name="isActivationTask()"/>
      <method name="getApplicationName()"/>
      <method name="getModuleName()"/>
      <method name="getPatches()"/>
      <field name="CANCELLED"/>
      <field name="FAILED"/>
      <field name="FINISHED"/>
      <field name="RUNNING"/>
      <field name="SCHEDULED"/>
    </class>
    <class name="WLDFDebugPatchesRuntimeMBean">
      <method name="showDebugPatchInfo(java.lang.String)"/>
      <method name="getActiveDebugPatches()"/>
      <method name="getAvailableDebugPatches()"/>
      <method name="clearDebugPatchTasks()"/>
      <method name="activateDebugPatch(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="deactivateAllDebugPatches()"/>
      <method name="deactivateDebugPatches(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="lookupDebugPatchTask(java.lang.String)"/>
      <method name="getDebugPatchTasks()"/>
    </class>
    <class name="WLDFEditableArchiveRuntimeMBean">
      <method name="purgeDataRetirementTasks(long)"/>
      <method name="performDataRetirement()"/>
    </class>
    <class name="WLDFFileArchiveRuntimeMBean" members="concealed"/>
    <class name="WLDFHarvesterManagerRuntimeMBean">
      <method name="retrieveSnapshot()"/>
      <method name="getAverageSamplingTime()"/>
      <method name="getCurrentDataSampleCount()"/>
      <method name="getCurrentSnapshotElapsedTime()"/>
      <method name="getCurrentSnapshotStartTime()"/>
      <method name="getMaximumSamplingTime()"/>
      <method name="getMinimumSamplingTime()"/>
      <method name="getTotalDataSampleCount()"/>
      <method name="getTotalSamplingCycles()"/>
      <method name="getTotalSamplingTime()"/>
    </class>
    <class name="WLDFHarvesterRuntimeMBean">
      <method name="isCurrentSampleTimeAnOutlier()"/>
      <method name="getOutlierDetectionFactor()"/>
      <method name="getHarvestableType(java.lang.String)"/>
      <method name="getCurrentlyHarvestedAttributes(java.lang.String)"/>
      <method name="getCurrentlyHarvestedInstances(java.lang.String)"/>
      <method name="getKnownHarvestableInstances(java.lang.String)"/>
      <method name="getKnownHarvestableTypes()"/>
      <method name="getHarvestableAttributes(java.lang.String)"/>
      <method name="getHarvestableAttributesForInstance(java.lang.String)"/>
      <method name="getAttributeInfoForAllTypes()"/>
      <method name="getInstancesForAllTypes()"/>
      <method name="getCurrentDataSampleCount()"/>
      <method name="getCurrentSnapshotElapsedTime()"/>
      <method name="getCurrentSnapshotStartTime()"/>
      <method name="getSamplePeriod()"/>
      <method name="getTotalDataSampleCount()"/>
      <method name="getTotalSamplingTimeOutlierCount()"/>
    </class>
    <class name="WLDFImageCreationTaskRuntimeMBean" members="concealed"/>
    <class name="WLDFImageRuntimeMBean">
      <method name="captureImage(java.lang.String)"/>
      <method name="captureImage(java.lang.String,int)"/>
    </class>
    <class name="WLDFInstrumentationRuntimeMBean">
      <method name="getCallJoinpointCount()"/>
      <method name="getClassweaveAbortCount()"/>
      <method name="getExecutionJoinpointCount()"/>
      <method name="getInspectedClassesCount()"/>
      <method name="getModifiedClassesCount()"/>
      <method name="getMethodInvocationStatisticsData(java.lang.String)"/>
      <method name="getMethodMemoryAllocationStatisticsData(java.lang.String)"/>
      <method name="getMethodInvocationStatistics()"/>
      <method name="getMethodMemoryAllocationStatistics()"/>
      <method name="getMaxWeavingTime()"/>
      <method name="getMinWeavingTime()"/>
      <method name="getTotalWeavingTime()"/>
      <method name="resetMethodInvocationStatisticsData(java.lang.String)"/>
      <method name="resetMethodMemoryAllocationStatisticsData(java.lang.String)"/>
    </class>
    <class name="WLDFPartitionAccessRuntimeMBean" members="concealed"/>
    <class name="WLDFPartitionHarvesterRuntimeMBean">
      <method name="getAverageSamplingTime()"/>
      <method name="getMaximumSamplingTime()"/>
      <method name="getMinimumSamplingTime()"/>
      <method name="getTotalConfiguredDataSampleCount()"/>
      <method name="getTotalImplicitDataSampleCount()"/>
      <method name="getTotalSamplingCycles()"/>
      <method name="getTotalSamplingTime()"/>
    </class>
    <class name="WLDFPartitionImageRuntimeMBean">
      <method name="getImageTimeout()"/>
      <method name="getImageDir()"/>
      <method name="getAvailableCapturedImages()"/>
      <method name="clearCompletedImageCaptureTasks()"/>
      <method name="purgeCapturedImages(java.lang.String)"/>
      <method name="resetImageLockout()"/>
      <method name="captureImage()"/>
      <method name="captureImage(int)"/>
      <method name="lookupImageCaptureTask(java.lang.String)"/>
      <method name="getImageCaptureTasks()"/>
      <method name="listImageCaptureTasks()"/>
    </class>
    <class name="WLDFPartitionRuntimeMBean">
      <method name="getWLDFPartitionAccessRuntime()"/>
      <method name="getWLDFPartitionHarvesterRuntime()"/>
      <method name="getWLDFPartitionImageRuntime()"/>
      <method name="getWLDFWatchNotificationRuntime()"/>
    </class>
    <class name="WLDFRuntimeMBean">
      <method name="getWLDFAccessRuntime()"/>
      <method name="getWLDFArchiveRuntimes()"/>
      <method name="getWLDFControlRuntime()"/>
      <method name="getWLDFHarvesterRuntime()"/>
      <method name="getWLDFImageRuntime()"/>
      <method name="lookupWLDFInstrumentationRuntime(java.lang.String)"/>
      <method name="getWLDFInstrumentationRuntimes()"/>
      <method name="getWLDFWatchNotificationRuntime()"/>
    </class>
    <class name="WLDFSystemResourceControlRuntimeMBean">
      <method name="isEnabled()"/>
      <method name="setEnabled(boolean)"/>
      <method name="getHarvesterManagerRuntime()"/>
      <method name="getWatchManagerRuntime()"/>
    </class>
    <class name="WLDFWatchJMXNotificationRuntimeMBean" members="concealed"/>
    <class name="WLDFWatchManagerRuntimeMBean">
      <method name="getCurrentActiveAlarmsCount()"/>
      <method name="getMaximumActiveAlarmsCount()"/>
      <method name="getActiveAlarmWatches()"/>
      <method name="getAverageEventDataWatchEvaluationTime()"/>
      <method name="getAverageHarvesterWatchEvaluationTime()"/>
      <method name="getAverageLogWatchEvaluationTime()"/>
      <method name="getMaximumEventDataWatchEvaluationTime()"/>
      <method name="getMaximumHarvesterWatchEvaluationTime()"/>
      <method name="getMaximumLogWatchEvaluationTime()"/>
      <method name="getMinimumEventDataWatchEvaluationTime()"/>
      <method name="getMinimumHarvesterWatchEvaluationTime()"/>
      <method name="getMinimumLogWatchEvaluationTime()"/>
      <method name="getTotalActiveAutomaticResetAlarms()"/>
      <method name="getTotalActiveManualResetAlarms()"/>
      <method name="getTotalDIMGNotificationsPerformed()"/>
      <method name="getTotalEventDataEvaluationCycles()"/>
      <method name="getTotalEventDataWatchEvaluations()"/>
      <method name="getTotalEventDataWatchesTriggered()"/>
      <method name="getTotalFailedDIMGNotifications()"/>
      <method name="getTotalFailedJMSNotifications()"/>
      <method name="getTotalFailedJMXNotifications()"/>
      <method name="getTotalFailedNotifications()"/>
      <method name="getTotalFailedSMTPNotifications()"/>
      <method name="getTotalFailedSNMPNotifications()"/>
      <method name="getTotalHarvesterEvaluationCycles()"/>
      <method name="getTotalHarvesterWatchEvaluations()"/>
      <method name="getTotalHarvesterWatchesTriggered()"/>
      <method name="getTotalJMSNotificationsPerformed()"/>
      <method name="getTotalJMXNotificationsPerformed()"/>
      <method name="getTotalLogEvaluationCycles()"/>
      <method name="getTotalLogWatchEvaluations()"/>
      <method name="getTotalLogWatchesTriggered()"/>
      <method name="getTotalNotificationsPerformed()"/>
      <method name="getTotalSMTPNotificationsPerformed()"/>
      <method name="getTotalSNMPNotificationsPerformed()"/>
      <method name="resetWatchAlarm(java.lang.String)"/>
    </class>
    <class name="WLDFWatchNotificationRuntimeMBean">
      <method name="getWLDFWatchJMXNotificationRuntime()"/>
      <method name="getWLDFWatchJMXNotificationSource()"/>
    </class>
    <class name="WLDFWatchNotificationSourceRuntimeMBean" members="concealed"/>
    <class name="WLDFWlstoreArchiveRuntimeMBean">
      <method name="purgeDataRetirementTasks(long)"/>
    </class>
    <class name="WSRMRemoteEndpointRuntimeMBean">
      <method name="getConversationsCurrentCount()"/>
      <method name="getConversationsHighCount()"/>
      <method name="getConversationsTotalCount()"/>
      <method name="closeConversations(java.lang.String)"/>
      <method name="getConversations()"/>
    </class>
    <class name="WTCRuntimeMBean">
      <method name="getServiceStatus(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getServiceStatus(java.lang.String,java.lang.String)"/>
      <method name="getServiceStatus(java.lang.String,java.lang.String,boolean)"/>
      <method name="getServiceStatus(java.lang.String)"/>
      <method name="getServiceStatus(java.lang.String,boolean)"/>
      <method name="getWTCServerStatus()"/>
      <method name="getWTCServerStartTime()"/>
      <method name="resumeService(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="resumeService(java.lang.String,java.lang.String)"/>
      <method name="resumeService(java.lang.String,java.lang.String,boolean)"/>
      <method name="resumeService(java.lang.String)"/>
      <method name="resumeService(java.lang.String,boolean)"/>
      <method name="startConnection(java.lang.String)"/>
      <method name="startConnection(java.lang.String,java.lang.String)"/>
      <method name="stopConnection(java.lang.String)"/>
      <method name="stopConnection(java.lang.String,java.lang.String)"/>
      <method name="suspendService(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="suspendService(java.lang.String,java.lang.String)"/>
      <method name="suspendService(java.lang.String,java.lang.String,boolean)"/>
      <method name="suspendService(java.lang.String)"/>
      <method name="suspendService(java.lang.String,boolean)"/>
      <method name="getWTCStatisticsRuntimeMBean()"/>
      <method name="getServiceStatus()"/>
      <method name="listConnectionsConfigured()"/>
    </class>
    <class name="WTCStatisticsRuntimeMBean">
      <method name="getConnectionStatistics()"/>
      <method name="getExportedServiceStatistics()"/>
      <method name="getImportedServiceStatistics()"/>
      <method name="getInTransactionCommittedTotalCount(java.lang.String,java.lang.String)"/>
      <method name="getInTransactionRolledBackTotalCount(java.lang.String,java.lang.String)"/>
      <method name="getInboundFailReqTotalCount(java.lang.String,java.lang.String,boolean)"/>
      <method name="getInboundMessageTotalCount(java.lang.String,java.lang.String)"/>
      <method name="getInboundMessageTotalCount(java.lang.String,java.lang.String,boolean)"/>
      <method name="getInboundNWMessageTotalSize(java.lang.String,java.lang.String)"/>
      <method name="getInboundNWMessageTotalSize(java.lang.String,java.lang.String,boolean)"/>
      <method name="getInboundSuccessReqTotalCount(java.lang.String,java.lang.String,boolean)"/>
      <method name="getOutTransactionCommittedTotalCount(java.lang.String,java.lang.String)"/>
      <method name="getOutTransactionRolledBackTotalCount(java.lang.String,java.lang.String)"/>
      <method name="getOutboundFailReqTotalCount(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getOutboundMessageTotalCount(java.lang.String,java.lang.String)"/>
      <method name="getOutboundMessageTotalCount(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getOutboundNWMessageTotalSize(java.lang.String,java.lang.String)"/>
      <method name="getOutboundNWMessageTotalSize(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getOutboundSuccessReqTotalCount(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="getOutstandingNWReqCount(java.lang.String,java.lang.String)"/>
      <method name="getOutstandingNWReqCount(java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="WebAppComponentRuntimeMBean">
      <method name="isFilterDispatchedRequestsEnabled()"/>
      <method name="isIndexDirectoryEnabled()"/>
      <method name="isJSPDebug()"/>
      <method name="isJSPKeepGenerated()"/>
      <method name="isJSPVerbose()"/>
      <method name="isSessionMonitoringEnabled()"/>
      <method name="getOpenSessionsCurrentCount()"/>
      <method name="getOpenSessionsHighCount()"/>
      <method name="getServletReloadCheckSecs()"/>
      <method name="getSessionCookieMaxAgeSecs()"/>
      <method name="getSessionIDLength()"/>
      <method name="getSessionInvalidationIntervalSecs()"/>
      <method name="getSessionTimeoutSecs()"/>
      <method name="getSessionsOpenedTotalCount()"/>
      <method name="getSingleThreadedServletPoolSize()"/>
      <method name="getApplicationIdentifier()"/>
      <method name="getComponentName()"/>
      <method name="getConfiguredContextRoot()"/>
      <method name="getContextRoot()"/>
      <method name="getJSPCompileCommand()"/>
      <method name="getLogFilename()"/>
      <method name="getModuleURI()"/>
      <method name="getMonitoringId(java.lang.String)"/>
      <method name="getName()"/>
      <method name="getSessionCookieComment()"/>
      <method name="getSessionCookieDomain()"/>
      <method name="getSessionCookieName()"/>
      <method name="getSessionCookiePath()"/>
      <method name="getSourceInfo()"/>
      <method name="getStatus()"/>
      <method name="getServletSessionsMonitoringIds()"/>
      <method name="getJSPPageCheckSecs()"/>
      <method name="getSessionLastAccessedTime(java.lang.String)"/>
      <method name="getSessionMaxInactiveInterval(java.lang.String)"/>
      <method name="deleteInvalidSessions()"/>
      <method name="invalidateServletSession(java.lang.String)"/>
      <method name="getCoherenceClusterRuntime()"/>
      <method name="getEJBRuntime(java.lang.String)"/>
      <method name="getEJBRuntimes()"/>
      <method name="lookupJaxRsApplication(java.lang.String)"/>
      <method name="getJaxRsApplications()"/>
      <method name="getKodoPersistenceUnitRuntime(java.lang.String)"/>
      <method name="getKodoPersistenceUnitRuntimes()"/>
      <method name="getLibraryRuntimes()"/>
      <method name="getLogRuntime()"/>
      <method name="getPageFlows()"/>
      <method name="getPersistenceUnitRuntime(java.lang.String)"/>
      <method name="getPersistenceUnitRuntimes()"/>
      <method name="getServlets()"/>
      <method name="getServletSession(java.lang.String)"/>
      <method name="getServletSessions()"/>
      <method name="getSpringRuntimeMBean()"/>
      <method name="getWebPubSubRuntime()"/>
      <method name="getWebsocketApplicationRuntimeMBean()"/>
      <method name="lookupWseeClientConfigurationRuntime(java.lang.String)"/>
      <method name="getWseeClientConfigurationRuntimes()"/>
      <method name="lookupWseeClientRuntime(java.lang.String)"/>
      <method name="getWseeClientRuntimes()"/>
      <method name="lookupWseeV2Runtime(java.lang.String)"/>
      <method name="getWseeV2Runtimes()"/>
    </class>
    <class name="WebPubSubRuntimeMBean">
      <method name="getName()"/>
      <method name="getChannel(java.lang.String)"/>
      <method name="getRootChannel()"/>
    </class>
    <class name="WebServerRuntimeMBean">
      <method name="isDefaultWebServer()"/>
      <method name="getWebServerName()"/>
      <method name="getLogRuntime()"/>
    </class>
    <class name="WebsocketApplicationRuntimeMBean">
      <method name="getEndpointMBeans()"/>
    </class>
    <class name="WebsocketBaseRuntimeMBean">
      <method name="getMaximalOpenSessionsCount()"/>
      <method name="getOpenSessionsCount()"/>
      <method name="getBinaryMessageStatisticsRuntimeMBean()"/>
      <method name="getControlMessageStatisticsRuntimeMBean()"/>
      <method name="getTextMessageStatisticsRuntimeMBean()"/>
    </class>
    <class name="WebsocketEndpointRuntimeMBean">
      <method name="getEndpointClassName()"/>
      <method name="getEndpointPath()"/>
    </class>
    <class name="WebsocketMessageStatisticsRuntimeMBean">
      <method name="getAverageReceivedMessageSize()"/>
      <method name="getAverageSentMessageSize()"/>
      <method name="getMaximalReceivedMessageSize()"/>
      <method name="getMaximalSentMessageSize()"/>
      <method name="getMinimalReceivedMessageSize()"/>
      <method name="getMinimalSentMessageSize()"/>
      <method name="getReceivedMessagesCount()"/>
      <method name="getReceivedMessagesCountPerSecond()"/>
      <method name="getSentMessagesCount()"/>
      <method name="getSentMessagesCountPerSecond()"/>
    </class>
    <class name="WorkManagerRuntimeMBean">
      <method name="getPendingDaemonRequests()"/>
      <method name="getPendingRequests()"/>
      <method name="getStuckThreadCount()"/>
      <method name="getApplicationName()"/>
      <method name="getModuleName()"/>
      <method name="getCompletedDaemonRequests()"/>
      <method name="getCompletedRequests()"/>
      <method name="getHealthState()"/>
      <method name="getMaxThreadsConstraintRuntime()"/>
      <method name="getMinThreadsConstraintRuntime()"/>
      <method name="getRequestClassRuntime()"/>
    </class>
    <class name="WorkflowTaskRuntimeMBean" members="concealed"/>
    <class name="WseeAggregatableBaseOperationRuntimeMBean">
      <method name="getErrorCount()"/>
      <method name="getInvocationCount()"/>
      <method name="getResponseCount()"/>
      <method name="getResponseErrorCount()"/>
      <method name="getLastError()"/>
      <method name="getLastResponseError()"/>
      <method name="getDispatchTimeAverage()"/>
      <method name="getDispatchTimeHigh()"/>
      <method name="getDispatchTimeLow()"/>
      <method name="getDispatchTimeTotal()"/>
      <method name="getExecutionTimeAverage()"/>
      <method name="getExecutionTimeHigh()"/>
      <method name="getExecutionTimeLow()"/>
      <method name="getExecutionTimeTotal()"/>
      <method name="getLastErrorTime()"/>
      <method name="getLastInvocationTime()"/>
      <method name="getLastResponseErrorTime()"/>
      <method name="getLastResponseTime()"/>
      <method name="getResponseTimeAverage()"/>
      <method name="getResponseTimeHigh()"/>
      <method name="getResponseTimeLow()"/>
      <method name="getResponseTimeTotal()"/>
    </class>
    <class name="WseeBaseOperationRuntimeMBean">
      <method name="getOperationName()"/>
    </class>
    <class name="WseeBasePortRuntimeMBean">
      <method name="getPolicyFaults()"/>
      <method name="getTotalFaults()"/>
      <method name="getTotalSecurityFaults()"/>
      <method name="getPortName()"/>
      <method name="getTransportProtocolType()"/>
      <method name="getStartTime()"/>
      <method name="getAggregatedBaseOperations()"/>
      <method name="getBaseOperations()"/>
      <method name="getClusterRouting()"/>
      <method name="getHandlers()"/>
      <method name="getMc()"/>
      <method name="getPortPolicy()"/>
      <method name="getWsrm()"/>
    </class>
    <class name="WseeBaseRuntimeMBean">
      <method name="getPolicyFaults()"/>
      <method name="getTotalFaults()"/>
      <method name="getTotalSecurityFaults()"/>
      <method name="getImplementationType()"/>
      <method name="getServiceName()"/>
      <method name="getURI()"/>
      <method name="getWebserviceDescriptionName()"/>
      <method name="getStartTime()"/>
      <method name="getWsType()"/>
      <method name="getPolicyRuntime()"/>
      <method name="getPorts()"/>
    </class>
    <class name="WseeClientConfigurationRuntimeMBean">
      <method name="getServiceReferenceName()"/>
      <method name="getPorts()"/>
    </class>
    <class name="WseeClientOperationRuntimeMBean" members="concealed"/>
    <class name="WseeClientPortRuntimeMBean">
      <method name="getPoolCapacity()"/>
      <method name="getPoolFreeCount()"/>
      <method name="getPoolTakenCount()"/>
      <method name="getPoolTotalConversationalClientTakeCount()"/>
      <method name="getPoolTotalPooledClientTakeCount()"/>
      <method name="getPoolTotalSimpleClientCreateCount()"/>
      <method name="getOperations()"/>
    </class>
    <class name="WseeClientRuntimeMBean">
      <method name="getClientID()"/>
      <method name="getPort()"/>
    </class>
    <class name="WseeClusterFrontEndRuntimeMBean">
      <method name="getClusterRouting()"/>
    </class>
    <class name="WseeClusterRoutingRuntimeMBean">
      <method name="getRequestCount()"/>
      <method name="getResponseCount()"/>
      <method name="getRoutedRequestCount()"/>
      <method name="getRoutedResponseCount()"/>
      <method name="getRoutingFailureCount()"/>
      <method name="getLastRoutingFailure()"/>
      <method name="getLastRoutingFailureTime()"/>
    </class>
    <class name="WseeHandlerRuntimeMBean">
      <method name="getHandlerClass()"/>
      <method name="getHeaders()"/>
    </class>
    <class name="WseeMcRuntimeMBean">
      <method name="getAnonymousEndpointIds()"/>
      <method name="getAnonymousEndpointInfo(java.lang.String)"/>
    </class>
    <class name="WseeOperationConfigurationRuntimeMBean">
      <method name="getPolicyAttachmentSupport()"/>
      <method name="getPolicySubjectName()"/>
      <method name="getPolicySubjectResourcePattern()"/>
      <method name="getPolicySubjectType()"/>
    </class>
    <class name="WseeOperationRuntimeMBean">
      <method name="getPolicyAttachmentSupport()"/>
      <method name="getPolicySubjectName()"/>
      <method name="getPolicySubjectResourcePattern()"/>
      <method name="getPolicySubjectType()"/>
    </class>
    <class name="WseePolicyRuntimeMBean" members="concealed"/>
    <class name="WseePolicySubjectManagerRuntimeMBean">
      <method name="isOWSMAttachable(java.lang.String)"/>
      <method name="getPolicyRefStatus(java.lang.String,java.lang.String)"/>
      <method name="getPolicyReferenceInfos(java.lang.String)"/>
      <method name="attachPolicyReference(java.lang.String,javax.management.openmbean.CompositeData)"/>
      <method name="removePolicyReference(java.lang.String,java.lang.String)"/>
      <method name="setPolicyRefStatus(java.lang.String,java.lang.String,java.lang.Boolean)"/>
      <method name="setPolicyReferenceInfo(java.lang.String,javax.management.openmbean.CompositeData)"/>
      <method name="setPolicyReferenceInfos(java.lang.String,javax.management.openmbean.TabularData)"/>
    </class>
    <class name="WseePortConfigurationRuntimeMBean">
      <method name="getPolicyAttachmentSupport()"/>
      <method name="getPolicySubjectAbsolutePortableExpression()"/>
      <method name="getPolicySubjectName()"/>
      <method name="getPolicySubjectResourcePattern()"/>
      <method name="getPolicySubjectType()"/>
      <method name="getOperations()"/>
    </class>
    <class name="WseePortPolicyRuntimeMBean">
      <method name="getAuthenticationSuccesses()"/>
      <method name="getAuthenticationViolations()"/>
      <method name="getAuthorizationSuccesses()"/>
      <method name="getAuthorizationViolations()"/>
      <method name="getConfidentialitySuccesses()"/>
      <method name="getConfidentialityViolations()"/>
      <method name="getIntegritySuccesses()"/>
      <method name="getIntegrityViolations()"/>
      <method name="getPolicyFaults()"/>
      <method name="getTotalFaults()"/>
      <method name="getTotalSecurityFaults()"/>
      <method name="getTotalViolations()"/>
    </class>
    <class name="WseePortRuntimeMBean">
      <method name="getPolicyAttachmentSupport()"/>
      <method name="getPolicySubjectAbsolutePortableExpression()"/>
      <method name="getPolicySubjectName()"/>
      <method name="getPolicySubjectResourcePattern()"/>
      <method name="getPolicySubjectType()"/>
      <method name="getOperations()"/>
    </class>
    <class name="WseeRuntimeMBean" members="concealed"/>
    <class name="WseeV2RuntimeMBean">
      <method name="getContextPath()"/>
    </class>
    <class name="WseeWsrmRuntimeMBean">
      <method name="getSequenceIds()"/>
      <method name="getSequenceInfo(java.lang.String)"/>
    </class>
    <class name="WsrmRequestInfo">
      <method name="isAckFlag()"/>
      <method name="getMessageId()"/>
      <method name="getResponseMessageId()"/>
      <method name="getSoapAction()"/>
      <method name="getResponseTimestamp()"/>
      <method name="getSeqNum()"/>
      <method name="getTimestamp()"/>
    </class>
    <class name="WsrmSequenceInfo">
      <method name="isOffer()"/>
      <method name="isSource()"/>
      <method name="getDestinationId()"/>
      <method name="getId()"/>
      <method name="getLogicalStoreName()"/>
      <method name="getMainSequenceId()"/>
      <method name="getPhysicalStoreName()"/>
      <method name="getState()"/>
      <method name="getCreationTime()"/>
      <method name="getLastAckdMessageNum()"/>
      <method name="getLastActivityTime()"/>
      <method name="getMaxAge()"/>
      <method name="getUnackdCount()"/>
      <field name="CLOSED"/>
      <field name="CLOSING"/>
      <field name="CREATED"/>
      <field name="CREATING"/>
      <field name="LAST_MESSAGE"/>
      <field name="LAST_MESSAGE_PENDING"/>
      <field name="NEW"/>
      <field name="TERMINATED"/>
      <field name="TERMINATING"/>
      <method name="getRequests()"/>
    </class>
  </package>
  <package name="weblogic.management.scripting.utils">
    <class name="WLSTInterpreter">
      <method name="getDisablePluginJarLoadingMode()"/>
      <method name="getDisconnected()"/>
      <method name="getEaseSyntax()"/>
      <method name="getOnlineOnlyMode()"/>
      <method name="getRecordAll()"/>
      <method name="getRecordingInProgress()"/>
      <method name="getScriptMode()"/>
      <method name="isStandalone()"/>
      <method name="runsource(java.lang.String,java.lang.String,weblogic.management.scripting.JLineWrapper)"/>
      <method name="getClassLoader()"/>
      <method name="getScriptDir()"/>
      <method name="getOfflineCMO()"/>
      <method name="getOfflinePrompt()"/>
      <field name="DISABLE_PLUGIN_JAR_LOADING_MODE"/>
      <field name="ENABLE_SCRIPT_MODE"/>
      <field name="ONLINE_ONLY_MODE"/>
      <field name="SCRIPT_DIR"/>
      <field name="SKIP_WLS_MODULE_SCANNING"/>
      <method name="exec(java.lang.String)"/>
      <method name="execfile(java.lang.String)"/>
      <method name="setClassLoader(java.lang.ClassLoader)"/>
      <method name="setDisablePluginJarLoadingMode(boolean)"/>
      <method name="setDisconnected(boolean)"/>
      <method name="setEaseSyntax(boolean)"/>
      <method name="setOfflineCMO(org.python.core.PyObject)"/>
      <method name="setOfflinePrompt(org.python.core.PyObject)"/>
      <method name="setOnlineOnlyMode(boolean)"/>
      <method name="setRecordAll(boolean)"/>
      <method name="setRecordingInProgress(boolean)"/>
      <method name="setScriptMode(boolean)"/>
    </class>
  </package>
  <package name="weblogic.management.security">
    <class name="ApplicationVersionerMBean" members="concealed"/>
    <class name="BaseMBeanImpl">
      <method name="getRequiredModelMBean()"/>
      <method name="getProxy()"/>
    </class>
    <class name="DeploymentModel">
      <method name="isValidModel(java.lang.String)"/>
      <field name="ADVANCED"/>
      <field name="CUSTOM_ROLES"/>
      <field name="CUSTOM_ROLES_POLICIES"/>
      <field name="DD_ONLY"/>
      <field name="MODEL_LIST_DISPLAY"/>
    </class>
    <class name="ExportMBean">
      <method name="getSupportedExportConstraints()"/>
      <method name="getSupportedExportFormats()"/>
      <method name="exportData(java.lang.String,java.lang.String,java.util.Properties)"/>
    </class>
    <class name="IdentityDomainAwareProviderMBean" members="concealed"/>
    <class name="ImportMBean">
      <method name="getSupportedImportConstraints()"/>
      <method name="getSupportedImportFormats()"/>
      <method name="importData(java.lang.String,java.lang.String,java.util.Properties)"/>
    </class>
    <class name="ProviderImpl">
      <method name="getCompatibilityObjectName()"/>
      <method name="getRealm()"/>
    </class>
    <class name="ProviderMBean">
      <method name="getDescription()"/>
      <method name="getName()"/>
      <method name="getVersion()"/>
      <method name="getRealm()"/>
    </class>
    <class name="ProviderValidator">
      <method name="validateProviders(weblogic.management.security.ProviderMBean[])"/>
    </class>
    <class name="RDBMSSecurityStoreMBean">
      <method name="getJNDIPasswordEncrypted()"/>
      <method name="getPasswordEncrypted()"/>
      <method name="getJMSExceptionReconnectAttempts()"/>
      <method name="getConnectionProperties()"/>
      <method name="getConnectionURL()"/>
      <method name="getDriverName()"/>
      <method name="getJMSTopic()"/>
      <method name="getJMSTopicConnectionFactory()"/>
      <method name="getJNDIPassword()"/>
      <method name="getJNDIUsername()"/>
      <method name="getName()"/>
      <method name="getNotificationProperties()"/>
      <method name="getPassword()"/>
      <method name="getUsername()"/>
      <method name="setConnectionProperties(java.lang.String)"/>
      <method name="setConnectionURL(java.lang.String)"/>
      <method name="setDriverName(java.lang.String)"/>
      <method name="setJMSExceptionReconnectAttempts(int)"/>
      <method name="setJMSTopic(java.lang.String)"/>
      <method name="setJMSTopicConnectionFactory(java.lang.String)"/>
      <method name="setJNDIPassword(java.lang.String)"/>
      <method name="setJNDIPasswordEncrypted(byte[])"/>
      <method name="setJNDIUsername(java.lang.String)"/>
      <method name="setNotificationProperties(java.lang.String)"/>
      <method name="setPassword(java.lang.String)"/>
      <method name="setPasswordEncrypted(byte[])"/>
      <method name="setUsername(java.lang.String)"/>
      <method name="getRealm()"/>
    </class>
    <class name="RealmContainer" members="concealed"/>
    <class name="RealmMBean">
      <method name="isAutoRestartOnNonDynamicChanges()"/>
      <method name="isCombinedRoleMappingEnabled()"/>
      <method name="isDefaultRealm()"/>
      <method name="isDelegateMBeanAuthorization()"/>
      <method name="isDeployCredentialMappingIgnored()"/>
      <method name="isDeployPolicyIgnored()"/>
      <method name="isDeployRoleIgnored()"/>
      <method name="isDeployableProviderSynchronizationEnabled()"/>
      <method name="isEnableWebLogicPrincipalValidatorCache()"/>
      <method name="isFullyDelegateAuthorization()"/>
      <method name="isValidateDDSecurityData()"/>
      <method name="getRetireTimeoutSeconds()"/>
      <method name="getDeployableProviderSynchronizationTimeout()"/>
      <method name="getMaxWebLogicPrincipalsInCache()"/>
      <method name="getAuthMethods()"/>
      <method name="getManagementIdentityDomain()"/>
      <method name="getName()"/>
      <method name="getSecurityDDModel()"/>
      <method name="getAdjudicatorTypes()"/>
      <method name="getAuditorTypes()"/>
      <method name="getAuthenticationProviderTypes()"/>
      <method name="getAuthorizerTypes()"/>
      <method name="getCertPathProviderTypes()"/>
      <method name="getCredentialMapperTypes()"/>
      <method name="getIdentityAssertionHeaderNamePrecedence()"/>
      <method name="getPasswordValidatorTypes()"/>
      <method name="getRoleMapperTypes()"/>
      <method name="destroyAdjudicator()"/>
      <method name="destroyAuditor(weblogic.management.security.audit.AuditorMBean)"/>
      <method name="destroyAuthenticationProvider(weblogic.management.security.authentication.AuthenticationProviderMBean)"/>
      <method name="destroyAuthorizer(weblogic.management.security.authorization.AuthorizerMBean)"/>
      <method name="destroyCertPathProvider(weblogic.management.security.pk.CertPathProviderMBean)"/>
      <method name="destroyCredentialMapper(weblogic.management.security.credentials.CredentialMapperMBean)"/>
      <method name="destroyPasswordValidator(weblogic.management.security.authentication.PasswordValidatorMBean)"/>
      <method name="destroyRDBMSSecurityStore()"/>
      <method name="destroyRoleMapper(weblogic.management.security.authorization.RoleMapperMBean)"/>
      <method name="setAuditors(weblogic.management.security.audit.AuditorMBean[])"/>
      <method name="setAuthMethods(java.lang.String)"/>
      <method name="setAuthenticationProviders(weblogic.management.security.authentication.AuthenticationProviderMBean[])"/>
      <method name="setAuthorizers(weblogic.management.security.authorization.AuthorizerMBean[])"/>
      <method name="setAutoRestartOnNonDynamicChanges(boolean)"/>
      <method name="setCertPathBuilder(weblogic.management.security.pk.CertPathBuilderMBean)"/>
      <method name="setCertPathProviders(weblogic.management.security.pk.CertPathProviderMBean[])"/>
      <method name="setCombinedRoleMappingEnabled(boolean)"/>
      <method name="setCredentialMappers(weblogic.management.security.credentials.CredentialMapperMBean[])"/>
      <method name="setDefaultRealm(boolean)"/>
      <method name="setDelegateMBeanAuthorization(boolean)"/>
      <method name="setDeployCredentialMappingIgnored(boolean)"/>
      <method name="setDeployPolicyIgnored(boolean)"/>
      <method name="setDeployRoleIgnored(boolean)"/>
      <method name="setDeployableProviderSynchronizationEnabled(boolean)"/>
      <method name="setDeployableProviderSynchronizationTimeout(java.lang.Integer)"/>
      <method name="setEnableWebLogicPrincipalValidatorCache(boolean)"/>
      <method name="setFullyDelegateAuthorization(boolean)"/>
      <method name="setIdentityAssertionHeaderNamePrecedence(java.lang.String[])"/>
      <method name="setManagementIdentityDomain(java.lang.String)"/>
      <method name="setMaxWebLogicPrincipalsInCache(java.lang.Integer)"/>
      <method name="setPasswordValidators(weblogic.management.security.authentication.PasswordValidatorMBean[])"/>
      <method name="setRetireTimeoutSeconds(int)"/>
      <method name="setRoleMappers(weblogic.management.security.authorization.RoleMapperMBean[])"/>
      <method name="setSecurityDDModel(java.lang.String)"/>
      <method name="setValidateDDSecurityData(boolean)"/>
      <method name="validate()"/>
      <method name="createRDBMSSecurityStore()"/>
      <method name="createRDBMSSecurityStore(java.lang.String)"/>
      <method name="getRDBMSSecurityStore()"/>
      <method name="createAuditor(java.lang.String,java.lang.String)"/>
      <method name="createAuditor(java.lang.String)"/>
      <method name="lookupAuditor(java.lang.String)"/>
      <method name="getAuditors()"/>
      <method name="createAuthenticationProvider(java.lang.String,java.lang.String)"/>
      <method name="createAuthenticationProvider(java.lang.String)"/>
      <method name="lookupAuthenticationProvider(java.lang.String)"/>
      <method name="getAuthenticationProviders()"/>
      <method name="createPasswordValidator(java.lang.String,java.lang.String)"/>
      <method name="createPasswordValidator(java.lang.String)"/>
      <method name="lookupPasswordValidator(java.lang.String)"/>
      <method name="getPasswordValidators()"/>
      <method name="getUserLockoutManager()"/>
      <method name="createAdjudicator(java.lang.String,java.lang.String)"/>
      <method name="createAdjudicator(java.lang.String)"/>
      <method name="getAdjudicator()"/>
      <method name="createAuthorizer(java.lang.String,java.lang.String)"/>
      <method name="createAuthorizer(java.lang.String)"/>
      <method name="lookupAuthorizer(java.lang.String)"/>
      <method name="getAuthorizers()"/>
      <method name="createRoleMapper(java.lang.String,java.lang.String)"/>
      <method name="createRoleMapper(java.lang.String)"/>
      <method name="lookupRoleMapper(java.lang.String)"/>
      <method name="getRoleMappers()"/>
      <method name="createCredentialMapper(java.lang.String,java.lang.String)"/>
      <method name="createCredentialMapper(java.lang.String)"/>
      <method name="lookupCredentialMapper(java.lang.String)"/>
      <method name="getCredentialMappers()"/>
      <method name="getCertPathBuilder()"/>
      <method name="createCertPathProvider(java.lang.String,java.lang.String)"/>
      <method name="createCertPathProvider(java.lang.String)"/>
      <method name="lookupCertPathProvider(java.lang.String)"/>
      <method name="getCertPathProviders()"/>
    </class>
  </package>
  <package name="weblogic.management.security.audit">
    <class name="AuditorImpl" members="concealed"/>
    <class name="AuditorMBean" members="concealed"/>
    <class name="ContextHandlerMBean">
      <method name="getActiveContextHandlerEntries()"/>
      <method name="getSupportedContextHandlerEntries()"/>
      <method name="setActiveContextHandlerEntries(java.lang.String[])"/>
    </class>
  </package>
  <package name="weblogic.management.security.authentication">
    <class name="AnyIdentityDomainAuthenticatorMBean">
      <method name="isAnyIdentityDomainEnabled()"/>
      <method name="setAnyIdentityDomainEnabled(boolean)"/>
    </class>
    <class name="AuthenticationProviderImpl" members="concealed"/>
    <class name="AuthenticationProviderMBean" members="concealed"/>
    <class name="AuthenticatorImpl" members="concealed"/>
    <class name="AuthenticatorMBean">
      <method name="getControlFlag()"/>
      <method name="setControlFlag(java.lang.String)"/>
    </class>
    <class name="GroupEditorMBean">
      <method name="addMemberToGroup(java.lang.String,java.lang.String)"/>
      <method name="createGroup(java.lang.String,java.lang.String)"/>
      <method name="removeMemberFromGroup(java.lang.String,java.lang.String)"/>
      <method name="setGroupDescription(java.lang.String,java.lang.String)"/>
    </class>
    <class name="GroupMemberListerMBean">
      <method name="listGroupMembers(java.lang.String,java.lang.String,int)"/>
    </class>
    <class name="GroupMembershipHierarchyCacheMBean">
      <method name="getEnableGroupMembershipLookupHierarchyCaching()"/>
      <method name="getGroupHierarchyCacheTTL()"/>
      <method name="getMaxGroupHierarchiesInCache()"/>
      <method name="setEnableGroupMembershipLookupHierarchyCaching(java.lang.Boolean)"/>
      <method name="setGroupHierarchyCacheTTL(java.lang.Integer)"/>
      <method name="setMaxGroupHierarchiesInCache(java.lang.Integer)"/>
    </class>
    <class name="GroupReaderMBean">
      <method name="groupExists(java.lang.String)"/>
      <method name="isMember(java.lang.String,java.lang.String,boolean)"/>
      <method name="getGroupDescription(java.lang.String)"/>
      <method name="listGroups(java.lang.String,int)"/>
    </class>
    <class name="GroupRemoverMBean">
      <method name="removeGroup(java.lang.String)"/>
    </class>
    <class name="GroupUserListerMBean">
      <method name="listAllUsersInGroup(java.lang.String,java.lang.String,int)"/>
    </class>
    <class name="IdentityAsserterImpl">
      <method name="validateActiveTypes(java.lang.String[])"/>
    </class>
    <class name="IdentityAsserterMBean">
      <method name="getBase64DecodingRequired()"/>
      <method name="getActiveTypes()"/>
      <method name="getSupportedTypes()"/>
      <method name="setActiveTypes(java.lang.String[])"/>
      <method name="setBase64DecodingRequired(boolean)"/>
    </class>
    <class name="IdentityDomainAuthenticatorMBean">
      <method name="getIdentityDomain()"/>
      <method name="setIdentityDomain(java.lang.String)"/>
    </class>
    <class name="MemberGroupListerMBean">
      <method name="listMemberGroups(java.lang.String)"/>
    </class>
    <class name="MultiIdentityDomainAuthenticatorMBean">
      <method name="getIdentityDomains()"/>
      <method name="setIdentityDomains(java.lang.String[])"/>
    </class>
    <class name="PasswordValidatorMBean" members="concealed"/>
    <class name="ServletAuthenticationFilterMBean" members="concealed"/>
    <class name="UserAttributeEditorMBean">
      <method name="setUserAttributeValue(java.lang.String,java.lang.String,java.lang.Object)"/>
    </class>
    <class name="UserAttributeReaderMBean">
      <method name="isUserAttributeNameSupported(java.lang.String)"/>
      <method name="getUserAttributeValue(java.lang.String,java.lang.String)"/>
      <method name="getSupportedUserAttributeNames()"/>
      <method name="getSupportedUserAttributeType(java.lang.String)"/>
    </class>
    <class name="UserEditorMBean">
      <method name="createUser(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="setUserDescription(java.lang.String,java.lang.String)"/>
    </class>
    <class name="UserLockoutManagerMBean">
      <method name="isLockedOut(java.lang.String)"/>
      <method name="isLockoutEnabled()"/>
      <method name="getName()"/>
      <method name="getInvalidLoginAttemptsTotalCount()"/>
      <method name="getInvalidLoginUsersHighCount()"/>
      <method name="getLastLoginFailure(java.lang.String)"/>
      <method name="getLockedUsersCurrentCount()"/>
      <method name="getLockoutCacheSize()"/>
      <method name="getLockoutDuration()"/>
      <method name="getLockoutGCThreshold()"/>
      <method name="getLockoutResetDuration()"/>
      <method name="getLockoutThreshold()"/>
      <method name="getLoginAttemptsWhileLockedTotalCount()"/>
      <method name="getLoginFailureCount(java.lang.String)"/>
      <method name="getUnlockedUsersTotalCount()"/>
      <method name="getUserLockoutTotalCount()"/>
      <method name="clearLockout(java.lang.String)"/>
      <method name="setLockoutCacheSize(long)"/>
      <method name="setLockoutDuration(long)"/>
      <method name="setLockoutEnabled(boolean)"/>
      <method name="setLockoutGCThreshold(long)"/>
      <method name="setLockoutResetDuration(long)"/>
      <method name="setLockoutThreshold(long)"/>
      <method name="getRealm()"/>
    </class>
    <class name="UserPasswordEditorMBean">
      <method name="changeUserPassword(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="resetUserPassword(java.lang.String,java.lang.String)"/>
    </class>
    <class name="UserReaderMBean">
      <method name="userExists(java.lang.String)"/>
      <method name="getUserDescription(java.lang.String)"/>
      <method name="listUsers(java.lang.String,int)"/>
    </class>
    <class name="UserRemoverMBean">
      <method name="removeUser(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.management.security.authorization">
    <class name="AdjudicatorImpl" members="concealed"/>
    <class name="AdjudicatorMBean" members="concealed"/>
    <class name="AuthorizerImpl" members="concealed"/>
    <class name="AuthorizerMBean" members="concealed"/>
    <class name="ComponentType">
      <field name="CONNECTOR"/>
      <field name="EJB"/>
      <field name="WEBAPP"/>
      <field name="WEBSERVICE"/>
    </class>
    <class name="DeployableAuthorizerImpl" members="concealed"/>
    <class name="DeployableAuthorizerMBean">
      <method name="isPolicyDeploymentEnabled()"/>
      <method name="setPolicyDeploymentEnabled(boolean)"/>
    </class>
    <class name="DeployableRoleMapperImpl" members="concealed"/>
    <class name="DeployableRoleMapperMBean">
      <method name="isRoleDeploymentEnabled()"/>
      <method name="setRoleDeploymentEnabled(boolean)"/>
    </class>
    <class name="ListerKeys">
      <field name="AUX_DATA"/>
      <field name="EXPRESSION"/>
      <field name="POLICY_SOURCE"/>
      <field name="RESOURCE_ID"/>
      <field name="ROLE_NAME"/>
    </class>
    <class name="PolicyAuxiliaryMBean">
      <method name="getResourceNames(java.lang.String)"/>
      <method name="listAllURIs(java.lang.String,java.lang.String)"/>
      <method name="exportResource(java.lang.String,java.lang.String)"/>
    </class>
    <class name="PolicyConsumerMBean" members="concealed"/>
    <class name="PolicyEditorMBean">
      <method name="createPolicy(java.lang.String,java.lang.String)"/>
      <method name="removePolicy(java.lang.String)"/>
      <method name="setPolicyExpression(java.lang.String,java.lang.String)"/>
    </class>
    <class name="PolicyListerMBean">
      <method name="listAllPolicies(int)"/>
      <method name="listChildPolicies(java.lang.String,int)"/>
      <method name="listPoliciesByApplication(java.lang.String,int)"/>
      <method name="listPoliciesByComponent(java.lang.String,java.lang.String,java.lang.String,int)"/>
      <method name="listPoliciesByResourceType(java.lang.String,int)"/>
      <method name="listRepeatingActionsPolicies(java.lang.String,int)"/>
      <method name="getPolicy(java.lang.String)"/>
    </class>
    <class name="PolicyReaderMBean">
      <method name="policyExists(java.lang.String)"/>
      <method name="getPolicyExpression(java.lang.String)"/>
    </class>
    <class name="PolicyStoreMBean">
      <method name="readPolicy(java.lang.String,java.lang.String)"/>
      <method name="readPolicySet(java.lang.String,java.lang.String)"/>
      <method name="getPolicySetStatus(java.lang.String,java.lang.String)"/>
      <method name="getPolicyStatus(java.lang.String,java.lang.String)"/>
      <method name="listAllPolicies()"/>
      <method name="listAllPoliciesAsString()"/>
      <method name="listAllPolicySets()"/>
      <method name="listAllPolicySetsAsString()"/>
      <method name="readPolicyAsString(java.lang.String,java.lang.String)"/>
      <method name="readPolicySetAsString(java.lang.String,java.lang.String)"/>
      <field name="ACTIVE"/>
      <field name="BYREFERENCE"/>
      <field name="DOCUMENT"/>
      <field name="ID"/>
      <field name="INACTIVE"/>
      <field name="STATUS"/>
      <field name="VERSION"/>
      <method name="addPolicy(com.bea.common.security.xacml.policy.Policy)"/>
      <method name="addPolicy(com.bea.common.security.xacml.policy.Policy,java.lang.String)"/>
      <method name="addPolicy(java.lang.String)"/>
      <method name="addPolicy(java.lang.String,java.lang.String)"/>
      <method name="addPolicySet(com.bea.common.security.xacml.policy.PolicySet)"/>
      <method name="addPolicySet(com.bea.common.security.xacml.policy.PolicySet,java.lang.String)"/>
      <method name="addPolicySet(java.lang.String)"/>
      <method name="addPolicySet(java.lang.String,java.lang.String)"/>
      <method name="deletePolicy(java.lang.String,java.lang.String)"/>
      <method name="deletePolicySet(java.lang.String,java.lang.String)"/>
      <method name="modifyPolicy(com.bea.common.security.xacml.policy.Policy)"/>
      <method name="modifyPolicy(com.bea.common.security.xacml.policy.Policy,java.lang.String)"/>
      <method name="modifyPolicy(java.lang.String)"/>
      <method name="modifyPolicy(java.lang.String,java.lang.String)"/>
      <method name="modifyPolicySet(com.bea.common.security.xacml.policy.PolicySet)"/>
      <method name="modifyPolicySet(com.bea.common.security.xacml.policy.PolicySet,java.lang.String)"/>
      <method name="modifyPolicySet(java.lang.String)"/>
      <method name="modifyPolicySet(java.lang.String,java.lang.String)"/>
      <method name="modifyPolicySetStatus(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="modifyPolicyStatus(java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="PredicateEditorMBean">
      <method name="registerPredicate(java.lang.String)"/>
      <method name="unregisterPredicate(java.lang.String)"/>
    </class>
    <class name="PredicateReaderMBean">
      <method name="isRegisteredPredicate(java.lang.String)"/>
      <method name="getRegisteredPredicates(java.lang.String)"/>
    </class>
    <class name="RoleAuxiliaryMBean">
      <method name="getRoleAuxiliary(java.lang.String,java.lang.String)"/>
      <method name="listAllRolesAndURIs(java.lang.String,java.lang.String)"/>
      <method name="getRoleNames(java.lang.String)"/>
      <method name="createRole(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="exportResource(java.lang.String,java.lang.String)"/>
      <method name="setRoleAuxiliary(java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="RoleConsumerMBean" members="concealed"/>
    <class name="RoleEditorMBean">
      <method name="createRole(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="removeRole(java.lang.String,java.lang.String)"/>
      <method name="setRoleExpression(java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="RoleListerMBean">
      <method name="listAllRoles(int)"/>
      <method name="listChildRoles(java.lang.String,int)"/>
      <method name="listRepeatingActionsRoles(java.lang.String,int)"/>
      <method name="listRoles(java.lang.String,int)"/>
      <method name="listRolesByApplication(java.lang.String,int)"/>
      <method name="listRolesByComponent(java.lang.String,java.lang.String,java.lang.String,int)"/>
      <method name="listRolesByResourceType(java.lang.String,int)"/>
      <method name="getRole(java.lang.String,java.lang.String)"/>
      <method name="getRoleScopedByResource(java.lang.String,java.lang.String)"/>
    </class>
    <class name="RoleMapperImpl" members="concealed"/>
    <class name="RoleMapperMBean" members="concealed"/>
    <class name="RoleReaderMBean">
      <method name="roleExists(java.lang.String,java.lang.String)"/>
      <method name="getRoleExpression(java.lang.String,java.lang.String)"/>
      <method name="listRolesForResource(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.management.security.credentials">
    <class name="CredentialCacheMBean">
      <method name="isCredentialCachingEnabled()"/>
      <method name="getCredentialCacheTTL()"/>
      <method name="getCredentialsCacheSize()"/>
      <method name="setCredentialCacheTTL(int)"/>
      <method name="setCredentialCachingEnabled(boolean)"/>
      <method name="setCredentialsCacheSize(int)"/>
    </class>
    <class name="CredentialMapperImpl" members="concealed"/>
    <class name="CredentialMapperMBean" members="concealed"/>
    <class name="CredentialProperty">
      <field name="ALIAS"/>
      <field name="CREDENTIAL_NAME"/>
      <field name="KEYSTORE_ALIAS"/>
      <field name="USER_NAME"/>
    </class>
    <class name="DeployableCredentialMapperImpl" members="concealed"/>
    <class name="DeployableCredentialMapperMBean">
      <method name="isCredentialMappingDeploymentEnabled()"/>
      <method name="setCredentialMappingDeploymentEnabled(boolean)"/>
    </class>
    <class name="PKICredentialMapEditorMBean">
      <method name="removePKICredentialMapping(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)"/>
      <method name="setCertificateCredential(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)"/>
      <method name="setKeypairCredential(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,char[])"/>
    </class>
    <class name="PKICredentialMapExtendedEditorMBean">
      <method name="removePKICredentialMapping(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)"/>
      <method name="setCertificateCredential(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)"/>
      <method name="setKeypairCredential(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,char[])"/>
    </class>
    <class name="PKICredentialMapExtendedReaderMBean">
      <method name="getCurrentInitiatorIdentityDomain(java.lang.String)"/>
      <method name="getKeystoreAlias(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)"/>
    </class>
    <class name="PKICredentialMapReaderMBean">
      <method name="isInitiatorUserName(java.lang.String)"/>
      <method name="getCurrentCredAction(java.lang.String)"/>
      <method name="getCurrentCredential(java.lang.String)"/>
      <method name="getCurrentInitiatorName(java.lang.String)"/>
      <method name="getCurrentResourceId(java.lang.String)"/>
      <method name="getKeystoreAlias(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String)"/>
      <method name="listMappings(java.lang.String,java.lang.String)"/>
      <method name="listMappingsByPattern(java.lang.String,int,java.lang.String)"/>
      <method name="listAllCertEntryAliases()"/>
      <method name="listAllKeypairEntryAliases()"/>
      <method name="getCertificate(java.lang.String)"/>
    </class>
    <class name="UserPasswordCredentialMapEditorMBean">
      <method name="removeUserPasswordCredential(java.lang.String,java.lang.String)"/>
      <method name="removeUserPasswordCredentialMapping(java.lang.String,java.lang.String)"/>
      <method name="setUserPasswordCredential(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="setUserPasswordCredentialMapping(java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="UserPasswordCredentialMapExtendedEditorMBean">
      <method name="removeUserPasswordCredentialMapping(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="setUserPasswordCredentialMapping(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="UserPasswordCredentialMapExtendedReaderMBean">
      <method name="getCurrentMappingResourceID(java.lang.String)"/>
      <method name="listMappingsByPattern(java.lang.String,int)"/>
    </class>
    <class name="UserPasswordCredentialMapExtendedV2ReaderMBean">
      <method name="getCurrentMappingWLSUserIdentityDomain(java.lang.String)"/>
      <method name="getRemoteUserName(java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="UserPasswordCredentialMapReaderMBean">
      <method name="getCurrentCredentialRemotePassword(java.lang.String)"/>
      <method name="getCurrentCredentialRemoteUserName(java.lang.String)"/>
      <method name="getCurrentMappingRemoteUserName(java.lang.String)"/>
      <method name="getCurrentMappingWLSUserName(java.lang.String)"/>
      <method name="getRemotePassword(java.lang.String,java.lang.String)"/>
      <method name="getRemoteUserName(java.lang.String,java.lang.String)"/>
      <method name="listCredentials(java.lang.String)"/>
      <method name="listMappings(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.management.security.pk">
    <class name="CertPathBuilderImpl" members="concealed"/>
    <class name="CertPathBuilderMBean" members="concealed"/>
    <class name="CertPathBuilderValidatorImpl" members="concealed"/>
    <class name="CertPathProviderImpl" members="concealed"/>
    <class name="CertPathProviderMBean" members="concealed"/>
    <class name="CertPathValidatorImpl" members="concealed"/>
    <class name="CertPathValidatorMBean" members="concealed"/>
    <class name="KeyStoreImpl" members="concealed"/>
  </package>
  <package name="weblogic.management.timer">
    <class name="Timer">
      <method name="getSendPastNotifications()"/>
      <method name="isActive()"/>
      <method name="isEmpty()"/>
      <method name="getNbNotifications()"/>
      <method name="getFixedRate(java.lang.Integer)"/>
      <method name="addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date)"/>
      <method name="addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long)"/>
      <method name="addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long)"/>
      <method name="addNotification(java.lang.String,java.lang.String,java.lang.Object,java.util.Date,long,long,boolean)"/>
      <method name="getNbOccurences(java.lang.Integer)"/>
      <method name="getPeriod(java.lang.Integer)"/>
      <method name="getNotificationUserData(java.lang.Integer)"/>
      <method name="getNotificationMessage(java.lang.Integer)"/>
      <method name="getNotificationType(java.lang.Integer)"/>
      <method name="getDate(java.lang.Integer)"/>
      <method name="getAllNotificationIDs()"/>
      <method name="getNotificationIDs(java.lang.String)"/>
      <method name="getNotificationInfo()"/>
      <method name="addNotificationListener(javax.management.NotificationListener,javax.management.NotificationFilter,java.lang.Object)"/>
      <method name="deliverNotifications(javax.management.Notification)"/>
      <method name="removeAllNotifications()"/>
      <method name="removeNotification(java.lang.Integer)"/>
      <method name="removeNotificationListener(javax.management.NotificationListener)"/>
      <method name="removeNotifications(java.lang.String)"/>
      <method name="setSendPastNotifications(boolean)"/>
      <method name="start()"/>
      <method name="stop()"/>
    </class>
    <class name="TimerListener">
      <method name="getListener()"/>
      <method name="deliverNotification(javax.management.Notification)"/>
    </class>
  </package>
  <package name="weblogic.management.utils">
    <class name="AlreadyExistsException" members="concealed"/>
    <class name="CreateException" members="concealed"/>
    <class name="ErrorCollectionException">
      <method name="isEmpty()"/>
      <method name="getBaseMessage()"/>
      <method name="getMessage()"/>
      <method name="getExceptions()"/>
      <field name="serialVersionUID"/>
      <method name="add(java.lang.Throwable)"/>
    </class>
    <class name="InvalidCursorException" members="concealed"/>
    <class name="InvalidParameterException" members="concealed"/>
    <class name="InvalidPredicateException" members="concealed"/>
    <class name="LDAPServerMBean">
      <method name="isBindAnonymouslyOnReferrals()"/>
      <method name="isCacheEnabled()"/>
      <method name="isFollowReferrals()"/>
      <method name="isSSLEnabled()"/>
      <method name="getCredentialEncrypted()"/>
      <method name="getCacheSize()"/>
      <method name="getCacheTTL()"/>
      <method name="getConnectTimeout()"/>
      <method name="getConnectionPoolSize()"/>
      <method name="getConnectionRetryLimit()"/>
      <method name="getParallelConnectDelay()"/>
      <method name="getPort()"/>
      <method name="getResultsTimeLimit()"/>
      <method name="getCredential()"/>
      <method name="getHost()"/>
      <method name="getPrincipal()"/>
      <method name="setBindAnonymouslyOnReferrals(boolean)"/>
      <method name="setCacheEnabled(boolean)"/>
      <method name="setCacheSize(int)"/>
      <method name="setCacheTTL(int)"/>
      <method name="setConnectTimeout(int)"/>
      <method name="setConnectionPoolSize(int)"/>
      <method name="setConnectionRetryLimit(int)"/>
      <method name="setCredential(java.lang.String)"/>
      <method name="setCredentialEncrypted(byte[])"/>
      <method name="setFollowReferrals(boolean)"/>
      <method name="setHost(java.lang.String)"/>
      <method name="setParallelConnectDelay(int)"/>
      <method name="setPort(int)"/>
      <method name="setPrincipal(java.lang.String)"/>
      <method name="setResultsTimeLimit(int)"/>
      <method name="setSSLEnabled(boolean)"/>
    </class>
    <class name="ListerMBean">
      <method name="haveCurrent(java.lang.String)"/>
      <method name="advance(java.lang.String)"/>
      <method name="close(java.lang.String)"/>
    </class>
    <class name="NameListerMBean">
      <method name="getCurrentName(java.lang.String)"/>
    </class>
    <class name="NotFoundException" members="concealed"/>
    <class name="PropertiesListerMBean">
      <method name="getCurrentProperties(java.lang.String)"/>
    </class>
    <class name="RemoveException" members="concealed"/>
  </package>
  <package name="weblogic.messaging.runtime">
    <class name="MessageInfo">
      <method name="getCompositeDataMap()"/>
      <method name="getCompositeType()"/>
      <method name="initOpenInfo()"/>
      <method name="readCompositeData(javax.management.openmbean.CompositeData)"/>
      <method name="getState()"/>
      <field name="state"/>
      <method name="getHandle()"/>
      <field name="handle"/>
      <field name="consumerID"/>
      <method name="getConsumerID()"/>
      <method name="getStateString()"/>
      <method name="getXidString()"/>
      <field name="stateString"/>
      <field name="xidString"/>
      <field name="openItemDescriptions"/>
      <field name="openItemNames"/>
      <field name="openItemTypes"/>
      <method name="toCompositeData()"/>
      <method name="getSequenceNumber()"/>
      <field name="sequenceNumber"/>
      <field name="STATE_DELAYED"/>
      <field name="STATE_EXPIRED"/>
      <field name="STATE_ORDERED"/>
      <field name="STATE_PAUSED"/>
      <field name="STATE_RECEIVE"/>
      <field name="STATE_REDELIVERY_COUNT_EXCEEDED"/>
      <field name="STATE_SEND"/>
      <field name="STATE_TRANSACTION"/>
      <field name="STATE_VISIBLE"/>
      <field name="ITEM_CONSUMER_ID"/>
      <field name="ITEM_HANDLE"/>
      <field name="ITEM_SEQUENCE_NUMBER"/>
      <field name="ITEM_STATE"/>
      <field name="ITEM_XID_STRING"/>
      <method name="getStateString(int)"/>
      <method name="setConsumerID(java.lang.String)"/>
      <method name="setHandle(java.lang.Long)"/>
      <method name="setSequenceNumber(long)"/>
      <method name="setState(int)"/>
      <method name="setXidString(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.messaging.saf">
    <class name="SAFException">
      <constructor name="SAFException(java.lang.String,java.lang.Throwable,weblogic.messaging.saf.SAFResult.Result)"/>
      <constructor name="SAFException(java.lang.String,weblogic.messaging.saf.SAFResult.Result)"/>
      <method name="shouldRetry()"/>
      <method name="getResultCode()"/>
    </class>
  </package>
  <package name="weblogic.net.http">
    <class name="AsyncResponseCallback">
      <method name="handleResponse(weblogic.net.http.HttpURLConnection)"/>
    </class>
    <class name="BaseHandler">
      <method name="init()"/>
    </class>
    <class name="ContentLengthOutputStream">
      <method name="close()"/>
      <method name="write(byte[])"/>
      <method name="write(byte[],int,int)"/>
      <method name="write(int)"/>
    </class>
    <class name="ContextAwareAsyncResponseCallback" members="concealed"/>
    <class name="Handler">
      <method name="getDefaultPort()"/>
      <method name="openConnection(java.net.URL,java.net.Proxy)"/>
    </class>
    <class name="HttpOutputStream">
      <method name="print(java.lang.String)"/>
      <method name="write(byte[])"/>
      <method name="write(byte[],int,int)"/>
      <method name="write(int)"/>
    </class>
    <class name="HttpRetryException" members="concealed"/>
    <class name="HttpURLConnection">
      <method name="followRedirect()"/>
      <method name="getProtocol()"/>
      <method name="getProxyAuthString()"/>
      <method name="doSetRequests()"/>
      <method name="writeRequests()"/>
      <method name="getHttpClient()"/>
      <field name="ignoreProxy"/>
      <field name="ignoreSystemNonProxyHosts"/>
      <method name="usingProxy()"/>
      <method name="getConnectTimeout()"/>
      <method name="getReadTimeout()"/>
      <method name="getResponseCode()"/>
      <method name="getTimeout()"/>
      <field name="rememberedException"/>
      <method name="getErrorStream()"/>
      <method name="getInputStream()"/>
      <method name="getOutputStream()"/>
      <method name="getHeaderField(int)"/>
      <method name="getHeaderField(java.lang.String)"/>
      <method name="getHeaderFieldKey(int)"/>
      <method name="getRequestProperty(java.lang.String)"/>
      <method name="getHeaderFields()"/>
      <method name="getRequestProperties()"/>
      <method name="getSocketFactory()"/>
      <field name="defaultConnectTimeout"/>
      <method name="getAuthInfo(java.lang.String,int,java.lang.String)"/>
      <method name="getProxyBasicCredentials(java.lang.String,int,java.lang.String,java.net.URL)"/>
      <method name="getServerBasicCredentials(java.net.URL,java.lang.String)"/>
      <method name="setDefaultSocketFactory(javax.net.SocketFactory)"/>
      <method name="addRequestProperty(java.lang.String,java.lang.String)"/>
      <method name="connect()"/>
      <method name="disconnect()"/>
      <method name="setChunkedStreamingMode(int)"/>
      <method name="setConnectTimeout(int)"/>
      <method name="setEmptyRequestProperty(java.lang.String)"/>
      <method name="setFixedLengthStreamingMode(int)"/>
      <method name="setIgnoreProxy(boolean)"/>
      <method name="setIgnoreSystemNonProxyHosts(boolean)"/>
      <method name="setMuxableSocket(java.lang.Object)"/>
      <method name="setReadTimeout(int)"/>
      <method name="setRequestMethod(java.lang.String)"/>
      <method name="setRequestProperty(java.lang.String,java.lang.String)"/>
      <method name="setSocketFactory(javax.net.SocketFactory)"/>
      <method name="setTimeout(int)"/>
    </class>
    <class name="HttpsURLConnection">
      <method name="getProtocol()"/>
      <method name="getHttpClient()"/>
      <method name="getCipherSuite()"/>
      <method name="getServerCertificates()"/>
      <method name="getSSLSession()"/>
      <method name="getServerCertificateChain()"/>
      <method name="getDefaultSSLSocketFactory()"/>
      <method name="connect()"/>
      <method name="loadLocalIdentity(java.io.InputStream,java.io.InputStream,char[])"/>
      <method name="loadLocalIdentity(java.io.InputStream[])"/>
      <method name="loadLocalIdentity(java.security.cert.Certificate[],java.security.PrivateKey)"/>
      <method name="setHostnameVerifier(weblogic.security.SSL.HostnameVerifier)"/>
      <method name="setSSLClientCertificate(java.io.InputStream[])"/>
      <method name="setSSLSocketFactory(weblogic.security.SSL.SSLSocketFactory)"/>
      <method name="setTrustManager(weblogic.security.SSL.TrustManager)"/>
      <method name="getHostnameVerifier()"/>
      <method name="getSSLSocketFactory()"/>
      <method name="getTrustManager()"/>
    </class>
    <class name="SOAPHttpURLConnection">
      <method name="getInputStream()"/>
    </class>
    <class name="SOAPHttpsURLConnection">
      <method name="getInputStream()"/>
    </class>
    <class name="SocketClosedNotification">
      <method name="read()"/>
    </class>
    <class name="SocketTimeoutNotification">
      <method name="read()"/>
    </class>
  </package>
  <package name="weblogic.protocol">
    <class name="Protocol">
      <method name="isEnabled()"/>
      <method name="isSatisfactoryQOS(byte)"/>
      <method name="isSecure()"/>
      <method name="isUnknown()"/>
      <method name="getQOS()"/>
      <method name="toByte()"/>
      <method name="getAsURLPrefix()"/>
      <method name="getProtocolName()"/>
      <field name="ADMIN"/>
      <field name="CLUSTER"/>
      <field name="CLUSTERS"/>
      <field name="COM"/>
      <field name="DYNAMIC_PROTOCOL"/>
      <field name="HTTP"/>
      <field name="HTTPS"/>
      <field name="IIOP"/>
      <field name="IIOPS"/>
      <field name="JRMP"/>
      <field name="LDAP"/>
      <field name="LDAPS"/>
      <field name="QOS_ADMIN"/>
      <field name="QOS_ANY"/>
      <field name="QOS_SECURE"/>
      <field name="SNMP"/>
      <field name="T3S"/>
      <field name="PROTOCOL_ADMIN_NAME"/>
      <method name="upgrade()"/>
    </class>
    <class name="ServerChannel">
      <method name="getResolveDNSName()"/>
      <method name="getTimeoutConnectionWithPendingResponses()"/>
      <method name="getUseFastSerialization()"/>
      <method name="isAllowUnencryptedNullCipher()"/>
      <method name="isClientCertificateEnforced()"/>
      <method name="isClientInitSecureRenegotiationAccepted()"/>
      <method name="isHostnameVerificationIgnored()"/>
      <method name="isHttpEnabledForThisProtocol()"/>
      <method name="isOutboundEnabled()"/>
      <method name="isOutboundPrivateKeyEnabled()"/>
      <method name="isSDPEnabled()"/>
      <method name="isSSLv2HelloEnabled()"/>
      <method name="isT3SenderQueueDisabled()"/>
      <method name="isTunnelingEnabled()"/>
      <method name="isTwoWaySSLEnabled()"/>
      <method name="getAcceptBacklog()"/>
      <method name="getCompleteMessageTimeout()"/>
      <method name="getConnectTimeout()"/>
      <method name="getIdleConnectionTimeout()"/>
      <method name="getLoginTimeoutMillis()"/>
      <method name="getMaxBackoffBetweenFailures()"/>
      <method name="getMaxConnectedClients()"/>
      <method name="getMaxMessageSize()"/>
      <method name="getPort()"/>
      <method name="getProxyPort()"/>
      <method name="getPublicPort()"/>
      <method name="getTunnelingClientPingSecs()"/>
      <method name="getTunnelingClientTimeoutSecs()"/>
      <method name="getAddress()"/>
      <method name="getAssociatedVirtualTargetName()"/>
      <method name="getChannelName()"/>
      <method name="getClusterAddress()"/>
      <method name="getConfiguredProtocol()"/>
      <method name="getHostnameVerifier()"/>
      <method name="getInboundCertificateValidation()"/>
      <method name="getMinimumTLSProtocolVersion()"/>
      <method name="getOutboundCertificateValidation()"/>
      <method name="getProxyAddress()"/>
      <method name="getPublicAddress()"/>
      <method name="getCiphersuites()"/>
      <method name="getInetAddress()"/>
      <field name="INVALID_PORT"/>
      <field name="DEFAULT_ADMIN_CHANNEL"/>
      <field name="DEFAULT_CHANNEL_NAME"/>
      <field name="DEFAULT_SECURE_CHANNEL_NAME"/>
      <method name="getProtocol()"/>
    </class>
  </package>
  <package name="weblogic.restart">
    <class name="RPException">
      <method name="isFatal()"/>
    </class>
  </package>
  <package name="weblogic.rmi">
    <class name="AlreadyBoundException" members="concealed"/>
    <class name="Naming">
      <field name="RMI_NAMING_JNDI_HOME"/>
      <field name="RMI_NAMING_JNDI_PATH"/>
      <method name="list(java.lang.String)"/>
      <method name="lookup(java.lang.String)"/>
      <method name="bind(java.lang.String,java.rmi.Remote)"/>
      <method name="bindJava(java.lang.String,java.rmi.Remote)"/>
      <method name="rebind(java.lang.String,java.rmi.Remote)"/>
      <method name="rebindJava(java.lang.String,java.rmi.Remote)"/>
      <method name="unbind(java.lang.String)"/>
    </class>
    <class name="NotBoundException" members="concealed"/>
    <class name="RMISecurityException" members="concealed"/>
    <class name="RMISecurityManager">
      <method name="assessTrust(java.lang.Object[])"/>
      <method name="checkTopLevelWindow(java.lang.Object)"/>
      <method name="checkAccept(java.lang.String,int)"/>
      <method name="checkAccess(java.lang.Thread)"/>
      <method name="checkAccess(java.lang.ThreadGroup)"/>
      <method name="checkAwtEventQueueAccess()"/>
      <method name="checkConnect(java.lang.String,int)"/>
      <method name="checkConnect(java.lang.String,int,java.lang.Object)"/>
      <method name="checkCreateClassLoader()"/>
      <method name="checkDelete(java.lang.String)"/>
      <method name="checkExec(java.lang.String)"/>
      <method name="checkExit(int)"/>
      <method name="checkLink(java.lang.String)"/>
      <method name="checkListen(int)"/>
      <method name="checkMemberAccess(java.lang.Class,int)"/>
      <method name="checkMulticast(java.net.InetAddress)"/>
      <method name="checkMulticast(java.net.InetAddress,byte)"/>
      <method name="checkPackageAccess(java.lang.String)"/>
      <method name="checkPackageDefinition(java.lang.String)"/>
      <method name="checkPrintJobAccess()"/>
      <method name="checkPropertiesAccess()"/>
      <method name="checkPropertyAccess(java.lang.String)"/>
      <method name="checkPropertyAccess(java.lang.String,java.lang.String)"/>
      <method name="checkRead(java.io.FileDescriptor)"/>
      <method name="checkRead(java.lang.String)"/>
      <method name="checkRead(java.lang.String,java.lang.Object)"/>
      <method name="checkSecurityAccess(java.lang.String)"/>
      <method name="checkSetFactory()"/>
      <method name="checkSystemClipboardAccess()"/>
      <method name="checkWrite(java.io.FileDescriptor)"/>
      <method name="checkWrite(java.lang.String)"/>
    </class>
    <class name="Remote" members="concealed"/>
    <class name="RmiContextConstants">
      <field name="CONNECT_TIMEOUT"/>
      <field name="REQUEST_TIMEOUT"/>
      <field name="RESPONSE_READ_TIMEOUT"/>
      <field name="RMI_TIMEOUT"/>
    </class>
    <class name="ServerShuttingDownException" members="concealed"/>
  </package>
  <package name="weblogic.rmi.annotation">
    <class name="LoadAlgorithmType" members="concealed"/>
    <class name="Rmi" members="concealed"/>
    <class name="RmiMethod" members="concealed"/>
  </package>
  <package name="weblogic.rmi.extensions">
    <class name="DisconnectEvent">
      <method name="getMessage()"/>
      <method name="getThrowable()"/>
      <method name="getTime()"/>
    </class>
    <class name="DisconnectListener">
      <method name="onDisconnect(weblogic.rmi.extensions.DisconnectEvent)"/>
    </class>
    <class name="DisconnectMonitor">
      <field name="JNDI_NAME"/>
      <method name="addDisconnectListener(java.rmi.Remote,weblogic.rmi.extensions.DisconnectListener)"/>
      <method name="removeDisconnectListener(java.rmi.Remote,weblogic.rmi.extensions.DisconnectListener)"/>
    </class>
    <class name="DisconnectMonitorException" members="concealed"/>
    <class name="DisconnectMonitorUnavailableException" members="concealed"/>
    <class name="PortableRemoteObject">
      <method name="narrow(java.lang.Object,java.lang.Class)"/>
      <method name="toStub(java.rmi.Remote)"/>
      <method name="exportObject(java.rmi.Remote)"/>
      <method name="unexportObject(java.rmi.Remote)"/>
    </class>
    <class name="RequestTimeoutException" members="concealed"/>
  </package>
  <package name="weblogic.rmi.extensions.server">
    <class name="RemoteExceptionWrapper" members="concealed"/>
  </package>
  <package name="weblogic.rmi.registry">
    <class name="LocateRegistry">
      <method name="list()"/>
      <method name="lookup(java.lang.String)"/>
      <method name="createRegistry(int)"/>
      <method name="getRegistry()"/>
      <method name="getRegistry(int)"/>
      <method name="getRegistry(java.lang.String)"/>
      <method name="getRegistry(java.lang.String,int)"/>
      <method name="bind(java.lang.String,java.rmi.Remote)"/>
      <method name="rebind(java.lang.String,java.rmi.Remote)"/>
      <method name="unbind(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.rmi.server">
    <class name="RemoteObject">
      <method name="toStub(java.rmi.Remote)"/>
    </class>
    <class name="RemoteServer">
      <method name="getLog()"/>
      <method name="getClientHost()"/>
      <method name="setLog(java.io.OutputStream)"/>
    </class>
    <class name="UnicastRemoteObject">
      <method name="clone()"/>
      <method name="unexportObject(java.lang.Object,boolean)"/>
      <method name="exportObject(java.rmi.Remote)"/>
    </class>
  </package>
  <package name="weblogic.rmi.spi">
    <class name="Channel">
      <method name="supportsTLS()"/>
      <method name="getPublicPort()"/>
      <method name="getProtocolPrefix()"/>
      <method name="getPublicAddress()"/>
      <method name="getInetAddress()"/>
      <method name="getPublicInetAddress()"/>
    </class>
    <class name="HostID">
      <method name="isLocal()"/>
      <method name="getServerName()"/>
      <method name="objectToString()"/>
    </class>
  </package>
  <package name="weblogic.rmi.utils">
    <class name="PartitionManagerPartitionStateAPI" members="concealed"/>
  </package>
  <package name="weblogic.security">
    <class name="BaseCallbackHandler">
      <method name="addCallbackStrategies(weblogic.security.BaseCallbackHandler.CallbackStrategy[])"/>
      <method name="handle(javax.security.auth.callback.Callback[])"/>
    </class>
    <class name="CertificatePoliciesExtension">
      <method name="isCritical()"/>
      <method name="getCertificatePoliciesExtension(java.security.cert.X509Certificate)"/>
      <method name="getPolicies()"/>
    </class>
    <class name="CertificatePolicy">
      <method name="getID()"/>
      <method name="getPolicyQualifiers()"/>
    </class>
    <class name="CertificatePolicyQualifier" members="concealed"/>
    <class name="KeyPairCredential">
      <method name="finalize()"/>
      <method name="isDisposed()"/>
      <method name="toString()"/>
      <method name="getKey()"/>
      <method name="getCertificate()"/>
      <method name="getCertificateChain()"/>
      <method name="dispose()"/>
    </class>
    <class name="PEMInputStream" members="concealed"/>
    <class name="PublicCertCredential">
      <method name="finalize()"/>
      <method name="isDisposed()"/>
      <method name="toString()"/>
      <method name="getCertificate()"/>
      <method name="dispose()"/>
    </class>
    <class name="ResourceId">
      <field name="RESOURCE_TYPE"/>
      <method name="getResourceIdFromMap(java.util.Map)"/>
      <method name="getParentResourceIds(java.lang.String)"/>
      <method name="getResourceKeyNames(java.lang.String)"/>
      <method name="getMapFromResourceId(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.security.SSL">
    <class name="CertCallback">
      <method name="isNioConfigured()"/>
      <method name="getDestinationPort()"/>
      <method name="getSourcePort()"/>
      <method name="getDestinationHost()"/>
      <method name="getSourceHost()"/>
      <method name="setSSLClientInfo(java.security.cert.Certificate[],java.security.PrivateKey)"/>
    </class>
    <class name="CertPathTrustManager">
      <method name="setBuiltinSSLValidationAndCertPathValidators()"/>
      <method name="setBuiltinSSLValidationOnly()"/>
      <method name="setUseConfiguredSSLValidation()"/>
    </class>
    <class name="CertificateCallback">
      <method name="validate(weblogic.security.SSL.CertificateCallbackInfo)"/>
    </class>
    <class name="CertificateCallbackInfo">
      <method name="getDstPort()"/>
      <method name="getSrcPort()"/>
      <method name="getDomainName()"/>
      <method name="getDstAddress()"/>
      <method name="getServerName()"/>
      <method name="getSrcAddress()"/>
      <method name="getCertificate()"/>
      <method name="getSubject()"/>
    </class>
    <class name="ClientCertificatePlugin">
      <method name="loadClientCertificate(weblogic.security.SSL.CertCallback,java.lang.String,java.lang.String)"/>
    </class>
    <class name="HostnameVerifier">
      <method name="verify(java.lang.String,javax.net.ssl.SSLSession)"/>
    </class>
    <class name="SSLContext">
      <method name="getProtocol()"/>
      <method name="getProvider()"/>
      <method name="getInstance(java.lang.String)"/>
      <method name="loadLocalIdentity(java.io.InputStream[])"/>
      <method name="loadLocalIdentity(java.io.InputStream[],java.lang.String)"/>
      <method name="loadLocalIdentity(java.security.cert.Certificate[],java.security.PrivateKey)"/>
      <method name="setHostnameVerifier(weblogic.security.SSL.HostnameVerifier)"/>
      <method name="setTrustManager(weblogic.security.SSL.TrustManager)"/>
      <method name="getSocketFactory()"/>
    </class>
    <class name="SSLSocketFactory">
      <method name="getDefaultCipherSuites()"/>
      <method name="getSupportedCipherSuites()"/>
      <method name="createSocket(java.lang.String,int)"/>
      <method name="createSocket(java.lang.String,int,java.net.InetAddress,int)"/>
      <method name="createSocket(java.net.InetAddress,int)"/>
      <method name="createSocket(java.net.InetAddress,int,java.net.InetAddress,int)"/>
      <method name="createSocket(java.net.InetAddress,int,int)"/>
      <method name="createSocket(java.net.Socket,java.lang.String,int,boolean)"/>
      <field name="jsseFactory"/>
      <field name="defFactory"/>
      <method name="getDefault()"/>
    </class>
    <class name="SSLValidationConstants">
      <field name="CHAIN_PREVALIDATED_BY_SSL"/>
    </class>
    <class name="TrustManager">
      <method name="certificateCallback(java.security.cert.X509Certificate[],int)"/>
      <field name="ERR_CERT_CHAIN_INCOMPLETE"/>
      <field name="ERR_CERT_CHAIN_INVALID"/>
      <field name="ERR_CERT_CHAIN_UNTRUSTED"/>
      <field name="ERR_CERT_EXPIRED"/>
      <field name="ERR_NONE"/>
      <field name="ERR_SIGNATURE_INVALID"/>
    </class>
  </package>
  <package name="weblogic.security.SSL.jsseadapter">
    <class name="PEMInputStream" members="concealed"/>
  </package>
  <package name="weblogic.security">
    <class name="Security">
      <constructor name="Security()"/>
      <method name="runAs(javax.security.auth.Subject,java.security.PrivilegedAction)"/>
      <method name="runAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)"/>
      <method name="getCurrentSubject()"/>
      <field name="kernelID"/>
    </class>
    <class name="SecurityInitializationException" members="concealed"/>
    <class name="SimpleCallbackHandler" members="concealed"/>
    <class name="SubjectUtils" members="concealed"/>
    <class name="URLCallbackHandler">
      <constructor name="URLCallbackHandler(java.lang.String,byte[])"/>
      <method name="handle(javax.security.auth.callback.Callback[])"/>
    </class>
    <class name="WSUserPasswordDigest">
      <method name="getDecodedNonce()"/>
      <method name="getDecodedPasswordDigest()"/>
      <method name="getCreatedString()"/>
      <method name="getUsername()"/>
      <method name="getCreatedTimeInMillis()"/>
    </class>
  </package>
  <package name="weblogic.security.auth">
    <class name="Authenticate">
      <method name="authenticate(weblogic.jndi.api.ServerEnvironment,javax.security.auth.Subject)"/>
      <method name="logout(javax.security.auth.Subject)"/>
    </class>
  </package>
  <package name="weblogic.security.auth.callback">
    <class name="ContextHandlerCallback">
      <method name="setContextHandler(weblogic.security.service.ContextHandler)"/>
      <method name="getContextHandler()"/>
    </class>
    <class name="GroupCallback">
      <method name="getPrompt()"/>
      <method name="getValue()"/>
      <method name="setValue(java.util.Collection)"/>
    </class>
    <class name="URLCallback">
      <constructor name="URLCallback(java.lang.String)"/>
      <constructor name="URLCallback(java.lang.String,java.lang.String)"/>
      <field name="defaultURL"/>
      <method name="getPrompt()"/>
      <method name="getURL()"/>
      <method name="getdefaultURL()"/>
      <field name="inputURL"/>
      <field name="prompt"/>
      <method name="setURL(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.security.auth.login">
    <class name="PasswordCredential">
      <method name="getPasswordCharArray()"/>
      <method name="getPassword()"/>
      <method name="getUsername()"/>
    </class>
    <class name="UsernamePasswordLoginModule">
      <method name="abort()"/>
      <method name="commit()"/>
      <method name="login()"/>
      <method name="logout()"/>
      <method name="initialize(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map)"/>
    </class>
  </package>
  <package name="weblogic.security.credential">
    <class name="Audience">
      <method name="getAudience()"/>
    </class>
    <class name="IDCSAudience">
      <constructor name="IDCSAudience(java.util.List)"/>
      <method name="getAudience()"/>
    </class>
  </package>
  <package name="weblogic.security.internal.encryption">
    <class name="EncryptionServiceException" members="concealed"/>
  </package>
  <package name="weblogic.security.jacc">
    <class name="RoleMapper">
      <method name="addAppRolesToPrincipalMap(java.util.Map)"/>
    </class>
    <class name="RoleMapperFactory">
      <method name="getRoleMapperFactory()"/>
      <method name="removeRoleMapper(java.lang.String)"/>
      <method name="getRoleMapper(java.lang.String,boolean)"/>
      <method name="getRoleMapper(java.lang.String,java.lang.String,boolean)"/>
      <method name="getRoleMapperForContextID(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.security.net">
    <class name="ConnectionEvent">
      <method name="equals(java.lang.Object)"/>
      <method name="getLocalPort()"/>
      <method name="getRemotePort()"/>
      <method name="hashCode()"/>
      <method name="getProtocol()"/>
      <method name="getLocalAddress()"/>
      <method name="getRemoteAddress()"/>
    </class>
    <class name="ConnectionFilter">
      <method name="accept(weblogic.security.net.ConnectionEvent)"/>
    </class>
    <class name="ConnectionFilterImpl">
      <method name="parseSingleAddress(java.lang.String)"/>
      <method name="checkRules(java.lang.String[],java.util.Vector)"/>
      <method name="filterEnabled()"/>
      <method name="setFilter(weblogic.security.net.ConnectionFilter)"/>
      <method name="getFilter()"/>
      <method name="accept(weblogic.security.net.ConnectionEvent)"/>
      <method name="checkRules(java.lang.String[])"/>
      <method name="setRules(java.lang.String[])"/>
    </class>
    <class name="ConnectionFilterRulesListener">
      <method name="checkRules(java.lang.String[])"/>
      <method name="setRules(java.lang.String[])"/>
    </class>
    <class name="FilterException" members="concealed"/>
  </package>
  <package name="weblogic.security.pk">
    <class name="CertPathBuilderParameters">
      <method name="clone()"/>
    </class>
    <class name="CertPathSelector" members="concealed"/>
    <class name="CertPathValidatorParameters">
      <method name="clone()"/>
    </class>
    <class name="EndCertificateSelector">
      <method name="getEndCertificate()"/>
    </class>
    <class name="IssuerDNSerialNumberSelector">
      <method name="getIssuerDN()"/>
      <method name="getSerialNumber()"/>
    </class>
    <class name="SubjectDNSelector">
      <method name="getSubjectDN()"/>
    </class>
    <class name="SubjectKeyIdentifierSelector">
      <method name="getSubjectKeyIdentifier()"/>
    </class>
    <class name="WLSCertPathBuilderResult">
      <method name="clone()"/>
      <method name="getCertPath()"/>
    </class>
    <class name="WLSCertPathValidatorResult">
      <method name="clone()"/>
    </class>
    <class name="X509ThumbprintSelector">
      <method name="getX509Thumbprint()"/>
      <method name="toString()"/>
    </class>
  </package>
  <package name="weblogic.security.principal">
    <class name="IDCSAppRole">
      <method name="getAppId()"/>
      <method name="getAppName()"/>
      <method name="getId()"/>
      <method name="getName()"/>
      <method name="getReference()"/>
    </class>
    <class name="IDCSAppRoleImpl">
      <method name="equals(java.lang.Object)"/>
      <method name="getSignedData()"/>
      <method name="hashCode()"/>
      <method name="getAppId()"/>
      <method name="getAppName()"/>
      <method name="getId()"/>
      <method name="getReference()"/>
      <method name="toString()"/>
    </class>
    <class name="IDCSClient">
      <method name="getName()"/>
    </class>
    <class name="IDCSClientImpl">
      <method name="equals(java.lang.Object)"/>
      <method name="getId()"/>
    </class>
    <class name="IDCSScope" members="concealed"/>
    <class name="IDCSScopeImpl">
      <method name="equals(java.lang.Object)"/>
    </class>
    <class name="IdentityDomainPrincipal">
      <method name="getIdentityDomain()"/>
    </class>
    <class name="OAuthClient">
      <method name="getId()"/>
    </class>
    <class name="OAuthScope">
      <method name="getName()"/>
    </class>
    <class name="PrincipalConfigurationDelegate">
      <method name="isEqualsCaseInsensitive()"/>
      <method name="isEqualsCompareDnAndGuid()"/>
      <method name="getInstance()"/>
    </class>
    <class name="PrincipalFactory">
      <method name="getInstance()"/>
      <method name="create(java.lang.Class,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="create(java.lang.Class,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createIDCSAppRole(java.lang.String,java.lang.String)"/>
      <method name="createIDCSAppRole(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createIDCSClient(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createIDCSScope(java.lang.String,java.lang.String)"/>
      <method name="createWLSGroup(java.lang.String)"/>
      <method name="createWLSGroup(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createWLSGroup(java.lang.String,java.lang.String)"/>
      <method name="createWLSGroup(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createWLSUser(java.lang.String)"/>
      <method name="createWLSUser(java.lang.String,java.lang.String,java.lang.String)"/>
      <method name="createWLSUser(java.lang.String,java.lang.String)"/>
      <method name="createWLSUser(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
    </class>
    <class name="WLSAbstractPrincipal">
      <method name="setDn(java.lang.String)"/>
      <method name="setGuid(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isEqualsCaseInsensitive()"/>
      <method name="isEqualsCompareDnAndGuid()"/>
      <method name="isPrincipalFactoryCreated()"/>
      <field name="principalFactoryCreated"/>
      <method name="getSalt()"/>
      <method name="getSignature()"/>
      <method name="getSignedData()"/>
      <method name="hashCode()"/>
      <method name="getDn()"/>
      <method name="getGuid()"/>
      <method name="getName()"/>
      <method name="toString()"/>
      <method name="setEqualsCaseInsensitive(boolean)"/>
      <method name="setEqualsCompareDnAndGuid(boolean)"/>
      <method name="setIdentityDomain(java.lang.String)"/>
      <method name="setSalt(byte[])"/>
      <method name="setSignature(byte[])"/>
    </class>
    <class name="WLSGroupImpl">
      <method name="setDn(java.lang.String)"/>
      <method name="setGuid(java.lang.String)"/>
      <method name="setName(java.lang.String)"/>
      <method name="equals(java.lang.Object)"/>
    </class>
    <class name="WLSPolicyFileGroupPrincipalImpl" members="concealed"/>
    <class name="WLSPolicyFileUserPrincipalImpl" members="concealed"/>
    <class name="WLSPrincipal">
      <method name="getSalt()"/>
      <method name="getSignature()"/>
      <method name="getSignedData()"/>
      <method name="getDn()"/>
      <method name="getGuid()"/>
      <method name="setSignature(byte[])"/>
    </class>
    <class name="WLSUserImpl">
      <method name="equals(java.lang.Object)"/>
    </class>
  </package>
  <package name="weblogic.security.provider">
    <class name="PrincipalValidatorImpl">
      <method name="sign(java.security.Principal)"/>
      <method name="validate(java.security.Principal)"/>
      <method name="getPrincipalBaseClass()"/>
    </class>
  </package>
  <package name="weblogic.security.providers.authentication">
    <class name="UserNameMapper">
      <method name="mapCertificateToUserName(java.security.cert.X509Certificate[],boolean)"/>
      <method name="mapDistinguishedNameToUserName(byte[])"/>
    </class>
  </package>
  <package name="weblogic.security.providers.saml">
    <class name="SAMLAssertionStore">
      <method name="initStore(java.util.Properties)"/>
      <method name="storeAssertion(java.lang.String,long,org.w3c.dom.Element)"/>
      <method name="retrieveAssertion(java.lang.String)"/>
      <method name="flushStore()"/>
      <method name="releaseStore()"/>
    </class>
    <class name="SAMLAssertionStoreV2">
      <method name="storeAssertionInfo(java.lang.String,java.lang.String,long,org.w3c.dom.Element)"/>
      <method name="retrieveAssertionInfo(java.lang.String)"/>
    </class>
    <class name="SAMLAttributeInfo">
      <method name="getAttributeName()"/>
      <method name="getAttributeNamespace()"/>
      <method name="getAttributeValues()"/>
      <method name="addAttributeValue(java.lang.String)"/>
      <method name="setAttributeName(java.lang.String,java.lang.String)"/>
      <method name="setAttributeValues(java.util.Collection)"/>
    </class>
    <class name="SAMLAttributeStatementInfo">
      <method name="getAttributeInfo()"/>
      <method name="addAttributeInfo(weblogic.security.providers.saml.SAMLAttributeInfo)"/>
      <method name="setAttributeInfo(java.util.Collection)"/>
    </class>
    <class name="SAMLCredentialAttributeMapper">
      <method name="mapAttributes(javax.security.auth.Subject,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="SAMLCredentialNameMapper">
      <method name="setNameQualifier(java.lang.String)"/>
      <method name="mapName(java.lang.String,weblogic.security.service.ContextHandler)"/>
      <method name="mapSubject(javax.security.auth.Subject,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="SAMLIdentityAssertionAttributeMapper">
      <method name="mapAttributeInfo(java.util.Collection,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="SAMLIdentityAssertionNameMapper">
      <method name="getGroupAttrName()"/>
      <method name="getGroupAttrNamespace()"/>
      <method name="mapNameInfo(weblogic.security.providers.saml.SAMLNameMapperInfo,weblogic.security.service.ContextHandler)"/>
      <method name="mapGroupInfo(weblogic.security.providers.saml.SAMLNameMapperInfo,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="SAMLNameMapperInfo">
      <method name="getAuthenticationMethod()"/>
      <method name="getGroupAttrName()"/>
      <method name="getGroupAttrNamespace()"/>
      <method name="getName()"/>
      <method name="getNameFormat()"/>
      <method name="getNameQualifier()"/>
      <method name="getGroups()"/>
      <field name="ATTR_NAME_FORMAT_BASIC"/>
      <field name="BEA_GROUP_ATTR_NAME"/>
      <field name="BEA_GROUP_ATTR_NAMEFORMAT"/>
      <field name="BEA_GROUP_ATTR_NAMESPACE"/>
      <field name="NAME_FORMAT_EMAIL_ADDR"/>
      <field name="NAME_FORMAT_ENTITY"/>
      <field name="NAME_FORMAT_KERBEROS"/>
      <field name="NAME_FORMAT_PERSISTENT"/>
      <field name="NAME_FORMAT_TRANSIENT"/>
      <field name="NAME_FORMAT_UNSPECIFIED"/>
      <field name="NAME_FORMAT_WINDOWS_DQN"/>
      <field name="NAME_FORMAT_X500_SUBJECT"/>
      <method name="setAuthenticationMethod(java.lang.String)"/>
      <method name="setGroupAttrName(java.lang.String)"/>
      <method name="setGroupAttrNamespace(java.lang.String)"/>
      <method name="setGroups(java.util.Collection)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setNameFormat(java.lang.String)"/>
      <method name="setNameQualifier(java.lang.String)"/>
    </class>
    <class name="SAMLUsedAssertionCache">
      <method name="cacheAssertion(java.lang.String,java.lang.String,long)"/>
      <method name="initCache(java.util.Properties)"/>
      <method name="flushCache()"/>
      <method name="releaseCache()"/>
    </class>
  </package>
  <package name="weblogic.security.providers.saml.registry">
    <class name="SAMLAssertingParty">
      <method name="isVirtualUserEnabled()"/>
      <method name="getAssertionRetrievalURL()"/>
      <method name="getAssertionSigningCertAlias()"/>
      <method name="getIntersiteTransferURL()"/>
      <method name="getIssuerURI()"/>
      <method name="getProtocolSigningCertAlias()"/>
      <method name="getSourceId()"/>
      <method name="getIntersiteTransferParams()"/>
      <method name="getRedirectURIs()"/>
      <method name="setAssertionRetrievalURL(java.lang.String)"/>
      <method name="setAssertionSigningCertAlias(java.lang.String)"/>
      <method name="setIntersiteTransferParams(java.lang.String[])"/>
      <method name="setIntersiteTransferURL(java.lang.String)"/>
      <method name="setIssuerURI(java.lang.String)"/>
      <method name="setProtocolSigningCertAlias(java.lang.String)"/>
      <method name="setRedirectURIs(java.lang.String[])"/>
      <method name="setSourceId(java.lang.String)"/>
      <method name="setVirtualUserEnabled(boolean)"/>
    </class>
    <class name="SAMLCommonPartner">
      <method name="isARSPasswordSet()"/>
      <method name="isGroupsAttributeEnabled()"/>
      <method name="isSignedAssertions()"/>
      <method name="getARSPasswordEncrypted()"/>
      <method name="getARSUsername()"/>
      <method name="getAudienceURI()"/>
      <method name="getNameMapperClass()"/>
      <method name="getProfile()"/>
      <method name="getTargetURL()"/>
      <field name="PROFILE_ARTIFACT"/>
      <field name="PROFILE_BEARER"/>
      <field name="PROFILE_HOK"/>
      <field name="PROFILE_POST"/>
      <field name="PROFILE_SV"/>
      <method name="setARSPassword(java.lang.String)"/>
      <method name="setARSUsername(java.lang.String)"/>
      <method name="setAudienceURI(java.lang.String)"/>
      <method name="setGroupsAttributeEnabled(boolean)"/>
      <method name="setNameMapperClass(java.lang.String)"/>
      <method name="setProfile(java.lang.String)"/>
      <method name="setSignedAssertions(boolean)"/>
      <method name="setTargetURL(java.lang.String)"/>
    </class>
    <class name="SAMLPartner">
      <method name="isEnabled()"/>
      <method name="getDescription()"/>
      <method name="getPartnerId()"/>
      <method name="setDescription(java.lang.String)"/>
      <method name="setEnabled(boolean)"/>
      <method name="validate()"/>
    </class>
    <class name="SAMLRelyingParty">
      <method name="isCredentialCacheEnabled()"/>
      <method name="isDoNotCacheCondition()"/>
      <method name="isKeyinfoIncluded()"/>
      <method name="getTimeToLive()"/>
      <method name="getTimeToLiveOffset()"/>
      <method name="getAssertionConsumerURL()"/>
      <method name="getPostForm()"/>
      <method name="getSSLClientCertAlias()"/>
      <method name="getAssertionConsumerParams()"/>
      <method name="setAssertionConsumerParams(java.lang.String[])"/>
      <method name="setAssertionConsumerURL(java.lang.String)"/>
      <method name="setCredentialCacheEnabled(boolean)"/>
      <method name="setDoNotCacheCondition(boolean)"/>
      <method name="setKeyinfoIncluded(boolean)"/>
      <method name="setPostForm(java.lang.String)"/>
      <method name="setSSLClientCertAlias(java.lang.String)"/>
      <method name="setTimeToLive(int)"/>
      <method name="setTimeToLiveOffset(int)"/>
    </class>
  </package>
  <package name="weblogic.security.service">
    <class name="AdminResource">
      <method name="makeParent()"/>
      <method name="getActionName()"/>
      <method name="getResourceName()"/>
      <method name="getResourceType()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
    </class>
    <class name="ApplicationResource">
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getApplicationName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
    </class>
    <class name="COMResource">
      <method name="makeParent()"/>
      <method name="getClassName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
    </class>
    <class name="ContextElement">
      <method name="getValue()"/>
      <method name="getName()"/>
      <method name="setValue(java.lang.Object)"/>
    </class>
    <class name="ContextElementMessageStream">
      <method name="resetToStart()"/>
    </class>
    <class name="ContextHandler">
      <method name="size()"/>
      <method name="getValue(java.lang.String)"/>
      <method name="getNames()"/>
      <method name="getValues(java.lang.String[])"/>
    </class>
    <class name="ControlResource">
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="getFieldType(java.lang.String)"/>
      <method name="getApplicationName()"/>
      <method name="getControlName()"/>
      <method name="getMethodName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
      <method name="getMethodParams()"/>
    </class>
    <class name="DeployHandleCreationException" members="concealed"/>
    <class name="EISResource">
      <method name="makeParent()"/>
      <method name="getApplicationName()"/>
      <method name="getDestinationId()"/>
      <method name="getEISName()"/>
      <method name="getModuleName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
    </class>
    <class name="EJBResource">
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="getFieldType(java.lang.String)"/>
      <method name="getApplicationName()"/>
      <method name="getEJBName()"/>
      <method name="getMethodInterface()"/>
      <method name="getMethodName()"/>
      <method name="getModuleName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
      <method name="getMethodParams()"/>
    </class>
    <class name="InvalidParameterException" members="concealed"/>
    <class name="JDBCResource">
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <method name="getActionName()"/>
      <method name="getApplicationName()"/>
      <method name="getModuleName()"/>
      <method name="getResourceName()"/>
      <method name="getResourceType()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
    </class>
    <class name="JMSResource">
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isTransitiveField(java.lang.String)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <method name="getActionName()"/>
      <method name="getApplicationName()"/>
      <method name="getDestinationType()"/>
      <method name="getModule()"/>
      <method name="getResourceName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
    </class>
    <class name="JMXResource">
      <method name="makeParent()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
      <field name="CREATE"/>
      <field name="FIND"/>
      <field name="GET"/>
      <field name="GET_ENCRYPTED"/>
      <field name="INVOKE"/>
      <field name="SET"/>
      <field name="SET_ENCRYPTED"/>
      <field name="UNREGISTER"/>
    </class>
    <class name="JNDIResource">
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getFieldType(java.lang.String)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <method name="getActionName()"/>
      <method name="getApplicationName()"/>
      <method name="getPathName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
      <method name="getPath()"/>
    </class>
    <class name="KerberosServiceResource">
      <method name="getType()"/>
      <method name="toString()"/>
      <method name="getKeys()"/>
      <method name="getValues()"/>
      <method name="getID()"/>
      <method name="getParentResource()"/>
    </class>
    <class name="LegacyEnforceStrictURLPatternManager">
      <method name="getEnforceStrictURLPattern()"/>
      <method name="setEnforceStrictURLPattern(boolean)"/>
    </class>
    <class name="LegacyWebAppFilesCaseInsensitiveManager">
      <method name="getWebAppFilesCaseInsensitive()"/>
      <method name="setWebAppFilesCaseInsensitive(boolean)"/>
    </class>
    <class name="RemoteResource">
      <method name="init(java.lang.String[],int,long,java.lang.String,boolean)"/>
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getFieldType(java.lang.String)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <method name="getMethod()"/>
      <method name="getPath()"/>
      <method name="getProtocol()"/>
      <method name="getRemoteHost()"/>
      <method name="getRemotePort()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
    </class>
    <class name="ResourceBase">
      <method name="appendArrayValue(java.lang.StringBuffer,java.lang.String[],int)"/>
      <method name="appendValue(java.lang.StringBuffer,java.lang.String)"/>
      <method name="init(java.lang.String[],int,long)"/>
      <method name="init(java.lang.String[],long)"/>
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="isTransitiveField(java.lang.String)"/>
      <method name="getFieldType(java.lang.String)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <method name="hashCode()"/>
      <field name="length"/>
      <field name="resStr"/>
      <method name="toString()"/>
      <method name="getKeys()"/>
      <method name="getValues()"/>
      <field name="values"/>
      <method name="getID()"/>
      <field name="id"/>
      <field name="SCOPE_RESOURCE_ACTION"/>
      <field name="NO_PARENT"/>
      <method name="getParentResource()"/>
      <field name="parent"/>
    </class>
    <class name="ResourceCreationException" members="concealed"/>
    <class name="ResourceRemovalException" members="concealed"/>
    <class name="RoleCreationException" members="concealed"/>
    <class name="RoleRemovalException" members="concealed"/>
    <class name="SecurityRole">
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getDescription()"/>
      <method name="getName()"/>
      <method name="toString()"/>
    </class>
    <class name="SecurityServiceException" members="concealed"/>
    <class name="SecurityServiceRuntimeException" members="concealed"/>
    <class name="ServerResource">
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <method name="getActionName()"/>
      <method name="getApplicationName()"/>
      <method name="getServerName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
    </class>
    <class name="URLResource">
      <method name="init(java.lang.String[],int,long,java.lang.String,java.lang.String,boolean)"/>
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="mappingToLowerCase()"/>
      <method name="getFieldType(java.lang.String)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <method name="getApplicationName()"/>
      <method name="getContextPath()"/>
      <method name="getHttpMethod()"/>
      <method name="getTransportType()"/>
      <method name="getType()"/>
      <method name="getURI()"/>
      <method name="getKeys()"/>
    </class>
    <class name="WebServiceResource">
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="getFieldType(java.lang.String)"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
      <method name="initialize(java.lang.String)"/>
    </class>
    <class name="WorkContextResource">
      <method name="writeResourceString(java.lang.StringBuffer)"/>
      <method name="makeParent()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getFieldType(java.lang.String)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <method name="getActionName()"/>
      <method name="getPathName()"/>
      <method name="getType()"/>
      <method name="getKeys()"/>
      <method name="getPath()"/>
    </class>
  </package>
  <package name="weblogic.security.services">
    <class name="AppChallengeContext">
      <method name="hasChallengeIdentityCompleted()"/>
      <method name="getChallengeToken()"/>
      <method name="getAuthenticatedSubject()"/>
    </class>
    <class name="AppContext">
      <method name="size()"/>
      <method name="getNames()"/>
      <method name="getElement(java.lang.String)"/>
      <method name="getElements(java.lang.String[])"/>
    </class>
    <class name="AppContextElement">
      <method name="getValue()"/>
      <method name="getName()"/>
    </class>
    <class name="Authentication">
      <method name="getChallengeToken(java.lang.String,weblogic.security.services.AppContext)"/>
      <method name="assertIdentity(java.lang.String,java.lang.String,java.lang.Object)"/>
      <method name="assertIdentity(java.lang.String,java.lang.String,java.lang.Object,weblogic.security.services.AppContext)"/>
      <method name="assertIdentity(java.lang.String,java.lang.Object)"/>
      <method name="assertIdentity(java.lang.String,java.lang.Object,weblogic.security.services.AppContext)"/>
      <method name="login(java.lang.String,javax.security.auth.callback.CallbackHandler)"/>
      <method name="login(java.lang.String,javax.security.auth.callback.CallbackHandler,weblogic.security.services.AppContext)"/>
      <method name="login(javax.security.auth.callback.CallbackHandler)"/>
      <method name="login(javax.security.auth.callback.CallbackHandler,weblogic.security.services.AppContext)"/>
      <method name="continueChallengeIdentity(weblogic.security.services.AppChallengeContext,java.lang.String,java.lang.Object,weblogic.security.services.AppContext)"/>
      <method name="assertChallengeIdentity(java.lang.String,java.lang.Object,weblogic.security.services.AppContext)"/>
    </class>
  </package>
  <package name="weblogic.security.spi">
    <class name="AccessDecision">
      <method name="isProtectedResource(javax.security.auth.Subject,weblogic.security.spi.Resource)"/>
      <method name="isAccessAllowed(javax.security.auth.Subject,java.util.Map,weblogic.security.spi.Resource,weblogic.security.service.ContextHandler,weblogic.security.spi.Direction)"/>
    </class>
    <class name="AdjudicationProvider">
      <method name="getAdjudicator()"/>
    </class>
    <class name="AdjudicationProviderV2">
      <method name="getAdjudicator()"/>
    </class>
    <class name="Adjudicator">
      <method name="adjudicate(weblogic.security.spi.Result[])"/>
      <method name="initialize(java.lang.String[])"/>
    </class>
    <class name="AdjudicatorV2">
      <method name="adjudicate(weblogic.security.spi.Result[],weblogic.security.spi.Resource,weblogic.security.service.ContextHandler)"/>
      <method name="initialize(java.lang.String[])"/>
    </class>
    <class name="ApplicationInfo">
      <method name="getApplicationIdentifier()"/>
      <method name="getComponentName()"/>
      <method name="getComponentType()"/>
    </class>
    <class name="ApplicationRemovalException" members="concealed"/>
    <class name="ApplicationVersionCreationException" members="concealed"/>
    <class name="ApplicationVersionRemovalException" members="concealed"/>
    <class name="AuditApplicationVersionEvent">
      <method name="getOperationType()"/>
      <method name="getSubject()"/>
      <method name="getResource()"/>
    </class>
    <class name="AuditAtnEvent">
      <method name="getUsername()"/>
      <method name="getAtnEventType()"/>
    </class>
    <class name="AuditAtnEventV2">
      <method name="getUsername()"/>
      <method name="getAtnEventType()"/>
    </class>
    <class name="AuditAtzEvent">
      <method name="getSubject()"/>
      <method name="getResource()"/>
    </class>
    <class name="AuditCertPathBuilderEvent">
      <method name="getTrustedCAs()"/>
      <method name="getCertPathSelector()"/>
      <method name="getContext()"/>
    </class>
    <class name="AuditCertPathValidatorEvent">
      <method name="getCertPath()"/>
      <method name="getTrustedCAs()"/>
      <method name="getContext()"/>
    </class>
    <class name="AuditChannel">
      <method name="writeEvent(weblogic.security.spi.AuditEvent)"/>
    </class>
    <class name="AuditChannelV2">
      <method name="writeEvent(weblogic.security.spi.AuditEvent)"/>
    </class>
    <class name="AuditConfigurationEvent">
      <method name="getObjectName()"/>
      <method name="getSubject()"/>
    </class>
    <class name="AuditContext">
      <method name="getContext()"/>
    </class>
    <class name="AuditCreateConfigurationEvent">
      <field name="CREATE_EVENT"/>
    </class>
    <class name="AuditCredentialMappingEvent">
      <method name="getCredentials()"/>
      <method name="getInitiatorString()"/>
      <method name="getCredentialTypes()"/>
      <method name="getInitiatorSubject()"/>
      <method name="getRequestorSubject()"/>
      <method name="getResource()"/>
    </class>
    <class name="AuditDeleteConfigurationEvent">
      <field name="DELETE_EVENT"/>
    </class>
    <class name="AuditEvent">
      <method name="getFailureException()"/>
      <method name="getEventType()"/>
      <method name="toString()"/>
      <method name="getSeverity()"/>
    </class>
    <class name="AuditInvokeConfigurationEvent">
      <method name="getMethodName()"/>
      <method name="getParameters()"/>
      <field name="INVOKE_EVENT"/>
    </class>
    <class name="AuditLifecycleEvent">
      <method name="getAuditLifecycleEventType()"/>
    </class>
    <class name="AuditMgmtEvent" members="concealed"/>
    <class name="AuditPolicyEvent">
      <method name="getSubject()"/>
      <method name="getResource()"/>
    </class>
    <class name="AuditProvider">
      <method name="getAuditChannel()"/>
    </class>
    <class name="AuditProviderV2">
      <method name="getAuditChannel()"/>
    </class>
    <class name="AuditRoleDeploymentEvent" members="concealed"/>
    <class name="AuditRoleEvent" members="concealed"/>
    <class name="AuditSetAttributeConfigurationEvent">
      <method name="getNewValue()"/>
      <method name="getOldValue()"/>
      <method name="getAttributeName()"/>
      <field name="SETATTRIBUTE_EVENT"/>
    </class>
    <class name="AuditSeverity">
      <method name="getSeverity()"/>
      <method name="getSeverityString()"/>
      <field name="AUDIT_FAILURE"/>
      <field name="ERROR"/>
      <field name="FAILURE"/>
      <field name="INFORMATION"/>
      <field name="SUCCESS"/>
      <field name="WARNING"/>
      <method name="getInstance(java.lang.String)"/>
    </class>
    <class name="AuditorService">
      <method name="providerAuditWriteEvent(weblogic.security.spi.AuditEvent)"/>
    </class>
    <class name="AuthenticationProvider">
      <method name="getAssertionModuleConfiguration()"/>
      <method name="getLoginModuleConfiguration()"/>
      <method name="getIdentityAsserter()"/>
      <method name="getPrincipalValidator()"/>
    </class>
    <class name="AuthenticationProviderV2">
      <method name="getAssertionModuleConfiguration()"/>
      <method name="getLoginModuleConfiguration()"/>
      <method name="getIdentityAsserter()"/>
      <method name="getPrincipalValidator()"/>
    </class>
    <class name="AuthorizationProvider">
      <method name="getAccessDecision()"/>
    </class>
    <class name="BulkAccessDecision">
      <method name="isAccessAllowed(javax.security.auth.Subject,java.util.Map,java.util.List,weblogic.security.service.ContextHandler,weblogic.security.spi.Direction)"/>
    </class>
    <class name="BulkAdjudicationProvider">
      <method name="getBulkAdjudicator()"/>
    </class>
    <class name="BulkAdjudicator">
      <method name="adjudicate(java.util.List,java.util.List,weblogic.security.service.ContextHandler)"/>
      <method name="initialize(java.lang.String[])"/>
    </class>
    <class name="BulkAuthorizationProvider">
      <method name="getBulkAccessDecision()"/>
    </class>
    <class name="BulkRoleMapper">
      <method name="getRoles(javax.security.auth.Subject,java.util.List,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="BulkRoleProvider">
      <method name="getBulkRoleMapper()"/>
    </class>
    <class name="CertPathBuilderParametersSpi">
      <method name="clone()"/>
      <method name="getTrustedCAs()"/>
      <method name="getCertPathSelector()"/>
      <method name="getContext()"/>
      <method name="getCertPathProvider()"/>
    </class>
    <class name="CertPathProvider">
      <method name="getCertPathBuilder()"/>
      <method name="getCertPathValidator()"/>
    </class>
    <class name="CertPathValidatorParametersSpi">
      <method name="clone()"/>
      <method name="getTrustedCAs()"/>
      <method name="getContext()"/>
      <method name="getCertPathProvider()"/>
    </class>
    <class name="ChallengeIdentityAsserterV2">
      <method name="getChallengeToken(java.lang.String,weblogic.security.service.ContextHandler)"/>
      <method name="continueChallengeIdentity(weblogic.security.spi.ProviderChallengeContext,java.lang.String,java.lang.Object,weblogic.security.service.ContextHandler)"/>
      <method name="assertChallengeIdentity(java.lang.String,java.lang.Object,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="ConsumptionException" members="concealed"/>
    <class name="CredentialMapperV2">
      <method name="getCredential(javax.security.auth.Subject,java.lang.String,weblogic.security.spi.Resource,weblogic.security.service.ContextHandler,java.lang.String)"/>
      <method name="getCredentials(javax.security.auth.Subject,javax.security.auth.Subject,weblogic.security.spi.Resource,weblogic.security.service.ContextHandler,java.lang.String)"/>
      <field name="GSS_KERBEROS_V5_AP_REQ"/>
      <field name="GSS_KERBEROS_V5_AP_REQ_1510"/>
      <field name="GSS_KERBEROS_V5_AP_REQ_4120"/>
      <field name="KERBEROS_V5_AP_REQ"/>
      <field name="KERBEROS_V5_AP_REQ_1510"/>
      <field name="KERBEROS_V5_AP_REQ_4120"/>
      <field name="PASSWORD_TYPE"/>
      <field name="PKI_KEY_PAIR_TYPE"/>
      <field name="PKI_TRUSTED_CERTIFICATE_TYPE"/>
      <field name="SAML2_ASSERTION_DOM_TYPE"/>
      <field name="SAML2_ASSERTION_TYPE"/>
      <field name="SAML_ASSERTION_B64_TYPE"/>
      <field name="SAML_ASSERTION_DOM_TYPE"/>
      <field name="SAML_ASSERTION_TYPE"/>
      <field name="SPNEGO_TOKEN_TYPE"/>
      <field name="USER_PASSWORD_TYPE"/>
      <field name="WEBLOGIC_OAUTH2_JWT_ACCESS_TOKEN_TYPE"/>
    </class>
    <class name="CredentialProviderV2">
      <method name="getCredentialProvider()"/>
    </class>
    <class name="DeployHandleCreationException" members="concealed"/>
    <class name="DeployPolicyHandle" members="concealed"/>
    <class name="DeployRoleHandle" members="concealed"/>
    <class name="DeployableAuthorizationProviderV2">
      <method name="deleteApplicationPolicies(weblogic.security.spi.ApplicationInfo)"/>
      <method name="deployExcludedPolicy(weblogic.security.spi.DeployPolicyHandle,weblogic.security.spi.Resource)"/>
      <method name="deployPolicy(weblogic.security.spi.DeployPolicyHandle,weblogic.security.spi.Resource,java.lang.String[])"/>
      <method name="deployUncheckedPolicy(weblogic.security.spi.DeployPolicyHandle,weblogic.security.spi.Resource)"/>
      <method name="endDeployPolicies(weblogic.security.spi.DeployPolicyHandle)"/>
      <method name="undeployAllPolicies(weblogic.security.spi.DeployPolicyHandle)"/>
      <method name="startDeployPolicies(weblogic.security.spi.ApplicationInfo)"/>
    </class>
    <class name="DeployableRoleProviderV2">
      <method name="deleteApplicationRoles(weblogic.security.spi.ApplicationInfo)"/>
      <method name="deployRole(weblogic.security.spi.DeployRoleHandle,weblogic.security.spi.Resource,java.lang.String,java.lang.String[])"/>
      <method name="endDeployRoles(weblogic.security.spi.DeployRoleHandle)"/>
      <method name="undeployAllRoles(weblogic.security.spi.DeployRoleHandle)"/>
      <method name="startDeployRoles(weblogic.security.spi.ApplicationInfo)"/>
    </class>
    <class name="DigestNotAvailableException" members="concealed"/>
    <class name="Direction">
      <method name="toString()"/>
      <field name="ONCE"/>
      <field name="POST"/>
      <field name="PRIOR"/>
    </class>
    <class name="IdentityAsserter">
      <method name="assertIdentity(java.lang.String,java.lang.Object)"/>
      <field name="AUTHORIZATION_NEGOTIATE"/>
      <field name="AU_TYPE"/>
      <field name="CSI_ANONYMOUS_TYPE"/>
      <field name="CSI_DISTINGUISHED_NAME_TYPE"/>
      <field name="CSI_PRINCIPAL_TYPE"/>
      <field name="CSI_X509_CERTCHAIN_TYPE"/>
      <field name="OIDC_TYPE"/>
      <field name="WEBLOGIC_JWT_TOKEN_TYPE"/>
      <field name="WSSE_PASSWORD_DIGEST_TYPE"/>
      <field name="WWW_AUTHENTICATE_NEGOTIATE"/>
      <field name="X509_TYPE"/>
    </class>
    <class name="IdentityAsserterV2">
      <method name="assertIdentity(java.lang.String,java.lang.Object,weblogic.security.service.ContextHandler)"/>
      <field name="AUTHORIZATION_NEGOTIATE"/>
      <field name="AU_TYPE"/>
      <field name="CSI_ANONYMOUS_TYPE"/>
      <field name="CSI_DISTINGUISHED_NAME_TYPE"/>
      <field name="CSI_PRINCIPAL_TYPE"/>
      <field name="CSI_X509_CERTCHAIN_TYPE"/>
      <field name="GSS_KERBEROS_V5_AP_REQ"/>
      <field name="GSS_KERBEROS_V5_AP_REQ_1510"/>
      <field name="GSS_KERBEROS_V5_AP_REQ_4120"/>
      <field name="KERBEROS_V5_AP_REQ"/>
      <field name="KERBEROS_V5_AP_REQ_1510"/>
      <field name="KERBEROS_V5_AP_REQ_4120"/>
      <field name="SAML2_ASSERTION_DOM_TYPE"/>
      <field name="SAML2_ASSERTION_TYPE"/>
      <field name="SAML_ASSERTION_B64_TYPE"/>
      <field name="SAML_ASSERTION_DOM_TYPE"/>
      <field name="SAML_ASSERTION_TYPE"/>
      <field name="WSSE_PASSWORD_DIGEST_TYPE"/>
      <field name="WWW_AUTHENTICATE_NEGOTIATE"/>
      <field name="X509_TYPE"/>
    </class>
    <class name="IdentityAssertionException" members="concealed"/>
    <class name="InvalidPrincipalException" members="concealed"/>
    <class name="JDBCConnectionService">
      <method name="getConnection(java.lang.String)"/>
      <method name="releaseConnection(java.sql.Connection)"/>
    </class>
    <class name="JDBCConnectionServiceException" members="concealed"/>
    <class name="PasswordDigest">
      <method name="getPasswordDigest(java.lang.String,byte[],int)"/>
    </class>
    <class name="PolicyCollectionHandler">
      <method name="done()"/>
      <method name="setPolicy(weblogic.security.spi.Resource,java.lang.String[])"/>
      <method name="setUncheckedPolicy(weblogic.security.spi.Resource)"/>
    </class>
    <class name="PolicyCollectionInfo">
      <method name="getName()"/>
      <method name="getTimestamp()"/>
      <method name="getVersion()"/>
      <method name="getResourceTypes()"/>
    </class>
    <class name="PolicyConsumer">
      <method name="getPolicyCollectionHandler(weblogic.security.spi.PolicyCollectionInfo)"/>
    </class>
    <class name="PolicyConsumerFactory">
      <method name="getPolicyConsumer()"/>
    </class>
    <class name="PrincipalValidator">
      <method name="sign(java.security.Principal)"/>
      <method name="validate(java.security.Principal)"/>
      <method name="getPrincipalBaseClass()"/>
    </class>
    <class name="ProviderChallengeContext">
      <method name="hasChallengeIdentityCompleted()"/>
      <method name="getChallengeToken()"/>
      <method name="getCallbackHandler()"/>
    </class>
    <class name="ProviderInitializationException" members="concealed"/>
    <class name="Resource">
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="getType()"/>
      <method name="toString()"/>
      <method name="getKeys()"/>
      <method name="getValues()"/>
      <method name="getID()"/>
      <method name="getParentResource()"/>
    </class>
    <class name="ResourceCreationException" members="concealed"/>
    <class name="ResourceRemovalException" members="concealed"/>
    <class name="Result">
      <method name="equals(java.lang.Object)"/>
      <method name="isAbstain()"/>
      <method name="isDeny()"/>
      <method name="isPermit()"/>
      <method name="getEnumValue()"/>
      <method name="toString()"/>
      <field name="ABSTAIN_VALUE"/>
      <field name="DENY_VALUE"/>
      <field name="PERMIT_VALUE"/>
      <field name="ABSTAIN"/>
      <field name="DENY"/>
      <field name="PERMIT"/>
      <method name="narrow()"/>
    </class>
    <class name="RoleCollectionHandler">
      <method name="done()"/>
      <method name="setRole(weblogic.security.spi.Resource,java.lang.String,java.lang.String[])"/>
    </class>
    <class name="RoleCollectionInfo">
      <method name="getName()"/>
      <method name="getTimestamp()"/>
      <method name="getVersion()"/>
      <method name="getResourceTypes()"/>
    </class>
    <class name="RoleConsumer">
      <method name="getRoleCollectionHandler(weblogic.security.spi.RoleCollectionInfo)"/>
    </class>
    <class name="RoleConsumerFactory">
      <method name="getRoleConsumer()"/>
    </class>
    <class name="RoleCreationException" members="concealed"/>
    <class name="RoleMapper">
      <method name="getRoles(javax.security.auth.Subject,weblogic.security.spi.Resource,weblogic.security.service.ContextHandler)"/>
    </class>
    <class name="RoleProvider">
      <method name="getRoleMapper()"/>
    </class>
    <class name="RoleRemovalException" members="concealed"/>
    <class name="SecurityProvider">
      <method name="getDescription()"/>
      <method name="initialize(weblogic.management.security.ProviderMBean,weblogic.security.spi.SecurityServices)"/>
      <method name="shutdown()"/>
    </class>
    <class name="SecurityServices">
      <method name="getAuditorService()"/>
    </class>
    <class name="SecurityServicesJDBC">
      <method name="getJDBCConnectionService()"/>
    </class>
    <class name="SecuritySpiException" members="concealed"/>
    <class name="SelfDescribingResource">
      <method name="getFieldType(java.lang.String)"/>
      <method name="getRepeatingFieldIndex()"/>
      <method name="getRepeatingFieldTerminatingIndex()"/>
      <field name="LIST_FIELD_TYPE"/>
      <field name="NORMAL_FIELD_TYPE"/>
      <field name="PATH_FIELD_TYPE"/>
      <field name="UNDEFINED_FIELD_TYPE"/>
    </class>
    <class name="SelfDescribingResourceV2">
      <method name="isTransitiveField(java.lang.String)"/>
    </class>
    <class name="ServletAuthenticationFilter">
      <method name="getServletAuthenticationFilters()"/>
    </class>
    <class name="VersionableApplicationProvider">
      <method name="createApplicationVersion(java.lang.String,java.lang.String)"/>
      <method name="deleteApplication(java.lang.String)"/>
      <method name="deleteApplicationVersion(java.lang.String)"/>
    </class>
    <class name="WLSGroup" members="concealed"/>
    <class name="WLSUser" members="concealed"/>
    <class name="WSPasswordDigest">
      <method name="getDerivedKey(java.lang.String,byte[],int)"/>
      <method name="getPasswordDigest(java.lang.String,byte[],java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.security.utils">
    <class name="ContextElementMessageStream">
      <method name="resetToStart()"/>
    </class>
    <class name="SSLHostnameVerifier" members="concealed"/>
    <class name="SSLWLSHostnameVerifier" members="concealed"/>
    <class name="SSLWLSWildcardHostnameVerifier">
      <method name="verify(java.lang.String,javax.net.ssl.SSLSession)"/>
    </class>
  </package>
  <package name="weblogic.server">
    <class name="PartitionInterceptorBeanUpdateListener" members="concealed"/>
    <class name="PartitionInterceptorService" members="concealed"/>
    <class name="PartitionInterceptorServiceAPI" members="concealed"/>
    <class name="ServerLifecycleException" members="concealed"/>
    <class name="ServerService">
      <method name="getName()"/>
      <method name="getVersion()"/>
      <method name="halt()"/>
      <method name="start()"/>
      <method name="stop()"/>
    </class>
    <class name="ServerStates">
      <field name="ACTIVATE_LATER"/>
      <field name="ADMIN"/>
      <field name="FAILED"/>
      <field name="FAILED_NOT_RESTARTABLE"/>
      <field name="FAILED_RESTARTING"/>
      <field name="FORCE_SHUTTING_DOWN"/>
      <field name="FORCE_SUSPENDING"/>
      <field name="RESUMING"/>
      <field name="RUNNING"/>
      <field name="SHUTDOWN"/>
      <field name="SHUTDOWN_IN_PROCESS"/>
      <field name="SHUTDOWN_PENDING"/>
      <field name="SHUTTING_DOWN"/>
      <field name="STANDBY"/>
      <field name="STARTING"/>
      <field name="SUSPENDING"/>
      <field name="UNKNOWN"/>
    </class>
    <class name="ServiceFailureException" members="concealed"/>
  </package>
  <package name="weblogic.servlet.annotation">
    <class name="WLFilter" members="concealed"/>
    <class name="WLInitParam" members="concealed"/>
    <class name="WLServlet" members="concealed"/>
  </package>
  <package name="weblogic.servlet.http">
    <class name="AbstractAsyncServlet">
      <method name="doRequest(weblogic.servlet.http.RequestResponseKey)"/>
      <method name="doResponse(weblogic.servlet.http.RequestResponseKey,java.lang.Object)"/>
      <method name="doTimeout(weblogic.servlet.http.RequestResponseKey)"/>
      <method name="service(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"/>
      <method name="setTimeout(int)"/>
      <field name="DEFAULT_SCAVANGE_INTERVAL"/>
      <field name="DEFAULT_TIMEOUT"/>
      <method name="notify(weblogic.servlet.http.RequestResponseKey,java.lang.Object)"/>
      <method name="setScavangeInterval(int)"/>
    </class>
    <class name="FutureResponseModel" members="concealed"/>
    <class name="RequestResponseKey">
      <method name="equals(java.lang.Object)"/>
      <method name="isCallDoResponse()"/>
      <method name="isImmediateSendOnDoRequestFalse()"/>
      <method name="isValid()"/>
      <method name="hashCode()"/>
      <method name="getRequest()"/>
      <method name="getResponse()"/>
      <method name="getTimeout()"/>
      <method name="setCallDoResponse(boolean)"/>
      <method name="setImmediateSendOnDoRequestFalse(boolean)"/>
      <method name="setTimeout(int)"/>
    </class>
    <class name="WLHttpServletResponse">
      <method name="getSocket()"/>
      <method name="getWritableByteChannel()"/>
    </class>
  </package>
  <package name="weblogic.servlet.logging">
    <class name="CustomELFLogger" members="concealed"/>
    <class name="FormatStringBuffer">
      <method name="getBytes()"/>
      <method name="size()"/>
      <method name="setLogMillis(boolean)"/>
      <method name="setUseGMT(boolean)"/>
      <method name="append(byte)"/>
      <method name="append(byte[])"/>
      <method name="append(byte[],int,int)"/>
      <method name="append(char)"/>
      <method name="append(int)"/>
      <method name="append(java.lang.String)"/>
      <method name="append(long)"/>
      <method name="appendDate()"/>
      <method name="appendQuotedValueOrDash(java.lang.String)"/>
      <method name="appendSpaceDashSpace()"/>
      <method name="appendStatusCode(int)"/>
      <method name="appendTime()"/>
      <method name="appendTwoDigits(int)"/>
      <method name="appendValueOrDash(java.lang.String)"/>
      <method name="appendValueOrEmpty(java.lang.String)"/>
      <method name="appendYear(int)"/>
    </class>
    <class name="HttpAccountingInfo">
      <method name="isRequestedSessionIdFromCookie()"/>
      <method name="isRequestedSessionIdFromURL()"/>
      <method name="isRequestedSessionIdFromUrl()"/>
      <method name="isRequestedSessionIdValid()"/>
      <method name="isSecure()"/>
      <method name="getIntHeader(java.lang.String)"/>
      <method name="getResponseContentLength()"/>
      <method name="getResponseStatusCode()"/>
      <method name="getServerPort()"/>
      <method name="getAttribute(java.lang.String)"/>
      <method name="getAuthType()"/>
      <method name="getCharacterEncoding()"/>
      <method name="getContentType()"/>
      <method name="getContextPath()"/>
      <method name="getHeader(java.lang.String)"/>
      <method name="getMethod()"/>
      <method name="getParameter(java.lang.String)"/>
      <method name="getPathInfo()"/>
      <method name="getPathTranslated()"/>
      <method name="getProtocol()"/>
      <method name="getQueryString()"/>
      <method name="getRemoteAddr()"/>
      <method name="getRemoteHost()"/>
      <method name="getRemoteUser()"/>
      <method name="getRequestURI()"/>
      <method name="getRequestedSessionId()"/>
      <method name="getResponseHeader(java.lang.String)"/>
      <method name="getScheme()"/>
      <method name="getServerName()"/>
      <method name="getServletPath()"/>
      <method name="getParameterValues(java.lang.String)"/>
      <method name="getURIAsBytes()"/>
      <method name="getUserPrincipal()"/>
      <method name="getAttributeNames()"/>
      <method name="getHeaderNames()"/>
      <method name="getHeaders(java.lang.String)"/>
      <method name="getLocales()"/>
      <method name="getParameterNames()"/>
      <method name="getLocale()"/>
      <method name="getCookies()"/>
      <method name="getDateHeader(java.lang.String)"/>
      <method name="getInvokeTime()"/>
      <method name="getResponseContentLengthLong()"/>
      <method name="setRemoteUser(java.lang.String)"/>
      <method name="getServerChannel()"/>
    </class>
    <class name="LogField">
      <field name="APPLICATION_PFX"/>
      <field name="AUTHUSER_ID"/>
      <field name="BYTES_ID"/>
      <field name="CLIENT_PFX"/>
      <field name="CLIENT_SERVER_PFX"/>
      <field name="COMMENT_ID"/>
      <field name="DATE_ID"/>
      <field name="DNS_ID"/>
      <field name="ECID_ID"/>
      <field name="IP_ID"/>
      <field name="METHOD_ID"/>
      <field name="RID_ID"/>
      <field name="SERVER_CLIENT_PFX"/>
      <field name="SERVER_PFX"/>
      <field name="STATUS_ID"/>
      <field name="TIME_ID"/>
      <field name="TIME_TAKEN_ID"/>
      <field name="UNKNOWN_ID"/>
      <field name="UNKNOWN_PFX"/>
      <field name="URI_ID"/>
      <field name="URI_QUERY_ID"/>
      <field name="URI_STEM_ID"/>
      <method name="logField(weblogic.servlet.logging.HttpAccountingInfo,weblogic.servlet.logging.FormatStringBuffer)"/>
    </class>
  </package>
  <package name="weblogic.servlet.security">
    <class name="AuthFilter">
      <method name="doSuccessAuth(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"/>
      <field name="TARGET_URL"/>
      <method name="doFailAuth(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"/>
      <method name="doPreAuth(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"/>
      <method name="service(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"/>
    </class>
    <class name="ServletAuthentication">
      <method name="weak(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"/>
      <method name="invalidateAll(javax.servlet.http.HttpServletRequest)"/>
      <method name="logout(javax.servlet.http.HttpServletRequest)"/>
      <method name="logout(javax.servlet.http.HttpSession)"/>
      <field name="AUTHENTICATED"/>
      <field name="FAILED_AUTHENTICATION"/>
      <field name="NEEDS_CREDENTIALS"/>
      <method name="assertIdentity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)"/>
      <method name="assertIdentity(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String,weblogic.security.services.AppContext)"/>
      <method name="authObject(java.lang.String,java.lang.Object,javax.servlet.http.HttpServletRequest)"/>
      <method name="authObject(java.lang.String,java.lang.Object,javax.servlet.http.HttpSession,javax.servlet.http.HttpServletRequest)"/>
      <method name="authenticate(javax.security.auth.callback.CallbackHandler,javax.servlet.http.HttpServletRequest)"/>
      <method name="login(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"/>
      <method name="login(javax.security.auth.callback.CallbackHandler,javax.servlet.http.HttpServletRequest)"/>
      <method name="strong(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"/>
      <method name="strong(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)"/>
      <method name="weak(java.lang.String,java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"/>
      <method name="weak(java.lang.String,java.lang.String,javax.servlet.http.HttpSession)"/>
      <method name="getTargetURIForFormAuthentication(javax.servlet.http.HttpSession)"/>
      <method name="getTargetURLForFormAuthentication(javax.servlet.http.HttpSession)"/>
      <method name="getSessionCookie(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"/>
      <method name="done(javax.servlet.http.HttpServletRequest)"/>
      <method name="generateNewSessionID(javax.servlet.http.HttpServletRequest)"/>
      <method name="killCookie(javax.servlet.http.HttpServletRequest)"/>
      <method name="runAs(javax.security.auth.Subject,javax.servlet.http.HttpServletRequest)"/>
    </class>
    <class name="Utils">
      <method name="isSSLRequired(javax.servlet.ServletContext,java.lang.String,java.lang.String)"/>
      <method name="isSSLRequired(javax.servlet.http.HttpServletRequest)"/>
      <method name="encodeXSS(java.lang.String)"/>
      <method name="getConfiguredAuthMethod(javax.servlet.ServletContext)"/>
      <method name="getConfiguredAuthMethod(javax.servlet.http.HttpServletRequest)"/>
    </class>
  </package>
  <package name="weblogic.socket">
    <class name="WeblogicSocketFactory">
      <method name="createSocket(java.net.InetAddress,int,int)"/>
    </class>
  </package>
  <package name="weblogic.t3.srvr">
    <class name="GracefulRequest" members="concealed"/>
    <class name="RGGracefulRequest" members="concealed"/>
  </package>
  <package name="weblogic.transaction">
    <class name="AppSetRollbackOnlyException" members="concealed"/>
    <class name="BeginNotificationListener">
      <method name="beginNotification(java.lang.Object)"/>
    </class>
    <class name="ClientTransactionManager">
      <method name="forceSuspend()"/>
      <method name="forceResume(javax.transaction.Transaction)"/>
    </class>
    <class name="ClientTxHelper">
      <method name="getTransactionManager()"/>
    </class>
    <class name="InterposedTransactionManager">
      <method name="getTransaction()"/>
      <method name="getTransaction(javax.transaction.xa.Xid)"/>
      <method name="getXAResource()"/>
      <method name="setClusterwideRecoveryEnabled(boolean)"/>
    </class>
    <class name="NestedException">
      <method name="getMessage()"/>
      <method name="superToString()"/>
      <method name="toString()"/>
      <method name="getNested()"/>
      <method name="getNestedException()"/>
      <field name="nested"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="NestedThrowable">
      <method name="superToString()"/>
      <method name="getNested()"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="PeerExchangeTransaction" members="concealed"/>
    <class name="RollbackException">
      <method name="superToString()"/>
      <method name="toString()"/>
      <method name="getNested()"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="ServerTransactionManager">
      <method name="getJTATransactionForThread(java.lang.Thread)"/>
      <method name="registerBeginNotificationListener(weblogic.transaction.BeginNotificationListener,java.lang.Object)"/>
      <method name="unregisterBeginNotificationListener(weblogic.transaction.BeginNotificationListener)"/>
      <method name="getTransactionLogger()"/>
    </class>
    <class name="TimedOutException" members="concealed"/>
    <class name="Transaction">
      <method name="delistResourceWithProperties(javax.transaction.xa.XAResource,int,java.util.Map)"/>
      <method name="enlistResource(weblogic.transaction.nonxa.NonXAResource)"/>
      <method name="enlistResourceWithProperties(javax.transaction.xa.XAResource,java.util.Map)"/>
      <method name="isTimedOut()"/>
      <method name="isTxAsyncTimeout()"/>
      <method name="getProperty(java.lang.String)"/>
      <method name="getHeuristicErrorMessage()"/>
      <method name="getName()"/>
      <method name="getStatusAsString()"/>
      <method name="getRollbackReason()"/>
      <method name="getProperties()"/>
      <method name="getXID()"/>
      <method name="getXid()"/>
      <method name="getMillisSinceBegin()"/>
      <method name="getTimeToLiveMillis()"/>
      <field name="ENLISTMENT_RESOURCE_TYPE"/>
      <field name="ENLISTMENT_RESOURCE_TYPE_WEBLOGIC_JMS"/>
      <field name="TRANSACTION_COMPLETION_TIMEOUT_SECONDS_PROPERTY_KEY"/>
      <field name="TRANSACTION_EAGER_END_ON_DELIST_PROPERTY_KEY"/>
      <field name="TRANSACTION_NAME_PROPERTY_KEY"/>
      <method name="addProperties(java.util.Map)"/>
      <method name="setName(java.lang.String)"/>
      <method name="setProperty(java.lang.String,java.io.Serializable)"/>
      <method name="setRollbackOnly(java.lang.String)"/>
      <method name="setRollbackOnly(java.lang.String,java.lang.Throwable)"/>
      <method name="setRollbackOnly(java.lang.Throwable)"/>
    </class>
    <class name="TransactionHelper">
      <method name="getTransaction()"/>
      <method name="getUserTransaction()"/>
      <method name="pushTransactionHelper(weblogic.transaction.TransactionHelper)"/>
      <method name="setTransactionHelper(weblogic.transaction.TransactionHelper)"/>
      <method name="getTransactionHelper()"/>
      <method name="popTransactionHelper()"/>
      <method name="getTransactionManager()"/>
    </class>
    <class name="TransactionLoggable">
      <method name="onDisk(weblogic.transaction.TransactionLogger)"/>
      <method name="onError(weblogic.transaction.TransactionLogger)"/>
      <method name="onRecovery(weblogic.transaction.TransactionLogger)"/>
      <method name="readExternal(java.io.DataInput)"/>
      <method name="writeExternal(java.io.DataOutput)"/>
    </class>
    <class name="TransactionLogger">
      <method name="hasTransactionLogRecords()"/>
      <method name="getInitialRecoveredTransactionTotalCount()"/>
      <method name="getRecoveredTransactionCompletionCount()"/>
      <method name="getMigratedCoordinatorURL()"/>
      <method name="checkpoint()"/>
      <method name="release(weblogic.transaction.TransactionLoggable)"/>
      <method name="store(weblogic.transaction.TransactionLoggable)"/>
    </class>
    <class name="TransactionManager">
      <method name="getTransaction(javax.transaction.xa.Xid)"/>
      <field name="ASYNC_TIMEOUT_DELIST"/>
      <field name="CALL_SET_DELIST_TMSUCCESS_ALWAYS"/>
      <field name="CALL_SET_DELIST_TMSUCCESS_INSTEAD_OF_TMSUSPEND"/>
      <field name="CALL_SET_TRANSACTION_TIMEOUT"/>
      <field name="ENLISTMENT_DYNAMIC"/>
      <field name="ENLISTMENT_STANDARD"/>
      <field name="ENLISTMENT_STATIC"/>
      <field name="ENLISTMENT_TYPE"/>
      <field name="FIRST_RESOURCE_COMMIT"/>
      <field name="FIRST_RESOURCE_COMMIT_SERVER"/>
      <field name="INTERLEAVING_ENLISTMENTS"/>
      <field name="LOCAL_ASSIGNMENT_OF_REMOTE_RESOURCES"/>
      <field name="RECOVER_RETRY_DURATION_SECONDS"/>
      <field name="RECOVER_RETRY_INTERVAL_SECONDS"/>
      <field name="RESOURCE_DATASOURCE"/>
      <field name="RESOURCE_JCA"/>
      <field name="RESOURCE_JMS"/>
      <field name="RESOURCE_OTHER"/>
      <field name="RESOURCE_TYPE"/>
      <field name="THREAD_AFFINITY"/>
      <method name="begin(int)"/>
      <method name="begin(java.lang.String)"/>
      <method name="begin(java.lang.String,int)"/>
      <method name="begin(java.util.Map)"/>
      <method name="registerDynamicResource(java.lang.String,javax.transaction.xa.XAResource)"/>
      <method name="registerDynamicResource(java.lang.String,javax.transaction.xa.XAResource,java.util.Hashtable)"/>
      <method name="registerDynamicResource(java.lang.String,weblogic.transaction.nonxa.NonXAResource)"/>
      <method name="registerResource(java.lang.String,javax.transaction.xa.XAResource)"/>
      <method name="registerResource(java.lang.String,javax.transaction.xa.XAResource,boolean)"/>
      <method name="registerResource(java.lang.String,javax.transaction.xa.XAResource,java.util.Hashtable)"/>
      <method name="registerResource(java.lang.String,javax.transaction.xa.XAResource,java.util.Hashtable,boolean)"/>
      <method name="registerStaticResource(java.lang.String,javax.transaction.xa.XAResource)"/>
      <method name="registerStaticResource(java.lang.String,javax.transaction.xa.XAResource,java.util.Hashtable)"/>
      <method name="setResourceHealthy(java.lang.String)"/>
      <method name="unregisterResource(java.lang.String)"/>
      <method name="unregisterResource(java.lang.String,boolean)"/>
    </class>
    <class name="TxHelper">
      <method name="status2String(int)"/>
      <method name="getUserTransaction()"/>
      <method name="createXid(byte[],byte[])"/>
      <method name="createXid(int,byte[],byte[])"/>
      <method name="getClientTransactionManager()"/>
      <method name="getTransaction()"/>
    </class>
    <class name="UserTransaction">
      <method name="begin(java.lang.String)"/>
      <method name="begin(java.lang.String,int)"/>
    </class>
    <class name="WLXid">
      <method name="getTruncatedBranchQualifier(java.lang.String)"/>
    </class>
    <class name="XAException">
      <method name="superToString()"/>
      <method name="toString()"/>
      <method name="getNested()"/>
      <field name="XAER_RMRETRY"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="XAResource">
      <method name="detectedUnavailable()"/>
      <method name="getDelistFlag()"/>
      <field name="TMCLUSTERSCAN"/>
      <field name="TMCLUSTERSCANPASSTHROUGH"/>
    </class>
    <class name="XIDFactory">
      <method name="createXID(byte[],byte[])"/>
      <method name="createXID(int,byte[],byte[])"/>
      <method name="createXID(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.transaction.nonxa">
    <class name="DataSourceEmulatedTwoPhaseResource">
      <method name="isOnePhaseCommit()"/>
    </class>
    <class name="EmulatedTwoPhaseResource" members="concealed"/>
    <class name="NonXAException" members="concealed"/>
    <class name="NonXAResource">
      <method name="isSameRM(weblogic.transaction.nonxa.NonXAResource)"/>
      <method name="commit(javax.transaction.xa.Xid,boolean)"/>
      <method name="rollback(javax.transaction.xa.Xid)"/>
    </class>
  </package>
  <package name="weblogic.utils">
    <class name="ErrorCollectionException">
      <method name="isEmpty()"/>
      <method name="size()"/>
      <method name="getBaseMessage()"/>
      <method name="getMessage()"/>
      <method name="getExceptions()"/>
      <method name="getErrors()"/>
      <method name="add(java.lang.Throwable)"/>
      <method name="addCollection(weblogic.utils.ErrorCollectionException)"/>
      <method name="addError(java.lang.Throwable)"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="NestedException">
      <method name="getMessage()"/>
      <method name="superToString()"/>
      <method name="toString()"/>
      <method name="getNested()"/>
      <method name="getNestedException()"/>
      <field name="nested"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="NestedRuntimeException">
      <method name="superToString()"/>
      <method name="toString()"/>
      <method name="getNested()"/>
      <method name="getNestedException()"/>
      <method name="initCause(java.lang.Throwable)"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="NestedThrowable">
      <method name="superToString()"/>
      <method name="getNested()"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
  </package>
  <package name="weblogic.utils.classloaders">
    <class name="GenericClassLoader">
      <constructor name="GenericClassLoader(java.lang.ClassLoader)"/>
      <method name="getClassPath()"/>
    </class>
  </package>
  <package name="weblogic.utils.collections">
    <class name="CircularQueue">
      <method name="remove()"/>
      <method name="add(E)"/>
      <method name="isEmpty()"/>
      <method name="capacity()"/>
      <method name="size()"/>
      <method name="clone()"/>
      <method name="peek()"/>
      <method name="toString()"/>
      <method name="iterator()"/>
      <method name="clear()"/>
    </class>
  </package>
  <package name="weblogic.utils.encoders">
    <class name="BASE64Decoder">
      <method name="bytesPerAtom()"/>
      <method name="bytesPerLine()"/>
      <constructor name="BASE64Decoder()"/>
      <field name="decode_buffer"/>
      <field name="pem_convert_array"/>
      <field name="pem_array"/>
      <method name="decodeAtom(java.io.InputStream,java.io.OutputStream,int)"/>
    </class>
    <class name="BASE64Encoder">
      <method name="bytesPerAtom()"/>
      <method name="bytesPerLine()"/>
      <method name="addPadding()"/>
      <method name="getPemArray()"/>
      <constructor name="BASE64Encoder()"/>
      <field name="pem_array"/>
      <method name="encodeAtom(java.io.OutputStream,byte[],int,int)"/>
      <method name="encodeAtom(java.io.OutputStream,byte[],int,int,boolean)"/>
      <method name="encodeLineSuffix(java.io.OutputStream)"/>
    </class>
    <class name="CharacterDecoder">
      <method name="decodeBuffer(java.io.InputStream)"/>
      <method name="decodeBuffer(java.lang.String)"/>
    </class>
    <class name="CharacterEncoder">
      <method name="encodeBuffer(byte[])"/>
      <method name="encodeBuffer(java.io.InputStream,java.io.OutputStream)"/>
    </class>
  </package>
  <package name="weblogic.utils.expressions">
    <class name="ExpressionParserException" members="concealed"/>
  </package>
  <package name="weblogic.websocket">
    <class name="ClosingMessage">
      <method name="getStatusCode()"/>
      <method name="getReason()"/>
      <field name="NO_STATUS_CODE"/>
      <field name="SC_GOING_AWAY"/>
      <field name="SC_INTERNAL_SERVER_ERROR"/>
      <field name="SC_INVALID_FRAME_PAYLOAD_DATA"/>
      <field name="SC_MESSAGE_TOO_BIG"/>
      <field name="SC_NORMAL_CLOSURE"/>
      <field name="SC_POLICY_VOILATION"/>
      <field name="SC_PROTOCOL_ERROR"/>
      <field name="SC_UNSUPPORTED_DATA"/>
    </class>
    <class name="HandshakeException">
      <method name="getCode()"/>
      <field name="PROTOCOL_ERROR"/>
      <field name="UNSUPPORTED_VERSION"/>
    </class>
    <class name="WSHandshakeRequest">
      <method name="getVersion()"/>
      <method name="getOrigin()"/>
      <method name="getResourcePath()"/>
      <method name="getExtensions()"/>
      <method name="getSubProtocols()"/>
    </class>
    <class name="WSHandshakeResponse">
      <method name="getEnabledExtensions()"/>
      <method name="getEnabledSubProtocols()"/>
      <method name="enableExtension(java.lang.String)"/>
      <method name="enableSubProtocol(java.lang.String)"/>
    </class>
    <class name="WebSocketAdapter">
      <method name="getWebSocketContext()"/>
      <method name="accept(weblogic.websocket.WSHandshakeRequest,weblogic.websocket.WSHandshakeResponse)"/>
      <method name="destroy()"/>
      <method name="init(weblogic.websocket.WebSocketContext)"/>
      <method name="onClose(weblogic.websocket.WebSocketConnection,weblogic.websocket.ClosingMessage)"/>
      <method name="onError(weblogic.websocket.WebSocketConnection,java.lang.Throwable)"/>
      <method name="onFragment(weblogic.websocket.WebSocketConnection,boolean,byte[])"/>
      <method name="onFragment(weblogic.websocket.WebSocketConnection,boolean,java.lang.String)"/>
      <method name="onMessage(weblogic.websocket.WebSocketConnection,byte[])"/>
      <method name="onMessage(weblogic.websocket.WebSocketConnection,java.lang.String)"/>
      <method name="onOpen(weblogic.websocket.WebSocketConnection)"/>
      <method name="onPing(weblogic.websocket.WebSocketConnection,byte[])"/>
      <method name="onPong(weblogic.websocket.WebSocketConnection,byte[])"/>
      <method name="onTimeout(weblogic.websocket.WebSocketConnection)"/>
    </class>
    <class name="WebSocketConnection">
      <method name="isOpen()"/>
      <method name="isSecure()"/>
      <method name="getRemotePort()"/>
      <method name="getRemoteAddress()"/>
      <method name="getRemoteUser()"/>
      <method name="getRequestURI()"/>
      <method name="getUserPrincipal()"/>
      <method name="close(int)"/>
      <method name="close(int,java.lang.String)"/>
      <method name="send(byte[])"/>
      <method name="send(java.lang.String)"/>
      <method name="sendPing(byte[])"/>
      <method name="sendPong(byte[])"/>
      <method name="stream(boolean,byte[],int,int)"/>
      <method name="stream(boolean,java.lang.String)"/>
      <method name="getWebSocketContext()"/>
    </class>
    <class name="WebSocketContext">
      <method name="getMaxConnections()"/>
      <method name="getMaxMessageSize()"/>
      <method name="getTimeoutSecs()"/>
      <method name="getPathPatterns()"/>
      <method name="getSupportedVersions()"/>
      <method name="getWebSocketConnections()"/>
      <method name="getServletContext()"/>
      <method name="setMaxConnections(int)"/>
      <method name="setMaxMessageSize(int)"/>
      <method name="setTimeoutSecs(int)"/>
    </class>
    <class name="WebSocketException" members="concealed"/>
    <class name="WebSocketListener">
      <method name="accept(weblogic.websocket.WSHandshakeRequest,weblogic.websocket.WSHandshakeResponse)"/>
      <method name="destroy()"/>
      <method name="init(weblogic.websocket.WebSocketContext)"/>
      <method name="onClose(weblogic.websocket.WebSocketConnection,weblogic.websocket.ClosingMessage)"/>
      <method name="onError(weblogic.websocket.WebSocketConnection,java.lang.Throwable)"/>
      <method name="onFragment(weblogic.websocket.WebSocketConnection,boolean,byte[])"/>
      <method name="onFragment(weblogic.websocket.WebSocketConnection,boolean,java.lang.String)"/>
      <method name="onMessage(weblogic.websocket.WebSocketConnection,byte[])"/>
      <method name="onMessage(weblogic.websocket.WebSocketConnection,java.lang.String)"/>
      <method name="onOpen(weblogic.websocket.WebSocketConnection)"/>
      <method name="onPing(weblogic.websocket.WebSocketConnection,byte[])"/>
      <method name="onPong(weblogic.websocket.WebSocketConnection,byte[])"/>
      <method name="onTimeout(weblogic.websocket.WebSocketConnection)"/>
    </class>
  </package>
  <package name="weblogic.websocket.annotation">
    <class name="WebSocket" members="concealed"/>
  </package>
  <package name="weblogic.workarea">
    <class name="AsciiWorkContext">
      <method name="equals(java.lang.Object)"/>
      <method name="get()"/>
      <method name="toString()"/>
      <method name="readContext(weblogic.workarea.WorkContextInput)"/>
      <method name="writeContext(weblogic.workarea.WorkContextOutput)"/>
    </class>
    <class name="LongWorkContext">
      <method name="equals(java.lang.Object)"/>
      <method name="get()"/>
      <method name="toString()"/>
      <method name="longValue()"/>
      <method name="readContext(weblogic.workarea.WorkContextInput)"/>
      <method name="writeContext(weblogic.workarea.WorkContextOutput)"/>
    </class>
    <class name="NoWorkContextException" members="concealed"/>
    <class name="PrimitiveContextFactory">
      <method name="createEncodedKey(java.lang.String)"/>
      <method name="create(java.io.Serializable)"/>
      <method name="create(java.lang.String)"/>
      <method name="create(long)"/>
      <method name="createASCII(java.lang.String)"/>
      <method name="createMutable(java.io.Serializable)"/>
    </class>
    <class name="PrimitiveWorkContext">
      <method name="get()"/>
    </class>
    <class name="PropagationMode">
      <field name="DEFAULT"/>
      <field name="GLOBAL"/>
      <field name="JMS_QUEUE"/>
      <field name="JMS_TOPIC"/>
      <field name="LOCAL"/>
      <field name="MIME_HEADER"/>
      <field name="ONEWAY"/>
      <field name="RMI"/>
      <field name="SOAP"/>
      <field name="TRANSACTION"/>
      <field name="WORK"/>
    </class>
    <class name="PropertyReadOnlyException" members="concealed"/>
    <class name="SerializableWorkContext">
      <method name="equals(java.lang.Object)"/>
      <method name="getSerializable()"/>
      <method name="get()"/>
      <method name="toString()"/>
      <method name="readContext(weblogic.workarea.WorkContextInput)"/>
      <method name="writeContext(weblogic.workarea.WorkContextOutput)"/>
    </class>
    <class name="StringWorkContext">
      <method name="equals(java.lang.Object)"/>
      <method name="get()"/>
      <method name="toString()"/>
      <method name="readContext(weblogic.workarea.WorkContextInput)"/>
      <method name="writeContext(weblogic.workarea.WorkContextOutput)"/>
    </class>
    <class name="WorkContext">
      <method name="readContext(weblogic.workarea.WorkContextInput)"/>
      <method name="writeContext(weblogic.workarea.WorkContextOutput)"/>
    </class>
    <class name="WorkContextInput">
      <method name="readASCII()"/>
      <method name="readContext()"/>
    </class>
    <class name="WorkContextMap">
      <method name="isEmpty()"/>
      <method name="isPropagationModePresent(int)"/>
      <method name="getPropagationMode(java.lang.String)"/>
      <method name="iterator()"/>
      <method name="keys()"/>
      <method name="get(java.lang.String)"/>
      <method name="put(java.lang.String,weblogic.workarea.WorkContext)"/>
      <method name="put(java.lang.String,weblogic.workarea.WorkContext,int)"/>
      <method name="remove(java.lang.String)"/>
    </class>
    <class name="WorkContextOutput">
      <method name="writeASCII(java.lang.String)"/>
      <method name="writeContext(weblogic.workarea.WorkContext)"/>
    </class>
  </package>
  <package name="weblogic.wtc.gwt">
    <class name="CallDescriptorUtil">
      <method name="isCallDescriptorEqual(weblogic.wtc.jatmi.CallDescriptor,weblogic.wtc.jatmi.CallDescriptor)"/>
    </class>
    <class name="DServiceInfo">
      <method name="getServiceType()"/>
      <method name="getStatus()"/>
      <method name="getLocalAccessPoint()"/>
      <method name="getServiceName()"/>
    </class>
    <class name="DSessConnInfo">
      <method name="isConnected()"/>
      <method name="getConnected()"/>
      <method name="getLocalAccessPointId()"/>
      <method name="getRemoteAccessPointId()"/>
    </class>
    <class name="TuxedoConnection">
      <method name="tpenqueue(java.lang.String,java.lang.String,weblogic.wtc.jatmi.EnqueueRequest,weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tpcancel(weblogic.wtc.jatmi.CallDescriptor,int)"/>
      <method name="tpsprio(int,int)"/>
      <method name="tpterm()"/>
      <method name="tpacall(java.lang.String,weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tpacall(java.lang.String,weblogic.wtc.jatmi.TypedBuffer,int,weblogic.wtc.jatmi.TpacallAsyncReply)"/>
      <method name="tpconnect(java.lang.String,weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tpdequeue(java.lang.String,java.lang.String,byte[],byte[],boolean,boolean,int)"/>
      <method name="tpdequeue(java.lang.String,java.lang.String,int)"/>
      <method name="tpcall(java.lang.String,weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tpgetrply(weblogic.wtc.jatmi.CallDescriptor,int)"/>
    </class>
    <class name="TuxedoConnectionFactory">
      <field name="JNDI_NAME"/>
      <method name="getTuxedoConnection()"/>
    </class>
    <class name="WTCServiceStatus">
      <field name="AVAILABLE"/>
      <field name="EXPORT"/>
      <field name="IMPORT"/>
      <field name="SUSPENDED"/>
      <field name="UNAVAILABLE"/>
      <field name="UNKNOWN"/>
      <method name="statusToString(int)"/>
      <method name="svcTypeToString(int)"/>
    </class>
    <class name="XmlFmlCnv">
      <method name="FML32toXML(weblogic.wtc.jatmi.TypedFML32)"/>
      <method name="FML32toXML(weblogic.wtc.jatmi.TypedFML32,boolean,boolean)"/>
      <method name="FML32toXML(weblogic.wtc.jatmi.TypedFML32,boolean,boolean,boolean)"/>
      <method name="FML32toXML(weblogic.wtc.jatmi.TypedFML32,boolean,boolean,boolean,boolean)"/>
      <method name="FML32toXML(weblogic.wtc.jatmi.TypedFML32,boolean)"/>
      <method name="FMLtoXML(weblogic.wtc.jatmi.TypedFML)"/>
      <method name="FMLtoXML(weblogic.wtc.jatmi.TypedFML,boolean)"/>
      <method name="FMLtoXML(weblogic.wtc.jatmi.TypedFML,boolean,boolean)"/>
      <method name="FMLtoXML(weblogic.wtc.jatmi.TypedFML,boolean,boolean,boolean)"/>
      <method name="FMLtoXML(weblogic.wtc.jatmi.TypedFML,boolean,boolean,boolean,boolean)"/>
      <method name="getNormalizeEscaped()"/>
      <method name="XMLtoFML(java.lang.String,weblogic.wtc.jatmi.FldTbl[])"/>
      <method name="XMLtoFML32(java.lang.String,weblogic.wtc.jatmi.FldTbl[])"/>
    </class>
    <class name="XmlViewCnv">
      <method name="ViewToXML(weblogic.wtc.jatmi.TypedBuffer,java.lang.Class,boolean)"/>
      <method name="XMLToView(java.lang.String,java.lang.Class,java.lang.String)"/>
    </class>
    <class name="genpasswd" members="concealed"/>
  </package>
  <package name="weblogic.wtc.jatmi">
    <class name="ApplicationToMonitorInterface">
      <method name="tpenqueue(java.lang.String,java.lang.String,weblogic.wtc.jatmi.EnqueueRequest,weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <field name="TPABSOLUTE"/>
      <field name="TPACK"/>
      <field name="TPAPPAUTH"/>
      <field name="TPCONV"/>
      <field name="TPGETANY"/>
      <field name="TPNOAUTH"/>
      <field name="TPNOBLOCK"/>
      <field name="TPNOCHANGE"/>
      <field name="TPNOREPLY"/>
      <field name="TPNOTIME"/>
      <field name="TPNOTRAN"/>
      <field name="TPRECVONLY"/>
      <field name="TPRMICALL"/>
      <field name="TPSENDONLY"/>
      <field name="TPSIGRSTRT"/>
      <field name="TPSYSAUTH"/>
      <field name="TPTRAN"/>
      <field name="TPUNKAUTH"/>
      <method name="tpcancel(weblogic.wtc.jatmi.CallDescriptor,int)"/>
      <method name="tpsprio(int,int)"/>
      <method name="tpterm()"/>
      <method name="tpacall(java.lang.String,weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tpacall(java.lang.String,weblogic.wtc.jatmi.TypedBuffer,int,weblogic.wtc.jatmi.TpacallAsyncReply)"/>
      <method name="tpconnect(java.lang.String,weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tpdequeue(java.lang.String,java.lang.String,byte[],byte[],boolean,boolean,int)"/>
      <method name="tpdequeue(java.lang.String,java.lang.String,int)"/>
      <method name="tpcall(java.lang.String,weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tpgetrply(weblogic.wtc.jatmi.CallDescriptor,int)"/>
    </class>
    <class name="CallDescriptor">
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
    </class>
    <class name="Conversation">
      <method name="tpdiscon()"/>
      <method name="tpsend(weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tprecv(int)"/>
    </class>
    <class name="Decimal">
      <method name="equals(java.lang.Object)"/>
      <method name="byteValue()"/>
      <method name="digits()"/>
      <method name="doubleValue()"/>
      <method name="floatValue()"/>
      <method name="compareTo(java.lang.Object)"/>
      <method name="compareTo(weblogic.wtc.jatmi.Decimal)"/>
      <method name="exponent()"/>
      <method name="intValue()"/>
      <method name="numDigits()"/>
      <method name="sign()"/>
      <method name="toString()"/>
      <method name="bigDecimalValue()"/>
      <method name="longValue()"/>
      <method name="shortValue()"/>
      <field name="DECPOSNULL"/>
      <field name="DECSIZE"/>
      <method name="toString(weblogic.wtc.jatmi.Decimal)"/>
      <method name="valueOf(java.lang.String)"/>
      <method name="negate()"/>
    </class>
    <class name="DequeueReply">
      <method name="getcorrid()"/>
      <method name="getmsgid()"/>
      <method name="getdelivery_qos()"/>
      <method name="getreply_qos()"/>
      <method name="geturcode()"/>
      <method name="getappkey()"/>
      <method name="getpriority()"/>
      <method name="getfailurequeue()"/>
      <method name="getreplyqueue()"/>
      <method name="toString()"/>
    </class>
    <class name="DmsReflect">
      <method name="getECID()"/>
      <method name="getInstance()"/>
      <method name="setECID(java.lang.String)"/>
    </class>
    <class name="DynamicFldTbl">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
    </class>
    <class name="EnqueueRequest">
      <method name="isTPQEXPTIME_NONE()"/>
      <method name="isTPQTOP()"/>
      <method name="getcorrid()"/>
      <method name="getmsgid()"/>
      <method name="getdelivery_qos()"/>
      <method name="getreply_qos()"/>
      <method name="geturcode()"/>
      <method name="getpriority()"/>
      <method name="getfailurequeue()"/>
      <method name="getreplyqueue()"/>
      <method name="toString()"/>
      <field name="TPQQOSDEFAULTPERSIST"/>
      <field name="TPQQOSNONPERSISTENT"/>
      <field name="TPQQOSPERSISTENT"/>
      <method name="setTPQEXPTIME_NONE(boolean)"/>
      <method name="setTPQTOP(boolean)"/>
      <method name="setcorrid(byte[])"/>
      <method name="setdelivery_qos(int)"/>
      <method name="setdeq_time(weblogic.wtc.jatmi.QueueTimeField)"/>
      <method name="setexp_time(weblogic.wtc.jatmi.QueueTimeField)"/>
      <method name="setfailurequeue(java.lang.String)"/>
      <method name="setmsgid(byte[])"/>
      <method name="setpriority(java.lang.Integer)"/>
      <method name="setreply_qos(int)"/>
      <method name="setreplyqueue(java.lang.String)"/>
      <method name="seturcode(int)"/>
      <method name="getdeq_time()"/>
      <method name="getexp_time()"/>
    </class>
    <class name="FML">
      <method name="Fldid(java.lang.String)"/>
      <method name="Fldno(int)"/>
      <method name="Fldtype(int)"/>
      <method name="Foccur(int)"/>
      <method name="Fused()"/>
      <method name="Fget(int,int)"/>
      <method name="Fget(weblogic.wtc.jatmi.FmlKey)"/>
      <method name="Fname(int)"/>
      <method name="Fiterator()"/>
      <field name="FLD_BOOL"/>
      <field name="FLD_CARRAY"/>
      <field name="FLD_CHAR"/>
      <field name="FLD_DECIMAL"/>
      <field name="FLD_DOUBLE"/>
      <field name="FLD_FLOAT"/>
      <field name="FLD_FML32"/>
      <field name="FLD_INT"/>
      <field name="FLD_LDOUBLE"/>
      <field name="FLD_LLONG"/>
      <field name="FLD_LONG"/>
      <field name="FLD_MBSTRING"/>
      <field name="FLD_PTR"/>
      <field name="FLD_SCHAR"/>
      <field name="FLD_SHORT"/>
      <field name="FLD_STRING"/>
      <field name="FLD_UCHAR"/>
      <field name="FLD_UINT"/>
      <field name="FLD_ULLONG"/>
      <field name="FLD_USHORT"/>
      <field name="FLD_VIEW32"/>
      <field name="FLD_WCHAR"/>
      <method name="Fchg(int,int,java.lang.Object)"/>
      <method name="Fchg(weblogic.wtc.jatmi.FmlKey,java.lang.Object)"/>
      <method name="Fdel(int,int)"/>
      <method name="Fdel(weblogic.wtc.jatmi.FmlKey)"/>
      <method name="setFieldTables(weblogic.wtc.jatmi.FldTbl[])"/>
      <method name="getFieldTables()"/>
    </class>
    <class name="Ferror">
      <method name="getFerror()"/>
      <method name="toString()"/>
      <field name="FALIGNERR"/>
      <field name="FBADACM"/>
      <field name="FBADFLD"/>
      <field name="FBADNAME"/>
      <field name="FBADTBL"/>
      <field name="FBADVIEW"/>
      <field name="FEBADOP"/>
      <field name="FEINVAL"/>
      <field name="FEUNIX"/>
      <field name="FFTOPEN"/>
      <field name="FFTSYNTAX"/>
      <field name="FMALLOC"/>
      <field name="FMAXVAL"/>
      <field name="FMINVAL"/>
      <field name="FNOCNAME"/>
      <field name="FNOSPACE"/>
      <field name="FNOTFLD"/>
      <field name="FNOTPRES"/>
      <field name="FSYNTAX"/>
      <field name="FTYPERR"/>
      <field name="FVFOPEN"/>
      <field name="FVFSYNTAX"/>
      <method name="Fstrerror(int)"/>
    </class>
    <class name="FldTbl">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
    </class>
    <class name="FmlKey">
      <method name="equals(java.lang.Object)"/>
      <method name="compareTo(java.lang.Object)"/>
      <method name="get_fldid()"/>
      <method name="get_occurance()"/>
      <method name="get_occurrence()"/>
      <method name="hashCode()"/>
      <method name="toString()"/>
      <method name="set_occurance(int)"/>
      <method name="set_occurrence(int)"/>
    </class>
    <class name="GatewayTpacallAsyncReply">
      <method name="getTransaction()"/>
    </class>
    <class name="MBStringTypes">
      <method name="getMBEncoding()"/>
      <field name="mbencoding"/>
      <method name="setMBEncoding(java.lang.String)"/>
    </class>
    <class name="QueueTimeField">
      <method name="isRelative()"/>
      <method name="getTime()"/>
      <method name="toString()"/>
    </class>
    <class name="Reply">
      <method name="gettpurcode()"/>
      <method name="getCallDescriptor()"/>
      <method name="getReplyBuffer()"/>
    </class>
    <class name="StandardTypes">
      <method name="getHintIndex()"/>
      <method name="getSubtype()"/>
      <method name="getType()"/>
      <field name="CALLOUT_HINT"/>
      <field name="CARRAY_HINT"/>
      <field name="CMPS_HDR_HINT"/>
      <field name="COMPOS_HINT"/>
      <field name="FML32_HINT"/>
      <field name="FML_HINT"/>
      <field name="MBSTRING_HINT"/>
      <field name="MTTYP_HINT"/>
      <field name="PROP_HINT"/>
      <field name="ROUTE_HINT"/>
      <field name="RPCRP_HINT"/>
      <field name="RPCRQ_HINT"/>
      <field name="STRING_HINT"/>
      <field name="TDOM_VALS_HINT"/>
      <field name="TGIOP_HINT"/>
      <field name="TM_HINT"/>
      <field name="TPINITTYPE_HINT"/>
      <field name="TRAN_HINT"/>
      <field name="UNSOL_HINT"/>
      <field name="VIEW32_HINT"/>
      <field name="VIEW_HINT"/>
      <field name="WSRPCRQ_HINT"/>
      <field name="WS_HINT"/>
      <field name="XML_HINT"/>
      <field name="X_COMMON_HINT"/>
      <field name="X_C_TYPE_HINT"/>
      <field name="X_OCTET_HINT"/>
      <method name="hint_to_type(int)"/>
    </class>
    <class name="TPException">
      <method name="getUunixerr()"/>
      <method name="getdiagnostic()"/>
      <method name="getrevent()"/>
      <method name="gettperrno()"/>
      <method name="gettperrordetail()"/>
      <method name="gettpurcode()"/>
      <method name="toString()"/>
      <field name="QMEABORTED"/>
      <field name="QMEBADMSGID"/>
      <field name="QMEBADQUEUE"/>
      <field name="QMEBADRMID"/>
      <field name="QMEINUSE"/>
      <field name="QMEINVAL"/>
      <field name="QMEINVHANDLE"/>
      <field name="QMENOMSG"/>
      <field name="QMENOSPACE"/>
      <field name="QMENOTOPEN"/>
      <field name="QMEOS"/>
      <field name="QMEPROTO"/>
      <field name="QMERELEASE"/>
      <field name="QMESHARE"/>
      <field name="QMESYSTEM"/>
      <field name="QMETRAN"/>
      <field name="QMNONE"/>
      <field name="TPEABORT"/>
      <field name="TPEBADDESC"/>
      <field name="TPEBLOCK"/>
      <field name="TPEDIAGNOSTIC"/>
      <field name="TPED_CLIENTDISCONNECTED"/>
      <field name="TPED_DECRYPTION_FAILURE"/>
      <field name="TPED_DOMAINUNREACHABLE"/>
      <field name="TPED_INVALIDCONTEXT"/>
      <field name="TPED_INVALID_CERTIFICATE"/>
      <field name="TPED_INVALID_SIGNATURE"/>
      <field name="TPED_INVALID_XA_TRANSACTION"/>
      <field name="TPED_NOCLIENT"/>
      <field name="TPED_NOUNSOLHANDLER"/>
      <field name="TPED_OTS_INTERNAL"/>
      <field name="TPED_PERM"/>
      <field name="TPED_SVCTIMEOUT"/>
      <field name="TPED_TERM"/>
      <field name="TPEEVENT"/>
      <field name="TPEHAZARD"/>
      <field name="TPEHEURISTIC"/>
      <field name="TPEINVAL"/>
      <field name="TPEITYPE"/>
      <field name="TPELIMIT"/>
      <field name="TPEMATCH"/>
      <field name="TPEMIB"/>
      <field name="TPENOENT"/>
      <field name="TPEOS"/>
      <field name="TPEOTYPE"/>
      <field name="TPEPERM"/>
      <field name="TPEPROTO"/>
      <field name="TPERELEASE"/>
      <field name="TPERMERR"/>
      <field name="TPESVCERR"/>
      <field name="TPESVCFAIL"/>
      <field name="TPESYSTEM"/>
      <field name="TPETIME"/>
      <field name="TPETRAN"/>
      <field name="TPEV_DISCONIMM"/>
      <field name="TPEV_SENDONLY"/>
      <field name="TPEV_SVCERR"/>
      <field name="TPEV_SVCFAIL"/>
      <field name="TPEV_SVCSUCC"/>
      <field name="TPGOTSIG"/>
      <field name="TPMINVAL"/>
      <method name="tpstrerror(int)"/>
      <method name="tpstrerrordetail(int)"/>
      <method name="getReplyRtn()"/>
    </class>
    <class name="TPReplyException">
      <method name="getExceptionReply()"/>
    </class>
    <class name="TPRequestAsyncReply">
      <method name="failure(weblogic.wtc.jatmi.TPException)"/>
      <method name="success(weblogic.wtc.jatmi.Reply)"/>
    </class>
    <class name="TPServiceInformation">
      <method name="getServiceFlags()"/>
      <method name="getServiceName()"/>
      <method name="toString()"/>
      <method name="tpdiscon()"/>
      <method name="tpsend(weblogic.wtc.jatmi.TypedBuffer,int)"/>
      <method name="tprecv(int)"/>
      <method name="getServiceData()"/>
    </class>
    <class name="TpacallAsyncReply">
      <method name="failure(weblogic.wtc.jatmi.ApplicationToMonitorInterface,weblogic.wtc.jatmi.CallDescriptor,weblogic.wtc.jatmi.TPException)"/>
      <method name="success(weblogic.wtc.jatmi.ApplicationToMonitorInterface,weblogic.wtc.jatmi.CallDescriptor,weblogic.wtc.jatmi.Reply)"/>
    </class>
    <class name="TuxedoReply">
      <method name="gettpurcode()"/>
      <method name="toString()"/>
      <method name="setCallDescriptor(weblogic.wtc.jatmi.CallDescriptor)"/>
      <method name="setReplyBuffer(weblogic.wtc.jatmi.TypedBuffer)"/>
      <method name="settpurcode(int)"/>
      <method name="getCallDescriptor()"/>
      <method name="getReplyBuffer()"/>
    </class>
    <class name="TuxedoSSLSocketFactory">
      <method name="getDefaultCipherSuites()"/>
      <method name="getSupportedCipherSuites()"/>
      <method name="createServerSocket(int,int,java.net.InetAddress)"/>
      <method name="createSocket(java.net.InetAddress,int)"/>
      <method name="createSocket(java.net.Socket,java.lang.String,int,boolean)"/>
      <field name="CIPHER0"/>
      <field name="CIPHER112"/>
      <field name="CIPHER128"/>
      <field name="CIPHER256"/>
      <field name="CIPHER56"/>
      <method name="getCiphers(int,int)"/>
    </class>
    <class name="TuxedoService">
      <method name="service(weblogic.wtc.jatmi.TPServiceInformation)"/>
    </class>
    <class name="TuxedoServiceHome">
      <method name="create()"/>
    </class>
    <class name="TypedBuffer">
      <method name="getHintIndex()"/>
      <method name="getSubtype()"/>
      <method name="getType()"/>
      <method name="_tmpostrecv(java.io.DataInputStream,int)"/>
      <method name="_tmpresend(java.io.DataOutputStream)"/>
    </class>
    <class name="TypedBufferPool">
      <field name="buffers"/>
      <method name="put(java.lang.String,weblogic.wtc.jatmi.TypedBuffer)"/>
      <method name="get(java.lang.String)"/>
    </class>
    <class name="TypedCArray">
      <field name="carray"/>
      <method name="getSendSize()"/>
      <field name="sendSize"/>
      <method name="_tmpostrecv(java.io.DataInputStream,int)"/>
      <method name="_tmpresend(java.io.DataOutputStream)"/>
      <method name="setSendSize(int)"/>
    </class>
    <class name="TypedFML">
      <method name="Fldid(java.lang.String)"/>
      <method name="Fldno(int)"/>
      <method name="Fldtype(int)"/>
      <method name="Foccur(int)"/>
      <method name="Fused()"/>
      <method name="Fget(int,int)"/>
      <method name="Fget(int,int,boolean)"/>
      <method name="Fget(weblogic.wtc.jatmi.FmlKey)"/>
      <method name="Fget(weblogic.wtc.jatmi.FmlKey,boolean)"/>
      <method name="Fname(int)"/>
      <method name="Fiterator()"/>
      <method name="Fadd(int,java.lang.Object)"/>
      <method name="Fchg(int,int,java.lang.Object)"/>
      <method name="Fchg(weblogic.wtc.jatmi.FmlKey,java.lang.Object)"/>
      <method name="Fdel(int,int)"/>
      <method name="Fdel(weblogic.wtc.jatmi.FmlKey)"/>
      <method name="_tmpostrecv(java.io.DataInputStream,int)"/>
      <method name="_tmpostrecv65(java.io.DataInputStream)"/>
      <method name="_tmpresend(java.io.DataOutputStream)"/>
      <method name="setFieldTables(weblogic.wtc.jatmi.FldTbl[])"/>
      <method name="getFieldTables()"/>
    </class>
    <class name="TypedFML32">
      <method name="hasPointerFields()"/>
      <method name="Fldid(java.lang.String)"/>
      <method name="Fldno(int)"/>
      <method name="Fldtype(int)"/>
      <method name="Foccur(int)"/>
      <method name="Fused()"/>
      <field name="indxintvl"/>
      <field name="len"/>
      <field name="magic"/>
      <field name="maxlen"/>
      <field name="nfields"/>
      <field name="nie"/>
      <method name="Fget(int,int)"/>
      <method name="Fget(int,int,boolean)"/>
      <method name="Fget(weblogic.wtc.jatmi.FmlKey)"/>
      <method name="Fget(weblogic.wtc.jatmi.FmlKey,boolean)"/>
      <method name="Fname(int)"/>
      <field name="_flds"/>
      <field name="fldid_occs"/>
      <method name="Fiterator()"/>
      <method name="sortedFiterator()"/>
      <method name="Fadd(int,java.lang.Object)"/>
      <method name="Fchg(int,int,java.lang.Object)"/>
      <method name="Fchg(weblogic.wtc.jatmi.FmlKey,java.lang.Object)"/>
      <method name="Fdel(int,int)"/>
      <method name="Fdel(weblogic.wtc.jatmi.FmlKey)"/>
      <method name="_tmpresend(java.io.DataOutputStream)"/>
      <method name="setFieldTables(weblogic.wtc.jatmi.FldTbl[])"/>
      <field name="fldtbls"/>
      <method name="getFieldTables()"/>
    </class>
    <class name="TypedMBString">
      <method name="getBytes()"/>
      <method name="toString()"/>
      <method name="getStringBuffer()"/>
      <method name="_tmpostrecv(java.io.DataInputStream,int)"/>
      <method name="_tmpresend(java.io.DataOutputStream)"/>
      <method name="setBytes(byte[])"/>
    </class>
    <class name="TypedString">
      <method name="toString()"/>
      <method name="getStringBuffer()"/>
      <method name="_tmpostrecv(java.io.DataInputStream,int)"/>
      <method name="_tmpresend(java.io.DataOutputStream)"/>
    </class>
    <class name="TypedView" members="concealed"/>
    <class name="TypedView32">
      <method name="doClone()"/>
    </class>
    <class name="TypedXML">
      <field name="xmlarray"/>
      <method name="getSendSize()"/>
      <field name="sendSize"/>
      <method name="_tmpostrecv(java.io.DataInputStream,int)"/>
      <method name="_tmpresend(java.io.DataOutputStream)"/>
      <method name="setSendSize(int)"/>
    </class>
    <class name="TypedXOctet">
      <field name="carray"/>
      <method name="getSendSize()"/>
      <field name="sendSize"/>
      <method name="_tmpostrecv(java.io.DataInputStream,int)"/>
      <method name="_tmpresend(java.io.DataOutputStream)"/>
      <method name="setSendSize(int)"/>
    </class>
    <class name="UserRec">
      <method name="getAppKey()"/>
      <method name="getLocalUserName()"/>
      <method name="getRemoteUserName()"/>
    </class>
    <class name="Usysfl32">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="BQCMD"/>
      <field name="CHGATTS"/>
      <field name="CURSID"/>
      <field name="CURSOC"/>
      <field name="DESTSRVC"/>
      <field name="FORMNAM"/>
      <field name="INITMSK"/>
      <field name="LEVKEY"/>
      <field name="MODS"/>
      <field name="NEWFORM"/>
      <field name="SRVCNM"/>
      <field name="STATLIN"/>
      <field name="UPDTMOD"/>
      <field name="USYS1FLD"/>
      <field name="USYS2FLD"/>
      <field name="USYS3FLD"/>
      <field name="USYS4FLD"/>
      <field name="USYS5FLD"/>
      <field name="USYS6FLD"/>
      <field name="VALONENTRY"/>
    </class>
    <class name="Usysflds">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="BQCMD"/>
      <field name="CHGATTS"/>
      <field name="CURSID"/>
      <field name="CURSOC"/>
      <field name="DESTSRVC"/>
      <field name="FORMNAM"/>
      <field name="INITMSK"/>
      <field name="LEVKEY"/>
      <field name="MODS"/>
      <field name="NEWFORM"/>
      <field name="SRVCNM"/>
      <field name="STATLIN"/>
      <field name="UPDTMOD"/>
      <field name="USYS1FLD"/>
      <field name="USYS2FLD"/>
      <field name="USYS3FLD"/>
      <field name="USYS4FLD"/>
      <field name="USYS5FLD"/>
      <field name="USYS6FLD"/>
      <field name="VALONENTRY"/>
    </class>
    <class name="evt_mib">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="TA_EB_API_CALL"/>
      <field name="TA_EB_COMP_SUB"/>
      <field name="TA_EB_DB_SEQNO"/>
      <field name="TA_EB_LAST_POLLED"/>
      <field name="TA_EB_LAST_SEQNO"/>
      <field name="TA_EB_MID"/>
      <field name="TA_EB_PID"/>
      <field name="TA_EB_POLL_INTERVAL"/>
      <field name="TA_EB_SUBSCRIBER_TYPE"/>
      <field name="TA_EJB_METHOD_NAME"/>
      <field name="TA_EJB_NAME"/>
      <field name="TA_ERROR_STRING"/>
      <field name="TA_EVENT_DESCRIPTION"/>
      <field name="TA_EVENT_LMID"/>
      <field name="TA_EVENT_NAME"/>
      <field name="TA_EVENT_SEVERITY"/>
      <field name="TA_EVENT_TIME"/>
      <field name="TA_EVENT_USEC"/>
    </class>
    <class name="islflds">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="IOR_CLTLMID"/>
      <field name="IOR_HOST"/>
      <field name="IOR_PORT"/>
      <field name="IOR_SSLREQUIRES"/>
      <field name="IOR_SSLSUPPORTS"/>
      <field name="ISH_CLTID"/>
      <field name="ISH_DOMAIN"/>
      <field name="ISH_PID"/>
      <field name="ISH_QADDR"/>
      <field name="ISL_CONNGEN"/>
      <field name="ISL_CONNID"/>
      <field name="ISL_GRPNO"/>
      <field name="ISL_SRVID"/>
    </class>
    <class name="metaflds">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="TA_ECID"/>
      <field name="TA_IMPORTEDBQUAL"/>
      <field name="TA_IMPORTEDFORMATID"/>
      <field name="TA_IMPORTEDGTRID"/>
      <field name="TA_TRANAFFINITYCONTEXT_STR"/>
    </class>
    <class name="mkfldclass">
      <method name="main(java.lang.String[])"/>
      <method name="execute()"/>
      <method name="setFieldTable(java.lang.String)"/>
      <method name="setOutputDirectory(java.lang.String)"/>
      <method name="setPackage(java.lang.String)"/>
    </class>
    <class name="mkfldclass32">
      <method name="generateDynamicCode(java.lang.String,java.lang.String,java.lang.String,java.io.File)"/>
      <method name="main(java.lang.String[])"/>
      <method name="execute()"/>
      <method name="setFieldTable(java.lang.String)"/>
      <method name="setOutputDirectory(java.lang.String)"/>
      <method name="setPackage(java.lang.String)"/>
    </class>
    <class name="secflds">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="AAA_ATZ_TOKEN"/>
      <field name="AAA_AUD_TOKEN"/>
      <field name="AAA_MAJ_VERSION"/>
      <field name="AAA_MIN_VERSION"/>
    </class>
    <class name="tmibflds">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="TA__BBVERSION"/>
      <field name="TA__DATA"/>
      <field name="TA__DIRNAME"/>
      <field name="TA__DIRPERM"/>
      <field name="TA__ENCPASSWD"/>
      <field name="TA__FILENAME"/>
      <field name="TA__LENGTH"/>
      <field name="TA__OFFSET"/>
      <field name="TA__SEC_PRINCIPAL_ENCPASSWORD"/>
      <field name="TA__TOTSIZE"/>
      <field name="TA__TRUNCATE"/>
      <field name="TA__TUXVERSION"/>
    </class>
    <class name="tmqflds">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="TQ_CORRID"/>
      <field name="TQ_DELIVERYQOS"/>
      <field name="TQ_DIAGNOSTIC"/>
      <field name="TQ_EXPTIME"/>
      <field name="TQ_FAILUREQ"/>
      <field name="TQ_FLAGS"/>
      <field name="TQ_MSGID"/>
      <field name="TQ_PRIORITY"/>
      <field name="TQ_QNAME"/>
      <field name="TQ_REPLYQ"/>
      <field name="TQ_REPLYQOS"/>
      <field name="TQ_TIME"/>
    </class>
    <class name="tpadm">
      <method name="name_to_Fldid(java.lang.String)"/>
      <method name="Fldid_to_name(int)"/>
      <method name="getFldNames()"/>
      <field name="TA_ABORT_THRESHOLD"/>
      <field name="TA_ACCWORD"/>
      <field name="TA_ACLACTION"/>
      <field name="TA_ACLCACHEACCESS"/>
      <field name="TA_ACLCACHEHITS"/>
      <field name="TA_ACLFAIL"/>
      <field name="TA_ACLGROUPIDS"/>
      <field name="TA_ACLNAME"/>
      <field name="TA_ACLTYPE"/>
      <field name="TA_ACN2"/>
      <field name="TA_ACTIVE"/>
      <field name="TA_ACTIVESTATE"/>
      <field name="TA_AEQLEN"/>
      <field name="TA_AFFDEPTH"/>
      <field name="TA_AFFGROUPID"/>
      <field name="TA_AFFINITYROLE"/>
      <field name="TA_AFFINITYSCOPE"/>
      <field name="TA_AFFINITYSTRICT"/>
      <field name="TA_AFFMACHINEID"/>
      <field name="TA_AFFQUEUEID"/>
      <field name="TA_AFFRDOMNAME"/>
      <field name="TA_AFFROLE"/>
      <field name="TA_AFFSCOPE"/>
      <field name="TA_AFFSERVERID"/>
      <field name="TA_AFFSTRICT"/>
      <field name="TA_ALLOWSHRINKING"/>
      <field name="TA_APPDIR"/>
      <field name="TA_APPQMSGID"/>
      <field name="TA_APPQNAME"/>
      <field name="TA_APPQORDER"/>
      <field name="TA_APPQSPACENAME"/>
      <field name="TA_APPQSPACERM"/>
      <field name="TA_APTLEN"/>
      <field name="TA_ASYNCTIMEOUT"/>
      <field name="TA_ATIME"/>
      <field name="TA_ATTACHSTATE"/>
      <field name="TA_ATTFLAGS"/>
      <field name="TA_ATTRIBUTE"/>
      <field name="TA_AUD_ENDTIME"/>
      <field name="TA_AUD_EVENTTYPE"/>
      <field name="TA_AUD_MSG"/>
      <field name="TA_AUD_STARTTIME"/>
      <field name="TA_AUD_STATUS"/>
      <field name="TA_AUD_VISITORID"/>
      <field name="TA_AUTHSVC"/>
      <field name="TA_AUTOTRAN"/>
      <field name="TA_AUTOTRAN2"/>
      <field name="TA_AWAITINGCONN"/>
      <field name="TA_BACKWARDS"/>
      <field name="TA_BADFLD"/>
      <field name="TA_BASESRVID"/>
      <field name="TA_BBLQUERY"/>
      <field name="TA_BINDINGID"/>
      <field name="TA_BLOB_SHM_SIZE"/>
      <field name="TA_BLOB_TYPE"/>
      <field name="TA_BLOB_VALUE"/>
      <field name="TA_BLOCKING"/>
      <field name="TA_BLOCKTIME"/>
      <field name="TA_BRIDGE"/>
      <field name="TA_BRTHREADS"/>
      <field name="TA_BUFTYPE"/>
      <field name="TA_BUFTYPECONV"/>
      <field name="TA_BYASSDOMSEQNUM"/>
      <field name="TA_BYPASSDOM_ID"/>
      <field name="TA_BYPASSDOM_SEQ_NUM"/>
      <field name="TA_BYPASSDOM_SHARED_DIR"/>
      <field name="TA_CAPACITYINCR"/>
      <field name="TA_CERTIFICATE_AUTHENTICATION"/>
      <field name="TA_CERTPATH"/>
      <field name="TA_CFGDEVICE"/>
      <field name="TA_CFGOFFSET"/>
      <field name="TA_CLASS"/>
      <field name="TA_CLASSNAME"/>
      <field name="TA_CLASSPATH"/>
      <field name="TA_CLIENTID"/>
      <field name="TA_CLOPT"/>
      <field name="TA_CLOSEINFO"/>
      <field name="TA_CLTLMID"/>
      <field name="TA_CLTNAME"/>
      <field name="TA_CLTPID"/>
      <field name="TA_CLTREPLY"/>
      <field name="TA_CMD"/>
      <field name="TA_CMDHW"/>
      <field name="TA_CMDLW"/>
      <field name="TA_CMDNONPERSIST"/>
      <field name="TA_CMDNONPERSISTHW"/>
      <field name="TA_CMDNONPERSISTLW"/>
      <field name="TA_CMPLIMIT"/>
      <field name="TA_CMTRET"/>
      <field name="TA_COMMAND"/>
      <field name="TA_COMPONENTS"/>
      <field name="TA_CONCURR_STRATEGY"/>
      <field name="TA_CONFIRM"/>
      <field name="TA_CONNAVAILABLE"/>
      <field name="TA_CONNOGRPNO"/>
      <field name="TA_CONNOLMID"/>
      <field name="TA_CONNOPID"/>
      <field name="TA_CONNOREGIDX"/>
      <field name="TA_CONNOSNDCNT"/>
      <field name="TA_CONNOSRVID"/>
      <field name="TA_CONNSGRPNO"/>
      <field name="TA_CONNSLMID"/>
      <field name="TA_CONNSPID"/>
      <field name="TA_CONNSSNDCNT"/>
      <field name="TA_CONNSSRVID"/>
      <field name="TA_CONNUSED"/>
      <field name="TA_CONTEXTID"/>
      <field name="TA_CONTEXT_ID"/>
      <field name="TA_CONTIME"/>
      <field name="TA_CONV"/>
      <field name="TA_CONV2"/>
      <field name="TA_COORDGRPNO"/>
      <field name="TA_COORDLMID"/>
      <field name="TA_COORDSRVGRP"/>
      <field name="TA_CORRID"/>
      <field name="TA_CREATEONSTARTUP"/>
      <field name="TA_CTIME"/>
      <field name="TA_CURACCESSERS"/>
      <field name="TA_CURACTEV"/>
      <field name="TA_CURACTIONS"/>
      <field name="TA_CURACTRQ"/>
      <field name="TA_CURARTCLIENTS"/>
      <field name="TA_CURBLOCKS"/>
      <field name="TA_CURCLIENTS"/>
      <field name="TA_CURCONV"/>
      <field name="TA_CURCURSORS"/>
      <field name="TA_CURDISPATCHTHREADS"/>
      <field name="TA_CURDRT"/>
      <field name="TA_CURENCRYPTBITS"/>
      <field name="TA_CUREXTENT"/>
      <field name="TA_CURGROUPS"/>
      <field name="TA_CURGTT"/>
      <field name="TA_CURHANDLERS"/>
      <field name="TA_CURHANDLES"/>
      <field name="TA_CURICECLIENTS"/>
      <field name="TA_CURINTERFACE"/>
      <field name="TA_CURINTERFACES"/>
      <field name="TA_CURJOLTCLIENTS"/>
      <field name="TA_CURLMID"/>
      <field name="TA_CURMACHINES"/>
      <field name="TA_CURMEMFILTERS"/>
      <field name="TA_CURMEMNONPERSIST"/>
      <field name="TA_CURMEMOVERFLOW"/>
      <field name="TA_CURMSG"/>
      <field name="TA_CURNONPERSISTBYTES"/>
      <field name="TA_CURNONPERSISTMSG"/>
      <field name="TA_CUROBJECTS"/>
      <field name="TA_CUROWNERS"/>
      <field name="TA_CURPROC"/>
      <field name="TA_CURQUEUES"/>
      <field name="TA_CURREQ"/>
      <field name="TA_CURRETRIES"/>
      <field name="TA_CURRFT"/>
      <field name="TA_CURRLOAD"/>
      <field name="TA_CURRSERVICE"/>
      <field name="TA_CURRTDATA"/>
      <field name="TA_CURSALTCLIENTS"/>
      <field name="TA_CURSERVERS"/>
      <field name="TA_CURSERVICES"/>
      <field name="TA_CURSESSIONS"/>
      <field name="TA_CURSOR"/>
      <field name="TA_CURSORHOLD"/>
      <field name="TA_CURSTYPE"/>
      <field name="TA_CURSUSPNEV"/>
      <field name="TA_CURSUSPTEV"/>
      <field name="TA_CURTIME"/>
      <field name="TA_CURTMPQUEUES"/>
      <field name="TA_CURTRANS"/>
      <field name="TA_CURTRANSACTIONS"/>
      <field name="TA_CURTYPE"/>
      <field name="TA_CURWORK"/>
      <field name="TA_CURWSCLIENTS"/>
      <field name="TA_DBBLFAILOVER"/>
      <field name="TA_DBBLWAIT"/>
      <field name="TA_DBHOST"/>
      <field name="TA_DBNAME"/>
      <field name="TA_DBNETPROTOCOL"/>
      <field name="TA_DBPASSWORD"/>
      <field name="TA_DBPORT"/>
      <field name="TA_DBUSER"/>
      <field name="TA_DEBUG"/>
      <field name="TA_DEFAULT"/>
      <field name="TA_DEFDELIVERYPOLICY"/>
      <field name="TA_DEFEXPIRATIONTIME"/>
      <field name="TA_DEVICE"/>
      <field name="TA_DEVINDEX"/>
      <field name="TA_DEVOFFSET"/>
      <field name="TA_DEVSIZE"/>
      <field name="TA_DISABLEWSA"/>
      <field name="TA_DMACCESSPOINT"/>
      <field name="TA_DMACCESSPOINTID"/>
      <field name="TA_DMACLNAME"/>
      <field name="TA_DMACLPOLICY"/>
      <field name="TA_DMACN"/>
      <field name="TA_DMAEID"/>
      <field name="TA_DMAEQ"/>
      <field name="TA_DMAET"/>
      <field name="TA_DMAPI"/>
      <field name="TA_DMAPID"/>
      <field name="TA_DMAPT"/>
      <field name="TA_DMAUDIT"/>
      <field name="TA_DMAUDITLOG"/>
      <field name="TA_DMAUTOPREPARE"/>
      <field name="TA_DMAUTOTRAN"/>
      <field name="TA_DMBLOB_SHM_SIZE"/>
      <field name="TA_DMBLOCKTIME"/>
      <field name="TA_DMBRANCHCOUNT"/>
      <field name="TA_DMBRANCHINDEX"/>
      <field name="TA_DMBRANCHNO"/>
      <field name="TA_DMBRANCHSTATE"/>
      <field name="TA_DMBUFSTYPE"/>
      <field name="TA_DMBUFTYPE"/>
      <field name="TA_DMCMPLIMIT"/>
      <field name="TA_DMCODEPAGE"/>
      <field name="TA_DMCONNECTION_POLICY"/>
      <field name="TA_DMCONNPRINCIPALNAME"/>
      <field name="TA_DMCONV"/>
      <field name="TA_DMCOUPLING"/>
      <field name="TA_DMCREDENTIALPOLICY"/>
      <field name="TA_DMCURENCRYPTBITS"/>
      <field name="TA_DMDIRECTION"/>
      <field name="TA_DMDNSRESOLUTION"/>
      <field name="TA_DMDYNAMIC_RAP"/>
      <field name="TA_DMENDTIME"/>
      <field name="TA_DMEVNUMACT"/>
      <field name="TA_DMEVNUMSUSPN"/>
      <field name="TA_DMEVNUMSUSPT"/>
      <field name="TA_DMEVTEXPR"/>
      <field name="TA_DMEVTFILTER"/>
      <field name="TA_DMEVTNAME"/>
      <field name="TA_DMEVTTRAN"/>
      <field name="TA_DMEXTENSIONS"/>
      <field name="TA_DMFAILOVERSEQ"/>
      <field name="TA_DMFIELD"/>
      <field name="TA_DMFIELDTYPE"/>
      <field name="TA_DMFUNCTION"/>
      <field name="TA_DMGWNUM"/>
      <field name="TA_DMINBUFTYPE"/>
      <field name="TA_DMINPRIORITY"/>
      <field name="TA_DMINRECSTYPE"/>
      <field name="TA_DMINRECTYPE"/>
      <field name="TA_DMKEEPALIVE"/>
      <field name="TA_DMKEEPALIVEWAIT"/>
      <field name="TA_DMLACCESSPOINT"/>
      <field name="TA_DMLCONV"/>
      <field name="TA_DMLCONVNUMACT"/>
      <field name="TA_DMLCONVNUMRCV"/>
      <field name="TA_DMLCONVNUMSND"/>
      <field name="TA_DMLCONVTOT"/>
      <field name="TA_DMLCONVTOTFAIL"/>
      <field name="TA_DMLCONVTOTRCV"/>
      <field name="TA_DMLCONVTOTSND"/>
      <field name="TA_DMLOAD"/>
      <field name="TA_DMLOCALPRINCIPALNAME"/>
      <field name="TA_DMLOGCONTENTIONS"/>
      <field name="TA_DMLPWD"/>
      <field name="TA_DMLSVCNUMACT"/>
      <field name="TA_DMLSVCTOT"/>
      <field name="TA_DMLSVCTOTFAIL"/>
      <field name="TA_DMLSVCTOTRPLY"/>
      <field name="TA_DMLSYSID"/>
      <field name="TA_DMLUNAME"/>
      <field name="TA_DMMAC"/>
      <field name="TA_DMMACHINETYPE"/>
      <field name="TA_DMMACLEVEL"/>
      <field name="TA_DMMAXENCRYPTBITS"/>
      <field name="TA_DMMAXLISTENINGEP"/>
      <field name="TA_DMMAXRAPTRAN"/>
      <field name="TA_DMMAXRDOM"/>
      <field name="TA_DMMAXRDTRAN"/>
      <field name="TA_DMMAXRETRY"/>
      <field name="TA_DMMAXSNASESS"/>
      <field name="TA_DMMAXSYNCLVL"/>
      <field name="TA_DMMAXTRAN"/>
      <field name="TA_DMMINENCRYPTBITS"/>
      <field name="TA_DMMINWIN"/>
      <field name="TA_DMMODENAME"/>
      <field name="TA_DMMULTIPLEXING"/>
      <field name="TA_DMNETID"/>
      <field name="TA_DMNETTRANID"/>
      <field name="TA_DMNUMCONVACT"/>
      <field name="TA_DMNUMCONVLOC"/>
      <field name="TA_DMNUMCONVLSND"/>
      <field name="TA_DMNUMCONVREM"/>
      <field name="TA_DMNUMCONVRSND"/>
      <field name="TA_DMNUMREPLSVC"/>
      <field name="TA_DMNUMREPRSVC"/>
      <field name="TA_DMNUMREQCOMP"/>
      <field name="TA_DMNUMREQFAIL"/>
      <field name="TA_DMNUMREQLSVC"/>
      <field name="TA_DMNUMREQRSVC"/>
      <field name="TA_DMNUMTXBEGUN"/>
      <field name="TA_DMNUMTXCOMMIT"/>
      <field name="TA_DMNUMTXHCOMMIT"/>
      <field name="TA_DMNUMTXHRLBCK"/>
      <field name="TA_DMNUMTXRLBCK"/>
      <field name="TA_DMNWADDR"/>
      <field name="TA_DMNWDEVICE"/>
      <field name="TA_DMNWIDLETIME"/>
      <field name="TA_DMNW_PROTOCOL"/>
      <field name="TA_DMOBUFSTYPE"/>
      <field name="TA_DMOBUFTYPE"/>
      <field name="TA_DMOPTIONS"/>
      <field name="TA_DMOSITP"/>
      <field name="TA_DMOUTBUFTYPE"/>
      <field name="TA_DMOUTRECSTYPE"/>
      <field name="TA_DMOUTRECTYPE"/>
      <field name="TA_DMPRINNAME"/>
      <field name="TA_DMPRIO"/>
      <field name="TA_DMPRIORITY_TYPE"/>
      <field name="TA_DMPROFILE"/>
      <field name="TA_DMPSEL"/>
      <field name="TA_DMRACCESSPOINT"/>
      <field name="TA_DMRACCESSPOINTLIST"/>
      <field name="TA_DMRANGES"/>
      <field name="TA_DMRCONVNUMACT"/>
      <field name="TA_DMRCONVNUMRCV"/>
      <field name="TA_DMRCONVNUMSND"/>
      <field name="TA_DMRCONVTOT"/>
      <field name="TA_DMRCONVTOTFAIL"/>
      <field name="TA_DMRCONVTOTRCV"/>
      <field name="TA_DMRCONVTOTSND"/>
      <field name="TA_DMRDOMLIST"/>
      <field name="TA_DMRDOMNUM"/>
      <field name="TA_DMRDOMSEC"/>
      <field name="TA_DMRDOMUSR"/>
      <field name="TA_DMREMOTENAME"/>
      <field name="TA_DMREMTPSUT"/>
      <field name="TA_DMRESOURCENAME"/>
      <field name="TA_DMRESOURCETYPE"/>
      <field name="TA_DMRETRY_INTERVAL"/>
      <field name="TA_DMREVTNAME"/>
      <field name="TA_DMROUTINGNAME"/>
      <field name="TA_DMRPRINNAME"/>
      <field name="TA_DMRPRINPASSWD"/>
      <field name="TA_DMRPWD"/>
      <field name="TA_DMRSVCNUMACT"/>
      <field name="TA_DMRSVCTOT"/>
      <field name="TA_DMRSVCTOTFAIL"/>
      <field name="TA_DMRSVCTOTRPLY"/>
      <field name="TA_DMRSYSID"/>
      <field name="TA_DMSECTYPE"/>
      <field name="TA_DMSECURITY"/>
      <field name="TA_DMSERVICENAME"/>
      <field name="TA_DMSHMCONTENTIONS"/>
      <field name="TA_DMSNACRM"/>
      <field name="TA_DMSNADOM"/>
      <field name="TA_DMSNALINK"/>
      <field name="TA_DMSNASTACK"/>
      <field name="TA_DMSRVGROUP"/>
      <field name="TA_DMSSEL"/>
      <field name="TA_DMSSL_RENEGOTIATION"/>
      <field name="TA_DMSTACKPARMS"/>
      <field name="TA_DMSTACKTYPE"/>
      <field name="TA_DMSTARTTIME"/>
      <field name="TA_DMSTARTTYPE"/>
      <field name="TA_DMSTATISTICS"/>
      <field name="TA_DMSTATRESETIME"/>
      <field name="TA_DMSTATRESETTIME"/>
      <field name="TA_DMSYMDESTNAME"/>
      <field name="TA_DMTAILORPATH"/>
      <field name="TA_DMTCPKEEPALIVE"/>
      <field name="TA_DMTDOM"/>
      <field name="TA_DMTE_FUNCTION"/>
      <field name="TA_DMTE_PRODUCT"/>
      <field name="TA_DMTE_PWD"/>
      <field name="TA_DMTE_QUALIFIER"/>
      <field name="TA_DMTE_RTQGROUP"/>
      <field name="TA_DMTE_RTQNAME"/>
      <field name="TA_DMTE_TARGET"/>
      <field name="TA_DMTE_TP_SYSTEM"/>
      <field name="TA_DMTHROUGHGATEWAY"/>
      <field name="TA_DMTLOGDEV"/>
      <field name="TA_DMTLOGNAME"/>
      <field name="TA_DMTLOGSIZE"/>
      <field name="TA_DMTPNAME"/>
      <field name="TA_DMTPSUTTYPE"/>
      <field name="TA_DMTPTRANID"/>
      <field name="TA_DMTRANTIME"/>
      <field name="TA_DMTSEL"/>
      <field name="TA_DMTUXCONFIG"/>
      <field name="TA_DMTUXOFFSET"/>
      <field name="TA_DMTXACCESSPOINT"/>
      <field name="TA_DMTXID"/>
      <field name="TA_DMTXNETTRANID"/>
      <field name="TA_DMTXNUMACT"/>
      <field name="TA_DMTXPARENT"/>
      <field name="TA_DMTXTOTCOMMIT"/>
      <field name="TA_DMTXTOTHCOMMIT"/>
      <field name="TA_DMTXTOTHRLBCK"/>
      <field name="TA_DMTXTOTRLBCK"/>
      <field name="TA_DMTYPE"/>
      <field name="TA_DMURCH"/>
      <field name="TA_DMVERSION"/>
      <field name="TA_DMXATMIENCODING"/>
      <field name="TA_DOMAINAME"/>
      <field name="TA_DOMAINID"/>
      <field name="TA_DRB"/>
      <field name="TA_DRB_SYNC_INTERVAL"/>
      <field name="TA_DRIVER"/>
      <field name="TA_DSNAME"/>
      <field name="TA_DUMMYACTIVITY"/>
      <field name="TA_DUMMYALLSTATS"/>
      <field name="TA_DUMMYDOMSTATS"/>
      <field name="TA_DUMMYOPTION"/>
      <field name="TA_DUMMYSRVGRP"/>
      <field name="TA_DUMMYSRVID"/>
      <field name="TA_DUMMYSTATE"/>
      <field name="TA_DUMMYTOGGLE"/>
      <field name="TA_DYNLOAD_USEC"/>
      <field name="TA_DYNWKQUEUED_USEC"/>
      <field name="TA_ECID"/>
      <field name="TA_EJBCACHE_FLUSH"/>
      <field name="TA_ENABLEMULTIENC"/>
      <field name="TA_ENABLESOAPVAL"/>
      <field name="TA_ENABLEXA"/>
      <field name="TA_ENC2_LPWD"/>
      <field name="TA_ENC2_RPWD"/>
      <field name="TA_ENCPASSWD"/>
      <field name="TA_ENCRYPTION_REQUIRED"/>
      <field name="TA_ENCRYPTSTRING"/>
      <field name="TA_ENDPOINTIDLIST"/>
      <field name="TA_ENDPOINTS"/>
      <field name="TA_ENDTIME"/>
      <field name="TA_ENVFILE"/>
      <field name="TA_ERRMSGHANDLER"/>
      <field name="TA_ERRMSGNAME"/>
      <field name="TA_ERROR"/>
      <field name="TA_ERRORQNAME"/>
      <field name="TA_ERRWSAACTION"/>
      <field name="TA_EVENT_EXPR"/>
      <field name="TA_EVENT_FILTER"/>
      <field name="TA_EVENT_FILTER_BINARY"/>
      <field name="TA_EVENT_GWEVT"/>
      <field name="TA_EVENT_LINK_NOTIFICATION"/>
      <field name="TA_EVENT_PERSIST"/>
      <field name="TA_EVENT_SERVER"/>
      <field name="TA_EVENT_SET_BLOB"/>
      <field name="TA_EVENT_SET_HANDLE"/>
      <field name="TA_EVENT_TRAN"/>
      <field name="TA_EVENT_UNIQUE"/>
      <field name="TA_EXALOGIC_MSGQ_CACHE_SIZE"/>
      <field name="TA_EXALOGIC_SHARED_PATH"/>
      <field name="TA_EXPIRETIME"/>
      <field name="TA_EXTSVC_MAGIC"/>
      <field name="TA_EXTSVC_PRGRPID"/>
      <field name="TA_EXTSVC_PRMID"/>
      <field name="TA_EXTSVC_PRSRVID"/>
      <field name="TA_EXTSVC_QNAME"/>
      <field name="TA_EXTSVC_RDOM"/>
      <field name="TA_EXTSVC_RTNAME"/>
      <field name="TA_EXT_NADDR"/>
      <field name="TA_FACTORYID"/>
      <field name="TA_FACTPERM"/>
      <field name="TA_FADDR"/>
      <field name="TA_FBROUTINGNAME"/>
      <field name="TA_FIELD"/>
      <field name="TA_FIELDTYPE"/>
      <field name="TA_FILTER"/>
      <field name="TA_FIRSTTMPQ"/>
      <field name="TA_FLAGS"/>
      <field name="TA_FLOWCNT"/>
      <field name="TA_FORCEINIT"/>
      <field name="TA_FRANGE"/>
      <field name="TA_FREEMAPAVAIL"/>
      <field name="TA_FREEMAPCOUNT"/>
      <field name="TA_FREEMAPINDEX"/>
      <field name="TA_FREEMAPOFFSET"/>
      <field name="TA_FREEMAPSIZE"/>
      <field name="TA_GENERATION"/>
      <field name="TA_GETSTATES"/>
      <field name="TA_GID"/>
      <field name="TA_GRACE"/>
      <field name="TA_GROUPID"/>
      <field name="TA_GROUPNAME"/>
      <field name="TA_GRPCOUNT"/>
      <field name="TA_GRPINDEX"/>
      <field name="TA_GRPNO"/>
      <field name="TA_GSTATE"/>
      <field name="TA_GTRID"/>
      <field name="TA_HIGHPRIORITY"/>
      <field name="TA_HITICKET"/>
      <field name="TA_HTTPCONTENTTYPE"/>
      <field name="TA_HTTPDELETEINBUF"/>
      <field name="TA_HTTPDELETESERVICE"/>
      <field name="TA_HTTPDELETETUXREF"/>
      <field name="TA_HTTPDIRECTION"/>
      <field name="TA_HTTPGETINBUF"/>
      <field name="TA_HTTPGETSERVICE"/>
      <field name="TA_HTTPGETTUXREF"/>
      <field name="TA_HTTPINBOUNDDONE"/>
      <field name="TA_HTTPINBOUNDFAIL"/>
      <field name="TA_HTTPINBOUNDTIME"/>
      <field name="TA_HTTPMETHOD"/>
      <field name="TA_HTTPOUTADDRESS"/>
      <field name="TA_HTTPOUTBOUNDDONE"/>
      <field name="TA_HTTPOUTBOUNDFAIL"/>
      <field name="TA_HTTPOUTBOUNDTIME"/>
      <field name="TA_HTTPOUTBUF"/>
      <field name="TA_HTTPPOSTINBUF"/>
      <field name="TA_HTTPPOSTSERVICE"/>
      <field name="TA_HTTPPOSTTUXREF"/>
      <field name="TA_HTTPPUTINBUF"/>
      <field name="TA_HTTPPUTSERVICE"/>
      <field name="TA_HTTPPUTTUXREF"/>
      <field name="TA_HTTPSVCNAME"/>
      <field name="TA_HTTP_DONE"/>
      <field name="TA_HTTP_FAIL"/>
      <field name="TA_HTTP_HEADER_NAME"/>
      <field name="TA_HTTP_HEADER_VALUE"/>
      <field name="TA_HTTP_TIME"/>
      <field name="TA_HWACCESSERS"/>
      <field name="TA_HWACLCACHE"/>
      <field name="TA_HWACTIONS"/>
      <field name="TA_HWARTCLIENTS"/>
      <field name="TA_HWCLIENTS"/>
      <field name="TA_HWCONV"/>
      <field name="TA_HWCURSORS"/>
      <field name="TA_HWDISPATCHTHREADS"/>
      <field name="TA_HWDRT"/>
      <field name="TA_HWGROUPS"/>
      <field name="TA_HWGTT"/>
      <field name="TA_HWHANDLERS"/>
      <field name="TA_HWHANDLES"/>
      <field name="TA_HWICECLIENTS"/>
      <field name="TA_HWINTERFACES"/>
      <field name="TA_HWJOLTCLIENTS"/>
      <field name="TA_HWMACHINES"/>
      <field name="TA_HWMCONNCREATED"/>
      <field name="TA_HWMCONNUSED"/>
      <field name="TA_HWMEMFILTERS"/>
      <field name="TA_HWMEMNONPERSIST"/>
      <field name="TA_HWMEMOVERFLOW"/>
      <field name="TA_HWMFORWAIT"/>
      <field name="TA_HWMSG"/>
      <field name="TA_HWOBJECTS"/>
      <field name="TA_HWOWNERS"/>
      <field name="TA_HWPROC"/>
      <field name="TA_HWQUEUES"/>
      <field name="TA_HWRFT"/>
      <field name="TA_HWRTDATA"/>
      <field name="TA_HWSALTCLIENTS"/>
      <field name="TA_HWSERVERS"/>
      <field name="TA_HWSERVICES"/>
      <field name="TA_HWTMPQUEUES"/>
      <field name="TA_HWTRANS"/>
      <field name="TA_HWWSCLIENTS"/>
      <field name="TA_IDENTITY_PROPAGATION"/>
      <field name="TA_IDLETIME"/>
      <field name="TA_IMPORTEDBQUAL"/>
      <field name="TA_IMPORTEDFORMATID"/>
      <field name="TA_IMPORTEDGTRID"/>
      <field name="TA_INASTATES"/>
      <field name="TA_INITCAPACITY"/>
      <field name="TA_INPUTMSGHANDLER"/>
      <field name="TA_INPUTMSGNAME"/>
      <field name="TA_INPUTWSAACTION"/>
      <field name="TA_INSTANCEID"/>
      <field name="TA_INSTSTR"/>
      <field name="TA_INTERFACENAME"/>
      <field name="TA_INTERN_APPKEY"/>
      <field name="TA_INTERN_CURSOR"/>
      <field name="TA_INTERN_DBBL"/>
      <field name="TA_INTERN_ERROR"/>
      <field name="TA_INTERN_FLDNAME"/>
      <field name="TA_INTERN_FLDTYPE"/>
      <field name="TA_INTERN_FLDVALUE"/>
      <field name="TA_INTERN_TACTGRPNO"/>
      <field name="TA_INTERN_TACTSRVGRP"/>
      <field name="TA_INTERN_TACTSRVID"/>
      <field name="TA_IPCKEY"/>
      <field name="TA_IPCRPLYTORPQID"/>
      <field name="TA_ITERATION"/>
      <field name="TA_JAVAHEAPSIZE"/>
      <field name="TA_JAVAHEAPUSE"/>
      <field name="TA_JAVAVENDOR"/>
      <field name="TA_JAVAVERSION"/>
      <field name="TA_JCONNTYPE"/>
      <field name="TA_KEEPALIVE"/>
      <field name="TA_KEY_ID"/>
      <field name="TA_LASTCPUTIMESEC"/>
      <field name="TA_LASTCPUTIMEUSEC"/>
      <field name="TA_LASTEXECTIMESEC"/>
      <field name="TA_LASTEXECTIMEUSEC"/>
      <field name="TA_LASTGRP"/>
      <field name="TA_LASTMSGBSIZE"/>
      <field name="TA_LASTSYSCPUTIMESEC"/>
      <field name="TA_LASTSYSCPUTIMEUSEC"/>
      <field name="TA_LASTUSRCPUTIMESEC"/>
      <field name="TA_LASTUSRCPUTIMEUSEC"/>
      <field name="TA_LDBAL"/>
      <field name="TA_LDOMAIN"/>
      <field name="TA_LICEXPIRE"/>
      <field name="TA_LICMAXUSERS"/>
      <field name="TA_LICSERIAL"/>
      <field name="TA_LINK_FILLER1"/>
      <field name="TA_LINK_FILLER2"/>
      <field name="TA_LINK_GROUP_NUMBER"/>
      <field name="TA_LINK_OS_TYPE"/>
      <field name="TA_LLR_ADDR"/>
      <field name="TA_LLR_DELDELAY"/>
      <field name="TA_LLR_DELSWAPSIZE"/>
      <field name="TA_LLR_GROUPID"/>
      <field name="TA_LLR_MCHID"/>
      <field name="TA_LLR_REPLYITER"/>
      <field name="TA_LLR_REPLYTYPE"/>
      <field name="TA_LLR_SRVID"/>
      <field name="TA_LLR_TLOGDATA"/>
      <field name="TA_LLR_TLOGOWNER"/>
      <field name="TA_LMID"/>
      <field name="TA_LMS_TYPE"/>
      <field name="TA_LOAD"/>
      <field name="TA_LOGCOORDMSEQNUM"/>
      <field name="TA_LOGINDELAY"/>
      <field name="TA_LOG_CONTENTIONS"/>
      <field name="TA_LOOPBACK"/>
      <field name="TA_LOWPRIORITY"/>
      <field name="TA_LSTATE"/>
      <field name="TA_MASTER"/>
      <field name="TA_MAX"/>
      <field name="TA_MAXACCESSERS"/>
      <field name="TA_MAXACLCACHE"/>
      <field name="TA_MAXACLGROUPS"/>
      <field name="TA_MAXACTIONS"/>
      <field name="TA_MAXBACKLOG"/>
      <field name="TA_MAXBUFSTYPE"/>
      <field name="TA_MAXBUFTYPE"/>
      <field name="TA_MAXCAPACITY"/>
      <field name="TA_MAXCONTENTLEN"/>
      <field name="TA_MAXCONV"/>
      <field name="TA_MAXCPUTIMESEC"/>
      <field name="TA_MAXCPUTIMEUSEC"/>
      <field name="TA_MAXCURSORS"/>
      <field name="TA_MAXDATALEN"/>
      <field name="TA_MAXDISPATCHTHREADS"/>
      <field name="TA_MAXDOMAINS"/>
      <field name="TA_MAXDRT"/>
      <field name="TA_MAXEJBCACHE"/>
      <field name="TA_MAXENCRYPTBITS"/>
      <field name="TA_MAXEXECTIMESEC"/>
      <field name="TA_MAXEXECTIMEUSEC"/>
      <field name="TA_MAXGEN"/>
      <field name="TA_MAXGROUPS"/>
      <field name="TA_MAXGTT"/>
      <field name="TA_MAXHANDLERS"/>
      <field name="TA_MAXHANDLES"/>
      <field name="TA_MAXIDLETIME"/>
      <field name="TA_MAXINITTIME"/>
      <field name="TA_MAXINTERFACES"/>
      <field name="TA_MAXMACHINES"/>
      <field name="TA_MAXMSG"/>
      <field name="TA_MAXMSGBSIZE"/>
      <field name="TA_MAXMSGWAITTIMESEC"/>
      <field name="TA_MAXMSGWAITTIMEUSEC"/>
      <field name="TA_MAXMTYPE"/>
      <field name="TA_MAXNETGROUPS"/>
      <field name="TA_MAXOBJECTS"/>
      <field name="TA_MAXOWNERS"/>
      <field name="TA_MAXPAGES"/>
      <field name="TA_MAXPENDINGBYTES"/>
      <field name="TA_MAXPERM"/>
      <field name="TA_MAXPROC"/>
      <field name="TA_MAXQUEUELEN"/>
      <field name="TA_MAXQUEUES"/>
      <field name="TA_MAXRETRIES"/>
      <field name="TA_MAXRFT"/>
      <field name="TA_MAXRTDATA"/>
      <field name="TA_MAXSENDLEN"/>
      <field name="TA_MAXSERVERS"/>
      <field name="TA_MAXSERVICES"/>
      <field name="TA_MAXSESSIONS"/>
      <field name="TA_MAXSNOOZETIME"/>
      <field name="TA_MAXSPDATA"/>
      <field name="TA_MAXSYSCPUTIMESEC"/>
      <field name="TA_MAXSYSCPUTIMEUSEC"/>
      <field name="TA_MAXTMPQUEUES"/>
      <field name="TA_MAXTRAN"/>
      <field name="TA_MAXTRANS"/>
      <field name="TA_MAXTRANTIME"/>
      <field name="TA_MAXUSRCPUTIMESEC"/>
      <field name="TA_MAXUSRCPUTIMEUSEC"/>
      <field name="TA_MAXWSCLIENTS"/>
      <field name="TA_MAXWSHPORT"/>
      <field name="TA_MEMFILTERS"/>
      <field name="TA_MEMNONPERSIST"/>
      <field name="TA_MEMOVERFLOW"/>
      <field name="TA_MEMSYSTEMRESERVED"/>
      <field name="TA_MEMTOTALALLOCATED"/>
      <field name="TA_METAMSG_FLAG"/>
      <field name="TA_MIBMASK"/>
      <field name="TA_MIBTIMEOUT"/>
      <field name="TA_MIN"/>
      <field name="TA_MINCPUTIMESEC"/>
      <field name="TA_MINCPUTIMEUSEC"/>
      <field name="TA_MINDISPATCHTHREADS"/>
      <field name="TA_MINENCRYPTBITS"/>
      <field name="TA_MINEXECTIMESEC"/>
      <field name="TA_MINEXECTIMEUSEC"/>
      <field name="TA_MINHANDLERS"/>
      <field name="TA_MINMSGBSIZE"/>
      <field name="TA_MINMSGWAITTIMESEC"/>
      <field name="TA_MINMSGWAITTIMEUSEC"/>
      <field name="TA_MINOR"/>
      <field name="TA_MINSYSCPUTIMESEC"/>
      <field name="TA_MINSYSCPUTIMEUSEC"/>
      <field name="TA_MINUSRCPUTIMESEC"/>
      <field name="TA_MINUSRCPUTIMEUSEC"/>
      <field name="TA_MINWSHPORT"/>
      <field name="TA_MMDDYY"/>
      <field name="TA_MODEL"/>
      <field name="TA_MODULE"/>
      <field name="TA_MODULEARGS"/>
      <field name="TA_MODULECLASSPATH"/>
      <field name="TA_MODULEFILE"/>
      <field name="TA_MODULETYPE"/>
      <field name="TA_MONACCBYTES"/>
      <field name="TA_MONACCNUM"/>
      <field name="TA_MONACCNUMCLTS"/>
      <field name="TA_MONBYTESPEND"/>
      <field name="TA_MONCALLFLAG"/>
      <field name="TA_MONCALLMODE"/>
      <field name="TA_MONCLTADDR"/>
      <field name="TA_MONCORRID"/>
      <field name="TA_MONDEPTH"/>
      <field name="TA_MONELAPSETIME"/>
      <field name="TA_MONERRNO"/>
      <field name="TA_MONEVENTNAME"/>
      <field name="TA_MONEVTCLASS"/>
      <field name="TA_MONEVTCMDNUM"/>
      <field name="TA_MONEVTNONTXNUM"/>
      <field name="TA_MONEVTQUENUM"/>
      <field name="TA_MONEVTSVCNUM"/>
      <field name="TA_MONEVTTXNUM"/>
      <field name="TA_MONEVTULOGNUM"/>
      <field name="TA_MONEVTUNSOLNUM"/>
      <field name="TA_MONEXECTIME"/>
      <field name="TA_MONFIELDSMAP1"/>
      <field name="TA_MONFIELDSMAP2"/>
      <field name="TA_MONFIELDSMAP3"/>
      <field name="TA_MONFIELDSMAP4"/>
      <field name="TA_MONFLAGS"/>
      <field name="TA_MONGWWSID"/>
      <field name="TA_MONHOSTID"/>
      <field name="TA_MONHOSTSVC"/>
      <field name="TA_MONINBOUNDBYT"/>
      <field name="TA_MONINBOUNDNUM"/>
      <field name="TA_MONINBOUNDPEND"/>
      <field name="TA_MONINOWFAIL"/>
      <field name="TA_MONINOWSUCC"/>
      <field name="TA_MONINREQNUM"/>
      <field name="TA_MONINRPCFAIL"/>
      <field name="TA_MONINRPCSUCC"/>
      <field name="TA_MONINTALTIME"/>
      <field name="TA_MONINTIME"/>
      <field name="TA_MONLASTTIMESEC"/>
      <field name="TA_MONLASTTIMEUSEC"/>
      <field name="TA_MONLDOM"/>
      <field name="TA_MONLGTRID"/>
      <field name="TA_MONLINKADDR"/>
      <field name="TA_MONLINKNUM"/>
      <field name="TA_MONLINKSTATUS"/>
      <field name="TA_MONLOCATION"/>
      <field name="TA_MONLOGTIMESEC"/>
      <field name="TA_MONLOGTIMEUSEC"/>
      <field name="TA_MONMSGID"/>
      <field name="TA_MONMSGQUEUED"/>
      <field name="TA_MONMSGSIZE"/>
      <field name="TA_MONMSGTYPE"/>
      <field name="TA_MONMSGWAITTIME"/>
      <field name="TA_MONNOLOG"/>
      <field name="TA_MONNUMCLTS"/>
      <field name="TA_MONNUMNETCLTS"/>
      <field name="TA_MONNUMPEND"/>
      <field name="TA_MONNUMWAITRPLY"/>
      <field name="TA_MONOPERATION"/>
      <field name="TA_MONOUTALTIME"/>
      <field name="TA_MONOUTBOUNDBYT"/>
      <field name="TA_MONOUTBOUNDNUM"/>
      <field name="TA_MONOUTBOUNDPEND"/>
      <field name="TA_MONOUTOWFAIL"/>
      <field name="TA_MONOUTOWSUCC"/>
      <field name="TA_MONOUTREQNUM"/>
      <field name="TA_MONOUTRPCFAIL"/>
      <field name="TA_MONOUTRPCSUCC"/>
      <field name="TA_MONOUTTIME"/>
      <field name="TA_MONOWNER"/>
      <field name="TA_MONPROCTYPE"/>
      <field name="TA_MONPSVCSEQ"/>
      <field name="TA_MONQID"/>
      <field name="TA_MONRDOM"/>
      <field name="TA_MONRGTRID"/>
      <field name="TA_MONRMID"/>
      <field name="TA_MONSEVERITY"/>
      <field name="TA_MONSTAGE"/>
      <field name="TA_MONSTARTTIMESEC"/>
      <field name="TA_MONSTARTTIMEUSEC"/>
      <field name="TA_MONSTATUS"/>
      <field name="TA_MONSVCNAME"/>
      <field name="TA_MONSVCSEQ"/>
      <field name="TA_MONTHRNUM"/>
      <field name="TA_MONTOTALTIME"/>
      <field name="TA_MONTYPE"/>
      <field name="TA_MONURCODE"/>
      <field name="TA_MONVERSION"/>
      <field name="TA_MONWSENDPOINT"/>
      <field name="TA_MONXACODE"/>
      <field name="TA_MONXANAME"/>
      <field name="TA_MORE"/>
      <field name="TA_MRM"/>
      <field name="TA_MRSJRNDLJ"/>
      <field name="TA_MRSJRNDQF"/>
      <field name="TA_MRSJRNPCJ"/>
      <field name="TA_MRSJRNSAF"/>
      <field name="TA_MSGENDTIME"/>
      <field name="TA_MSGEXPIREENDTIME"/>
      <field name="TA_MSGEXPIRESTARTTIME"/>
      <field name="TA_MSGID"/>
      <field name="TA_MSGRCV"/>
      <field name="TA_MSGSENT"/>
      <field name="TA_MSGSIZE"/>
      <field name="TA_MSGSTARTTIME"/>
      <field name="TA_MSGTAG"/>
      <field name="TA_MSG_CBYTES"/>
      <field name="TA_MSG_CTIME"/>
      <field name="TA_MSG_LRPID"/>
      <field name="TA_MSG_LSPID"/>
      <field name="TA_MSG_QBYTES"/>
      <field name="TA_MSG_QNUM"/>
      <field name="TA_MSG_RTIME"/>
      <field name="TA_MSG_SHMQNUM"/>
      <field name="TA_MSG_STIME"/>
      <field name="TA_MULTIPLEX"/>
      <field name="TA_NADDR"/>
      <field name="TA_NAMESPACE"/>
      <field name="TA_NCOMPLETED"/>
      <field name="TA_NETGROUP"/>
      <field name="TA_NETGRPNO"/>
      <field name="TA_NETPRIO"/>
      <field name="TA_NETTIMEOUT"/>
      <field name="TA_NEWAPPQNAME"/>
      <field name="TA_NLSADDR"/>
      <field name="TA_NOTIFY"/>
      <field name="TA_NQUEUED"/>
      <field name="TA_NRDOM"/>
      <field name="TA_NUMBLOCKQ"/>
      <field name="TA_NUMCONV"/>
      <field name="TA_NUMDEQUEUE"/>
      <field name="TA_NUMDISPATCHTHREADS"/>
      <field name="TA_NUMENQUEUE"/>
      <field name="TA_NUMPOST"/>
      <field name="TA_NUMREQ"/>
      <field name="TA_NUMSERVED"/>
      <field name="TA_NUMSERVERS"/>
      <field name="TA_NUMSUBSCRIBE"/>
      <field name="TA_NUMTRAN"/>
      <field name="TA_NUMTRANABT"/>
      <field name="TA_NUMTRANCMT"/>
      <field name="TA_NUMTRANFAIL"/>
      <field name="TA_NUMUNSOL"/>
      <field name="TA_NWADDRLEN"/>
      <field name="TA_NWTIMEOUT"/>
      <field name="TA_OCCURS"/>
      <field name="TA_OFF"/>
      <field name="TA_OLDCMPLIMIT"/>
      <field name="TA_OLDENCRYPT"/>
      <field name="TA_ON"/>
      <field name="TA_OPENINFO"/>
      <field name="TA_OPERATION"/>
      <field name="TA_OPTIONS"/>
      <field name="TA_OTMQALIAS"/>
      <field name="TA_OTMQALIASSCOPE"/>
      <field name="TA_OTMQSPACETARGET"/>
      <field name="TA_OTMQTARGET"/>
      <field name="TA_OUTOFORDER"/>
      <field name="TA_OUTPUTMSGHANDLER"/>
      <field name="TA_OUTPUTMSGNAME"/>
      <field name="TA_OUTPUTWSAACTION"/>
      <field name="TA_OUTSREQNUM"/>
      <field name="TA_PAGESIZE"/>
      <field name="TA_PASSWD"/>
      <field name="TA_PASSWORD"/>
      <field name="TA_PERCENTINIT"/>
      <field name="TA_PERM"/>
      <field name="TA_PERSISTENCE"/>
      <field name="TA_PID"/>
      <field name="TA_PLUGINLIBRARIES"/>
      <field name="TA_PLUGINPARAMS"/>
      <field name="TA_PMID"/>
      <field name="TA_POLICIES"/>
      <field name="TA_PREFERENCES"/>
      <field name="TA_PRIMQUE"/>
      <field name="TA_PRINCLTNAME"/>
      <field name="TA_PRINGRP"/>
      <field name="TA_PRINID"/>
      <field name="TA_PRINNAME"/>
      <field name="TA_PRINPASSWD"/>
      <field name="TA_PRIO"/>
      <field name="TA_PRIORITY"/>
      <field name="TA_PRIVATEKEY"/>
      <field name="TA_PROFILE2"/>
      <field name="TA_PROGMODELS"/>
      <field name="TA_PROPS"/>
      <field name="TA_QCTL_BEFOREMSGID"/>
      <field name="TA_QCTL_CORRID"/>
      <field name="TA_QCTL_DEQ_TIME"/>
      <field name="TA_QCTL_FAILUREQUEUE"/>
      <field name="TA_QCTL_MSGID"/>
      <field name="TA_QCTL_PRIORITY"/>
      <field name="TA_QCTL_QTIME_ABS"/>
      <field name="TA_QCTL_QTIME_REL"/>
      <field name="TA_QCTL_QTOP"/>
      <field name="TA_QCTL_REPLYQUEUE"/>
      <field name="TA_QCTL_USERTAG"/>
      <field name="TA_QINDEX"/>
      <field name="TA_QMCONFIG"/>
      <field name="TA_QNAME"/>
      <field name="TA_QSPACE"/>
      <field name="TA_QUETYPE"/>
      <field name="TA_Q_NUM"/>
      <field name="TA_RANGES"/>
      <field name="TA_RCMD"/>
      <field name="TA_RCVDBYT"/>
      <field name="TA_RCVDNUM"/>
      <field name="TA_RDMADAEMONIP"/>
      <field name="TA_RDMADAEMONPORT"/>
      <field name="TA_RDMAQENTRIES"/>
      <field name="TA_RDMAQSIZE"/>
      <field name="TA_RDMARCVRRPQKEY"/>
      <field name="TA_RDMARCVRRPQNAME"/>
      <field name="TA_RDMARPLYTORPQKEY"/>
      <field name="TA_RDMARPLYTORPQNAME"/>
      <field name="TA_RDMASENDERRPQKEY"/>
      <field name="TA_RDMASENDERRPQNAME"/>
      <field name="TA_RDMA_DAEMON_PID"/>
      <field name="TA_RDOMAIN"/>
      <field name="TA_REALM"/>
      <field name="TA_REENCRYPT_PWD"/>
      <field name="TA_REFRESH"/>
      <field name="TA_RELEASE"/>
      <field name="TA_REPLYPERSISTENCE"/>
      <field name="TA_REPLYQ"/>
      <field name="TA_REPOSACCESS"/>
      <field name="TA_REPOSATTRIBUTES"/>
      <field name="TA_REPOSAUTODISCOVERY"/>
      <field name="TA_REPOSCOUNT"/>
      <field name="TA_REPOSEMBED"/>
      <field name="TA_REPOSERRBUF"/>
      <field name="TA_REPOSERRBUFSCHEMA"/>
      <field name="TA_REPOSERRQUEUE"/>
      <field name="TA_REPOSERRVIEW"/>
      <field name="TA_REPOSEXPORT"/>
      <field name="TA_REPOSFIELDTBLS"/>
      <field name="TA_REPOSFLDID"/>
      <field name="TA_REPOSFLDINDEX"/>
      <field name="TA_REPOSFLDNUM"/>
      <field name="TA_REPOSINBUF"/>
      <field name="TA_REPOSINBUFSCHEMA"/>
      <field name="TA_REPOSINVIEW"/>
      <field name="TA_REPOSOUTBUF"/>
      <field name="TA_REPOSOUTBUFSCHEMA"/>
      <field name="TA_REPOSOUTVIEW"/>
      <field name="TA_REPOSPARAM"/>
      <field name="TA_REPOSPARAMCOUNT"/>
      <field name="TA_REPOSPARAMDESCRIPTION"/>
      <field name="TA_REPOSPARAMINDEX"/>
      <field name="TA_REPOSPARAMSCHEMA"/>
      <field name="TA_REPOSPRIMETYPE"/>
      <field name="TA_REPOSRCVQSPACE"/>
      <field name="TA_REPOSRCVQUEUE"/>
      <field name="TA_REPOSREQUIREDCOUNT"/>
      <field name="TA_REPOSRPLYQUEUE"/>
      <field name="TA_REPOSSENDQSPACE"/>
      <field name="TA_REPOSSENDQUEUE"/>
      <field name="TA_REPOSSERVICE"/>
      <field name="TA_REPOSSERVICEMODE"/>
      <field name="TA_REPOSSERVICETYPE"/>
      <field name="TA_REPOSSIZE"/>
      <field name="TA_REPOSSUBTYPE"/>
      <field name="TA_REPOSSVCDESCRIPTION"/>
      <field name="TA_REPOSTUXSERVICE"/>
      <field name="TA_REPOSTYPE"/>
      <field name="TA_REPOSVERSION"/>
      <field name="TA_REPOSVFBNAME"/>
      <field name="TA_REPOSVFLAG"/>
      <field name="TA_REPOSVNULL"/>
      <field name="TA_REQUEST_VERSION"/>
      <field name="TA_RESET"/>
      <field name="TA_RESTART"/>
      <field name="TA_RESTHTTPADDRESS"/>
      <field name="TA_RESTHTTPSADDRESS"/>
      <field name="TA_RETRYDELAY"/>
      <field name="TA_RMAUTO"/>
      <field name="TA_RMID"/>
      <field name="TA_RMOPTIONS"/>
      <field name="TA_RMSNAME"/>
      <field name="TA_ROLE"/>
      <field name="TA_ROUTINGNAME"/>
      <field name="TA_RPID"/>
      <field name="TA_RPPERM"/>
      <field name="TA_RQADDR"/>
      <field name="TA_RQID"/>
      <field name="TA_RQPERM"/>
      <field name="TA_RTPOLICY"/>
      <field name="TA_SANITYSCAN"/>
      <field name="TA_SCANUNIT"/>
      <field name="TA_SCANUNIT_EXT"/>
      <field name="TA_SCANUNIT_MSEC"/>
      <field name="TA_SECUREPORT"/>
      <field name="TA_SECURITY"/>
      <field name="TA_SECURITY2"/>
      <field name="TA_SEC_PRINCIPAL_LOCATION"/>
      <field name="TA_SEC_PRINCIPAL_NAME"/>
      <field name="TA_SEC_PRINCIPAL_PASSVAR"/>
      <field name="TA_SEC_PRINCIPAL_PASSWORD"/>
      <field name="TA_SEMID"/>
      <field name="TA_SEMTICKET"/>
      <field name="TA_SEM_OTIME"/>
      <field name="TA_SENDBYT"/>
      <field name="TA_SENDNUM"/>
      <field name="TA_SENTBYT"/>
      <field name="TA_SENTNUM"/>
      <field name="TA_SEQUENCE"/>
      <field name="TA_SERVERCNT"/>
      <field name="TA_SERVERNAME"/>
      <field name="TA_SERVICENAME"/>
      <field name="TA_SESSIONID"/>
      <field name="TA_SETSTATES"/>
      <field name="TA_SEVERITY"/>
      <field name="TA_SGRPFAILOVER"/>
      <field name="TA_SHMID"/>
      <field name="TA_SHMKEY"/>
      <field name="TA_SHMMSGLISTS"/>
      <field name="TA_SHMQMAXMEM"/>
      <field name="TA_SHMQSTAT"/>
      <field name="TA_SHMSZ"/>
      <field name="TA_SHM_ATIME"/>
      <field name="TA_SHM_CONTENTIONS"/>
      <field name="TA_SHM_CTIME"/>
      <field name="TA_SHM_DTIME"/>
      <field name="TA_SHM_NATTCH"/>
      <field name="TA_SHRINKPERIOD"/>
      <field name="TA_SICACHEENTRIESMAX"/>
      <field name="TA_SIGNATURE_AHEAD"/>
      <field name="TA_SIGNATURE_BEHIND"/>
      <field name="TA_SIGNATURE_REQUIRED"/>
      <field name="TA_SOAPACTION"/>
      <field name="TA_SOAPENCODING"/>
      <field name="TA_SOAPSTYLE"/>
      <field name="TA_SOAPVERSION"/>
      <field name="TA_SOAP_HEADER"/>
      <field name="TA_SOCKSADDRLIST"/>
      <field name="TA_SOURCE"/>
      <field name="TA_SPINCOUNT"/>
      <field name="TA_SPINTUNING_FACTOR"/>
      <field name="TA_SPINTUNING_MINIDLECPU"/>
      <field name="TA_SRVGRP"/>
      <field name="TA_SRVID"/>
      <field name="TA_SRVTYPE"/>
      <field name="TA_SSL_RENEGOTIATION"/>
      <field name="TA_STARTTIME"/>
      <field name="TA_STATE"/>
      <field name="TA_STATUS"/>
      <field name="TA_SUBSCRIPTION_HANDLE"/>
      <field name="TA_SUBSCRIPTION_VERSION"/>
      <field name="TA_SUSPENDED"/>
      <field name="TA_SUSPTIME"/>
      <field name="TA_SVCCONTRACT"/>
      <field name="TA_SVCINDEX"/>
      <field name="TA_SVCRNAM"/>
      <field name="TA_SVCTIMEOUT"/>
      <field name="TA_SVCTYPE"/>
      <field name="TA_SVC_NUM"/>
      <field name="TA_SWRELEASE"/>
      <field name="TA_SYN_SEQ"/>
      <field name="TA_SYSTEM_ACCESS"/>
      <field name="TA_TATTACH"/>
      <field name="TA_TDC_CACHENAME"/>
      <field name="TA_TDC_CMD"/>
      <field name="TA_TDC_KEYTYPE"/>
      <field name="TA_TDC_KEY_BIN"/>
      <field name="TA_TDC_KEY_STR"/>
      <field name="TA_TDC_VALTYPE"/>
      <field name="TA_TDC_VAL_BIN"/>
      <field name="TA_TDC_VAL_STR"/>
      <field name="TA_TDETACH"/>
      <field name="TA_TESTONRELEASE"/>
      <field name="TA_TESTONRESERVE"/>
      <field name="TA_TESTTABLE"/>
      <field name="TA_THREADID"/>
      <field name="TA_THREADPOOLSIZE"/>
      <field name="TA_THREADSTACKSIZE"/>
      <field name="TA_TIME"/>
      <field name="TA_TIMELEFT"/>
      <field name="TA_TIMELEFT_MSEC"/>
      <field name="TA_TIMEOUT"/>
      <field name="TA_TIMERESTART"/>
      <field name="TA_TIMESTART"/>
      <field name="TA_TLOGCOUNT"/>
      <field name="TA_TLOGDATA"/>
      <field name="TA_TLOGDEVICE"/>
      <field name="TA_TLOGINDEX"/>
      <field name="TA_TLOGNAME"/>
      <field name="TA_TLOGOFFSET"/>
      <field name="TA_TLOGSIZE"/>
      <field name="TA_TMDEBUG"/>
      <field name="TA_TMFAN_CLRDBNAME"/>
      <field name="TA_TMFAN_CLRSVCNAME"/>
      <field name="TA_TMFAN_THRESHOLD"/>
      <field name="TA_TMFAN_TRACE"/>
      <field name="TA_TMMONITOR"/>
      <field name="TA_TMMQI_ERRORCOUNT"/>
      <field name="TA_TMMQI_SUSTHRESH"/>
      <field name="TA_TMNETLOAD"/>
      <field name="TA_TMSCOUNT"/>
      <field name="TA_TMSNAME"/>
      <field name="TA_TMTRACE"/>
      <field name="TA_TOTACTTIME"/>
      <field name="TA_TOTCPUTIMESEC"/>
      <field name="TA_TOTCPUTIMEUSEC"/>
      <field name="TA_TOTEXECTIMESEC"/>
      <field name="TA_TOTEXECTIMEUSEC"/>
      <field name="TA_TOTIDLTIME"/>
      <field name="TA_TOTMSGSIZEBYTE"/>
      <field name="TA_TOTMSGSIZEMEGA"/>
      <field name="TA_TOTMSGWAITTIMESEC"/>
      <field name="TA_TOTMSGWAITTIMEUSEC"/>
      <field name="TA_TOTNP"/>
      <field name="TA_TOTNQUEUED"/>
      <field name="TA_TOTNUMCONV"/>
      <field name="TA_TOTNUMDEQUEUE"/>
      <field name="TA_TOTNUMENQUEUE"/>
      <field name="TA_TOTNUMPOST"/>
      <field name="TA_TOTNUMREQ"/>
      <field name="TA_TOTNUMSUBSCRIBE"/>
      <field name="TA_TOTNV"/>
      <field name="TA_TOTREQC"/>
      <field name="TA_TOTSFAILNUM"/>
      <field name="TA_TOTSUCCNUM"/>
      <field name="TA_TOTSYSCPUTIMESEC"/>
      <field name="TA_TOTSYSCPUTIMEUSEC"/>
      <field name="TA_TOTUFAILNUM"/>
      <field name="TA_TOTUSRCPUTIMESEC"/>
      <field name="TA_TOTUSRCPUTIMEUSEC"/>
      <field name="TA_TOTWANTERS"/>
      <field name="TA_TOTWKQUEUED"/>
      <field name="TA_TOTWKUPRCV"/>
      <field name="TA_TOTWKUPSENT"/>
      <field name="TA_TOTWORKL"/>
      <field name="TA_TPBLK_ALL"/>
      <field name="TA_TPPOLICY"/>
      <field name="TA_TPTRANID"/>
      <field name="TA_TRANAFFINITYCONTEXT"/>
      <field name="TA_TRANAFFINITYCONTEXT_STR"/>
      <field name="TA_TRANAFFINITYGRPID"/>
      <field name="TA_TRANLEV"/>
      <field name="TA_TRANTIME"/>
      <field name="TA_TRAN_CGROUP"/>
      <field name="TA_TRAN_COORDINSTID"/>
      <field name="TA_TRAN_COORDINSTSTR"/>
      <field name="TA_TRAN_GBRANCHID"/>
      <field name="TA_TRAN_GWTCOMMXID"/>
      <field name="TA_TRAN_STATE"/>
      <field name="TA_TRUSTEDCERT"/>
      <field name="TA_TUXCONFIG"/>
      <field name="TA_TUXDIR"/>
      <field name="TA_TUXEDOREF"/>
      <field name="TA_TUXOFFSET"/>
      <field name="TA_TXPOLICY"/>
      <field name="TA_TYPE"/>
      <field name="TA_UID"/>
      <field name="TA_ULOGCAT"/>
      <field name="TA_ULOGLINE"/>
      <field name="TA_ULOGMSG"/>
      <field name="TA_ULOGMSGNUM"/>
      <field name="TA_ULOGPFX"/>
      <field name="TA_ULOGPROCNM"/>
      <field name="TA_ULOGTIME"/>
      <field name="TA_URL"/>
      <field name="TA_USERLOG"/>
      <field name="TA_USERROLE"/>
      <field name="TA_USER_CREDENTIAL"/>
      <field name="TA_USIGNAL"/>
      <field name="TA_USRNAME"/>
      <field name="TA_VALIDATION"/>
      <field name="TA_VERIFYCLIENT"/>
      <field name="TA_VERSION_POLICY"/>
      <field name="TA_VERSION_RANGE"/>
      <field name="TA_VIEWREFRESH"/>
      <field name="TA_WAITFORCONN"/>
      <field name="TA_WAITS"/>
      <field name="TA_WAITTIMEOUT"/>
      <field name="TA_WKCOMPLETED"/>
      <field name="TA_WKINITIATED"/>
      <field name="TA_WKQUEUED"/>
      <field name="TA_WSAENDPOINT"/>
      <field name="TA_WSATENDPOINT"/>
      <field name="TA_WSC"/>
      <field name="TA_WSDFDIRECTION"/>
      <field name="TA_WSDFNAME"/>
      <field name="TA_WSH"/>
      <field name="TA_WSHCLIENTID"/>
      <field name="TA_WSHNAME"/>
      <field name="TA_WSPROTO"/>
      <field name="TA_WS_CONFCLTNUM"/>
      <field name="TA_WS_CONFDURATION"/>
      <field name="TA_WS_CONFIDXNUM"/>
      <field name="TA_WS_CONFINDEX"/>
      <field name="TA_WS_CONFMAXATTM"/>
      <field name="TA_WS_DURATIONTIME"/>
      <field name="TA_WS_GWWSID"/>
      <field name="TA_WS_INBOUNDTIME"/>
      <field name="TA_WS_INBOUNDTOTALREQNUM"/>
      <field name="TA_WS_INBOUNDTOTALTIME"/>
      <field name="TA_WS_IPADDRESS"/>
      <field name="TA_WS_LASTMSG"/>
      <field name="TA_WS_MSGID"/>
      <field name="TA_WS_MSGNUMBER"/>
      <field name="TA_WS_ONEWAYDONE"/>
      <field name="TA_WS_ONEWAYFAIL"/>
      <field name="TA_WS_OUTBOUNDDONE"/>
      <field name="TA_WS_OUTBOUNDFAIL"/>
      <field name="TA_WS_OUTBOUNDPENDING"/>
      <field name="TA_WS_OUTBOUNDTIME"/>
      <field name="TA_WS_OUTBOUNDTOTALREQNUM"/>
      <field name="TA_WS_OUTBOUNDTOTALTIME"/>
      <field name="TA_WS_OUTBOUND_ONEWAYDONE"/>
      <field name="TA_WS_OUTBOUND_ONEWAYFAIL"/>
      <field name="TA_WS_PAIRSEQUENCE"/>
      <field name="TA_WS_REQREPDONE"/>
      <field name="TA_WS_REQREPFAIL"/>
      <field name="TA_WS_SEQUENCEACKTO"/>
      <field name="TA_WS_SEQUENCEDIRECTION"/>
      <field name="TA_WS_SEQUENCEDURATION"/>
      <field name="TA_WS_SEQUENCEID"/>
      <field name="TA_WS_SEQUENCESTATUS"/>
      <field name="TA_WS_SOAPVERSION"/>
      <field name="TA_WS_SVCDONE"/>
      <field name="TA_WS_SVCFAIL"/>
      <field name="TA_WS_SVCTIME"/>
      <field name="TA_WS_THREADS"/>
      <field name="TA_WS_TIMEOUT"/>
      <field name="TA_WS_TIMETOEXPIRE"/>
      <field name="TA_WS_TOTALPENDING"/>
      <field name="TA_WS_TRANBRANCH"/>
      <field name="TA_WS_TRANBRANCHES"/>
      <field name="TA_WS_TRANCOORCONTEXT"/>
      <field name="TA_WS_TRANGTRID"/>
      <field name="TA_WS_TRANPROCESSED"/>
      <field name="TA_WS_TRANPROCESSID"/>
      <field name="TA_WS_TRANRECTYPE"/>
      <field name="TA_WS_TRANSVCNAME"/>
      <field name="TA_WS_TRANTIMESTAMP"/>
      <field name="TA_WS_TRANTRANID"/>
      <field name="TA_WS_TUXSERVICE"/>
      <field name="TA_WS_WSSERVICE"/>
      <field name="TA_XID"/>
    </class>
  </package>
  <package name="weblogic.xml.dom.marshal">
    <class name="MarshalException">
      <method name="getCause()"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="WLDOMStructure">
      <method name="marshal(org.w3c.dom.Element,org.w3c.dom.Node,java.util.Map)"/>
      <method name="unmarshal(org.w3c.dom.Node)"/>
    </class>
  </package>
  <package name="weblogic.xml.saaj.util">
    <class name="IOUtils">
      <method name="toString(java.io.InputStream,java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.xml.stream">
    <class name="Attribute">
      <method name="getType()"/>
      <method name="getValue()"/>
      <method name="getName()"/>
      <method name="getSchemaType()"/>
    </class>
    <class name="AttributeIterator">
      <method name="hasNext()"/>
      <method name="skip()"/>
      <method name="next()"/>
      <method name="peek()"/>
    </class>
    <class name="BufferedXMLInputStream">
      <method name="mark()"/>
      <method name="reset()"/>
    </class>
    <class name="ChangePrefixMapping" members="concealed"/>
    <class name="CharacterData">
      <method name="hasContent()"/>
      <method name="getContent()"/>
    </class>
    <class name="Comment" members="concealed"/>
    <class name="ElementFactory" members="concealed"/>
    <class name="ElementFilter">
      <method name="accept(weblogic.xml.stream.XMLEvent)"/>
    </class>
    <class name="EndDocument" members="concealed"/>
    <class name="EndElement" members="concealed"/>
    <class name="EndPrefixMapping" members="concealed"/>
    <class name="EntityReference">
      <method name="skipped()"/>
    </class>
    <class name="Location" members="concealed"/>
    <class name="ProcessingInstruction" members="concealed"/>
    <class name="ReferenceResolver">
      <method name="getId(java.lang.String)"/>
      <method name="resolve(java.lang.String)"/>
    </class>
    <class name="Space">
      <method name="ignorable()"/>
    </class>
    <class name="StartDocument" members="concealed"/>
    <class name="StartElement">
      <method name="getNamespaceUri(java.lang.String)"/>
      <method name="getNamespaceMap()"/>
      <method name="getAttributeByName(weblogic.xml.stream.XMLName)"/>
      <method name="getAttributes()"/>
      <method name="getAttributesAndNamespaces()"/>
      <method name="getNamespaces()"/>
    </class>
    <class name="StartPrefixMapping" members="concealed"/>
    <class name="XMLEvent">
      <method name="hasName()"/>
      <method name="isChangePrefixMapping()"/>
      <method name="isCharacterData()"/>
      <method name="isEndDocument()"/>
      <method name="isEndElement()"/>
      <method name="isEndPrefixMapping()"/>
      <method name="isEntityReference()"/>
      <method name="isNull()"/>
      <method name="isProcessingInstruction()"/>
      <method name="isSpace()"/>
      <method name="isStartDocument()"/>
      <method name="isStartElement()"/>
      <method name="isStartPrefixMapping()"/>
      <method name="getType()"/>
      <method name="getTypeAsString()"/>
      <field name="CHANGE_PREFIX_MAPPING"/>
      <field name="CHARACTER_DATA"/>
      <field name="COMMENT"/>
      <field name="END_DOCUMENT"/>
      <field name="END_ELEMENT"/>
      <field name="END_PREFIX_MAPPING"/>
      <field name="ENTITY_REFERENCE"/>
      <field name="NULL_ELEMENT"/>
      <field name="PROCESSING_INSTRUCTION"/>
      <field name="SPACE"/>
      <field name="START_DOCUMENT"/>
      <field name="START_ELEMENT"/>
      <field name="START_PREFIX_MAPPING"/>
      <field name="XML_EVENT"/>
      <method name="getLocation()"/>
      <method name="getName()"/>
      <method name="getSchemaType()"/>
    </class>
    <class name="XMLInputOutputStream" members="concealed"/>
    <class name="XMLInputStream">
      <method name="hasNext()"/>
      <method name="skip(int)"/>
      <method name="skip(weblogic.xml.stream.XMLName)"/>
      <method name="skip(weblogic.xml.stream.XMLName,int)"/>
      <method name="close()"/>
      <method name="setReferenceResolver(weblogic.xml.stream.ReferenceResolver)"/>
      <method name="skip()"/>
      <method name="skipElement()"/>
      <method name="getReferenceResolver()"/>
      <method name="next()"/>
      <method name="peek()"/>
      <method name="getSubStream()"/>
    </class>
    <class name="XMLInputStreamFactory">
      <method name="newInstance()"/>
      <method name="setFilter(weblogic.xml.stream.ElementFilter)"/>
      <method name="newBufferedInputStream(weblogic.xml.stream.XMLInputStream)"/>
      <method name="newCanonicalInputStream(weblogic.xml.stream.XMLInputStream)"/>
      <method name="newDTDAwareInputStream(java.io.InputStream)"/>
      <method name="newDTDAwareInputStream(java.io.Reader)"/>
      <method name="newFragmentInputStream(java.io.InputStream,java.util.Map)"/>
      <method name="newFragmentInputStream(java.io.Reader,java.util.Map)"/>
      <method name="newInputStream(java.io.File)"/>
      <method name="newInputStream(java.io.File,weblogic.xml.stream.ElementFilter)"/>
      <method name="newInputStream(java.io.InputStream)"/>
      <method name="newInputStream(java.io.InputStream,weblogic.xml.stream.ElementFilter)"/>
      <method name="newInputStream(java.io.Reader)"/>
      <method name="newInputStream(java.io.Reader,weblogic.xml.stream.ElementFilter)"/>
      <method name="newInputStream(org.w3c.dom.Document)"/>
      <method name="newInputStream(org.w3c.dom.Document,weblogic.xml.stream.ElementFilter)"/>
      <method name="newInputStream(org.w3c.dom.Node)"/>
      <method name="newInputStream(org.w3c.dom.Node,weblogic.xml.stream.ElementFilter)"/>
      <method name="newInputStream(weblogic.xml.stream.XMLInputStream,weblogic.xml.stream.ElementFilter)"/>
      <method name="newInputStream(weblogic.xml.stream.util.XMLPullReader,org.xml.sax.InputSource)"/>
      <method name="newInputStream(weblogic.xml.stream.util.XMLPullReader,org.xml.sax.InputSource,weblogic.xml.stream.ElementFilter)"/>
    </class>
    <class name="XMLInputStreamFilter">
      <method name="setParent(weblogic.xml.stream.XMLInputStream)"/>
      <method name="getParent()"/>
    </class>
    <class name="XMLName" members="concealed"/>
    <class name="XMLOutputStream" members="concealed"/>
    <class name="XMLOutputStreamFactory">
      <method name="newInstance()"/>
      <method name="newInputOutputStream()"/>
      <method name="newCanonicalOutputStream(java.io.OutputStream)"/>
      <method name="newCanonicalOutputStream(java.io.OutputStream,java.util.Map)"/>
      <method name="newCanonicalOutputStream(java.io.Writer)"/>
      <method name="newCanonicalOutputStream(java.io.Writer,java.util.Map)"/>
      <method name="newDebugOutputStream(java.io.OutputStream)"/>
      <method name="newDebugOutputStream(java.io.OutputStream,boolean)"/>
      <method name="newDebugOutputStream(java.io.Writer)"/>
      <method name="newDebugOutputStream(java.io.Writer,boolean)"/>
      <method name="newOutputStream(java.io.OutputStream)"/>
      <method name="newOutputStream(java.io.OutputStream,boolean)"/>
      <method name="newOutputStream(java.io.Writer)"/>
      <method name="newOutputStream(java.io.Writer,boolean)"/>
      <method name="newOutputStream(org.w3c.dom.Document)"/>
      <method name="newOutputStream(org.w3c.dom.Document,org.w3c.dom.DocumentFragment)"/>
      <method name="newOutputStream(org.xml.sax.ContentHandler)"/>
    </class>
    <class name="XMLStream">
      <method name="main(java.lang.String[])"/>
      <method name="usage()"/>
    </class>
    <class name="XMLStreamException">
      <method name="getMessage()"/>
      <method name="superToString()"/>
      <method name="toString()"/>
      <method name="getNested()"/>
      <method name="getNestedException()"/>
      <field name="th"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
  </package>
  <package name="weblogic.xml.stream.events">
    <class name="ElementEvent">
      <method name="compare(java.lang.String,java.lang.String)"/>
      <method name="init()"/>
      <method name="setType(int)"/>
      <method name="equals(java.lang.Object)"/>
      <method name="hasName()"/>
      <method name="isChangePrefixMapping()"/>
      <method name="isCharacterData()"/>
      <method name="isEndDocument()"/>
      <method name="isEndElement()"/>
      <method name="isEndPrefixMapping()"/>
      <method name="isEntityReference()"/>
      <method name="isNull()"/>
      <method name="isProcessingInstruction()"/>
      <method name="isSpace()"/>
      <method name="isStartDocument()"/>
      <method name="isStartElement()"/>
      <method name="isStartPrefixMapping()"/>
      <method name="getType()"/>
      <field name="type"/>
      <method name="clone()"/>
      <field name="content"/>
      <method name="getTypeAsString()"/>
      <method name="setName(weblogic.xml.stream.XMLName)"/>
      <method name="setSchemaType(weblogic.xml.stream.XMLName)"/>
      <method name="getLocation()"/>
      <field name="location"/>
      <method name="getName()"/>
      <method name="getSchemaType()"/>
      <field name="name"/>
      <field name="schemaType"/>
    </class>
    <class name="StartElementEvent">
      <method name="init()"/>
      <method name="equals(java.lang.Object)"/>
      <method name="getNamespaceUri(java.lang.String)"/>
      <method name="toString()"/>
      <field name="attributes"/>
      <field name="namespaces"/>
      <method name="getNamespaceMap()"/>
      <field name="namespaceURIs"/>
      <method name="addAttribute(weblogic.xml.stream.Attribute)"/>
      <method name="addNamespace(weblogic.xml.stream.Attribute)"/>
      <method name="setAttributes(java.util.List)"/>
      <method name="setNamespaceMap(java.util.Map)"/>
      <method name="setTransientNamespaceMap(java.util.Map)"/>
      <method name="getAttributeByName(weblogic.xml.stream.XMLName)"/>
      <method name="getAttributes()"/>
      <method name="getAttributesAndNamespaces()"/>
      <method name="getNamespaces()"/>
    </class>
  </package>
  <package name="weblogic.xml.stream.util">
    <class name="AcceptingFilter">
      <method name="accept(weblogic.xml.stream.XMLEvent)"/>
    </class>
    <class name="NameFilter">
      <method name="accept(weblogic.xml.stream.XMLEvent)"/>
      <field name="name"/>
    </class>
    <class name="NameSpaceFilter">
      <method name="accept(weblogic.xml.stream.XMLEvent)"/>
      <field name="uri"/>
    </class>
    <class name="NamespaceTypeFilter">
      <method name="accept(weblogic.xml.stream.XMLEvent)"/>
      <field name="type"/>
      <field name="uri"/>
    </class>
    <class name="PipedXMLInputStreamBase">
      <method name="filter(weblogic.xml.stream.XMLEvent)"/>
      <method name="hasNext()"/>
      <field name="open"/>
      <method name="skip(int)"/>
      <method name="skip(weblogic.xml.stream.XMLName)"/>
      <method name="skip(weblogic.xml.stream.XMLName,int)"/>
      <method name="close()"/>
      <method name="setParent(weblogic.xml.stream.XMLInputStream)"/>
      <method name="setReferenceResolver(weblogic.xml.stream.ReferenceResolver)"/>
      <method name="skip()"/>
      <method name="skipElement()"/>
      <method name="getReferenceResolver()"/>
      <method name="next()"/>
      <method name="peek()"/>
      <method name="getParent()"/>
      <method name="getSubStream()"/>
      <field name="parent"/>
    </class>
    <class name="RecyclingFactory">
      <method name="add(weblogic.xml.stream.XMLInputStream)"/>
      <method name="main(java.lang.String[])"/>
      <method name="remove(java.io.InputStream)"/>
      <method name="remove(java.io.InputStream,weblogic.xml.stream.ElementFilter)"/>
      <method name="remove(java.io.Reader)"/>
      <method name="remove(java.io.Reader,weblogic.xml.stream.ElementFilter)"/>
    </class>
    <class name="TypeFilter">
      <method name="accept(weblogic.xml.stream.XMLEvent)"/>
      <field name="type"/>
    </class>
    <class name="XMLInputOutputStreamBase">
      <method name="matchName(weblogic.xml.stream.XMLName,weblogic.xml.stream.XMLName)"/>
      <method name="hasNext()"/>
      <method name="skip(int)"/>
      <method name="skip(weblogic.xml.stream.XMLName)"/>
      <method name="skip(weblogic.xml.stream.XMLName,int)"/>
      <method name="main(java.lang.String[])"/>
      <method name="add(java.lang.String)"/>
      <method name="add(weblogic.xml.stream.Attribute)"/>
      <method name="add(weblogic.xml.stream.XMLEvent)"/>
      <method name="add(weblogic.xml.stream.XMLInputStream)"/>
      <method name="close()"/>
      <method name="close(boolean)"/>
      <method name="flush()"/>
      <method name="setReferenceResolver(weblogic.xml.stream.ReferenceResolver)"/>
      <method name="skip()"/>
      <method name="skipElement()"/>
      <field name="elementQ"/>
      <method name="getReferenceResolver()"/>
      <field name="resolver"/>
      <method name="next()"/>
      <method name="peek()"/>
      <method name="getSubStream()"/>
      <field name="lastStartElement"/>
    </class>
    <class name="XMLInputStreamFilterBase">
      <method name="modify(weblogic.xml.stream.XMLEvent)"/>
      <method name="hasNext()"/>
      <field name="open"/>
      <method name="skip(int)"/>
      <method name="skip(weblogic.xml.stream.XMLName)"/>
      <method name="skip(weblogic.xml.stream.XMLName,int)"/>
      <method name="main(java.lang.String[])"/>
      <method name="close()"/>
      <method name="pushBack(weblogic.xml.stream.XMLEvent)"/>
      <method name="setFilter(weblogic.xml.stream.ElementFilter)"/>
      <method name="setParent(weblogic.xml.stream.XMLInputStream)"/>
      <method name="setReferenceResolver(weblogic.xml.stream.ReferenceResolver)"/>
      <method name="skip()"/>
      <method name="skipElement()"/>
      <field name="filter"/>
      <method name="getReferenceResolver()"/>
      <method name="next()"/>
      <method name="peek()"/>
      <method name="getParent()"/>
      <method name="getSubStream()"/>
      <field name="parent"/>
    </class>
    <class name="XMLPullReader">
      <method name="parseSome()"/>
      <method name="parseSomeSetup(java.lang.String)"/>
      <method name="parseSomeSetup(org.xml.sax.InputSource)"/>
    </class>
    <class name="XMLSubStreamBase">
      <field name="endTags"/>
      <field name="startTags"/>
      <method name="next()"/>
    </class>
  </package>
  <package name="weblogic.xml.util">
    <class name="WhitespaceUtils">
      <method name="collapse(java.lang.String)"/>
    </class>
  </package>
  <package name="weblogic.xml.xpath">
    <class name="DOMXPath">
      <method name="evaluateAsBoolean(org.w3c.dom.Document)"/>
      <method name="evaluateAsBoolean(org.w3c.dom.Node)"/>
      <method name="evaluateAsNumber(org.w3c.dom.Document)"/>
      <method name="evaluateAsNumber(org.w3c.dom.Node)"/>
      <method name="getType()"/>
      <method name="evaluateAsString(org.w3c.dom.Document)"/>
      <method name="evaluateAsString(org.w3c.dom.Node)"/>
      <method name="toString()"/>
      <method name="evaluateAsNodeset(org.w3c.dom.Document)"/>
      <method name="evaluateAsNodeset(org.w3c.dom.Node)"/>
      <field name="BOOLEAN"/>
      <field name="NAMESPACE_NODE_TYPE"/>
      <field name="NODESET"/>
      <field name="NUMBER"/>
      <field name="OTHER"/>
      <field name="STRING"/>
      <method name="main(java.lang.String[])"/>
      <method name="setVariableBindings(java.util.Map)"/>
    </class>
    <class name="StreamXPath">
      <method name="equals(java.lang.Object)"/>
      <method name="hashCode()"/>
      <method name="toString()"/>
      <method name="main(java.lang.String[])"/>
      <method name="setVariableBindings(java.util.Map)"/>
    </class>
    <class name="XPathException">
      <method name="superToString()"/>
      <method name="toString()"/>
      <method name="getNested()"/>
      <method name="getNestedException()"/>
      <method name="printStackTrace()"/>
      <method name="printStackTrace(java.io.PrintStream)"/>
      <method name="printStackTrace(java.io.PrintWriter)"/>
      <method name="superPrintStackTrace(java.io.PrintStream)"/>
      <method name="superPrintStackTrace(java.io.PrintWriter)"/>
    </class>
    <class name="XPathParsingException" members="concealed"/>
    <class name="XPathStreamFactory">
      <method name="install(weblogic.xml.xpath.StreamXPath,weblogic.xml.xpath.XPathStreamObserver)"/>
      <method name="createStream(weblogic.xml.stream.XMLInputStream)"/>
      <method name="createStream(weblogic.xml.stream.XMLOutputStream)"/>
    </class>
    <class name="XPathStreamObserver">
      <method name="observe(weblogic.xml.stream.XMLEvent)"/>
      <method name="observeAttribute(weblogic.xml.stream.StartElement,weblogic.xml.stream.Attribute)"/>
      <method name="observeNamespace(weblogic.xml.stream.StartElement,weblogic.xml.stream.Attribute)"/>
    </class>
    <class name="XPathUnsupportedException" members="concealed"/>
  </package>
</lib-exports>
